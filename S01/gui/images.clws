
> void setupGui() {
    Gui.setup();
	Gui += @StringBuilder _log = new StringBuilder();
	Gui += @void log(String toLog) {
		_log.append(toLog);
		_log.append(''"\\n"'');
	}
	Gui += int finishedKey = Keyboard.KEY_ESCAPE;
	Gui += String window_title = ''"OpenGL Window"'';
	Gui += boolean VSyncEnabled = true;
	Gui += boolean useCurrentDisplay = false;
	Gui += boolean fullScreen = false;
	Gui += boolean showMessages = true;
	Gui += int displayWidth = 1024;
	Gui += int displayHeight = 786;
	Gui += int displayColorBits = -1;
	Gui += int displayFrequency = -1;
	Gui += int depthBufferBits = 24;
	Gui += DisplayMode originalDisplayMode = null;
	Gui += DisplayMode displayMode = null;
	Gui::*() += { load(); run(); }
	Gui += void initializeDisplay() {
	  \originalDisplayMode = Display.getDisplayMode();
	  Gui.log(''"GLApp.initDisplay(): Current display mode is "'' + \originalDisplayMode );
	  if \displayHeight == -1 {
		\displayHeight = \originalDisplayMode.getHeight();
	  }
	  if \displayWidth == -1 {
		\displayWidth = \originalDisplayMode.getWidth();
	  }
	  if \displayColorBits == -1 {
		\displayColorBits = originalDisplayMode.getBitsPerPixel();
	  }
	  if \displayFrequency == -1 {
		\displayFrequency = \originalDisplayMode.getFrequency();
	  }
	  try {
		if \useCurrentDisplay {
		  \displayMode = \originalDisplayMode;
		}
		else {
		  \displayMode = getDisplayMode(displayWidth,displayHeight,displayColorBits,displayFrequency);
		  if \displayMode == null{
			\displayMode = getDisplayMode(1024,768,32,60);
			if \displayMode == null {
			  \displayMode = getDisplayMode(1024,768,16,60);
			  if \displayMode == null {
				\displayMode = getDisplayMode(\originalDisplayMode.getWidth(),\originalDisplayMode.getHeight(),\originalDisplayMode.getBitsPerPixel(),\originalDisplayMode.getFrequency());
				if \displayMode == null {
				  System.err.println(''"Gui Load Display Cant find a compatible Display Mode!!!"'');
				}
			  }
			}
		  }
		}
		Gui.log(''"initializeDisplay: Setting display mode to "'' + \displayMode + ''" with pixel depth = "'' + \depthBufferBits );
		Display.setDisplayMode(displayMode);
		\displayMode = \displayMode;
		\displayWidth = \displayMode.getWidth();
		\displayHeight= \displayMode.getHeight();
		\displayColorBits = \displayMode.getBitsPerPixel();
		\displayFrequency = \displayMode.getFrequency();
	  }
	  print catch * {
		System.err.println(''"initializeDisplay: Failed to create display: "'');
		System.exit(1);
	  }
	  try {
		Display.create(new PixelFormat(0,depthBufferBits,8));
		Display.setTitle(window_title);
		Display.setFullscreen(fullScreen);
		Display.setVSyncEnabled(VSyncEnabled);
	  }
	  print catch *{
		System.err.println(''"initializeDisplay: Failed to create OpenGL window"'');
		System.exit(1);
	  }
	}
	String displayModeArrayType = "DisplayMode[]"; 
	Gui += DisplayMode getDisplayMode(int width,int height,int colourBits,int frequency) {
	  try {
		'displayModeArrayType' allDisplayModes = Display.getAvailableDisplayModes();
		DisplayMode tempDisplayMode = null;
		for int i < allDisplayModes.length {
		  tempDisplayMode = \allDisplayModes[i];
		  if tempDisplayMode.getWidth() == width && tempDisplayMode.getHeight() == height && tempDisplayMode.getBitsPerPixel() == colourBits && tempDisplayMode.getFrequency() == frequency {
			return tempDisplayMode;
		  }
		}
	  }
	  print catch *{
		System.err.println(''"getDisplayMode Failed"'');
	  }
	  return null;
	}
	Gui += void run() {
	  try {
		while \isRunning {
		  if Display.isVisible() == false {
			Thread.sleep(200L);
		  }
		  else if Display.isCloseRequested(){
			\isRunning = false;
		  }
		  else {
			Thread.sleep(1);
		  }
		  \inputHandler.handle();
		  \game.update();
		  \renderer.render();
		  Display.update();
		}
	  }
	  print catch Interrupted {}
	  \inputHandler.end();
	  #"game".update();#
	  \renderer.end();
	}
  }

class 'packageName'.gui.InputHandler Thread{
  @int UNSTARTED = -1;
  @int WAITING_FOR_EVENTS = 0;
  @int PROCESSING_EVENTS = 1;
  int status = UNSTARTED;
  List<InputHandler.Event> events = new ArrayList<InputHandler.Event>();
  int cursorX = 0;
  int cursorY = 0;
  boolean firstMove = true;
  boolean continuousKeyboard = false;
  boolean hideNativeCursor = false;
  boolean disableNativeCursor = false;
  @void addMouseListener(InputHandler.Events.MouseEvent.Listener toAdd) {
	synchronized InputHandler.Events.MouseEvent.listeners {
	  InputHandler.Events.MouseEvent.listeners.add(toAdd);
	}
  }
  @void removeMouseListener(InputHandler.Events.MouseEvent.Listener toRemove) {
	synchronized InputHandler.Events.MouseEvent.listeners {
	  InputHandler.Events.MouseEvent.listeners.remove(toRemove);
	}
  }
  @void addMouseWheelListener(InputHandler.Events.MouseWheelEvent.Listener toAdd) {
	synchronized InputHandler.Events.MouseWheelEvent.listeners {
	  InputHandler.Events.MouseWheelEvent.listeners.add(toAdd);
	}
  }
  @void removeWheelMouseListener(InputHandler.Events.MouseWheelEvent.Listener toRemove) {
	synchronized InputHandler.Events.MouseWheelEvent.listeners {
	  InputHandler.Events.MouseWheelEvent.listeners.remove(toRemove);
	}
  }
  @void addKeyboardListener(InputHandler.Events.KeyboardEvent.Listener toAdd) {
	synchronized InputHandler.Events.KeyboardEvent.listeners{
	  InputHandler.Events.KeyboardEvent.listeners.add(toAdd);
	}
  }
  @void removeKeyboardListener(InputHandler.Events.KeyboardEvent.Listener toRemove) {
	synchronized InputHandler.Events.KeyboardEvent.listeners {
	  InputHandler.Events.KeyboardEvent.listeners.remove(toRemove);
	}
  }
  void run() {
	try {
	  while Gui.isRunning{
		status=WAITING_FOR_EVENTS;
		synchronized events{
		  while Gui.isRunning && events.isEmpty(){
			events.wait();
		  }
		}
		status=PROCESSING_EVENTS;
		while events.isEmpty() == false {
		  events.remove(0).handle();
		}
	  }
	}
	print catch Interrupted {
	}
  }
  void load(DisplayMode displayMode) {
	try {
	  Keyboard.create();
	  if \disableNativeCursor {
		disableNativeCursor(true);
		cursorX = (int) displayMode.getWidth() / 2;
		cursorY = (int) displayMode.getHeight() / 2;
	  }
	  if \hideNativeCursor {
		hideNativeCursor(true);
	  }
	}
	print catch * {
	  System.err.println(''"InputHandler.load: "''+\e0);
	}
	start();
  }
  void handle() {
	int mouseDX = Mouse.getDX();
	int mouseDY = Mouse.getDY();
	int mouseDW = Mouse.getDWheel();
	synchronized events {
	  if mouseDX != 0 || mouseDY!=0 || mouseDW != 0 {
		cursorX = Mouse.getX();
		cursorY = Mouse.getY();
		events.add(new InputHandler.Events.MouseEvent.Move(cursorX,cursorY));
	  }
	  if mouseDW!=0 {
		events.add(new InputHandler.Events.MouseWheelEvent(mouseDW));
	  }
	  while Mouse.next(){
		if Mouse.getEventButtonState() {
		  events.add(new InputHandler.Events.MouseEvent.Press(Mouse.getEventButton(),cursorX,cursorY));
		}
		else {
		  events.add(new InputHandler.Events.MouseEvent.Release(Mouse.getEventButton(),cursorX,cursorY));
		}
	  }
	  if Mouse.isButtonDown(0) {
		events.add(new InputHandler.Events.MouseEvent.Drag(0,cursorX,cursorY));
	  }
	  if Mouse.isButtonDown(1) {
		events.add(new InputHandler.Events.MouseEvent.Drag(1,cursorX,cursorY));
	  }
	  if Keyboard.next() {
		if Keyboard.getEventKeyState(){
		  events.add(new InputHandler.Events.KeyboardEvent.Press(Keyboard.getEventKey(),Keyboard.getEventCharacter()));
		}
		else {
		  events.add(new InputHandler.Events.KeyboardEvent.Release(Keyboard.getEventKey()));
		}
		while Keyboard.next(){
		  if Keyboard.getEventKeyState(){
			events.add(new InputHandler.Events.KeyboardEvent.Press(Keyboard.getEventKey(),Keyboard.getEventCharacter()));
		  }
		  else {
			events.add(new InputHandler.Events.KeyboardEvent.Release(Keyboard.getEventKey()));
		  }
		}
	  }
	  else if continuousKeyboard&&Keyboard.getEventKeyState(){
		events.add(new InputHandler.Events.KeyboardEvent.Press(Keyboard.getEventKey(),Keyboard.getEventCharacter()));
	  }
	  if status == WAITING_FOR_EVENTS{
		events.notifyAll();
	  }
	}
  }
  void end(){
    if status == WAITING_FOR_EVENTS {
      synchronized events {
        events.notifyAll();
      }
    }
  }
  void disableNativeCursor(boolean newNativeCursorValue) {
	\disableNativeCursor = newNativeCursorValue;
	Mouse.setGrabbed(newNativeCursorValue);
  }
  void hideNativeCursor(boolean hide) {
	\hideNativeCursor = hide;
	int canHide = Cursor.getCapabilities() & Cursor.CURSOR_ONE_BIT_TRANSPARENCY;
	if canHide==0 {
	  System.err.println(''"Renderer hideHardwareCursor(): No hardwared cursor support!"'');
	  return;
	}
	try {
	  if hide {
		Cursor cursor = null;
		int cursorImageCount = 1;
		int cursorWidth = Cursor.getMaxCursorSize();
		int cursorHeight = cursorWidth;
		IntBuffer cursorImages = null;
		IntBuffer cursorDelays = null;
		cursorImages=ByteBuffer.allocateDirect(cursorWidth*cursorHeight*cursorImageCount*4).order(ByteOrder.nativeOrder()).asIntBuffer();
		for int i < cursorWidth {
		  for int j < cursorHeight {
			cursorImages.put(`%E("0x00000000")`);
		  }
		}
		cursorImages.flip();
		cursor = new Cursor(
		  Cursor.getMaxCursorSize(),
		  Cursor.getMaxCursorSize(),
		  Cursor.getMaxCursorSize()/2,
		  Cursor.getMaxCursorSize()/2,
		  cursorImageCount,cursorImages,cursorDelays);
		Mouse.setNativeCursor(cursor);
	  }
	  else {
		Mouse.setNativeCursor(null);
	  }
	}
	print catch *{
	  System.err.println(''"Renderer hideHardwareCursor(): error"'');
	}
  }
  class Events  {
	class MouseWheelEvent  InputHandler.Event  {
	  @List<InputHandler.Events.MouseWheelEvent.Listener> listeners = new ArrayList<InputHandler.Events.MouseWheelEvent.Listener>();
	  MouseWheelEvent(int amount){
	    this.amount = amount;
	  }
	  int amount = 0;
	  void handle() {
		synchronized InputHandler.Events.MouseWheelEvent.listeners {
		  for InputHandler.Events.MouseWheelEvent.Listener listener : InputHandler.Events.MouseWheelEvent.listeners {
			listener.listen(this);
		  }
		}
	  }
	  interface Listener {
		void listen(InputHandler.Events.MouseWheelEvent event)?
	  }
	}
	class MouseEvent InputHandler.Event {
	  @List<InputHandler.Events.MouseEvent.Listener> listeners = new ArrayList<InputHandler.Events.MouseEvent.Listener>();
	  int cursorX = 0;
	  int cursorY = 0;
	  MouseEvent(int cursorX, int cursorY){
	    this.cursorX = cursorX;
	    this.cursorY = cursorY;
	  }
	  boolean isLeftButton = false;
	  boolean isRightButton = false;
	  boolean isDrag() {
		return false;
	  }
	  boolean isMove() {
		return false;
	  }
	  boolean isPress() {
		return false;
	  }
	  boolean isRelease() {
		return false;
	  }
	  interface Listener{
		void listen(InputHandler.Events.MouseEvent.Drag event)?
		void listen(InputHandler.Events.MouseEvent.Press event)?
		void listen(InputHandler.Events.MouseEvent.Release event)?
		void listen(InputHandler.Events.MouseEvent.Move event)?
	  }
	  class Move InputHandler.Events.MouseEvent{
	    Move(int cursorX, int cursorY){
	      super(cursorX, cursorY);
	    }
		boolean isMove() {
		  return true;
		}
		void handle() {
		  synchronized InputHandler.Events.MouseEvent.listeners {
			for InputHandler.Events.MouseEvent.Listener listener: InputHandler.Events.MouseEvent.listeners {
			  listener.listen(this);
			}
		  }
		}
	  }
	  class Drag InputHandler.Events.MouseEvent {
	  	Drag(int cursorX, int cursorY){
	      super(cursorX, cursorY);
	    }
		Drag (int button,int cursorX,int cursorY) {
		  super(cursorX,cursorY);
		  setIsLeftButton(button==0);
		  setIsRightButton(button==1);
		}
		boolean isDrag() {
		  return true;
		}
		void handle() {
		  synchronized InputHandler.Events.MouseEvent.listeners {
			for InputHandler.Events.MouseEvent.Listener listener: InputHandler.Events.MouseEvent.listeners {
			  listener.listen(this);
			}
		  }
		}
	  }
	  class Press InputHandler.Events.MouseEvent {
		Press (int button,int cursorX,int cursorY) {
		  super(cursorX,cursorY);
		  setIsLeftButton(button==0);
		  setIsRightButton(button==1);
		}
		boolean isPress() {
		  return true;
		}
		void handle() {
		  synchronized InputHandler.Events.MouseEvent.listeners{
			for InputHandler.Events.MouseEvent.Listener listener: InputHandler.Events.MouseEvent.listeners {
			  listener.listen(this);
			}
		  }
		}
	  }
	  class Release InputHandler.Events.MouseEvent {
		Release (int button,int cursorX,int cursorY) {
		  super(cursorX,cursorY);
		  setIsLeftButton(button==0);
		  setIsRightButton(button==1);
		}
		boolean isRelease() {
		  return true;
		}
		void handle() {
		  synchronized InputHandler.Events.MouseEvent.listeners {
			for InputHandler.Events.MouseEvent.Listener listener: InputHandler.Events.MouseEvent.listeners {
			  listener.listen(this);
			}
		  }
		}
	  }
	}
	class KeyboardEvent InputHandler.Event {
	  @List<InputHandler.Events.KeyboardEvent.Listener> listeners = new ArrayList<InputHandler.Events.KeyboardEvent.Listener>();
	  int keyInt = 0;
	  char keyChar = 0;
	  KeyboardEvent(int keyInt,char keyChar){
	    this.keyInt = keyInt;
	    this.keyChar = keyChar;
	  } 
	  boolean isPress() {
		return false;
	  }
	  boolean isRelease() {
		return false;
	  }
	  interface Listener {
		void listen(InputHandler.Events.KeyboardEvent.Press event)?
		void listen(InputHandler.Events.KeyboardEvent.Release event)?
	  }
	  class Press InputHandler.Events.KeyboardEvent {
	    Press(int keyInt,char keyChar){
	      super(keyInt, keyChar);
	    }
		boolean isPress() {
		  return true;
		}
		void handle() {
		  synchronized InputHandler.Events.KeyboardEvent.listeners{
			for InputHandler.Events.KeyboardEvent.Listener listener: InputHandler.Events.KeyboardEvent.listeners {
			  listener.listen(this);
			}
		  }
		}
	  }
	  class Release InputHandler.Events.KeyboardEvent {
	    Release(int keyInt,char keyChar){
	      super(keyInt, keyChar);
	    }
		Release (int keyInt) {
		  super(keyInt,(char)0);
		}
		boolean isRelease() {
		  return true;
		}
		void handle() {
		  synchronized InputHandler.Events.KeyboardEvent.listeners {
			for InputHandler.Events.KeyboardEvent.Listener listener : InputHandler.Events.KeyboardEvent.listeners{
			  listener.listen(this);
			}
		  }
		}
	  }
	}
  }
  class Event  {
    void handle() {
	}
  }
}