class 'packageName'.gui.Renderer {

  Renderer.Animator animator = null;
  float viewX = 0f;
  float viewY = 0f;
  float viewZ = 0f;
  float aspectRatio = 0f;
  int viewportX = 0;
  int viewportY = 0;
  int viewportWidth = 0;
  int viewportHeight = 0;
  long ticksPerSecond = 0L;
  long animationInterval = 180L;
  long previousAnimationTime = 0L;
  long lastFrameTime = 0L;
  double secondsSinceLastFrame = 0.0;
  double avgSecsPerFrame = 0.01;
  int frameCount = 0;
  @Renderer.Layer baseLayer = new Renderer.Layer();
> %Body renderLayersBody = %Body.add(|baseLayer.render();|);
>@ %Body animateLayersBody = %Body.add(|baseLayer.animate();|);
> %Body loadLayersBody = %Body.add(|baseLayer.load();|);
  class Layer Thread {
    @int UNSTARTED = -1;
    @int WAITING_FOR_EVENT = 0;
    @int PROCESSING_EVENTS = 1;
    List<Gui.Drawable> layer = new ArrayList<Gui.Drawable>();
    class ControlEvent  {
      void act(){}
    }
    @class Addition ControlEvent {
      Gui.Drawable toAdd = null;
      Addition(Gui.Drawable toAdd){
        this.toAdd = toAdd;
      }
      void act(){
        layer.add(toAdd);
      }
    }
    @class Removal ControlEvent {
      Gui.Drawable toRemove = null;
      Removal(Gui.Drawable toRemove){
        this.toRemove = toRemove;
      }
      void act(){
        layer.remove(toRemove);
      }
    }
    LinkedList<ControlEvent> events = new LinkedList<ControlEvent>();
   int status = UNSTARTED;
    void add(Gui.Drawable toAdd){
      synchronized events {
        events.push(new Layer.Addition(toAdd));
        if status == WAITING_FOR_EVENT {
          events.notifyAll();
        }
      }
    }
    void remove(Gui.Drawable toRemove){
      synchronized events {
        events.push(new Layer.Removal(toRemove));
        if status == WAITING_FOR_EVENT {
          events.notifyAll();
        }
      }
    }
    void run(){
      try {
        while Gui.isRunning {
          synchronized events {
            while Gui.isRunning && events.isEmpty() {
              status = WAITING_FOR_EVENT;
              events.wait();
              status = PROCESSING_EVENTS;
            }
          }
          while Gui.isRunning {
            synchronized layer {
              synchronized events {
                if events.isEmpty() {
                  break;
                }
                events.pollFirst().act();
              }
            }
          }
        }
      }
      print catch * {}
    }
    void end(){
      if status == WAITING_FOR_EVENT {
        synchronized events {
          events.notifyAll();
        }
      }
    }
    void load(){
      start();
    }
    void render(){
      int previousTexture = -2;
      synchronized layer {
        for Gui.Drawable drawable : layer {
          if drawable.getTexture()!=previousTexture {
            previousTexture = drawable.getTexture();
            GL11.glBindTexture(GL11.GL_TEXTURE_2D, previousTexture);
          }
          drawable.render();
        }
      }
    }
    void animate(){
      for int j < layer.size() {
        layer.get(j).animate();
      }
    }
  }
  class Animator Thread {
    int animationTicks = 0;
    void run() {
      while Gui.isRunning {
        synchronized this {
          while Gui.isRunning && animationTicks < 1 {
            try {
              wait();
            }
            print catch Interrupted {}
          }
          animationTicks -= 1;
        }
        `animateLayersBody`;
      }
    }
    void animate(){
      synchronized this {
        ++animationTicks;
        notifyAll();
      }
    }
    void end(){
      if animationTicks < 1 {
        synchronized this {
          ++animationTicks;
          notifyAll();
        }
      }
    }
  }
  @void add(Gui.Drawable drawable, Renderer.Layer layer){
    layer.add(drawable);
  }
  @void remove(Gui.Drawable drawable, Renderer.Layer layer){
    layer.remove(drawable);
  }
  @Gui.Drawable add(Gui.Drawable drawable, Gui.Renderable image, Renderer.Layer layer){
    drawable = drawable.image(image);
    layer.add(drawable);
    return drawable;
  }
> void addLayer(String layerName){
    String realLayerName = layerName + "Layer";
    renderLayersBody.add(|'realLayerName'.render();|);
    animateLayersBody.add(|'realLayerName'.animate();|);
    loadLayersBody.add(|'realLayerName'.load();|);
    Renderer::end() += {'realLayerName'.end();}
    Renderer += @Renderer.Layer 'realLayerName' = new Renderer.Layer();
  }
  void render(){
	GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
	GL11.glMatrixMode(GL11.GL_MODELVIEW);
	GL11.glLoadIdentity();
    GLU.gluLookAt(0f, 0f, 1f,
			0f, 0f, 0f,
			0f, 1f, 0f);
	
	GL11.glTranslatef(-0.7521f + viewX, -0.565f + viewY, -1.107f + viewZ);
	GL11.glScalef(1.504f, 1.12875f, 1f);
	
	if System.currentTimeMillis() - previousAnimationTime > animationInterval {
		previousAnimationTime = System.currentTimeMillis();
		animator.animate();
	}
	GL11.glEnableClientState(GL11.GL_VERTEX_ARRAY);
	GL11.glEnableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
	GL11.glFrontFace(GL11.GL_CW);

	GL11.glPushMatrix();
    `renderLayersBody`;
    GL11.glPopMatrix();
	GL11.glDisableClientState(GL11.GL_VERTEX_ARRAY);
	GL11.glDisableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
	
	++frameCount;
    if Sys.getTime() - lastFrameTime > ticksPerSecond {
      #Log.log("==============> FramesPerSec=" + (frameCount/1) + " timeinsecs=" + getTimeInSeconds() + " timeinmillis=" + getTimeInMillis());#
      frameCount = 0;
    }
  }
  void load(DisplayMode displayMode){
    `loadLayersBody`;
    try {
	  ticksPerSecond=Sys.getTimerResolution();
      if aspectRatio == 0f {
        aspectRatio = (float) displayMode.getWidth() / (float) displayMode.getHeight();
      }
      
      viewportHeight = displayMode.getHeight();                        
      viewportWidth = (int)((float)displayMode.getHeight() * (float)aspectRatio);
      if viewportWidth > displayMode.getWidth() {
        viewportWidth = displayMode.getWidth();
        viewportHeight = (int)(displayMode.getWidth() / aspectRatio );
      }
      viewportX = (displayMode.getWidth()-viewportWidth) / 2;
      viewportY = (displayMode.getHeight()-viewportHeight) / 2;
    
      GL11.glEnable(GL11.GL_DEPTH_TEST);
      GL11.glDepthFunc(GL11.GL_LEQUAL);
      
      GL11.glClearColor(0f, 0f, 0f, 1f);
      GL11.glEnable(GL11.GL_NORMALIZE);
      GL11.glEnable(GL11.GL_CULL_FACE);
      GL11.glEnable(GL11.GL_TEXTURE_2D);
      GL11.glEnable(GL11.GL_BLEND);

      GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
      GL11.glEnable(GL11.GL_ALPHA_TEST);
      GL11.glAlphaFunc(GL11.GL_GREATER, 0f);

      GL11.glLightModeli(GL12.GL_LIGHT_MODEL_COLOR_CONTROL, GL12.GL_SEPARATE_SPECULAR_COLOR );

      #GL11.glH(GL11.GL_PERSPECTIVE_CORRECTION_HINT, GL11.GL_NICEST);#
      GL11.glViewport(viewportX, viewportY, viewportWidth, viewportHeight);
      setPerspective();
      GL11.glMatrixMode(GL11.GL_MODELVIEW);
      GL11.glLoadIdentity();
      
      updateTimer();
      Display.update();
      animator = new Renderer.Animator();
      animator.start();
    }
    print catch * {
      System.err.println(''"Renderer Load Failed"'');
    }
  }
  void end(){
	Keyboard.destroy();
	Display.destroy();
    animator.end();
    baseLayer.end();
  }
  void setPerspective(){
    GL11.glMatrixMode(GL11.GL_PROJECTION);
    GL11.glLoadIdentity();
    GLU.gluPerspective(40f, aspectRatio, 1f, 1000f);
    GL11.glMatrixMode(GL11.GL_MODELVIEW);
  }
  void updateTimer() {
    double numToAvg = 50.0;
    secondsSinceLastFrame = (double)(Sys.getTime() - lastFrameTime) / (double)ticksPerSecond;
    lastFrameTime = Sys.getTime();
    if secondsSinceLastFrame < 1 {
      avgSecsPerFrame = avgSecsPerFrame * numToAvg + secondsSinceLastFrame;
      avgSecsPerFrame /= numToAvg + 1.0;
    }
  }
  void moveView(float moveX, float moveY){
    viewX += moveX;
    viewY += moveY;
  }
}