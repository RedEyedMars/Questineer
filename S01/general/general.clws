> Set<String> declaredCritSet = new HashSet<String>();
> Set<String> declaredListSet = new HashSet<String>();
> Set<String> declaredMapSet = new HashSet<String>();

enum 'packageName'.misc.Templates {
	class T {}
	class U {}
} 

class 'packageName'.misc.streams.Streamer {
    @<T> Float sum(List<T> list, BiFunction<Float, T, Float> function){
	  return list.parallelStream().reduce(0f,function,(S,V)=>S+V);
	}
	@<T> Boolean has(List<? extends T> list, T obj){
	  return list.parallelStream().map(O=>O.equals(obj)).filter(B=>B).findAny().orElse(false);
	}
	@<T,U> Boolean has(List<? extends T> list, Function<T,U> func, U obj){
	  return list.parallelStream().map(O=>func.apply(O).equals(obj)).filter(B=>B).findAny().orElse(false);
	}
	@<T,U> Boolean has(List<? extends T> list, Function<T,Boolean> func){
	  return list.parallelStream().filter(O=>func.apply(O)).findAny().orElse(null)!=null;
	}
	@<T> T get(List<? extends T> list, Function<T,Boolean> func){
	  return list.parallelStream().map(O=>func.apply(O)?O:null).filter(B=>B!=null).findAny().orElse(null);
	}
	@<T,U> T get(List<? extends T> list, Function<T,U> func, U obj){
	  return list.parallelStream().map(O=>func.apply(O).equals(obj)?O:null).filter(B=>B!=null).findAny().orElse(null);
	}
	@<T> List<T> collect(List<? extends T> list, Function<T,Boolean> func){
	  return list.parallelStream().filter(O=>func.apply(O)).collect(Collectors.toList());
	}
	@<T,U> T race(List<? extends T> list, Predicate<T> objectTest, U start, Function<T,U> distance, BiFunction<U,U,Boolean> standingTest) {
	  if list.isEmpty() {
	    return null;
	  } 
	  return (T) list.parallelStream().filter(objectTest).reduce(
	     new Object(start,null)[],
	     (Other,Racer)=>standingTest.apply((U)Other[0],distance.apply(Racer))?
	                    Other:
	                    new Object(distance.apply(Racer),Racer)[],
	     (Previous,Current)=>standingTest.apply((U)Previous[0],(U)Current[0])?Previous:Current)[1];
	}
	@<T> Stream<T> performOnce(int index, Stream<T> stream, Function<T,T> function) {
	  return stream.map(O=>((Indexable)O).getIndex()==index?function.apply(O):O);
	}
	@<T> Stream<T> perform(Function<Integer,Boolean> indexTest, Stream<T> stream, Function<T,T> function) {
	  return stream.map(O=>indexTest.apply(((Indexable)O).getIndex())?function.apply(O):O);
	}
	class Iterator <T> < '"java.util"'.Iterator<T> {
      T current;
      Function<T,T> next;
      boolean hasNext(){
        return current!=null;
      }
      T next(){
      	T previous = current;
        current = next.apply(current);
        return previous;
      }
    }
	enum Imports {
	  Stream stream;
	  Indexable indexer;
	}
}
interface 'packageName'.misc.interfaces.Indexable {
  int getIndex(){}
}
interface 'packageName'.misc.interfaces.Listenable <TypeName> {
  Boolean listen(TypeName event){}
}
interface 'packageName'.misc.interfaces.Source {
}
interface 'packageName'.misc.interfaces.Loaddable {
  Boolean load(){}
}
interface 'packageName'.misc.interfaces.Tickable {
  Boolean tick(Double millisSinceLastFrame){}
}
interface 'packageName'.misc.interfaces.Usable {
  class Id  {
  }
  class Imports {
    Entity entity = null;
    Tile tile = null;
  }
  Boolean use(Entity user, Activity activity)?
  Boolean canChase()?
  Float getRange(Entity user)?
  Predicate<Entity> getTargetCriteria()?
  Predicate<Tile> getDestinationCriteria()?
  Predicate<Terrain> getTerrainCriteria()?
  Usable.Id getId()?
}
class 'packageName'.misc.Range {
  @Random randomizer = new Random();
  Float left = 0f;
  Float right = 0f;
  Range(Float left, Float right){this.left = left; this.right = right;}
  @int getIntegerBetween(Integer bottom, Integer top){
    return (int)(double)((top - bottom) * randomizer.nextDouble() + bottom);
  }
  Range (Integer initialLeft, Integer initialRight){
    left = (float)initialLeft;
    right = (float)initialRight;
  } 
  Range (Float initialLeft, Integer initialRight){
    left = initialLeft;
    right = (float)initialRight;
  }
  Range (Integer initialLeft, Float initialRight){
    left = (float)initialLeft;
    right = initialRight;
  }
  @<T> T select(Set<T> collection){
    if collection.isEmpty(){
	  return null;
	}
	List<T> temp = new ArrayList(collection);
	return temp.get((int)(temp.size()*randomizer.nextFloat()));
  }
  @<T> T select(List<T> collection){
    if collection.isEmpty(){
	  return null;
	}
	return collection.get((int)(collection.size()*randomizer.nextFloat()));
  }
  @<T> T select(T[] array){
    if array.length == 0{
	  return null;
	}
	return array[(int)(array.length*randomizer.nextFloat())];
  }
  @Boolean chance(Double percent){
    return randomizer.nextDouble() <= percent;
  }
  @Boolean chance(Float percent){
    return randomizer.nextFloat() <= percent;
  }
  @Float getRandomFloat(){
    return randomizer.nextFloat();
  }
  @Integer getRandom(Integer lowerBound, Integer upperBound){
    if lowerBound >= upperBound {
      return lowerBound;
    }
    else {
      return (int)((upperBound-lowerBound)*randomizer.nextFloat())+lowerBound;
    }
  }
  @Float getRandom(Float lowerBound, Float upperBound){
    if lowerBound >= upperBound {
      return lowerBound;
    }
    else {
      return ((upperBound-lowerBound)*randomizer.nextFloat())+lowerBound;
    }
  }
  @Integer normalize(Double value){
    if value > 0.001 {
      return 1;
    }
    else if value < -0.001 {
      return -1;
    }
    else {
      return 0;
    }
  }
  double getRandom(){
    return (right - left) * randomizer.nextDouble() + left;
  }
  float getValue(Entity user){
    return (float)getRandom();
  }
}

class 'packageName'.misc.ListMaps {
}
> %Body getBodyElements(%T elementsToken, %Context context){
    %Body result = %Body ();
    result.setParent(context);
    elementsToken : element : body_element {
      result.add(getBodyElement(element,result));
    }
    return result;
  }
> %Lineable getBodyElement(%T elementToken, %Context context){
    elementToken : element
      : statement {
        if elementToken->inline_if_statement != null {
          %Body body = %Body ();
          %Body previousBody = null;
          boolean isFirst = true;
          %Lineable result = null;
          elementToken->inline_if_statement : bool : boolean_statement {
            %Body currentBody = body;
            if isFirst {
              if elementToken->inline_if_statement->IF != null {
                if elementToken->inline_if_statement->ELSE != null {
                  result = |else if `getBooleanStatement(bool,context)` `currentBody`|;
                }
                else {
                  result = |     if `getBooleanStatement(bool,context)` `currentBody`|;
                }
              }
              else {
                result =   |   else { if `getBooleanStatement(bool,context)` `currentBody` } |;
              }
              isFirst = false;
            }
            else {
              previousBody.add(|if `getBooleanStatement(bool,context)` `currentBody`|);
            }
            previousBody = body;
            body = %Body ();
          }
          previousBody.add(| `getStatement(element, context)` ; |);
          return result;
        }
        else {
          return | `getStatement(element, context)` ; | ;
        }
      }
      : return_statement {
        return |return `getStatement(element, context)`;|;
      }
      : acquisition {
        %Output subject = getVariableCall(element->variable_call,context);
        return getAcquisition(element->acquisition, true, subject, context);
      }
	  : imposition {
	    %Output subject = getVariableCall(element->variable_call,context);
	    Boolean doom = element->imposition->impose != null || element->imposition->PLUS != null;
	    return Entity.getImposition(element->imposition,doom,subject);
	  }
	  : quest_addition {
	    return Quests.getAddition(element->quest_addition,getVariableCall(element->variable_call,context), context);
	  }
	  : influence {
	    return Entity.getInfluence(element->influence,getVariableCall(element->variable_call,context),context);
	  }
	  : activity_statement {
		  return |`getActivityStatement(element,context)`;|;
	  }
	  : association_statement {
		  return |`getAssociationStatement(element,context)`;|;
	  }
	  : spawn_statement {
		  return |`getSpawnStatement(element,context)`;|;
	  }
	  : variable_declaration {
	    return getVariableDeclaration(element, context);
	  }
      : if_statement {
        return getIfStatement(element, context);
      }
      : for_statement {
        return getForStatement(element, context);
      }
    return null;
  }
> %Lineable getVariableDeclaration(%T variableDeclarationToken, %Context context){
	%Type type = getTypeName(variableDeclarationToken->variable_header->type_name);
    if type == null {
      throw new RuntimeException(variableDeclarationToken.err() + "Could not find type:" + type.evaluate() + "!");
    }
    if variableDeclarationToken->statement != null {
      return | `type` 'variableDeclarationToken->variable_header->variableName' = `getStatement(variableDeclarationToken->statement, context)`; |;
    }
    else {
      return | `type` 'variableDeclarationToken->variable_header->variableName' = null; |;
    }
  }
> %Variable getVariableFromHeader(%T variableHeaderToken, %Context context){
    %Type type = getTypeName(variableHeaderToken->type_name);
    if type == null {
      throw new RuntimeException(variableHeaderToken.err() + "Could not find type:" + type.evaluate() + "!");
    }
    return `type` 'variableHeaderToken->variableName';;
  }
> %Variable addVariableHeader(%T variableHeaderToken, %Class inputClass){
    %Type type = getTypeName(variableHeaderToken->type_name);
    if type == null {
      throw new RuntimeException(variableHeaderToken.err() + "Could not find type:" + type.evaluate() + "!");
    }
    inputClass += `type` 'variableHeaderToken->variableName';
    return inputClass.getVariable('variableHeaderToken->variableName');
  }
> %Lineable getIfStatement(%T ifStatementToken, %Context context){
    %Header header     = new %Header ();
    %Header elseHeader = new %Header ();
    %Body      body       = %Body ();
    %Body      elseBody   = %Body ();
    body.setParent(context);
    elseBody.setParent(context);
    Integer   mode       = 0;
    ifStatementToken : element
      : boolean_statement {
        header.call(getBooleanStatement(element, context));
      }
      : body_element {
        body.add(getBodyElement(element, body));
      }
      : else_statement {
        mode = 1;
        element : atom
          : body_element {
            elseBody.add(getBodyElement(atom,elseBody));
            #if atom->variable_declaration != null {
              elseBody.addVariable(getVariableFromHeader(atom->variable_declaration->variable_header,elseBody));
            }#
          }
          : boolean_statement {
            elseHeader.call(getBooleanStatement(atom,context));
            mode = 2;
          }
      }
    if      mode == 0 { return |if `header` `body`                                 |; }
    else if mode == 1 { return |if `header` `body` else                 `elseBody` |; }
    else if mode == 2 { return |if `header` `body` else if `elseHeader` `elseBody` |; }
    else              { return null;                                              }
  }
> %Lineable getForStatement(%T forStatementToken, %Context context){
    
    if forStatementToken->fromList != null {
      %T variableHeaderToken = forStatementToken->fromList->variable_header;
      %Type type = getTypeName(variableHeaderToken->type_name);
      if type == null {
        throw new RuntimeException(variableHeaderToken.err() + "Could not find type:" + type.evaluate() + "!");
      }
      context.addVariable(`type` 'variableHeaderToken->variableName';);
      %Output right = getStatement(forStatementToken->fromList->statement, context) ;
      %Body body = getBodyElements(forStatementToken, context);
      return |for `type` 'variableHeaderToken->variableName' : `right` `body`|;
    }
    return null;
  }


> %Operator getBooleanStatement(%T booleanStatement, %Context context){
    return getBooleanStatement(booleanStatement, false, context);
  }
> %Operator getBooleanStatement(%T booleanStatement, Boolean negate, %Context context){
    %Operator operator = %Operator();
    booleanStatement : element
    	: has_chance {
    		operator.add(getChance(element));
    	  }
    	: isA_statement {
    	    operator.add(getIsAStatement(element, context));
    	  }
    	: spawned_statement {
    		operator.add(|'' 'element->environmentName' ''.equals(\spawn.getParent().getName())|);
    	  }
    	: has_statement {
 			if element->NOT == null {
 				operator.add(getRequirement(element->requirement,getVariableCall(element->variable_call,context), negate));
			}
			else { 
				operator.add(getRequirement(element->requirement,getVariableCall(element->variable_call,context), negate).negate());
			}
    	  }
    	: statement {
     	    operator.add(getStatement(element,negate,context));
    	  }
    	: operator {
     	    if 'element' == "&" {
     	      if negate {
     	        operator.operator("||");
     	      }
     	      else {
     	        operator.operator("&&");
     	      }
            }
            else if 'element' == "|" {
               if negate {
                 operator.operator("&&");
               }
               else {
                 operator.operator("||");
               }
            }
    	  }
     return operator.operatorlessIfSingle();
  }
> %Operator getIsAStatement(%T element, %Context context){
    return %Operator().left(getVariableCall(element->variable_call,context)).operator(" instanceof ").right(%E(getTypeName(element->type_name)));
  }
> %Operator getRequirement(%T requirementToken, %Callable candidate, Boolean showAsTrue){
    %Operator requireHeader = %Operator().operatorlessIfSingle();
 	if showAsTrue {
 	  requireHeader.operator("||");
	} 
	else {
	  requireHeader.operator("&&");
	}
 	requirementToken : quanta : require_stat {
 	  if quanta->NOT != null && showAsTrue || quanta->NOT == null &&! showAsTrue{
 	    requireHeader.add(%Operator().left(|`candidate`.^"get" + %Helper.camelize('quanta->hero_stat'.toLowerCase())^().getValue()|)
 	                                 .operator(negateOperator('quanta->ORDINAL'))
 	                                 .right(%E('quanta->INTEGER')));
 	  }
 	  else {
 	    requireHeader.add(%Operator().left(|`candidate`.^"get" + %Helper.camelize('quanta->hero_stat'.toLowerCase())^().getValue()|)
 	                                 .operator('quanta->ORDINAL')
 	                                 .right(%E('quanta->INTEGER')));
 	  }
    }
	requirementToken : quanta : require_skill {
	  if quanta->NOT != null != showAsTrue {
	    %Callable innerHead = |`candidate`.has(`Skills.getId(%Helper.camelize('quanta->skill_names'))`)|;
	    requireHeader.add(innerHead.negate());
	  }
	  else {
	    requireHeader.add(|`candidate`.has(`Skills.getId(%Helper.camelize('quanta->skill_names'))`)|);
	  }
    }
    requirementToken : quanta : require_trait {
	  if quanta->NOT != null != showAsTrue {
	    %Callable innerHead = |`candidate`.has(`Traits.getId(%Helper.camelize('quanta->trait_names'))`)|;
	    requireHeader.add(innerHead.negate());
	  }
	  else {
	    requireHeader.add(|`candidate`.has(`Traits.getId(%Helper.camelize('quanta->trait_names'))`)|);
	  }
    }  
    requirementToken : quanta : require_attack {
	  if quanta->NOT != null != showAsTrue {
	    %Callable innerHead = |`candidate`.has(`Attacks.getId(%Helper.camelize('quanta->attack_names'))`)|;
	    requireHeader.add(innerHead.negate());
	  }
	  else {
	    requireHeader.add(|`candidate`.has(`Attacks.getId(%Helper.camelize('quanta->attack_names'))`)|);
	  }
    }
    requirementToken : quanta : require_association {
	  %Output id;
	  if quanta->association_names != null {
	    id = Associations.getId(%Helper.camelize('quanta->association_names'));
	  }
	  else {
	    id = |'quanta->variableName'.getId()|;
	  }
	  if quanta->NOT != null != showAsTrue {
	    %Callable innerHead = |`candidate`.has(`id`)|;
	    requireHeader.add(innerHead.negate());
	  }
	  else {
	    requireHeader.add(|`candidate`.has(`id`)|);
	  }
    }
	return requireHeader;
  }
> %Arguments getMethodArguments(%T element, %Context context){
    %Arguments arguments = %Arguments ();
    element : args : method_arguments {
      args : atom : statement {
        arguments.add(getStatement(atom,context));
      }
    }
    return arguments;
  }
> %Callable getActivityStatement(%T element, %Context context){
    return |`getVariableCall(element->variable_call,context)`.'element->method'(new Activities.'%Helper.camelize(element->activity_names)'(`getMethodArguments(element,context)`))|;
  }

> %Output getAssociationStatement(%T element, %Context context){
    return |`getVariableCall(element->variable_call,context)`
              .'element->method'(`getStatement(element->recruiter->statement,context)`,
                                 new Associations.'%Helper.camelize(element->association_names)'(`getMethodArguments(element,context)`))|;
  }
> %Callable getSpawnStatement(%T element, %Context context){
    %Output adder = `Environments.getId('element->map_names')`;
    if element->tile_names != null {
      boolean isFirst = true;
      element : atom : tile_names {
        %Output current = adder;
        if isFirst {
          adder = |`current`.getRandomTile(Tiles.'element->map_names'.'atom'.id)|;
        }
        else {
          adder = |((Tiles.EntryPoint)`current`).getSisterArea().getRandomTile(Tiles.'element->map_names'.'atom'.id)|;
        }
        isFirst = false;
      }
    }
    else if element->upperBoundX != null && element->upperBoundY != null {
      %Output current = adder;
      adder = |`current`.getTile(Range.getRandom('element->lowerBoundX','element->upperBoundX'),Range.getRandom('element->lowerBoundY','element->upperBoundY'))|;
    }
    else if element->upperBoundX != null{
      %Output current = adder;
      adder = |`current`.getTile(Range.getRandom('element->lowerBoundX','element->upperBoundX'),'element->lowerBoundY')|;
    }
    else if element->upperBoundX != null {
      %Output current = adder;
      adder = |`current`.getTile('element->lowerBoundX',Range.getRandom('element->lowerBoundY','element->upperBoundY'))|;
    }
    else {
      %Output current = adder;
      adder = |`current`.getTile('element->lowerBoundX','element->lowerBoundY')|;
    }
    %Output current = adder;
    
    return |`getVariableCall(element->variable_call,context)`.spawnAt(`current`)|;
  }
> %Output getStatement(%T statementToken, %Context context){
    return getStatement(statementToken,false,context);
  }
> %Operator getStatement(%T statementToken,Boolean initialNegate, %Context context){
	%Operator ret = %Operator();
	Boolean negate = initialNegate;
	statementToken : element
	  : NOT { negate =! negate; }
	  : variable_call {
		  ret.add(getVariableCall(element,context));
	  }
	  : activity_statement {
		  ret.add(getActivityStatement(element,context));
	  }
	  : statement {
		ret.add(getStatement(element,context));
      }
	  : entity_selector {
	    ret.add(Entity.getSelector(element->entity_id_choice));
	  }
	  : map_selector {
	    if element->tile_id_choice->index != null {
	      ret.add(|Gui.game.getEnvironments().^"get"+'element->map_names'^().getAreas().get('element->tile_id_choice->index')|);
	    }
	    else {
	      ret.add(Tiles.getSelector('element->map_names',null,element->tile_id_choice));
	    }
	  }
	  : operator {
		  if negate {
		    ret.operator(negateOperator('element'));
		  }
		  else {
			ret.operator('element');
		  }
		}
	  : braced_statement {
		  ret.add(%Braced(getStatement(element,context)));
	  }
	if ret.isSingle() && negate {
	  return ret.negate();
	}
	else {
	  return ret;
	}
  }

> %Callable getVariableCall(%T variableCallToken, %Context context){
	%Context currentContext = context;
	%Call ret = %Call();
	variableCallToken : element
	  : range {
	    ret.add(|new Range('element->left','element->right')|);
	  }
	  : braced_statement {
		ret.add(%Braced(getStatement(element,context)));
	  }
	  : exact {
	    if element->FLOAT != null {
	      ret.add(|^'element'+"f"^|);
	    }
	    else {
	      ret.add(|'element'|);
	    }
	  }
	  : quote {
	    ret.add(|'' 'element' ''|);
	  }
	  : variable_group {
	    ret.add(getIdFromName(element));
	  }
	  : cast {
	    %Type type = getTypeName(element->type_name);
	    if type == null {
		    throw new RuntimeException("Could not find "+'type.evaluate()'+" type in context!");
		}
		
	    ret.add(|(`type`)`getStatement(element->statement,context)`|);
	  }
	  : access_static {
	    %Type type = getTypeName(element->type_name);
	    if type == null {
		    throw new RuntimeException("Could not find "+'type.evaluate()'+" type in context!");
		}
	    String variableName = 'element->variableName';
		if !type.getAsClass().hasVariableInContext(variableName) {
		    throw new RuntimeException("Could not find "+'variableName'+" variable in context!");
		}
		ret.add(|`type`.'variableName'|);
	  }
	  : variableName {
		if !currentContext.hasVariableInContext('element') {
		  if !currentContext.hasVariableInContext("event") {
		    if !currentContext.hasMethodInContext(%Helper.asGetMethod(element)) {
		      throw new RuntimeException("Could not find "+'element'+" variable in context!");
		    }
		    else {
		      %Method method = currentContext.getMethodFromContext('%Helper.asGetMethod(element)');
		      currentContext = method.getType().getAsClass();
		      %Callable call = |'%Helper.asGetMethod(element)'()|;
		      if method.getOnCallEndsWith() != null {
		        call.setOnEnd(method.getOnCallEndsWith());
		      }
		      ret.add(call);
		    }
		  } 
		  else {
		    %Context originalContext = currentContext;
		    currentContext = currentContext.getVariableFromContext("event").getType().getAsClass();
		    if !currentContext.hasVariableInContext('element') {
		      if !originalContext.hasMethodInContext('%Helper.asGetMethod(element)') {
		        throw new RuntimeException("Could not find "+'element'+" variable in context!");
		      }
		      else {
		        %Method method = currentContext.getMethodFromContext('%Helper.asGetMethod(element)');
		        currentContext = method.getType().getAsClass();
		        %Callable call = |'%Helper.asGetMethod(element)'()|;
		        if method.getOnCallEndsWith() != null {
		          call.setOnEnd(method.getOnCallEndsWith());
		        }
		        ret.add(call);
		      }
		    }
		    else {
		      currentContext = currentContext.getVariableFromContext('element').getType().getAsClass();
		      ret.add(|\event.'%Helper.asGetMethod(element)'()|);
		    }
		  }
		}
		else {
		  if  ret.isEmpty() {
		    currentContext = currentContext.getVariableFromContext('element').getType().getAsClass();
  		    ret.add(%E('element'));
		  }
		  else {
		    %Callable call = |'%Helper.asGetMethod(element)'()|;
		    %Method method = currentContext.getMethodFromContext('%Helper.asGetMethod(element)');
		    currentContext = method.getType().getAsClass();		    
		    if method.getOnCallEndsWith() != null {
		      call.setOnEnd(method.getOnCallEndsWith());
		    }
		    ret.add(call);
		  }
		}
	  }
	  : method {
		
		%Arguments parameters = %Arguments();
		if element->method_arguments != null {
		  element->method_arguments : atom : statement {
			parameters.add(getStatement(atom,context));
		  }
		}
		if element->NEW != null {
		  %Type methodName = getTypeName(element->type_name);
          currentContext = methodName.getAsClass();
		  if currentContext == null {
		    throw new RuntimeException("Could not find "+methodName+" type in context!");
		  }
		  ret.add(|new `methodName`(`parameters`)|);
		}
	  	else {
	  	  String methodName = 'element->methodName';
		  if !currentContext.hasMethodInContext(methodName) {
		    throw new RuntimeException("Could not find "+'element'+" method in context!");
		  }
		  %Method method = currentContext.getMethodFromContext(methodName);
		  currentContext = method.getType().getAsClass();
		  %Callable call = |'methodName'(`parameters`)|;
		  if method.getOnCallEndsWith() != null {
		    call.setOnEnd(method.getOnCallEndsWith());
		  }
		  ret.add(call);
		}
	  }
	###
	if currentContext != null && currentContext.hasEnder() {
	  ret.add(currentContext.getEnder());
	}
	###
	return ret;
  }
> %Output getIdFromName(%T nameToken){
    nameToken : element
      : map_names         { return Environments.getId(%Helper.camelize('element')); }
      : association_names { return Associations.getId(%Helper.camelize('element')); }
      : affinity_names    { return Affinities.getId(%Helper.camelize('element')); }
      : condition_names   { return Conditions.getId(%Helper.camelize('element')); }
      : skill_names       { return Skills.getId(%Helper.camelize('element')); }
      : trait_names       { return Traits.getId(%Helper.camelize('element')); }
      : activity_names    { return Activities.getId(%Helper.camelize('element')); }
      : activity_type_names       { return ActivityTypes.getId(%Helper.camelize('element')); }
    return null;
  }

> %Lineable getAcquisition(%T acquisitionToken, Boolean forGainBody, %Output subject, %Context context){
    %Context source;
    String sourceName;
    if acquisitionToken->source_name != null {
	  sourceName = 'acquisitionToken->source_name';
    }
    else {
      sourceName = "this";
    }
    if !context.hasVariableInContext(sourceName) {
      throw new RuntimeException("Could not find "+sourceName+" source in context!");
    }
    source = context.getVariableFromContext(sourceName).getType().getAsClass();
    %Output gainObj;
    %Output id;
    if acquisitionToken->THIS != null {
 	   gainObj = |this.clone()|;
 	   id = |this.id|;
    }
    else if acquisitionToken->aspect_names != null {
 	  String className = %Helper.camelize('acquisitionToken->aspect_names'); 
 	  gainObj = |new Aspects.'className'()|;
 	  id = |Aspects.'className'.id|;
    }
    else if acquisitionToken->trait_names != null {
 	  String className = %Helper.camelize('acquisitionToken->trait_names'); 
 	  gainObj = |new Traits.'className'()|;
 	  id = |Traits.'className'.id|;
    }
    else if acquisitionToken->attack_names != null {
 	  String className = %Helper.camelize('acquisitionToken->attack_names'); 
 	  gainObj = |new Attacks.'className'()|;
 	  id = |Attacks.'className'.id|;
    }
    else if acquisitionToken->condition_names != null {
 	  String className = %Helper.camelize('acquisitionToken->condition_names'); 
 	  gainObj = |new Conditions.'className'()|;
 	  id = |Conditions.'className'.id|;
    }
    else if acquisitionToken->item_names != null {
 	  String className = %Helper.camelize('acquisitionToken->item_names'); 
 	  gainObj = |new Items.'className'()|;
 	  id = |Items.'className'.id|;
    }
    else {
      gainObj = null;
      id = null;
    }
 	if acquisitionToken->operator->GAINS != null {
 	  if forGainBody {
 	  	if acquisitionToken->item_names != null {
 	  	  return |`subject`.equip(`gainObj`);|;
 	  	}
 	  	else {
 	  	  return |`subject`.gain(`gainObj`,'sourceName');|;
 	  	}
	  }
 	  else {
 	    if acquisitionToken->item_names != null {
 	  	  return |`subject`.unequip(`gainObj`);|;
 	  	}
 	  	else {
 		  return |`subject`.lose(`id`,'sourceName');|;
 		}
	  }
	}
	else {
 	  if forGainBody {
 	    if acquisitionToken->item_names != null {
 	  	  return |`subject`.unequip(`gainObj`);|;
 	  	}
 	  	else {
 		  return |`subject`.lose(`id`,'sourceName');|;
 		}
	  }
 	  else {
 	    if acquisitionToken->item_names != null {
 	  	  return |`subject`.equip(`gainObj`);|;
 	  	}
 	  	else {
 		  return |`subject`.gain(`gainObj`,'sourceName');|;
 		}
	  }
	}
  }

> %Callable primeRange(%T rangeToken){
    String left = 'rangeToken->left';
    String right = 'rangeToken->right';
    if rangeToken->percent != null {
      left  = percentify(left);
      right = percentify(right); 
    }
 	return |new Range('left+"f"','right+"f"')|;
  }

> %Callable getChance(%T chanceToken){
    return |Range.chance('Double.parseDouble('chanceToken') / 100.0') |;
  }
  
> void createListMap(%Class leftClass, %Class rightClass) {
	String leftName  = leftClass.getName().evaluate()+"s";
	String rightName = rightClass.getName().evaluate();
	String rightFullName = rightClass.getPackageName().evaluate()+"."+rightClass.getFullName().evaluate();
	String fullName  = "Maps."+leftName+"."+rightName;
	if declaredListSet.add(fullName) {
	  if ListMaps.'leftName' == null{
	    ListMaps += class 'leftName' {}
	  }
	  ListMaps.'leftName'  +=	
	    class 'rightName' HashMap<`leftClass.getFullName()`, LinkedList<'rightFullName'>> < Iterable<'rightFullName'>{
	      LinkedList<'rightFullName'> completeList = new LinkedList<'rightFullName'>();
	      Iterator<'rightFullName'> iterator(){
	        return completeList.iterator();
	      }
	      LinkedList<'rightFullName'> getFrom(`leftClass.getFullName()` key){
	        return super.get(key);
	      }
	      void add('leftClass' key, 'rightFullName' element){
	        if true &&! super.containsKey(key) {
			  super.put(key,new LinkedList<'rightFullName'>());
			}
			completeList.add(element);
			super.get(key).add(element);
	      }
	      void removeLast('leftClass' key){
	        if super.containsKey(key) &&! super.get(key).isEmpty() {
			  completeList.remove(super.get(key).removeLast());
			}
	      }
		  void removeAll('leftClass' key){
		    if super.containsKey(key) {
			  completeList.removeAll(super.get(key));
			  super.get(key).clear();
			}
		  }
		  void remove('leftClass' key, 'rightFullName' element){
		    super.get(key).remove(element);
			completeList.remove(element);
		  }
		  List<'rightFullName'> getAll(){
		    return completeList;
		  }
	    }
	}
	
  }
> void createIdMap(%Class idClass, %Class parentClass) {
    createIdMap(idClass, |getId()|, parentClass);
  }
> void createIdMap(%Class idClass,%Output getIdStatement, %Class parentClass) {
    String idName  = idClass.getName().evaluate()+"Map";
	String fullName  = idClass.getName()+"Maps."+idName+"."+parentClass.getName();
	String parentClassList = "java.util.List<"+parentClass.getName().evaluate()+">";
	if declaredMapSet.add(fullName) {
	  parentClass += class 'idName'  {
	    Map<'idClass', 'parentClassList' > map = new HashMap<'idClass', 'parentClassList' >();
	    
	    boolean add('parentClass' addObject){
	      synchronized this {
	        if map.containsKey(('idClass')addObject.`getIdStatement`) == false {
	          map.put(('idClass')addObject.`getIdStatement`, new ArrayList<'parentClass'>());
	        }
	        return map.get(('idClass')addObject.`getIdStatement`).add(addObject);
	      }
	    }
	    'parentClass' get('idClass' id, 'parentClass'.Factory factory){
	      synchronized this {
	        List<'parentClass'> result = map.get(id);
	        if result == null {
	          result = new ArrayList<'parentClass'>();
	          map.put(id, result);
	          'parentClass' newObject = factory.create();
	          result.add(newObject);
	          return newObject;
	        }
	        else {
	          if result.isEmpty(){
	            'parentClass' newObject = factory.create();
	            result.add(newObject);
	            return newObject;
	          }
	          else {
	            return result.get(0);
	          }
	        }
	      }
	    }
	   'parentClass' get('idClass' findId){
	      synchronized this {
	        List<'parentClass'> result = map.get(findId);
	        if result != null && result.isEmpty() == false{
	          return result.get(0);
	        }
	        else {
	          return null;
	        }
	      }
	    }
	    List<'parentClass'> getAll('idClass' findId){
	      synchronized this {
	        return map.get(findId);
	      }
	    }
	    boolean has('idClass' findId){
	      synchronized this {
	        return map.containsKey(findId) && map.get(findId).isEmpty()==false;
	      }
	    }
	    boolean remove('parentClass' addObject){
	      synchronized this {
	        if map.containsKey(('idClass')addObject.`getIdStatement`) {
	          return map.get(('idClass')addObject.`getIdStatement`).remove(addObject);
	        }
	        else {
	          return false;
	        }
	      }
	    }
	  }
	}
  }
> String percentify(String input){
	Double result = Double.parseDouble(input) / 100.0;
	return 'result';
  }
> String percentify(%T input){
	return percentify('input');
  }
> String negateOperator(String operator){
    if "==".equals(operator){
 	  return "!=";
 	}
 	else if "!=".equals(operator){
 	  return "==";
 	}
 	else if "<".equals(operator){
 	  return ">=";
 	}
 	else if "<=".equals(operator){
 	  return ">";
 	}
 	else if ">".equals(operator){
 	  return "<=";
 	}
 	else if ">=".equals(operator){
 	  return "<";
 	}
 	else if "&&".equals(operator){
 	  return "||";
 	}
 	else if "||".equals(operator){
 	  return "&&";
 	}
 	else {
 	  return "COULD NOT NEGATE ("+operator+")";
 	}
  }