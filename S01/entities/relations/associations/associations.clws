class 'packageName'.entities.relations.associations.Association < Source {
  enum Id {
  }
  interface Factory {
    Association create()?
  }
  String name;
  Set<Entity> members = new HashSet<Entity>();
  boolean add(Entity newMember){
    return members.add(newMember);
  }
  void remove(Entity toRemove){
    members.remove(toRemove);
  }
  boolean contains(Entity findMember){
    return members.contains(findMember);
  }
  Association.Id getId(){
    return null;
  }
  Boolean on(Events.Joined event){
    return false;
  }
  
}
class 'packageName'.entities.relations.associations.Associations {
  @Map<String,Association> complete = new HashMap<String,Association>();
  @Association create(String associationName){
    return null;
  }
  @void add(Association newAssociation){
    complete.put(newAssociation.getName(),newAssociation);
  }
  @Association get(String associationName){
    return complete.get(associationName);
  }
> void declaration(%T declarationToken){
	StringBuilder nameBuilder = new StringBuilder();
	declarationToken : element : associationName {
	  nameBuilder.append(%Helper.camelize('element'));
	}
    String associationName = 'nameBuilder';
    Associations += class 'associationName' Association {
      @Association.Id id = Association.Id.'associationName';
      @Integer productNumber = 0;
      String name;
      'associationName'(){}
      'associationName'(String name){this.name = name;}
      Association.Id getId(){
        return id;
      }
      
    }
    Association.Id += void 'associationName';
    Associations.'associationName' += class Factory < Association.Factory {
        Association create(){
          return new Associations.'associationName'();
        }
      }
    Associations.'associationName'::*() -= {
        if \name == null {
          \name = ''associationName'' + \productNumber;
          ++\productNumber;
        }
      }
    Associations::create(String) -= {
        if \associationName.equals('' 'associationName' '') {
          return new Associations.'associationName'();
        }
      }
    declarationToken : element : association_start {
      String specificName = 'element->specificName'+'associationName';
	  element : atom : onEvent {
	    Events.addToEventMethod('atom->event_names',Associations,{
	      Associations.add(new Associations.'associationName'('' 'specificName' ''));
	    });
	  }
	}
	declarationToken : element : association_join {
	  String specificName = 'element->specificName'+'associationName';
	  %Context eventContext = Events.addToEventMethod("load",Entity,{});
	  Events.addToEventMethod("load",Entity,{
	    if `getBooleanStatement(element->boolean_statement,eventContext)` {
	      join(null, Associations.get('' 'specificName' ''));
	    }
	  });
	}
	declarationToken : element : association_event {
	  element : atom : event_statement {
	    %Body bodyElementList = %Body ();
	    %Context eventContext = Events.addToEventMethod('atom->event_names',Associations.'associationName',{});
	    atom : quark : body_element {
		  bodyElementList.add(getBodyElement(quark, eventContext));
	    }
	    Events.addToEventMethod('atom->event_names',Associations.'associationName',bodyElementList);
	  }
	}
  }
> %Output getId(String name){
    return |Associations.'name'.id|;
  }
} 