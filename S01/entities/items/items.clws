import aspects/aspects


class 'packageName'.entities.items.Items {
  class 'packageName'.entities.items.Id {
  }
  @Item create(String itemName){
  	return null;
  }
> void setup(%Pass data){
	Entity.addGainLoss(Aspect, Item);
  }
> void declaration(%T itemToken){
	String className = %Helper.camelize('itemToken->itemName');
	Items += class 'className' Item {
		  @Items.Id id = new Items.Id();
		  'className'(){}
		}
	Treasury.paymentTypeDec(className,className,className);
	Items.'className'::*() += { \name = ''itemToken->itemName''; }
	Items::create(String) -= {
			if itemName.equals('' 'className' '') {
				return new Items.'className'();
			}}
	%Context itemContext = Items.'className';
#>	itemToken : element : animation { Items.'className'::*() += { \image = `Images.animation(element)`;} }#
	itemToken : element : hp { 
 		Items.'className'::*() +=  { \hp    = (int)(float) (`Entity.getStatRange(element->stat_range,"{NO_ENTITY_ALLOWED_IN_ITEM_BASE_STAT}",itemContext)`); }
		Items.'className'::*() +=  { \maxHp = \hp; } }
	itemToken : element : attack  { Items.'className'::*() += { \dmg    = `Entity.getStatRange(element->stat_range,itemContext)`; } }
	itemToken : element : defense { Items.'className'::*() += { \def    = `Entity.getStatRange(element->stat_range,itemContext)`; } }
	itemToken : element : value   { Items.'className'::*() += { \value  = (int)(float) (`Entity.getStatRange(element->stat_range,"{NO_ENTITY_ALLOWED_IN_ITEM_BASE_STAT}",itemContext)`); } }
	itemToken : element : weight  { Items.'className'::*() += { \weight = (int)(float) (`Entity.getStatRange(element->stat_range,"{NO_ENTITY_ALLOWED_IN_ITEM_BASE_STAT}",itemContext)`); } }
	itemToken : element : gain_aspect {
	   gain(element, "change_item","change_item", |getItem()|, Aspects, Items.'className');
    }
	itemToken : element : gain_trait {
	  gain(element, "equip", "unequip", |getHost()|, Traits, Items.'className');
    }
	itemToken : element : gain_attack {
	  gain(element, "equip", "unequip", |getHost()|, Attacks, Items.'className');
    }
   itemToken : element : event_statement {
	  %Body bodyElementList = %Body ();
	  %Context context = Events.addToEventMethod('element', Items.'className', bodyElementList); 
      element : atom : body_element {
		bodyElementList.add(getBodyElement(atom, context));
	  }
	  Events.addToEventMethod('element', Items.'className', bodyElementList);
    }
  }
> void gain(%T gainToken, String gainEventName, String loseEventName, %Output subject, %Class gainClass, %Class itemClass){
	String specificClassName = %Helper.camelize('gainToken');
	%Class specificClass = $gainClass.'specificClassName';
	%Class idClass = $gainClass.Id;
    String asList = gainClass.getName().evaluate().toLowerCase();
	%Context gainContext = Events.addToEventMethod(gainEventName, itemClass, %Body ());
	%Context loseContext = Events.addToEventMethod(loseEventName, itemClass, %Body ());
	if gainToken->boolean_statement == null {
	  Events.addToEventMethod(gainEventName, itemClass, {
		\event.`subject`.gain(new `specificClass.getFullName()`(), this);
	  });
	  Events.addToEventMethod(loseEventName, itemClass, {
		\event.`subject`.lose(`specificClass.getFullName()`.id,this);
	  });
	}
	else {
      gainToken : atom : boolean_statement {
		%Output gainHeader = getBooleanStatement(atom, gainContext);
		%Output loseHeader = getBooleanStatement(atom, loseContext);
		Events.addToEventMethod(gainEventName, itemClass, {
		  if `getBooleanStatement(atom, false, gainContext)` &&! \event.`subject`.has(`specificClass.getFullName()`.id) {
			\event.`subject`.gain(new 'specificClass'(), this);
		  }
	    });
		Events.addToEventMethod(loseEventName, itemClass, {
			if `getBooleanStatement(atom, true, gainContext)` && \event.`subject`.has(`specificClass.getFullName()`.id) {
				\event.`subject`.lose(`specificClass.getFullName()`.id, this);
			}
		});
	  }
	}
  }
}
class 'packageName'.entities.items.Item < Source {
  String name = null;
  Entity equipper = null;
  Integer hp = null;
  Integer maxHp = null;
  Function<Entity,Float> dmg = null;
  Function<Entity,Float> def = null;
  Integer value = null;
  Integer weight = null;
  
  Float getDmg(Entity entity){
    return dmg.apply(entity);
  }
  Float getDef(Entity entity){
    return def.apply(entity);
  }
  void decreaseHp(Entity host, int amount){
    hp -= amount;
    on(new Events.ChangeItem(host, this));
  }
  
  Boolean on(Events.Equip event){
  	equipper = event.getHost();
  	return true;
  }
  Boolean on(Events.Unequip event){
    equipper = null;
    return true;
  }
  Boolean on(Events.ChangeItem event){
    return true;
  }
}