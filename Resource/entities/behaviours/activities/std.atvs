***Violent***
attacking(Float range) Attack
	~Attack target~
***Helping***
supporting Support
	~Keep everyone safe~
***Questing***
questing Quest
	~Go to certain places, do certain things, and reap their rewards.~
	+ Quest currentQuest = null
	succeed if currentQuest!=null & currentQuest->status == Quest.Status=>SUCCESS
	fail if failed | currentQuest!=null & currentQuest->status == Quest.Status=>FAIL
	step {
	  if currentQuest == null {
	    currentQuest = Quest<-(pick())
	    if currentQuest == null {
	      return false
	    }
	  }
	  return currentQuest.use(host,null)
	  
	}
***Tracking***
hunt(Criteria.Target criteriaToTarget, Criteria.Destination huntingGrounds, Float range, Events.Die.Listener deathListener, ActivityCriteria toSucceed) Attack
	~Hunt monsters until told otherwise.~
	+ Area.List toHuntLocations
	+ Area.List huntedLocations
	+ Area      toHunt
	succeed if toSucceed.test(this)
	load {
	  Area.List toAdd = event->host->location.getAreasWith(huntingGrounds,new Area.Comparators.Distance.Ascending(event->host->location), range)
	  toHuntLocations.addAll(toAdd)
	  if !toHuntLocations.isEmpty() {
	    toHunt = toHuntLocations.remove(0)
	  }
	}
	step {
	  if host->location->area != toHunt {
	    host start gotoArea toHunt
	  }
	  else {
	    Entity.List entitiesToTarget = host->location.getEntitiesWithin(50.0,criteriaToTarget)
	    if !entitiesToTarget.isEmpty() {
	      entitiesToTarget.sort(new Entity.Comparators.Distance.Ascending(host->location))
	      host start kill entitiesToTarget.get(0)
	    }
	    else {
	      Tiles.MonsterDen tileToKill = toHunt.getMonsterDen(huntingGrounds)
	      if tileToKill != null {
	        host start killDen tileToKill
	      }
	      else if !toHuntLocations.isEmpty() {
	        huntedLocations.add(toHunt)
  	        toHunt = toHuntLocations.remove(0)
	      }
	      else {
	        Area.List toAdd = host->location.getAreasWith(huntingGrounds,new Area.Comparators.Distance.Ascending(host->location), range)
	        toAdd.removeAll(huntedLocations)
	        if !toAdd.isEmpty() {
	          toHuntLocations.addAll(toAdd)
	          step(host)
	        }
	        else {
	          failed = true
	          return false
	        }
	      }
	    }
	    else {
	      failed = true
	      return false
	    }
	  }
	  return true
	}
***Violent***
kill(Entity toKill) Attack
	~Go kill one particular monster.~
	+ Activity chaseActivity = null
	succeed if toKill.isDead()
	load {
	  setTargetEntity(toKill)
	}
	listen {
	}
	idle {
	  Usable furthestUsable = getFurthestAvailableUsable(event->host,toKill)
	  if furthestUsable != null {
	    chaseActivity = host: start chasingEntity (25, toKill, furthestUsable.getRange(host))
	  }
	}
killDen(Tiles.MonsterDen toKill) Attack
	~Go kill one particular monster den.~
	+ Activity chaseActivity = null
	succeed if toKill.isDead()
	load {
	  setTargetDen(toKill)
	}
	idle {
	  Usable furthestUsable = getFurthestAvailableUsable(event->host,toKill)
	  if furthestUsable != null {
	    chaseActivity = event->host start chasingTile (25, toKill, furthestUsable.getRange(event->host))
	  }
	}
removeTerrain(Tiles.Terrain toKill) Attack
	~Go kill one particular monster den.~
	+ Activity chaseActivity = null
	+ Floor floor = null
	succeed if floor->terrain != toKill
	load {
	  floor = toKill->floorTile
	  setTargetTerrain(toKill)
	}
	idle {
	  Usable furthestUsable = getFurthestAvailableUsable(event->host,toKill)
	  if furthestUsable != null {
	    chaseActivity = event->host start chasingTile (25, toKill, furthestUsable.getRange(event->host))
	  }
	}
***Tracking***
chasingEntity(Integer ticks, Entity toChase, Float successRange)
	~Get close to one monster(disregard the path).~
	succeed if host->location.getDistanceTo(toChase->location) <= successRange
	fail if ticks <= 0
	tick { ticks -= 1 }
	step {
	  host->location.step(host->walkingSpeed,toChase->location)
	  return true
	}
chasingTile(Integer ticks, Tile toChase, Float successRange)
	~Get close to one particular tile (disregard the path).~
	succeed if host->location.getDistanceTo(toChase) <= successRange
	fail if ticks <= 0
	tick { ticks -= 1 }
	step { 
	  host->location.step(host->walkingSpeed,toChase)
	  return true
	}
findAndGo(Criteria.Destination target)
	~Find a particular tile, follow path to get to it.~
	succeed if host->location.isCloseAsPossibleTo(destination)
	+ Area destinationArea = null
	+ Tiles.Floor.Way way = null
	+ Tiles.Floor destination
	load {
	  destination = Tiles.Floor<-host->location.getClosestTile(target)
	  if destination != null {
	    destinationArea = destination->area
	  }
	  else {
	    failed = true
	  }
	}
	step {
	  if host->location->area != destinationArea {
	    host start gotoArea destinationArea
	  }
	  else {
	    if way == null {
	      way = host->location.getWay(destination)
	    }
	    way.step(host)
	  }
	  return true
	}
goto(Tiles.Floor destination)
	~Find a particular tile, follow path to get to it.~
	succeed if host->location.isCloseAsPossibleTo(destination)
	+ Area destinationArea = null
	+ Tiles.Floor.Way way = null
	load {
	  destinationArea = destination->area
	}
	step {
	  if host->location->area != destinationArea {
	    host start gotoArea destinationArea
	  }
	  else {
	    if way == null {
	      way = host->location.getWay(destination)
	    }
	    way.step(host)
	  }
	  return true
	}
gotoArea(Area destination)
	~Find a particular tile, follow path to get to it.~
	succeed if host->location.getArea() == destination
	step {
	  if host->location->area != destination {
	    host start goto host->location->area.getEntryPointToward(destination)
	  }
	  return true
	}
Exploring(Integer ticks)
	~Go to unexplored parts of the map.~
	+ Tiles.Floor destination = null
	+ Tiles.Floor.Way way = null
	succeed if ticks <=0
	load {
	  destination = event->host->location.getUnexploredPoint()
	  way = event->host->location.getWay(destination)
	}
	idle {
	  destination = event->host->location.getUnexploredPoint()
	  if destination != null {
	    way = event->host->location.getWay(destination)
	  }
	  else {
	    failed = true
	  }
	}
	step {
	  if destination->area != host->location->area {
	    return false
	  }
	  ticks -= 1
	  if destination.hasOccupant(host) {
	    return false
	  }
	  else { 
	    way.step(host)
	    return true
	  }
	}
	listen {
	  if event is a *.TileHasOccupant  {
	    *.TileHasOccupant blocked = *.TileHasOccupant<-event
	    if host.isFriendlyWith(blocked->causalOccupant) {
	    }
	    else {
	      host start kill blocked->causalOccupant
	    }
	  }
	  else if event is a TerrainImpassable {
	    TerrainImpassable blocked = TerrainImpassable<-event
	    host start removeTerrain blocked->causalTerrain
	  }
	}