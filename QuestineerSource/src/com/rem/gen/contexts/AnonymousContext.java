package com.rem.gen.contexts;
import java.util.*;
import java.io.*;
import java.util.Set;
import java.util.List;
import java.util.Map;
import com.rem.gen.parser.Token;
import com.rem.gen.parser.Tokens;
import com.rem.gen.parser.Parser;

public abstract class AnonymousContext extends Parser.Context{
	public AnonymousContext(final Parser.NameList initalSuperAspectNamesRoot, final Parser.NameList initalSuperItemNamesRoot, final Parser.NameList initalSuperAffinityNamesRoot, final Parser.NameList initalSuperConditionNamesRoot, final Parser.NameList initalSuperTraitNamesRoot, final Parser.NameList initalSuperActivityTypeNamesRoot, final Parser.NameList initalSuperActivityNamesRoot, final Parser.NameList initalSuperAttackNamesRoot, final Parser.NameList initalSuperSupportNamesRoot, final Parser.NameList initalSuperSkillNamesRoot, final Parser.NameList initalSuperAssociationNamesRoot, final Parser.NameList initalSuperReasonNamesRoot, final Parser.NameList initalSuperHeroStatRoot, final Parser.NameList initalSuperRoomNamesRoot, final Parser.NameList initalSuperTrailNamesRoot, final Parser.NameList initalSuperStructureNamesRoot, final Parser.NameList initalSuperMapNamesRoot, final Parser.NameList initalSuperAreaNamesRoot, final Parser.NameList initalSuperSidingNamesRoot, final Parser.NameList initalSuperTileNamesRoot, final Parser.NameList initalSuperTileSymbolsRoot, final Parser.NameList initalSuperPaymentLongTypeNamesRoot, final Parser.NameList initalSuperPaymentShortTypeNamesRoot, final Parser.NameList initalSuperEventNamesRoot, final Parser.NameList initalSuperImageNamesRoot) {
		super(initalSuperAspectNamesRoot, initalSuperItemNamesRoot, initalSuperAffinityNamesRoot, initalSuperConditionNamesRoot, initalSuperTraitNamesRoot, initalSuperActivityTypeNamesRoot, initalSuperActivityNamesRoot, initalSuperAttackNamesRoot, initalSuperSupportNamesRoot, initalSuperSkillNamesRoot, initalSuperAssociationNamesRoot, initalSuperReasonNamesRoot, initalSuperHeroStatRoot, initalSuperRoomNamesRoot, initalSuperTrailNamesRoot, initalSuperStructureNamesRoot, initalSuperMapNamesRoot, initalSuperAreaNamesRoot, initalSuperSidingNamesRoot, initalSuperTileNamesRoot, initalSuperTileSymbolsRoot, initalSuperPaymentLongTypeNamesRoot, initalSuperPaymentShortTypeNamesRoot, initalSuperEventNamesRoot, initalSuperImageNamesRoot);
	}
	public AnonymousContext() {
	}
	public void parse__anonymous_190() {
		int _position__anonymous_190 = -1;
		Token.Parsed _token__anonymous_190 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_190=_position;
		_token__anonymous_190=_token;
		_token=new Tokens.Name.MapSelectorToken();
		if(_pass==FIRST_PASS) {
			String _result = _preparsed_NAME.get(_position);
			if(_result==null) {
				_state=FAILED;
			}
			else {
				Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
				_token.add(_position,_first_pass_token);
				_position+=_result.length();
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
		}
		else if(_pass==SECOND_PASS) {
			_list_name_result=_preparsed_NAME.get(_position);
			if(_list_name_result!=null&&map_names.contains(_list_name_result)) {
				if(_position+_list_name_result.length()<_inputLength) {
					int _next_char = _inputArray[_position+_list_name_result.length()];
					if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,new Tokens.Name.MapNamesToken(_list_name_result));
					_position+=_list_name_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"map_names");
					_furthestPosition=_position;
				}
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"statement(_anonymous_190)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_190;
		}
		else {
			int _state_206 = _state;
			parse__anonymous_191();
			if(_state_206==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"statement(_anonymous_190)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_190;
			}
			else {
				parse_tile_id_choice();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"statement(_anonymous_190)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_190;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_190.add(_position__anonymous_190,_token);
		}
		_token=_token__anonymous_190;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_190);
			association_names.reject(_position__anonymous_190);
			room_names.reject(_position__anonymous_190);
			activity_names.reject(_position__anonymous_190);
			siding_names.reject(_position__anonymous_190);
			item_names.reject(_position__anonymous_190);
			aspect_names.reject(_position__anonymous_190);
			affinity_names.reject(_position__anonymous_190);
			activity_type_names.reject(_position__anonymous_190);
			trail_names.reject(_position__anonymous_190);
			attack_names.reject(_position__anonymous_190);
			reason_names.reject(_position__anonymous_190);
			trait_names.reject(_position__anonymous_190);
			condition_names.reject(_position__anonymous_190);
			payment_short_type_names.reject(_position__anonymous_190);
			skill_names.reject(_position__anonymous_190);
			map_names.reject(_position__anonymous_190);
			event_names.reject(_position__anonymous_190);
			image_names.reject(_position__anonymous_190);
			tile_symbols.reject(_position__anonymous_190);
			payment_long_type_names.reject(_position__anonymous_190);
			area_names.reject(_position__anonymous_190);
			structure_names.reject(_position__anonymous_190);
			tile_names.reject(_position__anonymous_190);
			hero_stat.reject(_position__anonymous_190);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_190);
			association_names.accept(_position__anonymous_190);
			room_names.accept(_position__anonymous_190);
			activity_names.accept(_position__anonymous_190);
			siding_names.accept(_position__anonymous_190);
			item_names.accept(_position__anonymous_190);
			aspect_names.accept(_position__anonymous_190);
			affinity_names.accept(_position__anonymous_190);
			activity_type_names.accept(_position__anonymous_190);
			trail_names.accept(_position__anonymous_190);
			attack_names.accept(_position__anonymous_190);
			reason_names.accept(_position__anonymous_190);
			trait_names.accept(_position__anonymous_190);
			condition_names.accept(_position__anonymous_190);
			payment_short_type_names.accept(_position__anonymous_190);
			skill_names.accept(_position__anonymous_190);
			map_names.accept(_position__anonymous_190);
			event_names.accept(_position__anonymous_190);
			image_names.accept(_position__anonymous_190);
			tile_symbols.accept(_position__anonymous_190);
			payment_long_type_names.accept(_position__anonymous_190);
			area_names.accept(_position__anonymous_190);
			structure_names.accept(_position__anonymous_190);
			tile_names.accept(_position__anonymous_190);
			hero_stat.accept(_position__anonymous_190);
		}
	}
	public void parse__anonymous_195() {
		int _position__anonymous_195 = -1;
		Token.Parsed _token__anonymous_195 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_195=_position;
		_token__anonymous_195=_token;
		_token=new Tokens.Name.ExactToken();
		if(_position+4-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='t') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='r') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='u') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='e') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_136.SYNTAX);
			_position=_position+4;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain true");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_call(_anonymous_195)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_195;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_195.add(_position__anonymous_195,_token);
		}
		_token=_token__anonymous_195;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_195);
			association_names.reject(_position__anonymous_195);
			room_names.reject(_position__anonymous_195);
			activity_names.reject(_position__anonymous_195);
			siding_names.reject(_position__anonymous_195);
			item_names.reject(_position__anonymous_195);
			aspect_names.reject(_position__anonymous_195);
			affinity_names.reject(_position__anonymous_195);
			activity_type_names.reject(_position__anonymous_195);
			trail_names.reject(_position__anonymous_195);
			attack_names.reject(_position__anonymous_195);
			reason_names.reject(_position__anonymous_195);
			trait_names.reject(_position__anonymous_195);
			condition_names.reject(_position__anonymous_195);
			payment_short_type_names.reject(_position__anonymous_195);
			skill_names.reject(_position__anonymous_195);
			map_names.reject(_position__anonymous_195);
			event_names.reject(_position__anonymous_195);
			image_names.reject(_position__anonymous_195);
			tile_symbols.reject(_position__anonymous_195);
			payment_long_type_names.reject(_position__anonymous_195);
			area_names.reject(_position__anonymous_195);
			structure_names.reject(_position__anonymous_195);
			tile_names.reject(_position__anonymous_195);
			hero_stat.reject(_position__anonymous_195);
			_state=SUCCESS;
			_position__anonymous_195=_position;
			_token__anonymous_195=_token;
			_token=new Tokens.Name.ExactToken();
			if(_position+5-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='f') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='a') {
					_state=FAILED;
				}
				if(_inputArray[_position+2]!='l') {
					_state=FAILED;
				}
				if(_inputArray[_position+3]!='s') {
					_state=FAILED;
				}
				if(_inputArray[_position+4]!='e') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_137.SYNTAX);
				_position=_position+5;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain false");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_call(_anonymous_195)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_195;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_195.add(_position__anonymous_195,_token);
			}
			_token=_token__anonymous_195;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_195);
				association_names.reject(_position__anonymous_195);
				room_names.reject(_position__anonymous_195);
				activity_names.reject(_position__anonymous_195);
				siding_names.reject(_position__anonymous_195);
				item_names.reject(_position__anonymous_195);
				aspect_names.reject(_position__anonymous_195);
				affinity_names.reject(_position__anonymous_195);
				activity_type_names.reject(_position__anonymous_195);
				trail_names.reject(_position__anonymous_195);
				attack_names.reject(_position__anonymous_195);
				reason_names.reject(_position__anonymous_195);
				trait_names.reject(_position__anonymous_195);
				condition_names.reject(_position__anonymous_195);
				payment_short_type_names.reject(_position__anonymous_195);
				skill_names.reject(_position__anonymous_195);
				map_names.reject(_position__anonymous_195);
				event_names.reject(_position__anonymous_195);
				image_names.reject(_position__anonymous_195);
				tile_symbols.reject(_position__anonymous_195);
				payment_long_type_names.reject(_position__anonymous_195);
				area_names.reject(_position__anonymous_195);
				structure_names.reject(_position__anonymous_195);
				tile_names.reject(_position__anonymous_195);
				hero_stat.reject(_position__anonymous_195);
				_state=SUCCESS;
				_position__anonymous_195=_position;
				_token__anonymous_195=_token;
				_token=new Tokens.Name.ExactToken();
				if(_position+4-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!='n') {
						_state=FAILED;
					}
					if(_inputArray[_position+1]!='u') {
						_state=FAILED;
					}
					if(_inputArray[_position+2]!='l') {
						_state=FAILED;
					}
					if(_inputArray[_position+3]!='l') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_92.SYNTAX);
					_position=_position+4;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain null");
						_furthestPosition=_position;
					}
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_call(_anonymous_195)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_195;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_195.add(_position__anonymous_195,_token);
				}
				_token=_token__anonymous_195;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_195);
					association_names.reject(_position__anonymous_195);
					room_names.reject(_position__anonymous_195);
					activity_names.reject(_position__anonymous_195);
					siding_names.reject(_position__anonymous_195);
					item_names.reject(_position__anonymous_195);
					aspect_names.reject(_position__anonymous_195);
					affinity_names.reject(_position__anonymous_195);
					activity_type_names.reject(_position__anonymous_195);
					trail_names.reject(_position__anonymous_195);
					attack_names.reject(_position__anonymous_195);
					reason_names.reject(_position__anonymous_195);
					trait_names.reject(_position__anonymous_195);
					condition_names.reject(_position__anonymous_195);
					payment_short_type_names.reject(_position__anonymous_195);
					skill_names.reject(_position__anonymous_195);
					map_names.reject(_position__anonymous_195);
					event_names.reject(_position__anonymous_195);
					image_names.reject(_position__anonymous_195);
					tile_symbols.reject(_position__anonymous_195);
					payment_long_type_names.reject(_position__anonymous_195);
					area_names.reject(_position__anonymous_195);
					structure_names.reject(_position__anonymous_195);
					tile_names.reject(_position__anonymous_195);
					hero_stat.reject(_position__anonymous_195);
					_state=SUCCESS;
					_position__anonymous_195=_position;
					_token__anonymous_195=_token;
					_token=new Tokens.Name.ExactToken();
					parse_FLOAT();
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_call(_anonymous_195)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_195;
					}
					else {
					}
					if(_state==SUCCESS) {
						_token__anonymous_195.add(_position__anonymous_195,_token);
					}
					_token=_token__anonymous_195;
					if(_state==FAILED) {
						support_names.reject(_position__anonymous_195);
						association_names.reject(_position__anonymous_195);
						room_names.reject(_position__anonymous_195);
						activity_names.reject(_position__anonymous_195);
						siding_names.reject(_position__anonymous_195);
						item_names.reject(_position__anonymous_195);
						aspect_names.reject(_position__anonymous_195);
						affinity_names.reject(_position__anonymous_195);
						activity_type_names.reject(_position__anonymous_195);
						trail_names.reject(_position__anonymous_195);
						attack_names.reject(_position__anonymous_195);
						reason_names.reject(_position__anonymous_195);
						trait_names.reject(_position__anonymous_195);
						condition_names.reject(_position__anonymous_195);
						payment_short_type_names.reject(_position__anonymous_195);
						skill_names.reject(_position__anonymous_195);
						map_names.reject(_position__anonymous_195);
						event_names.reject(_position__anonymous_195);
						image_names.reject(_position__anonymous_195);
						tile_symbols.reject(_position__anonymous_195);
						payment_long_type_names.reject(_position__anonymous_195);
						area_names.reject(_position__anonymous_195);
						structure_names.reject(_position__anonymous_195);
						tile_names.reject(_position__anonymous_195);
						hero_stat.reject(_position__anonymous_195);
						_state=SUCCESS;
						_position__anonymous_195=_position;
						_token__anonymous_195=_token;
						_token=new Tokens.Name.ExactToken();
						parse_INTEGER();
						if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_call(_anonymous_195)");
								_furthestPosition=_position;
							}
							_position=_position__anonymous_195;
						}
						else {
						}
						if(_state==SUCCESS) {
							_token__anonymous_195.add(_position__anonymous_195,_token);
						}
						_token=_token__anonymous_195;
						if(_state==FAILED) {
							support_names.reject(_position__anonymous_195);
							association_names.reject(_position__anonymous_195);
							room_names.reject(_position__anonymous_195);
							activity_names.reject(_position__anonymous_195);
							siding_names.reject(_position__anonymous_195);
							item_names.reject(_position__anonymous_195);
							aspect_names.reject(_position__anonymous_195);
							affinity_names.reject(_position__anonymous_195);
							activity_type_names.reject(_position__anonymous_195);
							trail_names.reject(_position__anonymous_195);
							attack_names.reject(_position__anonymous_195);
							reason_names.reject(_position__anonymous_195);
							trait_names.reject(_position__anonymous_195);
							condition_names.reject(_position__anonymous_195);
							payment_short_type_names.reject(_position__anonymous_195);
							skill_names.reject(_position__anonymous_195);
							map_names.reject(_position__anonymous_195);
							event_names.reject(_position__anonymous_195);
							image_names.reject(_position__anonymous_195);
							tile_symbols.reject(_position__anonymous_195);
							payment_long_type_names.reject(_position__anonymous_195);
							area_names.reject(_position__anonymous_195);
							structure_names.reject(_position__anonymous_195);
							tile_names.reject(_position__anonymous_195);
							hero_stat.reject(_position__anonymous_195);
						}
						else if(_state==SUCCESS) {
							support_names.accept(_position__anonymous_195);
							association_names.accept(_position__anonymous_195);
							room_names.accept(_position__anonymous_195);
							activity_names.accept(_position__anonymous_195);
							siding_names.accept(_position__anonymous_195);
							item_names.accept(_position__anonymous_195);
							aspect_names.accept(_position__anonymous_195);
							affinity_names.accept(_position__anonymous_195);
							activity_type_names.accept(_position__anonymous_195);
							trail_names.accept(_position__anonymous_195);
							attack_names.accept(_position__anonymous_195);
							reason_names.accept(_position__anonymous_195);
							trait_names.accept(_position__anonymous_195);
							condition_names.accept(_position__anonymous_195);
							payment_short_type_names.accept(_position__anonymous_195);
							skill_names.accept(_position__anonymous_195);
							map_names.accept(_position__anonymous_195);
							event_names.accept(_position__anonymous_195);
							image_names.accept(_position__anonymous_195);
							tile_symbols.accept(_position__anonymous_195);
							payment_long_type_names.accept(_position__anonymous_195);
							area_names.accept(_position__anonymous_195);
							structure_names.accept(_position__anonymous_195);
							tile_names.accept(_position__anonymous_195);
							hero_stat.accept(_position__anonymous_195);
						}
					}
				}
			}
		}
	}
	public void parse__anonymous_196() {
		int _position__anonymous_196 = -1;
		Token.Parsed _token__anonymous_196 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_196=_position;
		_token__anonymous_196=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+2-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='-') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='>') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_57.SYNTAX);
			_position=_position+2;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ->");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_call(_anonymous_196)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_196;
		}
		else {
			_token_NAME=_token;
			_token=new Tokens.Name.VariableNameToken();
			_position_NAME=_position;
			parse_NAME();
			if(_state==SUCCESS) {
				_token_NAME.add(_position_NAME,_token);
			}
			_token=_token_NAME;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_call(_anonymous_196)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_196;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_196.addAll(_token);
			_token__anonymous_196.setValue(_token.getValue());
		}
		_token=_token__anonymous_196;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_196);
			association_names.reject(_position__anonymous_196);
			room_names.reject(_position__anonymous_196);
			activity_names.reject(_position__anonymous_196);
			siding_names.reject(_position__anonymous_196);
			item_names.reject(_position__anonymous_196);
			aspect_names.reject(_position__anonymous_196);
			affinity_names.reject(_position__anonymous_196);
			activity_type_names.reject(_position__anonymous_196);
			trail_names.reject(_position__anonymous_196);
			attack_names.reject(_position__anonymous_196);
			reason_names.reject(_position__anonymous_196);
			trait_names.reject(_position__anonymous_196);
			condition_names.reject(_position__anonymous_196);
			payment_short_type_names.reject(_position__anonymous_196);
			skill_names.reject(_position__anonymous_196);
			map_names.reject(_position__anonymous_196);
			event_names.reject(_position__anonymous_196);
			image_names.reject(_position__anonymous_196);
			tile_symbols.reject(_position__anonymous_196);
			payment_long_type_names.reject(_position__anonymous_196);
			area_names.reject(_position__anonymous_196);
			structure_names.reject(_position__anonymous_196);
			tile_names.reject(_position__anonymous_196);
			hero_stat.reject(_position__anonymous_196);
			_state=SUCCESS;
			_position__anonymous_196=_position;
			_token__anonymous_196=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='.') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_69.SYNTAX);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain .");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_call(_anonymous_196)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_196;
			}
			else {
				parse_method();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_call(_anonymous_196)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_196;
				}
				else {
				}
			}
			if(_state==SUCCESS) {
				_token__anonymous_196.addAll(_token);
				_token__anonymous_196.setValue(_token.getValue());
			}
			_token=_token__anonymous_196;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_196);
				association_names.reject(_position__anonymous_196);
				room_names.reject(_position__anonymous_196);
				activity_names.reject(_position__anonymous_196);
				siding_names.reject(_position__anonymous_196);
				item_names.reject(_position__anonymous_196);
				aspect_names.reject(_position__anonymous_196);
				affinity_names.reject(_position__anonymous_196);
				activity_type_names.reject(_position__anonymous_196);
				trail_names.reject(_position__anonymous_196);
				attack_names.reject(_position__anonymous_196);
				reason_names.reject(_position__anonymous_196);
				trait_names.reject(_position__anonymous_196);
				condition_names.reject(_position__anonymous_196);
				payment_short_type_names.reject(_position__anonymous_196);
				skill_names.reject(_position__anonymous_196);
				map_names.reject(_position__anonymous_196);
				event_names.reject(_position__anonymous_196);
				image_names.reject(_position__anonymous_196);
				tile_symbols.reject(_position__anonymous_196);
				payment_long_type_names.reject(_position__anonymous_196);
				area_names.reject(_position__anonymous_196);
				structure_names.reject(_position__anonymous_196);
				tile_names.reject(_position__anonymous_196);
				hero_stat.reject(_position__anonymous_196);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_196);
				association_names.accept(_position__anonymous_196);
				room_names.accept(_position__anonymous_196);
				activity_names.accept(_position__anonymous_196);
				siding_names.accept(_position__anonymous_196);
				item_names.accept(_position__anonymous_196);
				aspect_names.accept(_position__anonymous_196);
				affinity_names.accept(_position__anonymous_196);
				activity_type_names.accept(_position__anonymous_196);
				trail_names.accept(_position__anonymous_196);
				attack_names.accept(_position__anonymous_196);
				reason_names.accept(_position__anonymous_196);
				trait_names.accept(_position__anonymous_196);
				condition_names.accept(_position__anonymous_196);
				payment_short_type_names.accept(_position__anonymous_196);
				skill_names.accept(_position__anonymous_196);
				map_names.accept(_position__anonymous_196);
				event_names.accept(_position__anonymous_196);
				image_names.accept(_position__anonymous_196);
				tile_symbols.accept(_position__anonymous_196);
				payment_long_type_names.accept(_position__anonymous_196);
				area_names.accept(_position__anonymous_196);
				structure_names.accept(_position__anonymous_196);
				tile_names.accept(_position__anonymous_196);
				hero_stat.accept(_position__anonymous_196);
			}
		}
	}
	public void parse__anonymous_197() {
		int _position__anonymous_197 = -1;
		Token.Parsed _token__anonymous_197 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_197=_position;
		_token__anonymous_197=_token;
		_token=new Tokens.Name.CastToken();
		parse_type_name();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_call_element(_anonymous_197)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_197;
		}
		else {
			if(_position+2-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='<') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='-') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_138.SYNTAX);
				_position=_position+2;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain <-");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_call_element(_anonymous_197)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_197;
			}
			else {
				parse_statement();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_call_element(_anonymous_197)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_197;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_197.add(_position__anonymous_197,_token);
		}
		_token=_token__anonymous_197;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_197);
			association_names.reject(_position__anonymous_197);
			room_names.reject(_position__anonymous_197);
			activity_names.reject(_position__anonymous_197);
			siding_names.reject(_position__anonymous_197);
			item_names.reject(_position__anonymous_197);
			aspect_names.reject(_position__anonymous_197);
			affinity_names.reject(_position__anonymous_197);
			activity_type_names.reject(_position__anonymous_197);
			trail_names.reject(_position__anonymous_197);
			attack_names.reject(_position__anonymous_197);
			reason_names.reject(_position__anonymous_197);
			trait_names.reject(_position__anonymous_197);
			condition_names.reject(_position__anonymous_197);
			payment_short_type_names.reject(_position__anonymous_197);
			skill_names.reject(_position__anonymous_197);
			map_names.reject(_position__anonymous_197);
			event_names.reject(_position__anonymous_197);
			image_names.reject(_position__anonymous_197);
			tile_symbols.reject(_position__anonymous_197);
			payment_long_type_names.reject(_position__anonymous_197);
			area_names.reject(_position__anonymous_197);
			structure_names.reject(_position__anonymous_197);
			tile_names.reject(_position__anonymous_197);
			hero_stat.reject(_position__anonymous_197);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_197);
			association_names.accept(_position__anonymous_197);
			room_names.accept(_position__anonymous_197);
			activity_names.accept(_position__anonymous_197);
			siding_names.accept(_position__anonymous_197);
			item_names.accept(_position__anonymous_197);
			aspect_names.accept(_position__anonymous_197);
			affinity_names.accept(_position__anonymous_197);
			activity_type_names.accept(_position__anonymous_197);
			trail_names.accept(_position__anonymous_197);
			attack_names.accept(_position__anonymous_197);
			reason_names.accept(_position__anonymous_197);
			trait_names.accept(_position__anonymous_197);
			condition_names.accept(_position__anonymous_197);
			payment_short_type_names.accept(_position__anonymous_197);
			skill_names.accept(_position__anonymous_197);
			map_names.accept(_position__anonymous_197);
			event_names.accept(_position__anonymous_197);
			image_names.accept(_position__anonymous_197);
			tile_symbols.accept(_position__anonymous_197);
			payment_long_type_names.accept(_position__anonymous_197);
			area_names.accept(_position__anonymous_197);
			structure_names.accept(_position__anonymous_197);
			tile_names.accept(_position__anonymous_197);
			hero_stat.accept(_position__anonymous_197);
		}
	}
	public void parse__anonymous_198() {
		int _position__anonymous_198 = -1;
		Token.Parsed _token__anonymous_198 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_198=_position;
		_token__anonymous_198=_token;
		_token=new Tokens.Name.AccessStaticToken();
		parse_type_name();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_call_element(_anonymous_198)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_198;
		}
		else {
			if(_position+2-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='=') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='>') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_139.SYNTAX);
				_position=_position+2;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain =>");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_call_element(_anonymous_198)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_198;
			}
			else {
				_token_NAME=_token;
				_token=new Tokens.Name.VariableNameToken();
				_position_NAME=_position;
				parse_NAME();
				if(_state==SUCCESS) {
					_token_NAME.add(_position_NAME,_token);
				}
				_token=_token_NAME;
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_call_element(_anonymous_198)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_198;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_198.add(_position__anonymous_198,_token);
		}
		_token=_token__anonymous_198;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_198);
			association_names.reject(_position__anonymous_198);
			room_names.reject(_position__anonymous_198);
			activity_names.reject(_position__anonymous_198);
			siding_names.reject(_position__anonymous_198);
			item_names.reject(_position__anonymous_198);
			aspect_names.reject(_position__anonymous_198);
			affinity_names.reject(_position__anonymous_198);
			activity_type_names.reject(_position__anonymous_198);
			trail_names.reject(_position__anonymous_198);
			attack_names.reject(_position__anonymous_198);
			reason_names.reject(_position__anonymous_198);
			trait_names.reject(_position__anonymous_198);
			condition_names.reject(_position__anonymous_198);
			payment_short_type_names.reject(_position__anonymous_198);
			skill_names.reject(_position__anonymous_198);
			map_names.reject(_position__anonymous_198);
			event_names.reject(_position__anonymous_198);
			image_names.reject(_position__anonymous_198);
			tile_symbols.reject(_position__anonymous_198);
			payment_long_type_names.reject(_position__anonymous_198);
			area_names.reject(_position__anonymous_198);
			structure_names.reject(_position__anonymous_198);
			tile_names.reject(_position__anonymous_198);
			hero_stat.reject(_position__anonymous_198);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_198);
			association_names.accept(_position__anonymous_198);
			room_names.accept(_position__anonymous_198);
			activity_names.accept(_position__anonymous_198);
			siding_names.accept(_position__anonymous_198);
			item_names.accept(_position__anonymous_198);
			aspect_names.accept(_position__anonymous_198);
			affinity_names.accept(_position__anonymous_198);
			activity_type_names.accept(_position__anonymous_198);
			trail_names.accept(_position__anonymous_198);
			attack_names.accept(_position__anonymous_198);
			reason_names.accept(_position__anonymous_198);
			trait_names.accept(_position__anonymous_198);
			condition_names.accept(_position__anonymous_198);
			payment_short_type_names.accept(_position__anonymous_198);
			skill_names.accept(_position__anonymous_198);
			map_names.accept(_position__anonymous_198);
			event_names.accept(_position__anonymous_198);
			image_names.accept(_position__anonymous_198);
			tile_symbols.accept(_position__anonymous_198);
			payment_long_type_names.accept(_position__anonymous_198);
			area_names.accept(_position__anonymous_198);
			structure_names.accept(_position__anonymous_198);
			tile_names.accept(_position__anonymous_198);
			hero_stat.accept(_position__anonymous_198);
		}
	}
	public void parse__anonymous_191() {
		int _position__anonymous_191 = -1;
		Token.Parsed _token__anonymous_191 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_191=_position;
		_token__anonymous_191=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='.') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_69.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain .");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"statement(_anonymous_191)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_191;
		}
		else {
			if(_pass==FIRST_PASS) {
				String _result = _preparsed_NAME.get(_position);
				if(_result==null) {
					_state=FAILED;
				}
				else {
					Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
					_token.add(_position,_first_pass_token);
					_position+=_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else if(_pass==SECOND_PASS) {
				_list_name_result=_preparsed_NAME.get(_position);
				if(_list_name_result!=null&&area_names.contains(_list_name_result)) {
					if(_position+_list_name_result.length()<_inputLength) {
						int _next_char = _inputArray[_position+_list_name_result.length()];
						if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,new Tokens.Name.AreaNamesToken(_list_name_result));
						_position+=_list_name_result.length();
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
				}
				else {
					_state=FAILED;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"area_names");
						_furthestPosition=_position;
					}
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"statement(_anonymous_191)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_191;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_191.addAll(_token);
			_token__anonymous_191.setValue(_token.getValue());
		}
		_token=_token__anonymous_191;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_191);
			association_names.reject(_position__anonymous_191);
			room_names.reject(_position__anonymous_191);
			activity_names.reject(_position__anonymous_191);
			siding_names.reject(_position__anonymous_191);
			item_names.reject(_position__anonymous_191);
			aspect_names.reject(_position__anonymous_191);
			affinity_names.reject(_position__anonymous_191);
			activity_type_names.reject(_position__anonymous_191);
			trail_names.reject(_position__anonymous_191);
			attack_names.reject(_position__anonymous_191);
			reason_names.reject(_position__anonymous_191);
			trait_names.reject(_position__anonymous_191);
			condition_names.reject(_position__anonymous_191);
			payment_short_type_names.reject(_position__anonymous_191);
			skill_names.reject(_position__anonymous_191);
			map_names.reject(_position__anonymous_191);
			event_names.reject(_position__anonymous_191);
			image_names.reject(_position__anonymous_191);
			tile_symbols.reject(_position__anonymous_191);
			payment_long_type_names.reject(_position__anonymous_191);
			area_names.reject(_position__anonymous_191);
			structure_names.reject(_position__anonymous_191);
			tile_names.reject(_position__anonymous_191);
			hero_stat.reject(_position__anonymous_191);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_191);
			association_names.accept(_position__anonymous_191);
			room_names.accept(_position__anonymous_191);
			activity_names.accept(_position__anonymous_191);
			siding_names.accept(_position__anonymous_191);
			item_names.accept(_position__anonymous_191);
			aspect_names.accept(_position__anonymous_191);
			affinity_names.accept(_position__anonymous_191);
			activity_type_names.accept(_position__anonymous_191);
			trail_names.accept(_position__anonymous_191);
			attack_names.accept(_position__anonymous_191);
			reason_names.accept(_position__anonymous_191);
			trait_names.accept(_position__anonymous_191);
			condition_names.accept(_position__anonymous_191);
			payment_short_type_names.accept(_position__anonymous_191);
			skill_names.accept(_position__anonymous_191);
			map_names.accept(_position__anonymous_191);
			event_names.accept(_position__anonymous_191);
			image_names.accept(_position__anonymous_191);
			tile_symbols.accept(_position__anonymous_191);
			payment_long_type_names.accept(_position__anonymous_191);
			area_names.accept(_position__anonymous_191);
			structure_names.accept(_position__anonymous_191);
			tile_names.accept(_position__anonymous_191);
			hero_stat.accept(_position__anonymous_191);
		}
	}
	public void parse__anonymous_192() {
		int _position__anonymous_192 = -1;
		Token.Parsed _token__anonymous_192 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_192=_position;
		_token__anonymous_192=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse_operator();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"statement(_anonymous_192)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_192;
		}
		else {
			int _state_209 = _state;
			while(_position<_inputLength) {
				if(_position+1-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
					_position=_position+1;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
						_furthestPosition=_position;
					}
				}
				if(_state==FAILED) {
					break;
				}
			}
			if(_state_209==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"statement(_anonymous_192)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_192;
			}
			else {
				parse_statement();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"statement(_anonymous_192)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_192;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_192.addAll(_token);
			_token__anonymous_192.setValue(_token.getValue());
		}
		_token=_token__anonymous_192;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_192);
			association_names.reject(_position__anonymous_192);
			room_names.reject(_position__anonymous_192);
			activity_names.reject(_position__anonymous_192);
			siding_names.reject(_position__anonymous_192);
			item_names.reject(_position__anonymous_192);
			aspect_names.reject(_position__anonymous_192);
			affinity_names.reject(_position__anonymous_192);
			activity_type_names.reject(_position__anonymous_192);
			trail_names.reject(_position__anonymous_192);
			attack_names.reject(_position__anonymous_192);
			reason_names.reject(_position__anonymous_192);
			trait_names.reject(_position__anonymous_192);
			condition_names.reject(_position__anonymous_192);
			payment_short_type_names.reject(_position__anonymous_192);
			skill_names.reject(_position__anonymous_192);
			map_names.reject(_position__anonymous_192);
			event_names.reject(_position__anonymous_192);
			image_names.reject(_position__anonymous_192);
			tile_symbols.reject(_position__anonymous_192);
			payment_long_type_names.reject(_position__anonymous_192);
			area_names.reject(_position__anonymous_192);
			structure_names.reject(_position__anonymous_192);
			tile_names.reject(_position__anonymous_192);
			hero_stat.reject(_position__anonymous_192);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_192);
			association_names.accept(_position__anonymous_192);
			room_names.accept(_position__anonymous_192);
			activity_names.accept(_position__anonymous_192);
			siding_names.accept(_position__anonymous_192);
			item_names.accept(_position__anonymous_192);
			aspect_names.accept(_position__anonymous_192);
			affinity_names.accept(_position__anonymous_192);
			activity_type_names.accept(_position__anonymous_192);
			trail_names.accept(_position__anonymous_192);
			attack_names.accept(_position__anonymous_192);
			reason_names.accept(_position__anonymous_192);
			trait_names.accept(_position__anonymous_192);
			condition_names.accept(_position__anonymous_192);
			payment_short_type_names.accept(_position__anonymous_192);
			skill_names.accept(_position__anonymous_192);
			map_names.accept(_position__anonymous_192);
			event_names.accept(_position__anonymous_192);
			image_names.accept(_position__anonymous_192);
			tile_symbols.accept(_position__anonymous_192);
			payment_long_type_names.accept(_position__anonymous_192);
			area_names.accept(_position__anonymous_192);
			structure_names.accept(_position__anonymous_192);
			tile_names.accept(_position__anonymous_192);
			hero_stat.accept(_position__anonymous_192);
		}
	}
	public void parse__anonymous_193() {
		int _position__anonymous_193 = -1;
		Token.Parsed _token__anonymous_193 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_193=_position;
		_token__anonymous_193=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='=') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_103.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain =");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_declaration(_anonymous_193)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_193;
		}
		else {
			parse_statement();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_declaration(_anonymous_193)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_193;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_193.addAll(_token);
			_token__anonymous_193.setValue(_token.getValue());
		}
		_token=_token__anonymous_193;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_193);
			association_names.reject(_position__anonymous_193);
			room_names.reject(_position__anonymous_193);
			activity_names.reject(_position__anonymous_193);
			siding_names.reject(_position__anonymous_193);
			item_names.reject(_position__anonymous_193);
			aspect_names.reject(_position__anonymous_193);
			affinity_names.reject(_position__anonymous_193);
			activity_type_names.reject(_position__anonymous_193);
			trail_names.reject(_position__anonymous_193);
			attack_names.reject(_position__anonymous_193);
			reason_names.reject(_position__anonymous_193);
			trait_names.reject(_position__anonymous_193);
			condition_names.reject(_position__anonymous_193);
			payment_short_type_names.reject(_position__anonymous_193);
			skill_names.reject(_position__anonymous_193);
			map_names.reject(_position__anonymous_193);
			event_names.reject(_position__anonymous_193);
			image_names.reject(_position__anonymous_193);
			tile_symbols.reject(_position__anonymous_193);
			payment_long_type_names.reject(_position__anonymous_193);
			area_names.reject(_position__anonymous_193);
			structure_names.reject(_position__anonymous_193);
			tile_names.reject(_position__anonymous_193);
			hero_stat.reject(_position__anonymous_193);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_193);
			association_names.accept(_position__anonymous_193);
			room_names.accept(_position__anonymous_193);
			activity_names.accept(_position__anonymous_193);
			siding_names.accept(_position__anonymous_193);
			item_names.accept(_position__anonymous_193);
			aspect_names.accept(_position__anonymous_193);
			affinity_names.accept(_position__anonymous_193);
			activity_type_names.accept(_position__anonymous_193);
			trail_names.accept(_position__anonymous_193);
			attack_names.accept(_position__anonymous_193);
			reason_names.accept(_position__anonymous_193);
			trait_names.accept(_position__anonymous_193);
			condition_names.accept(_position__anonymous_193);
			payment_short_type_names.accept(_position__anonymous_193);
			skill_names.accept(_position__anonymous_193);
			map_names.accept(_position__anonymous_193);
			event_names.accept(_position__anonymous_193);
			image_names.accept(_position__anonymous_193);
			tile_symbols.accept(_position__anonymous_193);
			payment_long_type_names.accept(_position__anonymous_193);
			area_names.accept(_position__anonymous_193);
			structure_names.accept(_position__anonymous_193);
			tile_names.accept(_position__anonymous_193);
			hero_stat.accept(_position__anonymous_193);
		}
	}
	public void parse__anonymous_194() {
		int _position__anonymous_194 = -1;
		Token.Parsed _token__anonymous_194 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_194=_position;
		_token__anonymous_194=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+2-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='-') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='>') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_57.SYNTAX);
			_position=_position+2;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ->");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_call(_anonymous_194)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_194;
		}
		else {
			_token_NAME=_token;
			_token=new Tokens.Name.VariableNameToken();
			_position_NAME=_position;
			parse_NAME();
			if(_state==SUCCESS) {
				_token_NAME.add(_position_NAME,_token);
			}
			_token=_token_NAME;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_call(_anonymous_194)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_194;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_194.addAll(_token);
			_token__anonymous_194.setValue(_token.getValue());
		}
		_token=_token__anonymous_194;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_194);
			association_names.reject(_position__anonymous_194);
			room_names.reject(_position__anonymous_194);
			activity_names.reject(_position__anonymous_194);
			siding_names.reject(_position__anonymous_194);
			item_names.reject(_position__anonymous_194);
			aspect_names.reject(_position__anonymous_194);
			affinity_names.reject(_position__anonymous_194);
			activity_type_names.reject(_position__anonymous_194);
			trail_names.reject(_position__anonymous_194);
			attack_names.reject(_position__anonymous_194);
			reason_names.reject(_position__anonymous_194);
			trait_names.reject(_position__anonymous_194);
			condition_names.reject(_position__anonymous_194);
			payment_short_type_names.reject(_position__anonymous_194);
			skill_names.reject(_position__anonymous_194);
			map_names.reject(_position__anonymous_194);
			event_names.reject(_position__anonymous_194);
			image_names.reject(_position__anonymous_194);
			tile_symbols.reject(_position__anonymous_194);
			payment_long_type_names.reject(_position__anonymous_194);
			area_names.reject(_position__anonymous_194);
			structure_names.reject(_position__anonymous_194);
			tile_names.reject(_position__anonymous_194);
			hero_stat.reject(_position__anonymous_194);
			_state=SUCCESS;
			_position__anonymous_194=_position;
			_token__anonymous_194=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='.') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_69.SYNTAX);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain .");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_call(_anonymous_194)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_194;
			}
			else {
				parse_method();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_call(_anonymous_194)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_194;
				}
				else {
				}
			}
			if(_state==SUCCESS) {
				_token__anonymous_194.addAll(_token);
				_token__anonymous_194.setValue(_token.getValue());
			}
			_token=_token__anonymous_194;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_194);
				association_names.reject(_position__anonymous_194);
				room_names.reject(_position__anonymous_194);
				activity_names.reject(_position__anonymous_194);
				siding_names.reject(_position__anonymous_194);
				item_names.reject(_position__anonymous_194);
				aspect_names.reject(_position__anonymous_194);
				affinity_names.reject(_position__anonymous_194);
				activity_type_names.reject(_position__anonymous_194);
				trail_names.reject(_position__anonymous_194);
				attack_names.reject(_position__anonymous_194);
				reason_names.reject(_position__anonymous_194);
				trait_names.reject(_position__anonymous_194);
				condition_names.reject(_position__anonymous_194);
				payment_short_type_names.reject(_position__anonymous_194);
				skill_names.reject(_position__anonymous_194);
				map_names.reject(_position__anonymous_194);
				event_names.reject(_position__anonymous_194);
				image_names.reject(_position__anonymous_194);
				tile_symbols.reject(_position__anonymous_194);
				payment_long_type_names.reject(_position__anonymous_194);
				area_names.reject(_position__anonymous_194);
				structure_names.reject(_position__anonymous_194);
				tile_names.reject(_position__anonymous_194);
				hero_stat.reject(_position__anonymous_194);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_194);
				association_names.accept(_position__anonymous_194);
				room_names.accept(_position__anonymous_194);
				activity_names.accept(_position__anonymous_194);
				siding_names.accept(_position__anonymous_194);
				item_names.accept(_position__anonymous_194);
				aspect_names.accept(_position__anonymous_194);
				affinity_names.accept(_position__anonymous_194);
				activity_type_names.accept(_position__anonymous_194);
				trail_names.accept(_position__anonymous_194);
				attack_names.accept(_position__anonymous_194);
				reason_names.accept(_position__anonymous_194);
				trait_names.accept(_position__anonymous_194);
				condition_names.accept(_position__anonymous_194);
				payment_short_type_names.accept(_position__anonymous_194);
				skill_names.accept(_position__anonymous_194);
				map_names.accept(_position__anonymous_194);
				event_names.accept(_position__anonymous_194);
				image_names.accept(_position__anonymous_194);
				tile_symbols.accept(_position__anonymous_194);
				payment_long_type_names.accept(_position__anonymous_194);
				area_names.accept(_position__anonymous_194);
				structure_names.accept(_position__anonymous_194);
				tile_names.accept(_position__anonymous_194);
				hero_stat.accept(_position__anonymous_194);
			}
		}
	}
	public void parse__anonymous_188() {
		int _position__anonymous_188 = -1;
		Token.Parsed _token__anonymous_188 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_188=_position;
		_token__anonymous_188=_token;
		_token=new Tokens.Name.RequireAssociationToken();
		int _state_205 = _state;
		parse_NOT();
		if(_state_205==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_188)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_188;
		}
		else {
			if(_pass==FIRST_PASS) {
				String _result = _preparsed_NAME.get(_position);
				if(_result==null) {
					_state=FAILED;
				}
				else {
					Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
					_token.add(_position,_first_pass_token);
					_position+=_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else if(_pass==SECOND_PASS) {
				_list_name_result=_preparsed_NAME.get(_position);
				if(_list_name_result!=null&&association_names.contains(_list_name_result)) {
					if(_position+_list_name_result.length()<_inputLength) {
						int _next_char = _inputArray[_position+_list_name_result.length()];
						if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,new Tokens.Name.AssociationNamesToken(_list_name_result));
						_position+=_list_name_result.length();
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
				}
				else {
					_state=FAILED;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"association_names");
						_furthestPosition=_position;
					}
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_188)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_188;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_188.add(_position__anonymous_188,_token);
		}
		_token=_token__anonymous_188;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_188);
			association_names.reject(_position__anonymous_188);
			room_names.reject(_position__anonymous_188);
			activity_names.reject(_position__anonymous_188);
			siding_names.reject(_position__anonymous_188);
			item_names.reject(_position__anonymous_188);
			aspect_names.reject(_position__anonymous_188);
			affinity_names.reject(_position__anonymous_188);
			activity_type_names.reject(_position__anonymous_188);
			trail_names.reject(_position__anonymous_188);
			attack_names.reject(_position__anonymous_188);
			reason_names.reject(_position__anonymous_188);
			trait_names.reject(_position__anonymous_188);
			condition_names.reject(_position__anonymous_188);
			payment_short_type_names.reject(_position__anonymous_188);
			skill_names.reject(_position__anonymous_188);
			map_names.reject(_position__anonymous_188);
			event_names.reject(_position__anonymous_188);
			image_names.reject(_position__anonymous_188);
			tile_symbols.reject(_position__anonymous_188);
			payment_long_type_names.reject(_position__anonymous_188);
			area_names.reject(_position__anonymous_188);
			structure_names.reject(_position__anonymous_188);
			tile_names.reject(_position__anonymous_188);
			hero_stat.reject(_position__anonymous_188);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_188);
			association_names.accept(_position__anonymous_188);
			room_names.accept(_position__anonymous_188);
			activity_names.accept(_position__anonymous_188);
			siding_names.accept(_position__anonymous_188);
			item_names.accept(_position__anonymous_188);
			aspect_names.accept(_position__anonymous_188);
			affinity_names.accept(_position__anonymous_188);
			activity_type_names.accept(_position__anonymous_188);
			trail_names.accept(_position__anonymous_188);
			attack_names.accept(_position__anonymous_188);
			reason_names.accept(_position__anonymous_188);
			trait_names.accept(_position__anonymous_188);
			condition_names.accept(_position__anonymous_188);
			payment_short_type_names.accept(_position__anonymous_188);
			skill_names.accept(_position__anonymous_188);
			map_names.accept(_position__anonymous_188);
			event_names.accept(_position__anonymous_188);
			image_names.accept(_position__anonymous_188);
			tile_symbols.accept(_position__anonymous_188);
			payment_long_type_names.accept(_position__anonymous_188);
			area_names.accept(_position__anonymous_188);
			structure_names.accept(_position__anonymous_188);
			tile_names.accept(_position__anonymous_188);
			hero_stat.accept(_position__anonymous_188);
		}
	}
	public void parse__anonymous_189() {
		int _position__anonymous_189 = -1;
		Token.Parsed _token__anonymous_189 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_189=_position;
		_token__anonymous_189=_token;
		_token=new Tokens.Name.EntitySelectorToken();
		if(_position+6-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='E') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='n') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='t') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='i') {
				_state=FAILED;
			}
			if(_inputArray[_position+4]!='t') {
				_state=FAILED;
			}
			if(_inputArray[_position+5]!='y') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_135.SYNTAX);
			_position=_position+6;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain Entity");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"statement(_anonymous_189)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_189;
		}
		else {
			parse_entity_id_choice();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"statement(_anonymous_189)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_189;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_189.add(_position__anonymous_189,_token);
		}
		_token=_token__anonymous_189;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_189);
			association_names.reject(_position__anonymous_189);
			room_names.reject(_position__anonymous_189);
			activity_names.reject(_position__anonymous_189);
			siding_names.reject(_position__anonymous_189);
			item_names.reject(_position__anonymous_189);
			aspect_names.reject(_position__anonymous_189);
			affinity_names.reject(_position__anonymous_189);
			activity_type_names.reject(_position__anonymous_189);
			trail_names.reject(_position__anonymous_189);
			attack_names.reject(_position__anonymous_189);
			reason_names.reject(_position__anonymous_189);
			trait_names.reject(_position__anonymous_189);
			condition_names.reject(_position__anonymous_189);
			payment_short_type_names.reject(_position__anonymous_189);
			skill_names.reject(_position__anonymous_189);
			map_names.reject(_position__anonymous_189);
			event_names.reject(_position__anonymous_189);
			image_names.reject(_position__anonymous_189);
			tile_symbols.reject(_position__anonymous_189);
			payment_long_type_names.reject(_position__anonymous_189);
			area_names.reject(_position__anonymous_189);
			structure_names.reject(_position__anonymous_189);
			tile_names.reject(_position__anonymous_189);
			hero_stat.reject(_position__anonymous_189);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_189);
			association_names.accept(_position__anonymous_189);
			room_names.accept(_position__anonymous_189);
			activity_names.accept(_position__anonymous_189);
			siding_names.accept(_position__anonymous_189);
			item_names.accept(_position__anonymous_189);
			aspect_names.accept(_position__anonymous_189);
			affinity_names.accept(_position__anonymous_189);
			activity_type_names.accept(_position__anonymous_189);
			trail_names.accept(_position__anonymous_189);
			attack_names.accept(_position__anonymous_189);
			reason_names.accept(_position__anonymous_189);
			trait_names.accept(_position__anonymous_189);
			condition_names.accept(_position__anonymous_189);
			payment_short_type_names.accept(_position__anonymous_189);
			skill_names.accept(_position__anonymous_189);
			map_names.accept(_position__anonymous_189);
			event_names.accept(_position__anonymous_189);
			image_names.accept(_position__anonymous_189);
			tile_symbols.accept(_position__anonymous_189);
			payment_long_type_names.accept(_position__anonymous_189);
			area_names.accept(_position__anonymous_189);
			structure_names.accept(_position__anonymous_189);
			tile_names.accept(_position__anonymous_189);
			hero_stat.accept(_position__anonymous_189);
		}
	}
	public void parse__anonymous_184() {
		int _position__anonymous_184 = -1;
		Token.Parsed _token__anonymous_184 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_184=_position;
		_token__anonymous_184=_token;
		_token=new Tokens.Name.RequireSkillToken();
		int _state_200 = _state;
		parse_NOT();
		if(_state_200==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_184)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_184;
		}
		else {
			if(_pass==FIRST_PASS) {
				String _result = _preparsed_NAME.get(_position);
				if(_result==null) {
					_state=FAILED;
				}
				else {
					Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
					_token.add(_position,_first_pass_token);
					_position+=_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else if(_pass==SECOND_PASS) {
				_list_name_result=_preparsed_NAME.get(_position);
				if(_list_name_result!=null&&skill_names.contains(_list_name_result)) {
					if(_position+_list_name_result.length()<_inputLength) {
						int _next_char = _inputArray[_position+_list_name_result.length()];
						if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,new Tokens.Name.SkillNamesToken(_list_name_result));
						_position+=_list_name_result.length();
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
				}
				else {
					_state=FAILED;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"skill_names");
						_furthestPosition=_position;
					}
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_184)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_184;
			}
			else {
				int _state_201 = _state;
				if(_position+5-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!='s') {
						_state=FAILED;
					}
					if(_inputArray[_position+1]!='k') {
						_state=FAILED;
					}
					if(_inputArray[_position+2]!='i') {
						_state=FAILED;
					}
					if(_inputArray[_position+3]!='l') {
						_state=FAILED;
					}
					if(_inputArray[_position+4]!='l') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_133.SYNTAX);
					_position=_position+5;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain skill");
						_furthestPosition=_position;
					}
				}
				if(_state_201==SUCCESS&&_state==FAILED) {
					_state=SUCCESS;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_184)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_184;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_184.add(_position__anonymous_184,_token);
		}
		_token=_token__anonymous_184;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_184);
			association_names.reject(_position__anonymous_184);
			room_names.reject(_position__anonymous_184);
			activity_names.reject(_position__anonymous_184);
			siding_names.reject(_position__anonymous_184);
			item_names.reject(_position__anonymous_184);
			aspect_names.reject(_position__anonymous_184);
			affinity_names.reject(_position__anonymous_184);
			activity_type_names.reject(_position__anonymous_184);
			trail_names.reject(_position__anonymous_184);
			attack_names.reject(_position__anonymous_184);
			reason_names.reject(_position__anonymous_184);
			trait_names.reject(_position__anonymous_184);
			condition_names.reject(_position__anonymous_184);
			payment_short_type_names.reject(_position__anonymous_184);
			skill_names.reject(_position__anonymous_184);
			map_names.reject(_position__anonymous_184);
			event_names.reject(_position__anonymous_184);
			image_names.reject(_position__anonymous_184);
			tile_symbols.reject(_position__anonymous_184);
			payment_long_type_names.reject(_position__anonymous_184);
			area_names.reject(_position__anonymous_184);
			structure_names.reject(_position__anonymous_184);
			tile_names.reject(_position__anonymous_184);
			hero_stat.reject(_position__anonymous_184);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_184);
			association_names.accept(_position__anonymous_184);
			room_names.accept(_position__anonymous_184);
			activity_names.accept(_position__anonymous_184);
			siding_names.accept(_position__anonymous_184);
			item_names.accept(_position__anonymous_184);
			aspect_names.accept(_position__anonymous_184);
			affinity_names.accept(_position__anonymous_184);
			activity_type_names.accept(_position__anonymous_184);
			trail_names.accept(_position__anonymous_184);
			attack_names.accept(_position__anonymous_184);
			reason_names.accept(_position__anonymous_184);
			trait_names.accept(_position__anonymous_184);
			condition_names.accept(_position__anonymous_184);
			payment_short_type_names.accept(_position__anonymous_184);
			skill_names.accept(_position__anonymous_184);
			map_names.accept(_position__anonymous_184);
			event_names.accept(_position__anonymous_184);
			image_names.accept(_position__anonymous_184);
			tile_symbols.accept(_position__anonymous_184);
			payment_long_type_names.accept(_position__anonymous_184);
			area_names.accept(_position__anonymous_184);
			structure_names.accept(_position__anonymous_184);
			tile_names.accept(_position__anonymous_184);
			hero_stat.accept(_position__anonymous_184);
		}
	}
	public void parse__anonymous_185() {
		int _position__anonymous_185 = -1;
		Token.Parsed _token__anonymous_185 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_185=_position;
		_token__anonymous_185=_token;
		_token=new Tokens.Name.RequireExpToken();
		int _state_202 = _state;
		parse_NOT();
		if(_state_202==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_185)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_185;
		}
		else {
			if(_pass==FIRST_PASS) {
				String _result = _preparsed_NAME.get(_position);
				if(_result==null) {
					_state=FAILED;
				}
				else {
					Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
					_token.add(_position,_first_pass_token);
					_position+=_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else if(_pass==SECOND_PASS) {
				_list_name_result=_preparsed_NAME.get(_position);
				if(_list_name_result!=null&&skill_names.contains(_list_name_result)) {
					if(_position+_list_name_result.length()<_inputLength) {
						int _next_char = _inputArray[_position+_list_name_result.length()];
						if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,new Tokens.Name.SkillNamesToken(_list_name_result));
						_position+=_list_name_result.length();
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
				}
				else {
					_state=FAILED;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"skill_names");
						_furthestPosition=_position;
					}
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_185)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_185;
			}
			else {
				if(_position+3-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!='e') {
						_state=FAILED;
					}
					if(_inputArray[_position+1]!='x') {
						_state=FAILED;
					}
					if(_inputArray[_position+2]!='p') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_128.SYNTAX);
					_position=_position+3;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain exp");
						_furthestPosition=_position;
					}
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_185)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_185;
				}
				else {
					parse_ORDINAL();
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_185)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_185;
					}
					else {
						parse_INTEGER();
						if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_185)");
								_furthestPosition=_position;
							}
							_position=_position__anonymous_185;
						}
						else {
						}
					}
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_185.add(_position__anonymous_185,_token);
		}
		_token=_token__anonymous_185;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_185);
			association_names.reject(_position__anonymous_185);
			room_names.reject(_position__anonymous_185);
			activity_names.reject(_position__anonymous_185);
			siding_names.reject(_position__anonymous_185);
			item_names.reject(_position__anonymous_185);
			aspect_names.reject(_position__anonymous_185);
			affinity_names.reject(_position__anonymous_185);
			activity_type_names.reject(_position__anonymous_185);
			trail_names.reject(_position__anonymous_185);
			attack_names.reject(_position__anonymous_185);
			reason_names.reject(_position__anonymous_185);
			trait_names.reject(_position__anonymous_185);
			condition_names.reject(_position__anonymous_185);
			payment_short_type_names.reject(_position__anonymous_185);
			skill_names.reject(_position__anonymous_185);
			map_names.reject(_position__anonymous_185);
			event_names.reject(_position__anonymous_185);
			image_names.reject(_position__anonymous_185);
			tile_symbols.reject(_position__anonymous_185);
			payment_long_type_names.reject(_position__anonymous_185);
			area_names.reject(_position__anonymous_185);
			structure_names.reject(_position__anonymous_185);
			tile_names.reject(_position__anonymous_185);
			hero_stat.reject(_position__anonymous_185);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_185);
			association_names.accept(_position__anonymous_185);
			room_names.accept(_position__anonymous_185);
			activity_names.accept(_position__anonymous_185);
			siding_names.accept(_position__anonymous_185);
			item_names.accept(_position__anonymous_185);
			aspect_names.accept(_position__anonymous_185);
			affinity_names.accept(_position__anonymous_185);
			activity_type_names.accept(_position__anonymous_185);
			trail_names.accept(_position__anonymous_185);
			attack_names.accept(_position__anonymous_185);
			reason_names.accept(_position__anonymous_185);
			trait_names.accept(_position__anonymous_185);
			condition_names.accept(_position__anonymous_185);
			payment_short_type_names.accept(_position__anonymous_185);
			skill_names.accept(_position__anonymous_185);
			map_names.accept(_position__anonymous_185);
			event_names.accept(_position__anonymous_185);
			image_names.accept(_position__anonymous_185);
			tile_symbols.accept(_position__anonymous_185);
			payment_long_type_names.accept(_position__anonymous_185);
			area_names.accept(_position__anonymous_185);
			structure_names.accept(_position__anonymous_185);
			tile_names.accept(_position__anonymous_185);
			hero_stat.accept(_position__anonymous_185);
		}
	}
	public void parse__anonymous_186() {
		int _position__anonymous_186 = -1;
		Token.Parsed _token__anonymous_186 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_186=_position;
		_token__anonymous_186=_token;
		_token=new Tokens.Name.RequireAttackToken();
		int _state_203 = _state;
		parse_NOT();
		if(_state_203==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_186)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_186;
		}
		else {
			if(_pass==FIRST_PASS) {
				String _result = _preparsed_NAME.get(_position);
				if(_result==null) {
					_state=FAILED;
				}
				else {
					Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
					_token.add(_position,_first_pass_token);
					_position+=_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else if(_pass==SECOND_PASS) {
				_list_name_result=_preparsed_NAME.get(_position);
				if(_list_name_result!=null&&attack_names.contains(_list_name_result)) {
					if(_position+_list_name_result.length()<_inputLength) {
						int _next_char = _inputArray[_position+_list_name_result.length()];
						if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,new Tokens.Name.AttackNamesToken(_list_name_result));
						_position+=_list_name_result.length();
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
				}
				else {
					_state=FAILED;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"attack_names");
						_furthestPosition=_position;
					}
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_186)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_186;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_186.add(_position__anonymous_186,_token);
		}
		_token=_token__anonymous_186;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_186);
			association_names.reject(_position__anonymous_186);
			room_names.reject(_position__anonymous_186);
			activity_names.reject(_position__anonymous_186);
			siding_names.reject(_position__anonymous_186);
			item_names.reject(_position__anonymous_186);
			aspect_names.reject(_position__anonymous_186);
			affinity_names.reject(_position__anonymous_186);
			activity_type_names.reject(_position__anonymous_186);
			trail_names.reject(_position__anonymous_186);
			attack_names.reject(_position__anonymous_186);
			reason_names.reject(_position__anonymous_186);
			trait_names.reject(_position__anonymous_186);
			condition_names.reject(_position__anonymous_186);
			payment_short_type_names.reject(_position__anonymous_186);
			skill_names.reject(_position__anonymous_186);
			map_names.reject(_position__anonymous_186);
			event_names.reject(_position__anonymous_186);
			image_names.reject(_position__anonymous_186);
			tile_symbols.reject(_position__anonymous_186);
			payment_long_type_names.reject(_position__anonymous_186);
			area_names.reject(_position__anonymous_186);
			structure_names.reject(_position__anonymous_186);
			tile_names.reject(_position__anonymous_186);
			hero_stat.reject(_position__anonymous_186);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_186);
			association_names.accept(_position__anonymous_186);
			room_names.accept(_position__anonymous_186);
			activity_names.accept(_position__anonymous_186);
			siding_names.accept(_position__anonymous_186);
			item_names.accept(_position__anonymous_186);
			aspect_names.accept(_position__anonymous_186);
			affinity_names.accept(_position__anonymous_186);
			activity_type_names.accept(_position__anonymous_186);
			trail_names.accept(_position__anonymous_186);
			attack_names.accept(_position__anonymous_186);
			reason_names.accept(_position__anonymous_186);
			trait_names.accept(_position__anonymous_186);
			condition_names.accept(_position__anonymous_186);
			payment_short_type_names.accept(_position__anonymous_186);
			skill_names.accept(_position__anonymous_186);
			map_names.accept(_position__anonymous_186);
			event_names.accept(_position__anonymous_186);
			image_names.accept(_position__anonymous_186);
			tile_symbols.accept(_position__anonymous_186);
			payment_long_type_names.accept(_position__anonymous_186);
			area_names.accept(_position__anonymous_186);
			structure_names.accept(_position__anonymous_186);
			tile_names.accept(_position__anonymous_186);
			hero_stat.accept(_position__anonymous_186);
		}
	}
	public void parse__anonymous_187() {
		int _position__anonymous_187 = -1;
		Token.Parsed _token__anonymous_187 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_187=_position;
		_token__anonymous_187=_token;
		_token=new Tokens.Name.RequireTraitToken();
		int _state_204 = _state;
		parse_NOT();
		if(_state_204==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_187)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_187;
		}
		else {
			if(_pass==FIRST_PASS) {
				String _result = _preparsed_NAME.get(_position);
				if(_result==null) {
					_state=FAILED;
				}
				else {
					Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
					_token.add(_position,_first_pass_token);
					_position+=_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else if(_pass==SECOND_PASS) {
				_list_name_result=_preparsed_NAME.get(_position);
				if(_list_name_result!=null&&trait_names.contains(_list_name_result)) {
					if(_position+_list_name_result.length()<_inputLength) {
						int _next_char = _inputArray[_position+_list_name_result.length()];
						if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,new Tokens.Name.TraitNamesToken(_list_name_result));
						_position+=_list_name_result.length();
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
				}
				else {
					_state=FAILED;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"trait_names");
						_furthestPosition=_position;
					}
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_187)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_187;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_187.add(_position__anonymous_187,_token);
		}
		_token=_token__anonymous_187;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_187);
			association_names.reject(_position__anonymous_187);
			room_names.reject(_position__anonymous_187);
			activity_names.reject(_position__anonymous_187);
			siding_names.reject(_position__anonymous_187);
			item_names.reject(_position__anonymous_187);
			aspect_names.reject(_position__anonymous_187);
			affinity_names.reject(_position__anonymous_187);
			activity_type_names.reject(_position__anonymous_187);
			trail_names.reject(_position__anonymous_187);
			attack_names.reject(_position__anonymous_187);
			reason_names.reject(_position__anonymous_187);
			trait_names.reject(_position__anonymous_187);
			condition_names.reject(_position__anonymous_187);
			payment_short_type_names.reject(_position__anonymous_187);
			skill_names.reject(_position__anonymous_187);
			map_names.reject(_position__anonymous_187);
			event_names.reject(_position__anonymous_187);
			image_names.reject(_position__anonymous_187);
			tile_symbols.reject(_position__anonymous_187);
			payment_long_type_names.reject(_position__anonymous_187);
			area_names.reject(_position__anonymous_187);
			structure_names.reject(_position__anonymous_187);
			tile_names.reject(_position__anonymous_187);
			hero_stat.reject(_position__anonymous_187);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_187);
			association_names.accept(_position__anonymous_187);
			room_names.accept(_position__anonymous_187);
			activity_names.accept(_position__anonymous_187);
			siding_names.accept(_position__anonymous_187);
			item_names.accept(_position__anonymous_187);
			aspect_names.accept(_position__anonymous_187);
			affinity_names.accept(_position__anonymous_187);
			activity_type_names.accept(_position__anonymous_187);
			trail_names.accept(_position__anonymous_187);
			attack_names.accept(_position__anonymous_187);
			reason_names.accept(_position__anonymous_187);
			trait_names.accept(_position__anonymous_187);
			condition_names.accept(_position__anonymous_187);
			payment_short_type_names.accept(_position__anonymous_187);
			skill_names.accept(_position__anonymous_187);
			map_names.accept(_position__anonymous_187);
			event_names.accept(_position__anonymous_187);
			image_names.accept(_position__anonymous_187);
			tile_symbols.accept(_position__anonymous_187);
			payment_long_type_names.accept(_position__anonymous_187);
			area_names.accept(_position__anonymous_187);
			structure_names.accept(_position__anonymous_187);
			tile_names.accept(_position__anonymous_187);
			hero_stat.accept(_position__anonymous_187);
		}
	}
	public void parse__anonymous_180() {
		int _position__anonymous_180 = -1;
		Token.Parsed _token__anonymous_180 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_180=_position;
		_token__anonymous_180=_token;
		_token=new Tokens.Name.RequireAssociationToken();
		int _state_197 = _state;
		parse_NOT();
		if(_state_197==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_180)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_180;
		}
		else {
			parse__anonymous_181();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_180)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_180;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_180.add(_position__anonymous_180,_token);
		}
		_token=_token__anonymous_180;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_180);
			association_names.reject(_position__anonymous_180);
			room_names.reject(_position__anonymous_180);
			activity_names.reject(_position__anonymous_180);
			siding_names.reject(_position__anonymous_180);
			item_names.reject(_position__anonymous_180);
			aspect_names.reject(_position__anonymous_180);
			affinity_names.reject(_position__anonymous_180);
			activity_type_names.reject(_position__anonymous_180);
			trail_names.reject(_position__anonymous_180);
			attack_names.reject(_position__anonymous_180);
			reason_names.reject(_position__anonymous_180);
			trait_names.reject(_position__anonymous_180);
			condition_names.reject(_position__anonymous_180);
			payment_short_type_names.reject(_position__anonymous_180);
			skill_names.reject(_position__anonymous_180);
			map_names.reject(_position__anonymous_180);
			event_names.reject(_position__anonymous_180);
			image_names.reject(_position__anonymous_180);
			tile_symbols.reject(_position__anonymous_180);
			payment_long_type_names.reject(_position__anonymous_180);
			area_names.reject(_position__anonymous_180);
			structure_names.reject(_position__anonymous_180);
			tile_names.reject(_position__anonymous_180);
			hero_stat.reject(_position__anonymous_180);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_180);
			association_names.accept(_position__anonymous_180);
			room_names.accept(_position__anonymous_180);
			activity_names.accept(_position__anonymous_180);
			siding_names.accept(_position__anonymous_180);
			item_names.accept(_position__anonymous_180);
			aspect_names.accept(_position__anonymous_180);
			affinity_names.accept(_position__anonymous_180);
			activity_type_names.accept(_position__anonymous_180);
			trail_names.accept(_position__anonymous_180);
			attack_names.accept(_position__anonymous_180);
			reason_names.accept(_position__anonymous_180);
			trait_names.accept(_position__anonymous_180);
			condition_names.accept(_position__anonymous_180);
			payment_short_type_names.accept(_position__anonymous_180);
			skill_names.accept(_position__anonymous_180);
			map_names.accept(_position__anonymous_180);
			event_names.accept(_position__anonymous_180);
			image_names.accept(_position__anonymous_180);
			tile_symbols.accept(_position__anonymous_180);
			payment_long_type_names.accept(_position__anonymous_180);
			area_names.accept(_position__anonymous_180);
			structure_names.accept(_position__anonymous_180);
			tile_names.accept(_position__anonymous_180);
			hero_stat.accept(_position__anonymous_180);
		}
	}
	public void parse__anonymous_181() {
		int _position__anonymous_181 = -1;
		Token.Parsed _token__anonymous_181 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_181=_position;
		_token__anonymous_181=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+11-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='s') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='s') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='o') {
				_state=FAILED;
			}
			if(_inputArray[_position+4]!='c') {
				_state=FAILED;
			}
			if(_inputArray[_position+5]!='i') {
				_state=FAILED;
			}
			if(_inputArray[_position+6]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+7]!='t') {
				_state=FAILED;
			}
			if(_inputArray[_position+8]!='i') {
				_state=FAILED;
			}
			if(_inputArray[_position+9]!='o') {
				_state=FAILED;
			}
			if(_inputArray[_position+10]!='n') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_131.SYNTAX);
			_position=_position+11;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain association");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_181)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_181;
		}
		else {
			if(_position+4-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='w') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='i') {
					_state=FAILED;
				}
				if(_inputArray[_position+2]!='t') {
					_state=FAILED;
				}
				if(_inputArray[_position+3]!='h') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_132.SYNTAX);
				_position=_position+4;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain with");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_181)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_181;
			}
			else {
				_token_NAME=_token;
				_token=new Tokens.Name.VariableNameToken();
				_position_NAME=_position;
				parse_NAME();
				if(_state==SUCCESS) {
					_token_NAME.add(_position_NAME,_token);
				}
				_token=_token_NAME;
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_181)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_181;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_181.addAll(_token);
			_token__anonymous_181.setValue(_token.getValue());
		}
		_token=_token__anonymous_181;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_181);
			association_names.reject(_position__anonymous_181);
			room_names.reject(_position__anonymous_181);
			activity_names.reject(_position__anonymous_181);
			siding_names.reject(_position__anonymous_181);
			item_names.reject(_position__anonymous_181);
			aspect_names.reject(_position__anonymous_181);
			affinity_names.reject(_position__anonymous_181);
			activity_type_names.reject(_position__anonymous_181);
			trail_names.reject(_position__anonymous_181);
			attack_names.reject(_position__anonymous_181);
			reason_names.reject(_position__anonymous_181);
			trait_names.reject(_position__anonymous_181);
			condition_names.reject(_position__anonymous_181);
			payment_short_type_names.reject(_position__anonymous_181);
			skill_names.reject(_position__anonymous_181);
			map_names.reject(_position__anonymous_181);
			event_names.reject(_position__anonymous_181);
			image_names.reject(_position__anonymous_181);
			tile_symbols.reject(_position__anonymous_181);
			payment_long_type_names.reject(_position__anonymous_181);
			area_names.reject(_position__anonymous_181);
			structure_names.reject(_position__anonymous_181);
			tile_names.reject(_position__anonymous_181);
			hero_stat.reject(_position__anonymous_181);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_181);
			association_names.accept(_position__anonymous_181);
			room_names.accept(_position__anonymous_181);
			activity_names.accept(_position__anonymous_181);
			siding_names.accept(_position__anonymous_181);
			item_names.accept(_position__anonymous_181);
			aspect_names.accept(_position__anonymous_181);
			affinity_names.accept(_position__anonymous_181);
			activity_type_names.accept(_position__anonymous_181);
			trail_names.accept(_position__anonymous_181);
			attack_names.accept(_position__anonymous_181);
			reason_names.accept(_position__anonymous_181);
			trait_names.accept(_position__anonymous_181);
			condition_names.accept(_position__anonymous_181);
			payment_short_type_names.accept(_position__anonymous_181);
			skill_names.accept(_position__anonymous_181);
			map_names.accept(_position__anonymous_181);
			event_names.accept(_position__anonymous_181);
			image_names.accept(_position__anonymous_181);
			tile_symbols.accept(_position__anonymous_181);
			payment_long_type_names.accept(_position__anonymous_181);
			area_names.accept(_position__anonymous_181);
			structure_names.accept(_position__anonymous_181);
			tile_names.accept(_position__anonymous_181);
			hero_stat.accept(_position__anonymous_181);
		}
	}
	public void parse__anonymous_182() {
		int _position__anonymous_182 = -1;
		Token.Parsed _token__anonymous_182 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_182=_position;
		_token__anonymous_182=_token;
		_token=new Tokens.Name.RequireStatToken();
		int _state_198 = _state;
		parse_NOT();
		if(_state_198==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_182)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_182;
		}
		else {
			if(_pass==FIRST_PASS) {
				String _result = _preparsed_NAME.get(_position);
				if(_result==null) {
					_state=FAILED;
				}
				else {
					Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
					_token.add(_position,_first_pass_token);
					_position+=_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else if(_pass==SECOND_PASS) {
				_list_name_result=_preparsed_NAME.get(_position);
				if(_list_name_result!=null&&hero_stat.contains(_list_name_result)) {
					if(_position+_list_name_result.length()<_inputLength) {
						int _next_char = _inputArray[_position+_list_name_result.length()];
						if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,new Tokens.Name.HeroStatToken(_list_name_result));
						_position+=_list_name_result.length();
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
				}
				else {
					_state=FAILED;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"hero_stat");
						_furthestPosition=_position;
					}
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_182)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_182;
			}
			else {
				parse_ORDINAL();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_182)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_182;
				}
				else {
					parse_INTEGER();
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_182)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_182;
					}
					else {
					}
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_182.add(_position__anonymous_182,_token);
		}
		_token=_token__anonymous_182;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_182);
			association_names.reject(_position__anonymous_182);
			room_names.reject(_position__anonymous_182);
			activity_names.reject(_position__anonymous_182);
			siding_names.reject(_position__anonymous_182);
			item_names.reject(_position__anonymous_182);
			aspect_names.reject(_position__anonymous_182);
			affinity_names.reject(_position__anonymous_182);
			activity_type_names.reject(_position__anonymous_182);
			trail_names.reject(_position__anonymous_182);
			attack_names.reject(_position__anonymous_182);
			reason_names.reject(_position__anonymous_182);
			trait_names.reject(_position__anonymous_182);
			condition_names.reject(_position__anonymous_182);
			payment_short_type_names.reject(_position__anonymous_182);
			skill_names.reject(_position__anonymous_182);
			map_names.reject(_position__anonymous_182);
			event_names.reject(_position__anonymous_182);
			image_names.reject(_position__anonymous_182);
			tile_symbols.reject(_position__anonymous_182);
			payment_long_type_names.reject(_position__anonymous_182);
			area_names.reject(_position__anonymous_182);
			structure_names.reject(_position__anonymous_182);
			tile_names.reject(_position__anonymous_182);
			hero_stat.reject(_position__anonymous_182);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_182);
			association_names.accept(_position__anonymous_182);
			room_names.accept(_position__anonymous_182);
			activity_names.accept(_position__anonymous_182);
			siding_names.accept(_position__anonymous_182);
			item_names.accept(_position__anonymous_182);
			aspect_names.accept(_position__anonymous_182);
			affinity_names.accept(_position__anonymous_182);
			activity_type_names.accept(_position__anonymous_182);
			trail_names.accept(_position__anonymous_182);
			attack_names.accept(_position__anonymous_182);
			reason_names.accept(_position__anonymous_182);
			trait_names.accept(_position__anonymous_182);
			condition_names.accept(_position__anonymous_182);
			payment_short_type_names.accept(_position__anonymous_182);
			skill_names.accept(_position__anonymous_182);
			map_names.accept(_position__anonymous_182);
			event_names.accept(_position__anonymous_182);
			image_names.accept(_position__anonymous_182);
			tile_symbols.accept(_position__anonymous_182);
			payment_long_type_names.accept(_position__anonymous_182);
			area_names.accept(_position__anonymous_182);
			structure_names.accept(_position__anonymous_182);
			tile_names.accept(_position__anonymous_182);
			hero_stat.accept(_position__anonymous_182);
		}
	}
	public void parse__anonymous_183() {
		int _position__anonymous_183 = -1;
		Token.Parsed _token__anonymous_183 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_183=_position;
		_token__anonymous_183=_token;
		_token=new Tokens.Name.RequireExpToken();
		int _state_199 = _state;
		parse_NOT();
		if(_state_199==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_183)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_183;
		}
		else {
			if(_pass==FIRST_PASS) {
				String _result = _preparsed_NAME.get(_position);
				if(_result==null) {
					_state=FAILED;
				}
				else {
					Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
					_token.add(_position,_first_pass_token);
					_position+=_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else if(_pass==SECOND_PASS) {
				_list_name_result=_preparsed_NAME.get(_position);
				if(_list_name_result!=null&&attack_names.contains(_list_name_result)) {
					if(_position+_list_name_result.length()<_inputLength) {
						int _next_char = _inputArray[_position+_list_name_result.length()];
						if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,new Tokens.Name.AttackNamesToken(_list_name_result));
						_position+=_list_name_result.length();
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
				}
				else {
					_state=FAILED;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"attack_names");
						_furthestPosition=_position;
					}
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_183)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_183;
			}
			else {
				if(_position+3-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!='e') {
						_state=FAILED;
					}
					if(_inputArray[_position+1]!='x') {
						_state=FAILED;
					}
					if(_inputArray[_position+2]!='p') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_128.SYNTAX);
					_position=_position+3;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain exp");
						_furthestPosition=_position;
					}
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_183)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_183;
				}
				else {
					parse_ORDINAL();
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_183)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_183;
					}
					else {
						parse_INTEGER();
						if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_183)");
								_furthestPosition=_position;
							}
							_position=_position__anonymous_183;
						}
						else {
						}
					}
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_183.add(_position__anonymous_183,_token);
		}
		_token=_token__anonymous_183;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_183);
			association_names.reject(_position__anonymous_183);
			room_names.reject(_position__anonymous_183);
			activity_names.reject(_position__anonymous_183);
			siding_names.reject(_position__anonymous_183);
			item_names.reject(_position__anonymous_183);
			aspect_names.reject(_position__anonymous_183);
			affinity_names.reject(_position__anonymous_183);
			activity_type_names.reject(_position__anonymous_183);
			trail_names.reject(_position__anonymous_183);
			attack_names.reject(_position__anonymous_183);
			reason_names.reject(_position__anonymous_183);
			trait_names.reject(_position__anonymous_183);
			condition_names.reject(_position__anonymous_183);
			payment_short_type_names.reject(_position__anonymous_183);
			skill_names.reject(_position__anonymous_183);
			map_names.reject(_position__anonymous_183);
			event_names.reject(_position__anonymous_183);
			image_names.reject(_position__anonymous_183);
			tile_symbols.reject(_position__anonymous_183);
			payment_long_type_names.reject(_position__anonymous_183);
			area_names.reject(_position__anonymous_183);
			structure_names.reject(_position__anonymous_183);
			tile_names.reject(_position__anonymous_183);
			hero_stat.reject(_position__anonymous_183);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_183);
			association_names.accept(_position__anonymous_183);
			room_names.accept(_position__anonymous_183);
			activity_names.accept(_position__anonymous_183);
			siding_names.accept(_position__anonymous_183);
			item_names.accept(_position__anonymous_183);
			aspect_names.accept(_position__anonymous_183);
			affinity_names.accept(_position__anonymous_183);
			activity_type_names.accept(_position__anonymous_183);
			trail_names.accept(_position__anonymous_183);
			attack_names.accept(_position__anonymous_183);
			reason_names.accept(_position__anonymous_183);
			trait_names.accept(_position__anonymous_183);
			condition_names.accept(_position__anonymous_183);
			payment_short_type_names.accept(_position__anonymous_183);
			skill_names.accept(_position__anonymous_183);
			map_names.accept(_position__anonymous_183);
			event_names.accept(_position__anonymous_183);
			image_names.accept(_position__anonymous_183);
			tile_symbols.accept(_position__anonymous_183);
			payment_long_type_names.accept(_position__anonymous_183);
			area_names.accept(_position__anonymous_183);
			structure_names.accept(_position__anonymous_183);
			tile_names.accept(_position__anonymous_183);
			hero_stat.accept(_position__anonymous_183);
		}
	}
	public void parse__anonymous_177() {
		int _position__anonymous_177 = -1;
		Token.Parsed _token__anonymous_177 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_177=_position;
		_token__anonymous_177=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+6-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='t') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='t') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+4]!='c') {
				_state=FAILED;
			}
			if(_inputArray[_position+5]!='k') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_127.SYNTAX);
			_position=_position+6;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain attack");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_177)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_177;
		}
		else {
			_token_NAME=_token;
			_token=new Tokens.Name.VariableNameToken();
			_position_NAME=_position;
			parse_NAME();
			if(_state==SUCCESS) {
				_token_NAME.add(_position_NAME,_token);
			}
			_token=_token_NAME;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_177)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_177;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_177.addAll(_token);
			_token__anonymous_177.setValue(_token.getValue());
		}
		_token=_token__anonymous_177;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_177);
			association_names.reject(_position__anonymous_177);
			room_names.reject(_position__anonymous_177);
			activity_names.reject(_position__anonymous_177);
			siding_names.reject(_position__anonymous_177);
			item_names.reject(_position__anonymous_177);
			aspect_names.reject(_position__anonymous_177);
			affinity_names.reject(_position__anonymous_177);
			activity_type_names.reject(_position__anonymous_177);
			trail_names.reject(_position__anonymous_177);
			attack_names.reject(_position__anonymous_177);
			reason_names.reject(_position__anonymous_177);
			trait_names.reject(_position__anonymous_177);
			condition_names.reject(_position__anonymous_177);
			payment_short_type_names.reject(_position__anonymous_177);
			skill_names.reject(_position__anonymous_177);
			map_names.reject(_position__anonymous_177);
			event_names.reject(_position__anonymous_177);
			image_names.reject(_position__anonymous_177);
			tile_symbols.reject(_position__anonymous_177);
			payment_long_type_names.reject(_position__anonymous_177);
			area_names.reject(_position__anonymous_177);
			structure_names.reject(_position__anonymous_177);
			tile_names.reject(_position__anonymous_177);
			hero_stat.reject(_position__anonymous_177);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_177);
			association_names.accept(_position__anonymous_177);
			room_names.accept(_position__anonymous_177);
			activity_names.accept(_position__anonymous_177);
			siding_names.accept(_position__anonymous_177);
			item_names.accept(_position__anonymous_177);
			aspect_names.accept(_position__anonymous_177);
			affinity_names.accept(_position__anonymous_177);
			activity_type_names.accept(_position__anonymous_177);
			trail_names.accept(_position__anonymous_177);
			attack_names.accept(_position__anonymous_177);
			reason_names.accept(_position__anonymous_177);
			trait_names.accept(_position__anonymous_177);
			condition_names.accept(_position__anonymous_177);
			payment_short_type_names.accept(_position__anonymous_177);
			skill_names.accept(_position__anonymous_177);
			map_names.accept(_position__anonymous_177);
			event_names.accept(_position__anonymous_177);
			image_names.accept(_position__anonymous_177);
			tile_symbols.accept(_position__anonymous_177);
			payment_long_type_names.accept(_position__anonymous_177);
			area_names.accept(_position__anonymous_177);
			structure_names.accept(_position__anonymous_177);
			tile_names.accept(_position__anonymous_177);
			hero_stat.accept(_position__anonymous_177);
		}
	}
	public void parse__anonymous_178() {
		int _position__anonymous_178 = -1;
		Token.Parsed _token__anonymous_178 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_178=_position;
		_token__anonymous_178=_token;
		_token=new Tokens.Name.RequireTraitToken();
		int _state_196 = _state;
		parse_NOT();
		if(_state_196==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_178)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_178;
		}
		else {
			parse__anonymous_179();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_178)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_178;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_178.add(_position__anonymous_178,_token);
		}
		_token=_token__anonymous_178;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_178);
			association_names.reject(_position__anonymous_178);
			room_names.reject(_position__anonymous_178);
			activity_names.reject(_position__anonymous_178);
			siding_names.reject(_position__anonymous_178);
			item_names.reject(_position__anonymous_178);
			aspect_names.reject(_position__anonymous_178);
			affinity_names.reject(_position__anonymous_178);
			activity_type_names.reject(_position__anonymous_178);
			trail_names.reject(_position__anonymous_178);
			attack_names.reject(_position__anonymous_178);
			reason_names.reject(_position__anonymous_178);
			trait_names.reject(_position__anonymous_178);
			condition_names.reject(_position__anonymous_178);
			payment_short_type_names.reject(_position__anonymous_178);
			skill_names.reject(_position__anonymous_178);
			map_names.reject(_position__anonymous_178);
			event_names.reject(_position__anonymous_178);
			image_names.reject(_position__anonymous_178);
			tile_symbols.reject(_position__anonymous_178);
			payment_long_type_names.reject(_position__anonymous_178);
			area_names.reject(_position__anonymous_178);
			structure_names.reject(_position__anonymous_178);
			tile_names.reject(_position__anonymous_178);
			hero_stat.reject(_position__anonymous_178);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_178);
			association_names.accept(_position__anonymous_178);
			room_names.accept(_position__anonymous_178);
			activity_names.accept(_position__anonymous_178);
			siding_names.accept(_position__anonymous_178);
			item_names.accept(_position__anonymous_178);
			aspect_names.accept(_position__anonymous_178);
			affinity_names.accept(_position__anonymous_178);
			activity_type_names.accept(_position__anonymous_178);
			trail_names.accept(_position__anonymous_178);
			attack_names.accept(_position__anonymous_178);
			reason_names.accept(_position__anonymous_178);
			trait_names.accept(_position__anonymous_178);
			condition_names.accept(_position__anonymous_178);
			payment_short_type_names.accept(_position__anonymous_178);
			skill_names.accept(_position__anonymous_178);
			map_names.accept(_position__anonymous_178);
			event_names.accept(_position__anonymous_178);
			image_names.accept(_position__anonymous_178);
			tile_symbols.accept(_position__anonymous_178);
			payment_long_type_names.accept(_position__anonymous_178);
			area_names.accept(_position__anonymous_178);
			structure_names.accept(_position__anonymous_178);
			tile_names.accept(_position__anonymous_178);
			hero_stat.accept(_position__anonymous_178);
		}
	}
	public void parse__anonymous_179() {
		int _position__anonymous_179 = -1;
		Token.Parsed _token__anonymous_179 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_179=_position;
		_token__anonymous_179=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+5-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='t') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='r') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='i') {
				_state=FAILED;
			}
			if(_inputArray[_position+4]!='t') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_129.SYNTAX);
			_position=_position+5;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain trait");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_179)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_179;
		}
		else {
			if(_position+2-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='o') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='f') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_130.SYNTAX);
				_position=_position+2;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain of");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_179)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_179;
			}
			else {
				_token_NAME=_token;
				_token=new Tokens.Name.VariableNameToken();
				_position_NAME=_position;
				parse_NAME();
				if(_state==SUCCESS) {
					_token_NAME.add(_position_NAME,_token);
				}
				_token=_token_NAME;
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_179)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_179;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_179.addAll(_token);
			_token__anonymous_179.setValue(_token.getValue());
		}
		_token=_token__anonymous_179;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_179);
			association_names.reject(_position__anonymous_179);
			room_names.reject(_position__anonymous_179);
			activity_names.reject(_position__anonymous_179);
			siding_names.reject(_position__anonymous_179);
			item_names.reject(_position__anonymous_179);
			aspect_names.reject(_position__anonymous_179);
			affinity_names.reject(_position__anonymous_179);
			activity_type_names.reject(_position__anonymous_179);
			trail_names.reject(_position__anonymous_179);
			attack_names.reject(_position__anonymous_179);
			reason_names.reject(_position__anonymous_179);
			trait_names.reject(_position__anonymous_179);
			condition_names.reject(_position__anonymous_179);
			payment_short_type_names.reject(_position__anonymous_179);
			skill_names.reject(_position__anonymous_179);
			map_names.reject(_position__anonymous_179);
			event_names.reject(_position__anonymous_179);
			image_names.reject(_position__anonymous_179);
			tile_symbols.reject(_position__anonymous_179);
			payment_long_type_names.reject(_position__anonymous_179);
			area_names.reject(_position__anonymous_179);
			structure_names.reject(_position__anonymous_179);
			tile_names.reject(_position__anonymous_179);
			hero_stat.reject(_position__anonymous_179);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_179);
			association_names.accept(_position__anonymous_179);
			room_names.accept(_position__anonymous_179);
			activity_names.accept(_position__anonymous_179);
			siding_names.accept(_position__anonymous_179);
			item_names.accept(_position__anonymous_179);
			aspect_names.accept(_position__anonymous_179);
			affinity_names.accept(_position__anonymous_179);
			activity_type_names.accept(_position__anonymous_179);
			trail_names.accept(_position__anonymous_179);
			attack_names.accept(_position__anonymous_179);
			reason_names.accept(_position__anonymous_179);
			trait_names.accept(_position__anonymous_179);
			condition_names.accept(_position__anonymous_179);
			payment_short_type_names.accept(_position__anonymous_179);
			skill_names.accept(_position__anonymous_179);
			map_names.accept(_position__anonymous_179);
			event_names.accept(_position__anonymous_179);
			image_names.accept(_position__anonymous_179);
			tile_symbols.accept(_position__anonymous_179);
			payment_long_type_names.accept(_position__anonymous_179);
			area_names.accept(_position__anonymous_179);
			structure_names.accept(_position__anonymous_179);
			tile_names.accept(_position__anonymous_179);
			hero_stat.accept(_position__anonymous_179);
		}
	}
	public void parse__anonymous_199() {
		int _position__anonymous_199 = -1;
		Token.Parsed _token__anonymous_199 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_199=_position;
		_token__anonymous_199=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+3-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='m') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='p') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_145.SYNTAX);
			_position=_position+3;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain map");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_group(_anonymous_199)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_199;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_199.addAll(_token);
			_token__anonymous_199.setValue(_token.getValue());
		}
		_token=_token__anonymous_199;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_199);
			association_names.reject(_position__anonymous_199);
			room_names.reject(_position__anonymous_199);
			activity_names.reject(_position__anonymous_199);
			siding_names.reject(_position__anonymous_199);
			item_names.reject(_position__anonymous_199);
			aspect_names.reject(_position__anonymous_199);
			affinity_names.reject(_position__anonymous_199);
			activity_type_names.reject(_position__anonymous_199);
			trail_names.reject(_position__anonymous_199);
			attack_names.reject(_position__anonymous_199);
			reason_names.reject(_position__anonymous_199);
			trait_names.reject(_position__anonymous_199);
			condition_names.reject(_position__anonymous_199);
			payment_short_type_names.reject(_position__anonymous_199);
			skill_names.reject(_position__anonymous_199);
			map_names.reject(_position__anonymous_199);
			event_names.reject(_position__anonymous_199);
			image_names.reject(_position__anonymous_199);
			tile_symbols.reject(_position__anonymous_199);
			payment_long_type_names.reject(_position__anonymous_199);
			area_names.reject(_position__anonymous_199);
			structure_names.reject(_position__anonymous_199);
			tile_names.reject(_position__anonymous_199);
			hero_stat.reject(_position__anonymous_199);
			_state=SUCCESS;
			_position__anonymous_199=_position;
			_token__anonymous_199=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			if(_position+4-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='t') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='i') {
					_state=FAILED;
				}
				if(_inputArray[_position+2]!='l') {
					_state=FAILED;
				}
				if(_inputArray[_position+3]!='e') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_146.SYNTAX);
				_position=_position+4;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain tile");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"variable_group(_anonymous_199)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_199;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_199.addAll(_token);
				_token__anonymous_199.setValue(_token.getValue());
			}
			_token=_token__anonymous_199;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_199);
				association_names.reject(_position__anonymous_199);
				room_names.reject(_position__anonymous_199);
				activity_names.reject(_position__anonymous_199);
				siding_names.reject(_position__anonymous_199);
				item_names.reject(_position__anonymous_199);
				aspect_names.reject(_position__anonymous_199);
				affinity_names.reject(_position__anonymous_199);
				activity_type_names.reject(_position__anonymous_199);
				trail_names.reject(_position__anonymous_199);
				attack_names.reject(_position__anonymous_199);
				reason_names.reject(_position__anonymous_199);
				trait_names.reject(_position__anonymous_199);
				condition_names.reject(_position__anonymous_199);
				payment_short_type_names.reject(_position__anonymous_199);
				skill_names.reject(_position__anonymous_199);
				map_names.reject(_position__anonymous_199);
				event_names.reject(_position__anonymous_199);
				image_names.reject(_position__anonymous_199);
				tile_symbols.reject(_position__anonymous_199);
				payment_long_type_names.reject(_position__anonymous_199);
				area_names.reject(_position__anonymous_199);
				structure_names.reject(_position__anonymous_199);
				tile_names.reject(_position__anonymous_199);
				hero_stat.reject(_position__anonymous_199);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_199);
				association_names.accept(_position__anonymous_199);
				room_names.accept(_position__anonymous_199);
				activity_names.accept(_position__anonymous_199);
				siding_names.accept(_position__anonymous_199);
				item_names.accept(_position__anonymous_199);
				aspect_names.accept(_position__anonymous_199);
				affinity_names.accept(_position__anonymous_199);
				activity_type_names.accept(_position__anonymous_199);
				trail_names.accept(_position__anonymous_199);
				attack_names.accept(_position__anonymous_199);
				reason_names.accept(_position__anonymous_199);
				trait_names.accept(_position__anonymous_199);
				condition_names.accept(_position__anonymous_199);
				payment_short_type_names.accept(_position__anonymous_199);
				skill_names.accept(_position__anonymous_199);
				map_names.accept(_position__anonymous_199);
				event_names.accept(_position__anonymous_199);
				image_names.accept(_position__anonymous_199);
				tile_symbols.accept(_position__anonymous_199);
				payment_long_type_names.accept(_position__anonymous_199);
				area_names.accept(_position__anonymous_199);
				structure_names.accept(_position__anonymous_199);
				tile_names.accept(_position__anonymous_199);
				hero_stat.accept(_position__anonymous_199);
			}
		}
	}
	public void parse__anonymous_6() {
		int _position__anonymous_6 = -1;
		Token.Parsed _token__anonymous_6 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_6=_position;
		_token__anonymous_6=_token;
		_token=new Tokens.Name.HitToken();
		if(_position+3-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='h') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='i') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='t') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_11.SYNTAX);
			_position=_position+3;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain hit");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"item_parameter(_anonymous_6)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_6;
		}
		else {
			int _state_21 = _state;
			while(_position<_inputLength) {
				parse__anonymous_7();
				if(_state==FAILED) {
					break;
				}
			}
			if(_state_21==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"item_parameter(_anonymous_6)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_6;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_6.add(_position__anonymous_6,_token);
		}
		_token=_token__anonymous_6;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_6);
			association_names.reject(_position__anonymous_6);
			room_names.reject(_position__anonymous_6);
			activity_names.reject(_position__anonymous_6);
			siding_names.reject(_position__anonymous_6);
			item_names.reject(_position__anonymous_6);
			aspect_names.reject(_position__anonymous_6);
			affinity_names.reject(_position__anonymous_6);
			activity_type_names.reject(_position__anonymous_6);
			trail_names.reject(_position__anonymous_6);
			attack_names.reject(_position__anonymous_6);
			reason_names.reject(_position__anonymous_6);
			trait_names.reject(_position__anonymous_6);
			condition_names.reject(_position__anonymous_6);
			payment_short_type_names.reject(_position__anonymous_6);
			skill_names.reject(_position__anonymous_6);
			map_names.reject(_position__anonymous_6);
			event_names.reject(_position__anonymous_6);
			image_names.reject(_position__anonymous_6);
			tile_symbols.reject(_position__anonymous_6);
			payment_long_type_names.reject(_position__anonymous_6);
			area_names.reject(_position__anonymous_6);
			structure_names.reject(_position__anonymous_6);
			tile_names.reject(_position__anonymous_6);
			hero_stat.reject(_position__anonymous_6);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_6);
			association_names.accept(_position__anonymous_6);
			room_names.accept(_position__anonymous_6);
			activity_names.accept(_position__anonymous_6);
			siding_names.accept(_position__anonymous_6);
			item_names.accept(_position__anonymous_6);
			aspect_names.accept(_position__anonymous_6);
			affinity_names.accept(_position__anonymous_6);
			activity_type_names.accept(_position__anonymous_6);
			trail_names.accept(_position__anonymous_6);
			attack_names.accept(_position__anonymous_6);
			reason_names.accept(_position__anonymous_6);
			trait_names.accept(_position__anonymous_6);
			condition_names.accept(_position__anonymous_6);
			payment_short_type_names.accept(_position__anonymous_6);
			skill_names.accept(_position__anonymous_6);
			map_names.accept(_position__anonymous_6);
			event_names.accept(_position__anonymous_6);
			image_names.accept(_position__anonymous_6);
			tile_symbols.accept(_position__anonymous_6);
			payment_long_type_names.accept(_position__anonymous_6);
			area_names.accept(_position__anonymous_6);
			structure_names.accept(_position__anonymous_6);
			tile_names.accept(_position__anonymous_6);
			hero_stat.accept(_position__anonymous_6);
		}
	}
	public void parse__anonymous_5() {
		int _position__anonymous_5 = -1;
		Token.Parsed _token__anonymous_5 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_5=_position;
		_token__anonymous_5=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+2-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='\t') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_5.SYNTAX);
			_position=_position+2;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n\t");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"item_declaration(_anonymous_5)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_5;
		}
		else {
			int _state_20 = _state;
			while(_position<_inputLength) {
				parse_item_parameter();
				if(_state==FAILED) {
					break;
				}
			}
			if(_state_20==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"item_declaration(_anonymous_5)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_5;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_5.addAll(_token);
			_token__anonymous_5.setValue(_token.getValue());
		}
		_token=_token__anonymous_5;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_5);
			association_names.reject(_position__anonymous_5);
			room_names.reject(_position__anonymous_5);
			activity_names.reject(_position__anonymous_5);
			siding_names.reject(_position__anonymous_5);
			item_names.reject(_position__anonymous_5);
			aspect_names.reject(_position__anonymous_5);
			affinity_names.reject(_position__anonymous_5);
			activity_type_names.reject(_position__anonymous_5);
			trail_names.reject(_position__anonymous_5);
			attack_names.reject(_position__anonymous_5);
			reason_names.reject(_position__anonymous_5);
			trait_names.reject(_position__anonymous_5);
			condition_names.reject(_position__anonymous_5);
			payment_short_type_names.reject(_position__anonymous_5);
			skill_names.reject(_position__anonymous_5);
			map_names.reject(_position__anonymous_5);
			event_names.reject(_position__anonymous_5);
			image_names.reject(_position__anonymous_5);
			tile_symbols.reject(_position__anonymous_5);
			payment_long_type_names.reject(_position__anonymous_5);
			area_names.reject(_position__anonymous_5);
			structure_names.reject(_position__anonymous_5);
			tile_names.reject(_position__anonymous_5);
			hero_stat.reject(_position__anonymous_5);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_5);
			association_names.accept(_position__anonymous_5);
			room_names.accept(_position__anonymous_5);
			activity_names.accept(_position__anonymous_5);
			siding_names.accept(_position__anonymous_5);
			item_names.accept(_position__anonymous_5);
			aspect_names.accept(_position__anonymous_5);
			affinity_names.accept(_position__anonymous_5);
			activity_type_names.accept(_position__anonymous_5);
			trail_names.accept(_position__anonymous_5);
			attack_names.accept(_position__anonymous_5);
			reason_names.accept(_position__anonymous_5);
			trait_names.accept(_position__anonymous_5);
			condition_names.accept(_position__anonymous_5);
			payment_short_type_names.accept(_position__anonymous_5);
			skill_names.accept(_position__anonymous_5);
			map_names.accept(_position__anonymous_5);
			event_names.accept(_position__anonymous_5);
			image_names.accept(_position__anonymous_5);
			tile_symbols.accept(_position__anonymous_5);
			payment_long_type_names.accept(_position__anonymous_5);
			area_names.accept(_position__anonymous_5);
			structure_names.accept(_position__anonymous_5);
			tile_names.accept(_position__anonymous_5);
			hero_stat.accept(_position__anonymous_5);
		}
	}
	public void parse__anonymous_8() {
		int _position__anonymous_8 = -1;
		Token.Parsed _token__anonymous_8 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_8=_position;
		_token__anonymous_8=_token;
		_token=new Tokens.Name.GainAspectToken();
		if(_pass==FIRST_PASS) {
			String _result = _preparsed_NAME.get(_position);
			if(_result==null) {
				_state=FAILED;
			}
			else {
				Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
				_token.add(_position,_first_pass_token);
				_position+=_result.length();
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
		}
		else if(_pass==SECOND_PASS) {
			_list_name_result=_preparsed_NAME.get(_position);
			if(_list_name_result!=null&&aspect_names.contains(_list_name_result)) {
				if(_position+_list_name_result.length()<_inputLength) {
					int _next_char = _inputArray[_position+_list_name_result.length()];
					if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,new Tokens.Name.AspectNamesToken(_list_name_result));
					_position+=_list_name_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"aspect_names");
					_furthestPosition=_position;
				}
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"item_parameter(_anonymous_8)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_8;
		}
		else {
			int _state_22 = _state;
			parse_if_header();
			if(_state_22==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"item_parameter(_anonymous_8)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_8;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_8.add(_position__anonymous_8,_token);
		}
		_token=_token__anonymous_8;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_8);
			association_names.reject(_position__anonymous_8);
			room_names.reject(_position__anonymous_8);
			activity_names.reject(_position__anonymous_8);
			siding_names.reject(_position__anonymous_8);
			item_names.reject(_position__anonymous_8);
			aspect_names.reject(_position__anonymous_8);
			affinity_names.reject(_position__anonymous_8);
			activity_type_names.reject(_position__anonymous_8);
			trail_names.reject(_position__anonymous_8);
			attack_names.reject(_position__anonymous_8);
			reason_names.reject(_position__anonymous_8);
			trait_names.reject(_position__anonymous_8);
			condition_names.reject(_position__anonymous_8);
			payment_short_type_names.reject(_position__anonymous_8);
			skill_names.reject(_position__anonymous_8);
			map_names.reject(_position__anonymous_8);
			event_names.reject(_position__anonymous_8);
			image_names.reject(_position__anonymous_8);
			tile_symbols.reject(_position__anonymous_8);
			payment_long_type_names.reject(_position__anonymous_8);
			area_names.reject(_position__anonymous_8);
			structure_names.reject(_position__anonymous_8);
			tile_names.reject(_position__anonymous_8);
			hero_stat.reject(_position__anonymous_8);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_8);
			association_names.accept(_position__anonymous_8);
			room_names.accept(_position__anonymous_8);
			activity_names.accept(_position__anonymous_8);
			siding_names.accept(_position__anonymous_8);
			item_names.accept(_position__anonymous_8);
			aspect_names.accept(_position__anonymous_8);
			affinity_names.accept(_position__anonymous_8);
			activity_type_names.accept(_position__anonymous_8);
			trail_names.accept(_position__anonymous_8);
			attack_names.accept(_position__anonymous_8);
			reason_names.accept(_position__anonymous_8);
			trait_names.accept(_position__anonymous_8);
			condition_names.accept(_position__anonymous_8);
			payment_short_type_names.accept(_position__anonymous_8);
			skill_names.accept(_position__anonymous_8);
			map_names.accept(_position__anonymous_8);
			event_names.accept(_position__anonymous_8);
			image_names.accept(_position__anonymous_8);
			tile_symbols.accept(_position__anonymous_8);
			payment_long_type_names.accept(_position__anonymous_8);
			area_names.accept(_position__anonymous_8);
			structure_names.accept(_position__anonymous_8);
			tile_names.accept(_position__anonymous_8);
			hero_stat.accept(_position__anonymous_8);
		}
	}
	public void parse__anonymous_7() {
		int _position__anonymous_7 = -1;
		Token.Parsed _token__anonymous_7 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_7=_position;
		_token__anonymous_7=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+3-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='\t') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='\t') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_12.SYNTAX);
			_position=_position+3;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n\t\t");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"item_parameter(_anonymous_7)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_7;
		}
		else {
			parse_item_hit_element();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"item_parameter(_anonymous_7)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_7;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_7.addAll(_token);
			_token__anonymous_7.setValue(_token.getValue());
		}
		_token=_token__anonymous_7;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_7);
			association_names.reject(_position__anonymous_7);
			room_names.reject(_position__anonymous_7);
			activity_names.reject(_position__anonymous_7);
			siding_names.reject(_position__anonymous_7);
			item_names.reject(_position__anonymous_7);
			aspect_names.reject(_position__anonymous_7);
			affinity_names.reject(_position__anonymous_7);
			activity_type_names.reject(_position__anonymous_7);
			trail_names.reject(_position__anonymous_7);
			attack_names.reject(_position__anonymous_7);
			reason_names.reject(_position__anonymous_7);
			trait_names.reject(_position__anonymous_7);
			condition_names.reject(_position__anonymous_7);
			payment_short_type_names.reject(_position__anonymous_7);
			skill_names.reject(_position__anonymous_7);
			map_names.reject(_position__anonymous_7);
			event_names.reject(_position__anonymous_7);
			image_names.reject(_position__anonymous_7);
			tile_symbols.reject(_position__anonymous_7);
			payment_long_type_names.reject(_position__anonymous_7);
			area_names.reject(_position__anonymous_7);
			structure_names.reject(_position__anonymous_7);
			tile_names.reject(_position__anonymous_7);
			hero_stat.reject(_position__anonymous_7);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_7);
			association_names.accept(_position__anonymous_7);
			room_names.accept(_position__anonymous_7);
			activity_names.accept(_position__anonymous_7);
			siding_names.accept(_position__anonymous_7);
			item_names.accept(_position__anonymous_7);
			aspect_names.accept(_position__anonymous_7);
			affinity_names.accept(_position__anonymous_7);
			activity_type_names.accept(_position__anonymous_7);
			trail_names.accept(_position__anonymous_7);
			attack_names.accept(_position__anonymous_7);
			reason_names.accept(_position__anonymous_7);
			trait_names.accept(_position__anonymous_7);
			condition_names.accept(_position__anonymous_7);
			payment_short_type_names.accept(_position__anonymous_7);
			skill_names.accept(_position__anonymous_7);
			map_names.accept(_position__anonymous_7);
			event_names.accept(_position__anonymous_7);
			image_names.accept(_position__anonymous_7);
			tile_symbols.accept(_position__anonymous_7);
			payment_long_type_names.accept(_position__anonymous_7);
			area_names.accept(_position__anonymous_7);
			structure_names.accept(_position__anonymous_7);
			tile_names.accept(_position__anonymous_7);
			hero_stat.accept(_position__anonymous_7);
		}
	}
	public void parse__anonymous_2() {
		int _position__anonymous_2 = -1;
		Token.Parsed _token__anonymous_2 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_2=_position;
		_token__anonymous_2=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		int _state_15 = _state;
		while(_position<_inputLength) {
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				break;
			}
		}
		if(_state_15==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"aspect_declaration(_anonymous_2)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_2;
		}
		else {
			parse_event_statement();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"aspect_declaration(_anonymous_2)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_2;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_2.addAll(_token);
			_token__anonymous_2.setValue(_token.getValue());
		}
		_token=_token__anonymous_2;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_2);
			association_names.reject(_position__anonymous_2);
			room_names.reject(_position__anonymous_2);
			activity_names.reject(_position__anonymous_2);
			siding_names.reject(_position__anonymous_2);
			item_names.reject(_position__anonymous_2);
			aspect_names.reject(_position__anonymous_2);
			affinity_names.reject(_position__anonymous_2);
			activity_type_names.reject(_position__anonymous_2);
			trail_names.reject(_position__anonymous_2);
			attack_names.reject(_position__anonymous_2);
			reason_names.reject(_position__anonymous_2);
			trait_names.reject(_position__anonymous_2);
			condition_names.reject(_position__anonymous_2);
			payment_short_type_names.reject(_position__anonymous_2);
			skill_names.reject(_position__anonymous_2);
			map_names.reject(_position__anonymous_2);
			event_names.reject(_position__anonymous_2);
			image_names.reject(_position__anonymous_2);
			tile_symbols.reject(_position__anonymous_2);
			payment_long_type_names.reject(_position__anonymous_2);
			area_names.reject(_position__anonymous_2);
			structure_names.reject(_position__anonymous_2);
			tile_names.reject(_position__anonymous_2);
			hero_stat.reject(_position__anonymous_2);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_2);
			association_names.accept(_position__anonymous_2);
			room_names.accept(_position__anonymous_2);
			activity_names.accept(_position__anonymous_2);
			siding_names.accept(_position__anonymous_2);
			item_names.accept(_position__anonymous_2);
			aspect_names.accept(_position__anonymous_2);
			affinity_names.accept(_position__anonymous_2);
			activity_type_names.accept(_position__anonymous_2);
			trail_names.accept(_position__anonymous_2);
			attack_names.accept(_position__anonymous_2);
			reason_names.accept(_position__anonymous_2);
			trait_names.accept(_position__anonymous_2);
			condition_names.accept(_position__anonymous_2);
			payment_short_type_names.accept(_position__anonymous_2);
			skill_names.accept(_position__anonymous_2);
			map_names.accept(_position__anonymous_2);
			event_names.accept(_position__anonymous_2);
			image_names.accept(_position__anonymous_2);
			tile_symbols.accept(_position__anonymous_2);
			payment_long_type_names.accept(_position__anonymous_2);
			area_names.accept(_position__anonymous_2);
			structure_names.accept(_position__anonymous_2);
			tile_names.accept(_position__anonymous_2);
			hero_stat.accept(_position__anonymous_2);
		}
	}
	public void parse__anonymous_1() {
		int _position__anonymous_1 = -1;
		Token.Parsed _token__anonymous_1 = null;
		int _position_comments = -1;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_1=_position;
		_token__anonymous_1=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_aspect(_anonymous_1)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_1;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_1.addAll(_token);
			_token__anonymous_1.setValue(_token.getValue());
		}
		_token=_token__anonymous_1;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_1);
			association_names.reject(_position__anonymous_1);
			room_names.reject(_position__anonymous_1);
			activity_names.reject(_position__anonymous_1);
			siding_names.reject(_position__anonymous_1);
			item_names.reject(_position__anonymous_1);
			aspect_names.reject(_position__anonymous_1);
			affinity_names.reject(_position__anonymous_1);
			activity_type_names.reject(_position__anonymous_1);
			trail_names.reject(_position__anonymous_1);
			attack_names.reject(_position__anonymous_1);
			reason_names.reject(_position__anonymous_1);
			trait_names.reject(_position__anonymous_1);
			condition_names.reject(_position__anonymous_1);
			payment_short_type_names.reject(_position__anonymous_1);
			skill_names.reject(_position__anonymous_1);
			map_names.reject(_position__anonymous_1);
			event_names.reject(_position__anonymous_1);
			image_names.reject(_position__anonymous_1);
			tile_symbols.reject(_position__anonymous_1);
			payment_long_type_names.reject(_position__anonymous_1);
			area_names.reject(_position__anonymous_1);
			structure_names.reject(_position__anonymous_1);
			tile_names.reject(_position__anonymous_1);
			hero_stat.reject(_position__anonymous_1);
			_state=SUCCESS;
			_position__anonymous_1=_position;
			_token__anonymous_1=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			_position_comments=_position;
			if(_state==SUCCESS&&!_recursion_protection_comments_1.contains(_position)) {
				_recursion_protection_comments_1.add(_position);
				parse_comments();
				_recursion_protection_comments_1.remove(_position_comments);
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_aspect(_anonymous_1)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_1;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_1.addAll(_token);
				_token__anonymous_1.setValue(_token.getValue());
			}
			_token=_token__anonymous_1;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_1);
				association_names.reject(_position__anonymous_1);
				room_names.reject(_position__anonymous_1);
				activity_names.reject(_position__anonymous_1);
				siding_names.reject(_position__anonymous_1);
				item_names.reject(_position__anonymous_1);
				aspect_names.reject(_position__anonymous_1);
				affinity_names.reject(_position__anonymous_1);
				activity_type_names.reject(_position__anonymous_1);
				trail_names.reject(_position__anonymous_1);
				attack_names.reject(_position__anonymous_1);
				reason_names.reject(_position__anonymous_1);
				trait_names.reject(_position__anonymous_1);
				condition_names.reject(_position__anonymous_1);
				payment_short_type_names.reject(_position__anonymous_1);
				skill_names.reject(_position__anonymous_1);
				map_names.reject(_position__anonymous_1);
				event_names.reject(_position__anonymous_1);
				image_names.reject(_position__anonymous_1);
				tile_symbols.reject(_position__anonymous_1);
				payment_long_type_names.reject(_position__anonymous_1);
				area_names.reject(_position__anonymous_1);
				structure_names.reject(_position__anonymous_1);
				tile_names.reject(_position__anonymous_1);
				hero_stat.reject(_position__anonymous_1);
				_state=SUCCESS;
				_position__anonymous_1=_position;
				_token__anonymous_1=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				parse_aspect_declaration();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_aspect(_anonymous_1)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_1;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_1.addAll(_token);
					_token__anonymous_1.setValue(_token.getValue());
				}
				_token=_token__anonymous_1;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_1);
					association_names.reject(_position__anonymous_1);
					room_names.reject(_position__anonymous_1);
					activity_names.reject(_position__anonymous_1);
					siding_names.reject(_position__anonymous_1);
					item_names.reject(_position__anonymous_1);
					aspect_names.reject(_position__anonymous_1);
					affinity_names.reject(_position__anonymous_1);
					activity_type_names.reject(_position__anonymous_1);
					trail_names.reject(_position__anonymous_1);
					attack_names.reject(_position__anonymous_1);
					reason_names.reject(_position__anonymous_1);
					trait_names.reject(_position__anonymous_1);
					condition_names.reject(_position__anonymous_1);
					payment_short_type_names.reject(_position__anonymous_1);
					skill_names.reject(_position__anonymous_1);
					map_names.reject(_position__anonymous_1);
					event_names.reject(_position__anonymous_1);
					image_names.reject(_position__anonymous_1);
					tile_symbols.reject(_position__anonymous_1);
					payment_long_type_names.reject(_position__anonymous_1);
					area_names.reject(_position__anonymous_1);
					structure_names.reject(_position__anonymous_1);
					tile_names.reject(_position__anonymous_1);
					hero_stat.reject(_position__anonymous_1);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_1);
					association_names.accept(_position__anonymous_1);
					room_names.accept(_position__anonymous_1);
					activity_names.accept(_position__anonymous_1);
					siding_names.accept(_position__anonymous_1);
					item_names.accept(_position__anonymous_1);
					aspect_names.accept(_position__anonymous_1);
					affinity_names.accept(_position__anonymous_1);
					activity_type_names.accept(_position__anonymous_1);
					trail_names.accept(_position__anonymous_1);
					attack_names.accept(_position__anonymous_1);
					reason_names.accept(_position__anonymous_1);
					trait_names.accept(_position__anonymous_1);
					condition_names.accept(_position__anonymous_1);
					payment_short_type_names.accept(_position__anonymous_1);
					skill_names.accept(_position__anonymous_1);
					map_names.accept(_position__anonymous_1);
					event_names.accept(_position__anonymous_1);
					image_names.accept(_position__anonymous_1);
					tile_symbols.accept(_position__anonymous_1);
					payment_long_type_names.accept(_position__anonymous_1);
					area_names.accept(_position__anonymous_1);
					structure_names.accept(_position__anonymous_1);
					tile_names.accept(_position__anonymous_1);
					hero_stat.accept(_position__anonymous_1);
				}
			}
		}
	}
	public void parse__anonymous_4() {
		int _position__anonymous_4 = -1;
		Token.Parsed _token__anonymous_4 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_4=_position;
		_token__anonymous_4=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		int _state_18 = _state;
		while(_position<_inputLength) {
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				break;
			}
		}
		if(_state_18==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"item_declaration(_anonymous_4)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_4;
		}
		else {
			parse_DESCRIPTION();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"item_declaration(_anonymous_4)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_4;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_4.addAll(_token);
			_token__anonymous_4.setValue(_token.getValue());
		}
		_token=_token__anonymous_4;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_4);
			association_names.reject(_position__anonymous_4);
			room_names.reject(_position__anonymous_4);
			activity_names.reject(_position__anonymous_4);
			siding_names.reject(_position__anonymous_4);
			item_names.reject(_position__anonymous_4);
			aspect_names.reject(_position__anonymous_4);
			affinity_names.reject(_position__anonymous_4);
			activity_type_names.reject(_position__anonymous_4);
			trail_names.reject(_position__anonymous_4);
			attack_names.reject(_position__anonymous_4);
			reason_names.reject(_position__anonymous_4);
			trait_names.reject(_position__anonymous_4);
			condition_names.reject(_position__anonymous_4);
			payment_short_type_names.reject(_position__anonymous_4);
			skill_names.reject(_position__anonymous_4);
			map_names.reject(_position__anonymous_4);
			event_names.reject(_position__anonymous_4);
			image_names.reject(_position__anonymous_4);
			tile_symbols.reject(_position__anonymous_4);
			payment_long_type_names.reject(_position__anonymous_4);
			area_names.reject(_position__anonymous_4);
			structure_names.reject(_position__anonymous_4);
			tile_names.reject(_position__anonymous_4);
			hero_stat.reject(_position__anonymous_4);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_4);
			association_names.accept(_position__anonymous_4);
			room_names.accept(_position__anonymous_4);
			activity_names.accept(_position__anonymous_4);
			siding_names.accept(_position__anonymous_4);
			item_names.accept(_position__anonymous_4);
			aspect_names.accept(_position__anonymous_4);
			affinity_names.accept(_position__anonymous_4);
			activity_type_names.accept(_position__anonymous_4);
			trail_names.accept(_position__anonymous_4);
			attack_names.accept(_position__anonymous_4);
			reason_names.accept(_position__anonymous_4);
			trait_names.accept(_position__anonymous_4);
			condition_names.accept(_position__anonymous_4);
			payment_short_type_names.accept(_position__anonymous_4);
			skill_names.accept(_position__anonymous_4);
			map_names.accept(_position__anonymous_4);
			event_names.accept(_position__anonymous_4);
			image_names.accept(_position__anonymous_4);
			tile_symbols.accept(_position__anonymous_4);
			payment_long_type_names.accept(_position__anonymous_4);
			area_names.accept(_position__anonymous_4);
			structure_names.accept(_position__anonymous_4);
			tile_names.accept(_position__anonymous_4);
			hero_stat.accept(_position__anonymous_4);
		}
	}
	public void parse__anonymous_3() {
		int _position__anonymous_3 = -1;
		Token.Parsed _token__anonymous_3 = null;
		int _position_comments = -1;
		int _position_import_any = -1;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_3=_position;
		_token__anonymous_3=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		_position_comments=_position;
		if(_state==SUCCESS&&!_recursion_protection_comments_3.contains(_position)) {
			_recursion_protection_comments_3.add(_position);
			parse_comments();
			_recursion_protection_comments_3.remove(_position_comments);
		}
		else {
			_state=FAILED;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_item(_anonymous_3)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_3;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_3.addAll(_token);
			_token__anonymous_3.setValue(_token.getValue());
		}
		_token=_token__anonymous_3;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_3);
			association_names.reject(_position__anonymous_3);
			room_names.reject(_position__anonymous_3);
			activity_names.reject(_position__anonymous_3);
			siding_names.reject(_position__anonymous_3);
			item_names.reject(_position__anonymous_3);
			aspect_names.reject(_position__anonymous_3);
			affinity_names.reject(_position__anonymous_3);
			activity_type_names.reject(_position__anonymous_3);
			trail_names.reject(_position__anonymous_3);
			attack_names.reject(_position__anonymous_3);
			reason_names.reject(_position__anonymous_3);
			trait_names.reject(_position__anonymous_3);
			condition_names.reject(_position__anonymous_3);
			payment_short_type_names.reject(_position__anonymous_3);
			skill_names.reject(_position__anonymous_3);
			map_names.reject(_position__anonymous_3);
			event_names.reject(_position__anonymous_3);
			image_names.reject(_position__anonymous_3);
			tile_symbols.reject(_position__anonymous_3);
			payment_long_type_names.reject(_position__anonymous_3);
			area_names.reject(_position__anonymous_3);
			structure_names.reject(_position__anonymous_3);
			tile_names.reject(_position__anonymous_3);
			hero_stat.reject(_position__anonymous_3);
			_state=SUCCESS;
			_position__anonymous_3=_position;
			_token__anonymous_3=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			_position_import_any=_position;
			if(_state==SUCCESS&&!_recursion_protection_import_any_4.contains(_position)) {
				_recursion_protection_import_any_4.add(_position);
				parse_import_any();
				_recursion_protection_import_any_4.remove(_position_import_any);
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_item(_anonymous_3)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_3;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_3.addAll(_token);
				_token__anonymous_3.setValue(_token.getValue());
			}
			_token=_token__anonymous_3;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_3);
				association_names.reject(_position__anonymous_3);
				room_names.reject(_position__anonymous_3);
				activity_names.reject(_position__anonymous_3);
				siding_names.reject(_position__anonymous_3);
				item_names.reject(_position__anonymous_3);
				aspect_names.reject(_position__anonymous_3);
				affinity_names.reject(_position__anonymous_3);
				activity_type_names.reject(_position__anonymous_3);
				trail_names.reject(_position__anonymous_3);
				attack_names.reject(_position__anonymous_3);
				reason_names.reject(_position__anonymous_3);
				trait_names.reject(_position__anonymous_3);
				condition_names.reject(_position__anonymous_3);
				payment_short_type_names.reject(_position__anonymous_3);
				skill_names.reject(_position__anonymous_3);
				map_names.reject(_position__anonymous_3);
				event_names.reject(_position__anonymous_3);
				image_names.reject(_position__anonymous_3);
				tile_symbols.reject(_position__anonymous_3);
				payment_long_type_names.reject(_position__anonymous_3);
				area_names.reject(_position__anonymous_3);
				structure_names.reject(_position__anonymous_3);
				tile_names.reject(_position__anonymous_3);
				hero_stat.reject(_position__anonymous_3);
				_state=SUCCESS;
				_position__anonymous_3=_position;
				_token__anonymous_3=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				parse_item_declaration();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_item(_anonymous_3)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_3;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_3.addAll(_token);
					_token__anonymous_3.setValue(_token.getValue());
				}
				_token=_token__anonymous_3;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_3);
					association_names.reject(_position__anonymous_3);
					room_names.reject(_position__anonymous_3);
					activity_names.reject(_position__anonymous_3);
					siding_names.reject(_position__anonymous_3);
					item_names.reject(_position__anonymous_3);
					aspect_names.reject(_position__anonymous_3);
					affinity_names.reject(_position__anonymous_3);
					activity_type_names.reject(_position__anonymous_3);
					trail_names.reject(_position__anonymous_3);
					attack_names.reject(_position__anonymous_3);
					reason_names.reject(_position__anonymous_3);
					trait_names.reject(_position__anonymous_3);
					condition_names.reject(_position__anonymous_3);
					payment_short_type_names.reject(_position__anonymous_3);
					skill_names.reject(_position__anonymous_3);
					map_names.reject(_position__anonymous_3);
					event_names.reject(_position__anonymous_3);
					image_names.reject(_position__anonymous_3);
					tile_symbols.reject(_position__anonymous_3);
					payment_long_type_names.reject(_position__anonymous_3);
					area_names.reject(_position__anonymous_3);
					structure_names.reject(_position__anonymous_3);
					tile_names.reject(_position__anonymous_3);
					hero_stat.reject(_position__anonymous_3);
					_state=SUCCESS;
					_position__anonymous_3=_position;
					_token__anonymous_3=_token;
					_token=new Token.Parsed(Token.Id.ANON);
					if(_position+1-1 >=_inputLength) {
						_state=FAILED;
					}
					else {
						if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
						_position=_position+1;
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
					else if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
							_furthestPosition=_position;
						}
					}
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_item(_anonymous_3)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_3;
					}
					else {
					}
					if(_state==SUCCESS) {
						_token__anonymous_3.addAll(_token);
						_token__anonymous_3.setValue(_token.getValue());
					}
					_token=_token__anonymous_3;
					if(_state==FAILED) {
						support_names.reject(_position__anonymous_3);
						association_names.reject(_position__anonymous_3);
						room_names.reject(_position__anonymous_3);
						activity_names.reject(_position__anonymous_3);
						siding_names.reject(_position__anonymous_3);
						item_names.reject(_position__anonymous_3);
						aspect_names.reject(_position__anonymous_3);
						affinity_names.reject(_position__anonymous_3);
						activity_type_names.reject(_position__anonymous_3);
						trail_names.reject(_position__anonymous_3);
						attack_names.reject(_position__anonymous_3);
						reason_names.reject(_position__anonymous_3);
						trait_names.reject(_position__anonymous_3);
						condition_names.reject(_position__anonymous_3);
						payment_short_type_names.reject(_position__anonymous_3);
						skill_names.reject(_position__anonymous_3);
						map_names.reject(_position__anonymous_3);
						event_names.reject(_position__anonymous_3);
						image_names.reject(_position__anonymous_3);
						tile_symbols.reject(_position__anonymous_3);
						payment_long_type_names.reject(_position__anonymous_3);
						area_names.reject(_position__anonymous_3);
						structure_names.reject(_position__anonymous_3);
						tile_names.reject(_position__anonymous_3);
						hero_stat.reject(_position__anonymous_3);
					}
					else if(_state==SUCCESS) {
						support_names.accept(_position__anonymous_3);
						association_names.accept(_position__anonymous_3);
						room_names.accept(_position__anonymous_3);
						activity_names.accept(_position__anonymous_3);
						siding_names.accept(_position__anonymous_3);
						item_names.accept(_position__anonymous_3);
						aspect_names.accept(_position__anonymous_3);
						affinity_names.accept(_position__anonymous_3);
						activity_type_names.accept(_position__anonymous_3);
						trail_names.accept(_position__anonymous_3);
						attack_names.accept(_position__anonymous_3);
						reason_names.accept(_position__anonymous_3);
						trait_names.accept(_position__anonymous_3);
						condition_names.accept(_position__anonymous_3);
						payment_short_type_names.accept(_position__anonymous_3);
						skill_names.accept(_position__anonymous_3);
						map_names.accept(_position__anonymous_3);
						event_names.accept(_position__anonymous_3);
						image_names.accept(_position__anonymous_3);
						tile_symbols.accept(_position__anonymous_3);
						payment_long_type_names.accept(_position__anonymous_3);
						area_names.accept(_position__anonymous_3);
						structure_names.accept(_position__anonymous_3);
						tile_names.accept(_position__anonymous_3);
						hero_stat.accept(_position__anonymous_3);
					}
				}
			}
		}
	}
	public void parse__anonymous_9() {
		int _position__anonymous_9 = -1;
		Token.Parsed _token__anonymous_9 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_9=_position;
		_token__anonymous_9=_token;
		_token=new Tokens.Name.GainTraitToken();
		if(_pass==FIRST_PASS) {
			String _result = _preparsed_NAME.get(_position);
			if(_result==null) {
				_state=FAILED;
			}
			else {
				Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
				_token.add(_position,_first_pass_token);
				_position+=_result.length();
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
		}
		else if(_pass==SECOND_PASS) {
			_list_name_result=_preparsed_NAME.get(_position);
			if(_list_name_result!=null&&trait_names.contains(_list_name_result)) {
				if(_position+_list_name_result.length()<_inputLength) {
					int _next_char = _inputArray[_position+_list_name_result.length()];
					if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,new Tokens.Name.TraitNamesToken(_list_name_result));
					_position+=_list_name_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"trait_names");
					_furthestPosition=_position;
				}
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"item_parameter(_anonymous_9)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_9;
		}
		else {
			int _state_23 = _state;
			parse_if_header();
			if(_state_23==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"item_parameter(_anonymous_9)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_9;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_9.add(_position__anonymous_9,_token);
		}
		_token=_token__anonymous_9;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_9);
			association_names.reject(_position__anonymous_9);
			room_names.reject(_position__anonymous_9);
			activity_names.reject(_position__anonymous_9);
			siding_names.reject(_position__anonymous_9);
			item_names.reject(_position__anonymous_9);
			aspect_names.reject(_position__anonymous_9);
			affinity_names.reject(_position__anonymous_9);
			activity_type_names.reject(_position__anonymous_9);
			trail_names.reject(_position__anonymous_9);
			attack_names.reject(_position__anonymous_9);
			reason_names.reject(_position__anonymous_9);
			trait_names.reject(_position__anonymous_9);
			condition_names.reject(_position__anonymous_9);
			payment_short_type_names.reject(_position__anonymous_9);
			skill_names.reject(_position__anonymous_9);
			map_names.reject(_position__anonymous_9);
			event_names.reject(_position__anonymous_9);
			image_names.reject(_position__anonymous_9);
			tile_symbols.reject(_position__anonymous_9);
			payment_long_type_names.reject(_position__anonymous_9);
			area_names.reject(_position__anonymous_9);
			structure_names.reject(_position__anonymous_9);
			tile_names.reject(_position__anonymous_9);
			hero_stat.reject(_position__anonymous_9);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_9);
			association_names.accept(_position__anonymous_9);
			room_names.accept(_position__anonymous_9);
			activity_names.accept(_position__anonymous_9);
			siding_names.accept(_position__anonymous_9);
			item_names.accept(_position__anonymous_9);
			aspect_names.accept(_position__anonymous_9);
			affinity_names.accept(_position__anonymous_9);
			activity_type_names.accept(_position__anonymous_9);
			trail_names.accept(_position__anonymous_9);
			attack_names.accept(_position__anonymous_9);
			reason_names.accept(_position__anonymous_9);
			trait_names.accept(_position__anonymous_9);
			condition_names.accept(_position__anonymous_9);
			payment_short_type_names.accept(_position__anonymous_9);
			skill_names.accept(_position__anonymous_9);
			map_names.accept(_position__anonymous_9);
			event_names.accept(_position__anonymous_9);
			image_names.accept(_position__anonymous_9);
			tile_symbols.accept(_position__anonymous_9);
			payment_long_type_names.accept(_position__anonymous_9);
			area_names.accept(_position__anonymous_9);
			structure_names.accept(_position__anonymous_9);
			tile_names.accept(_position__anonymous_9);
			hero_stat.accept(_position__anonymous_9);
		}
	}
	public void parse__anonymous_0() {
		int _position__anonymous_0 = -1;
		Token.Parsed _token__anonymous_0 = null;
		int _position_std_body = -1;
		Token.Parsed _token_std_body = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_0=_position;
		_token__anonymous_0=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse_comments();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"base(_anonymous_0)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_0;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_0.addAll(_token);
			_token__anonymous_0.setValue(_token.getValue());
		}
		_token=_token__anonymous_0;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_0);
			association_names.reject(_position__anonymous_0);
			room_names.reject(_position__anonymous_0);
			activity_names.reject(_position__anonymous_0);
			siding_names.reject(_position__anonymous_0);
			item_names.reject(_position__anonymous_0);
			aspect_names.reject(_position__anonymous_0);
			affinity_names.reject(_position__anonymous_0);
			activity_type_names.reject(_position__anonymous_0);
			trail_names.reject(_position__anonymous_0);
			attack_names.reject(_position__anonymous_0);
			reason_names.reject(_position__anonymous_0);
			trait_names.reject(_position__anonymous_0);
			condition_names.reject(_position__anonymous_0);
			payment_short_type_names.reject(_position__anonymous_0);
			skill_names.reject(_position__anonymous_0);
			map_names.reject(_position__anonymous_0);
			event_names.reject(_position__anonymous_0);
			image_names.reject(_position__anonymous_0);
			tile_symbols.reject(_position__anonymous_0);
			payment_long_type_names.reject(_position__anonymous_0);
			area_names.reject(_position__anonymous_0);
			structure_names.reject(_position__anonymous_0);
			tile_names.reject(_position__anonymous_0);
			hero_stat.reject(_position__anonymous_0);
			_state=SUCCESS;
			_position__anonymous_0=_position;
			_token__anonymous_0=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			parse_import_any();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"base(_anonymous_0)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_0;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_0.addAll(_token);
				_token__anonymous_0.setValue(_token.getValue());
			}
			_token=_token__anonymous_0;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_0);
				association_names.reject(_position__anonymous_0);
				room_names.reject(_position__anonymous_0);
				activity_names.reject(_position__anonymous_0);
				siding_names.reject(_position__anonymous_0);
				item_names.reject(_position__anonymous_0);
				aspect_names.reject(_position__anonymous_0);
				affinity_names.reject(_position__anonymous_0);
				activity_type_names.reject(_position__anonymous_0);
				trail_names.reject(_position__anonymous_0);
				attack_names.reject(_position__anonymous_0);
				reason_names.reject(_position__anonymous_0);
				trait_names.reject(_position__anonymous_0);
				condition_names.reject(_position__anonymous_0);
				payment_short_type_names.reject(_position__anonymous_0);
				skill_names.reject(_position__anonymous_0);
				map_names.reject(_position__anonymous_0);
				event_names.reject(_position__anonymous_0);
				image_names.reject(_position__anonymous_0);
				tile_symbols.reject(_position__anonymous_0);
				payment_long_type_names.reject(_position__anonymous_0);
				area_names.reject(_position__anonymous_0);
				structure_names.reject(_position__anonymous_0);
				tile_names.reject(_position__anonymous_0);
				hero_stat.reject(_position__anonymous_0);
				_state=SUCCESS;
				_position__anonymous_0=_position;
				_token__anonymous_0=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				if(_position+4-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!='l') {
						_state=FAILED;
					}
					if(_inputArray[_position+1]!='o') {
						_state=FAILED;
					}
					if(_inputArray[_position+2]!='a') {
						_state=FAILED;
					}
					if(_inputArray[_position+3]!='d') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_0.SYNTAX);
					_position=_position+4;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain load");
						_furthestPosition=_position;
					}
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"base(_anonymous_0)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_0;
				}
				else {
					_token_std_body=_token;
					_token=new Tokens.Name.LoadBodyToken();
					_position_std_body=_position;
					parse_std_body();
					if(_state==SUCCESS) {
						_token_std_body.add(_position_std_body,_token);
					}
					_token=_token_std_body;
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"base(_anonymous_0)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_0;
					}
					else {
					}
				}
				if(_state==SUCCESS) {
					_token__anonymous_0.addAll(_token);
					_token__anonymous_0.setValue(_token.getValue());
				}
				_token=_token__anonymous_0;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_0);
					association_names.reject(_position__anonymous_0);
					room_names.reject(_position__anonymous_0);
					activity_names.reject(_position__anonymous_0);
					siding_names.reject(_position__anonymous_0);
					item_names.reject(_position__anonymous_0);
					aspect_names.reject(_position__anonymous_0);
					affinity_names.reject(_position__anonymous_0);
					activity_type_names.reject(_position__anonymous_0);
					trail_names.reject(_position__anonymous_0);
					attack_names.reject(_position__anonymous_0);
					reason_names.reject(_position__anonymous_0);
					trait_names.reject(_position__anonymous_0);
					condition_names.reject(_position__anonymous_0);
					payment_short_type_names.reject(_position__anonymous_0);
					skill_names.reject(_position__anonymous_0);
					map_names.reject(_position__anonymous_0);
					event_names.reject(_position__anonymous_0);
					image_names.reject(_position__anonymous_0);
					tile_symbols.reject(_position__anonymous_0);
					payment_long_type_names.reject(_position__anonymous_0);
					area_names.reject(_position__anonymous_0);
					structure_names.reject(_position__anonymous_0);
					tile_names.reject(_position__anonymous_0);
					hero_stat.reject(_position__anonymous_0);
					_state=SUCCESS;
					_position__anonymous_0=_position;
					_token__anonymous_0=_token;
					_token=new Token.Parsed(Token.Id.ANON);
					if(_position+1-1 >=_inputLength) {
						_state=FAILED;
					}
					else {
						if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
						_position=_position+1;
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
					else if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
							_furthestPosition=_position;
						}
					}
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"base(_anonymous_0)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_0;
					}
					else {
					}
					if(_state==SUCCESS) {
						_token__anonymous_0.addAll(_token);
						_token__anonymous_0.setValue(_token.getValue());
					}
					_token=_token__anonymous_0;
					if(_state==FAILED) {
						support_names.reject(_position__anonymous_0);
						association_names.reject(_position__anonymous_0);
						room_names.reject(_position__anonymous_0);
						activity_names.reject(_position__anonymous_0);
						siding_names.reject(_position__anonymous_0);
						item_names.reject(_position__anonymous_0);
						aspect_names.reject(_position__anonymous_0);
						affinity_names.reject(_position__anonymous_0);
						activity_type_names.reject(_position__anonymous_0);
						trail_names.reject(_position__anonymous_0);
						attack_names.reject(_position__anonymous_0);
						reason_names.reject(_position__anonymous_0);
						trait_names.reject(_position__anonymous_0);
						condition_names.reject(_position__anonymous_0);
						payment_short_type_names.reject(_position__anonymous_0);
						skill_names.reject(_position__anonymous_0);
						map_names.reject(_position__anonymous_0);
						event_names.reject(_position__anonymous_0);
						image_names.reject(_position__anonymous_0);
						tile_symbols.reject(_position__anonymous_0);
						payment_long_type_names.reject(_position__anonymous_0);
						area_names.reject(_position__anonymous_0);
						structure_names.reject(_position__anonymous_0);
						tile_names.reject(_position__anonymous_0);
						hero_stat.reject(_position__anonymous_0);
					}
					else if(_state==SUCCESS) {
						support_names.accept(_position__anonymous_0);
						association_names.accept(_position__anonymous_0);
						room_names.accept(_position__anonymous_0);
						activity_names.accept(_position__anonymous_0);
						siding_names.accept(_position__anonymous_0);
						item_names.accept(_position__anonymous_0);
						aspect_names.accept(_position__anonymous_0);
						affinity_names.accept(_position__anonymous_0);
						activity_type_names.accept(_position__anonymous_0);
						trail_names.accept(_position__anonymous_0);
						attack_names.accept(_position__anonymous_0);
						reason_names.accept(_position__anonymous_0);
						trait_names.accept(_position__anonymous_0);
						condition_names.accept(_position__anonymous_0);
						payment_short_type_names.accept(_position__anonymous_0);
						skill_names.accept(_position__anonymous_0);
						map_names.accept(_position__anonymous_0);
						event_names.accept(_position__anonymous_0);
						image_names.accept(_position__anonymous_0);
						tile_symbols.accept(_position__anonymous_0);
						payment_long_type_names.accept(_position__anonymous_0);
						area_names.accept(_position__anonymous_0);
						structure_names.accept(_position__anonymous_0);
						tile_names.accept(_position__anonymous_0);
						hero_stat.accept(_position__anonymous_0);
					}
				}
			}
		}
	}
	public void parse__anonymous_99() {
		int _position__anonymous_99 = -1;
		Token.Parsed _token__anonymous_99 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_99=_position;
		_token__anonymous_99=_token;
		_token=new Tokens.Name.DensDeclarationToken();
		int _state_128 = _state;
		boolean _iteration_achieved_128 = false;
		while(_position<_inputLength) {
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='*') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_19.SYNTAX);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain *");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				break;
			}
			else {
				_iteration_achieved_128=true;
			}
		}
		if(_iteration_achieved_128==false) {
			_state=FAILED;
		}
		else if(_state_128==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_99)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_99;
		}
		else {
			if(_position+4-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='D') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='e') {
					_state=FAILED;
				}
				if(_inputArray[_position+2]!='n') {
					_state=FAILED;
				}
				if(_inputArray[_position+3]!='s') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_78.SYNTAX);
				_position=_position+4;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain Dens");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_99)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_99;
			}
			else {
				int _state_129 = _state;
				boolean _iteration_achieved_129 = false;
				while(_position<_inputLength) {
					if(_position+1-1 >=_inputLength) {
						_state=FAILED;
					}
					else {
						if(_inputArray[_position+0]!='*') {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,Tokens.Syntax.syntax_19.SYNTAX);
						_position=_position+1;
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
					else if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain *");
							_furthestPosition=_position;
						}
					}
					if(_state==FAILED) {
						break;
					}
					else {
						_iteration_achieved_129=true;
					}
				}
				if(_iteration_achieved_129==false) {
					_state=FAILED;
				}
				else if(_state_129==SUCCESS&&_state==FAILED) {
					_state=SUCCESS;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_99)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_99;
				}
				else {
					int _state_130 = _state;
					while(_position<_inputLength) {
						if(_position+1-1 >=_inputLength) {
							_state=FAILED;
						}
						else {
							if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
								_state=FAILED;
							}
						}
						if(_state==SUCCESS) {
							_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
							_position=_position+1;
							while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
								++_position;
							}
						}
						else if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
								_furthestPosition=_position;
							}
						}
						if(_state==FAILED) {
							break;
						}
					}
					if(_state_130==SUCCESS&&_state==FAILED) {
						_state=SUCCESS;
					}
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_99)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_99;
					}
					else {
						int _state_131 = _state;
						while(_position<_inputLength) {
							parse_tile_definition();
							if(_state==FAILED) {
								break;
							}
						}
						if(_state_131==SUCCESS&&_state==FAILED) {
							_state=SUCCESS;
						}
						if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_99)");
								_furthestPosition=_position;
							}
							_position=_position__anonymous_99;
						}
						else {
						}
					}
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_99.add(_position__anonymous_99,_token);
		}
		_token=_token__anonymous_99;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_99);
			association_names.reject(_position__anonymous_99);
			room_names.reject(_position__anonymous_99);
			activity_names.reject(_position__anonymous_99);
			siding_names.reject(_position__anonymous_99);
			item_names.reject(_position__anonymous_99);
			aspect_names.reject(_position__anonymous_99);
			affinity_names.reject(_position__anonymous_99);
			activity_type_names.reject(_position__anonymous_99);
			trail_names.reject(_position__anonymous_99);
			attack_names.reject(_position__anonymous_99);
			reason_names.reject(_position__anonymous_99);
			trait_names.reject(_position__anonymous_99);
			condition_names.reject(_position__anonymous_99);
			payment_short_type_names.reject(_position__anonymous_99);
			skill_names.reject(_position__anonymous_99);
			map_names.reject(_position__anonymous_99);
			event_names.reject(_position__anonymous_99);
			image_names.reject(_position__anonymous_99);
			tile_symbols.reject(_position__anonymous_99);
			payment_long_type_names.reject(_position__anonymous_99);
			area_names.reject(_position__anonymous_99);
			structure_names.reject(_position__anonymous_99);
			tile_names.reject(_position__anonymous_99);
			hero_stat.reject(_position__anonymous_99);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_99);
			association_names.accept(_position__anonymous_99);
			room_names.accept(_position__anonymous_99);
			activity_names.accept(_position__anonymous_99);
			siding_names.accept(_position__anonymous_99);
			item_names.accept(_position__anonymous_99);
			aspect_names.accept(_position__anonymous_99);
			affinity_names.accept(_position__anonymous_99);
			activity_type_names.accept(_position__anonymous_99);
			trail_names.accept(_position__anonymous_99);
			attack_names.accept(_position__anonymous_99);
			reason_names.accept(_position__anonymous_99);
			trait_names.accept(_position__anonymous_99);
			condition_names.accept(_position__anonymous_99);
			payment_short_type_names.accept(_position__anonymous_99);
			skill_names.accept(_position__anonymous_99);
			map_names.accept(_position__anonymous_99);
			event_names.accept(_position__anonymous_99);
			image_names.accept(_position__anonymous_99);
			tile_symbols.accept(_position__anonymous_99);
			payment_long_type_names.accept(_position__anonymous_99);
			area_names.accept(_position__anonymous_99);
			structure_names.accept(_position__anonymous_99);
			tile_names.accept(_position__anonymous_99);
			hero_stat.accept(_position__anonymous_99);
		}
	}
	public void parse__anonymous_98() {
		int _position__anonymous_98 = -1;
		Token.Parsed _token__anonymous_98 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_98=_position;
		_token__anonymous_98=_token;
		_token=new Tokens.Name.TerrainDeclarationToken();
		int _state_124 = _state;
		boolean _iteration_achieved_124 = false;
		while(_position<_inputLength) {
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='*') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_19.SYNTAX);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain *");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				break;
			}
			else {
				_iteration_achieved_124=true;
			}
		}
		if(_iteration_achieved_124==false) {
			_state=FAILED;
		}
		else if(_state_124==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_98)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_98;
		}
		else {
			if(_position+7-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='T') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='e') {
					_state=FAILED;
				}
				if(_inputArray[_position+2]!='r') {
					_state=FAILED;
				}
				if(_inputArray[_position+3]!='r') {
					_state=FAILED;
				}
				if(_inputArray[_position+4]!='a') {
					_state=FAILED;
				}
				if(_inputArray[_position+5]!='i') {
					_state=FAILED;
				}
				if(_inputArray[_position+6]!='n') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_77.SYNTAX);
				_position=_position+7;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain Terrain");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_98)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_98;
			}
			else {
				int _state_125 = _state;
				boolean _iteration_achieved_125 = false;
				while(_position<_inputLength) {
					if(_position+1-1 >=_inputLength) {
						_state=FAILED;
					}
					else {
						if(_inputArray[_position+0]!='*') {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,Tokens.Syntax.syntax_19.SYNTAX);
						_position=_position+1;
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
					else if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain *");
							_furthestPosition=_position;
						}
					}
					if(_state==FAILED) {
						break;
					}
					else {
						_iteration_achieved_125=true;
					}
				}
				if(_iteration_achieved_125==false) {
					_state=FAILED;
				}
				else if(_state_125==SUCCESS&&_state==FAILED) {
					_state=SUCCESS;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_98)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_98;
				}
				else {
					int _state_126 = _state;
					while(_position<_inputLength) {
						if(_position+1-1 >=_inputLength) {
							_state=FAILED;
						}
						else {
							if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
								_state=FAILED;
							}
						}
						if(_state==SUCCESS) {
							_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
							_position=_position+1;
							while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
								++_position;
							}
						}
						else if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
								_furthestPosition=_position;
							}
						}
						if(_state==FAILED) {
							break;
						}
					}
					if(_state_126==SUCCESS&&_state==FAILED) {
						_state=SUCCESS;
					}
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_98)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_98;
					}
					else {
						int _state_127 = _state;
						while(_position<_inputLength) {
							parse_tile_definition();
							if(_state==FAILED) {
								break;
							}
						}
						if(_state_127==SUCCESS&&_state==FAILED) {
							_state=SUCCESS;
						}
						if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_98)");
								_furthestPosition=_position;
							}
							_position=_position__anonymous_98;
						}
						else {
						}
					}
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_98.add(_position__anonymous_98,_token);
		}
		_token=_token__anonymous_98;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_98);
			association_names.reject(_position__anonymous_98);
			room_names.reject(_position__anonymous_98);
			activity_names.reject(_position__anonymous_98);
			siding_names.reject(_position__anonymous_98);
			item_names.reject(_position__anonymous_98);
			aspect_names.reject(_position__anonymous_98);
			affinity_names.reject(_position__anonymous_98);
			activity_type_names.reject(_position__anonymous_98);
			trail_names.reject(_position__anonymous_98);
			attack_names.reject(_position__anonymous_98);
			reason_names.reject(_position__anonymous_98);
			trait_names.reject(_position__anonymous_98);
			condition_names.reject(_position__anonymous_98);
			payment_short_type_names.reject(_position__anonymous_98);
			skill_names.reject(_position__anonymous_98);
			map_names.reject(_position__anonymous_98);
			event_names.reject(_position__anonymous_98);
			image_names.reject(_position__anonymous_98);
			tile_symbols.reject(_position__anonymous_98);
			payment_long_type_names.reject(_position__anonymous_98);
			area_names.reject(_position__anonymous_98);
			structure_names.reject(_position__anonymous_98);
			tile_names.reject(_position__anonymous_98);
			hero_stat.reject(_position__anonymous_98);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_98);
			association_names.accept(_position__anonymous_98);
			room_names.accept(_position__anonymous_98);
			activity_names.accept(_position__anonymous_98);
			siding_names.accept(_position__anonymous_98);
			item_names.accept(_position__anonymous_98);
			aspect_names.accept(_position__anonymous_98);
			affinity_names.accept(_position__anonymous_98);
			activity_type_names.accept(_position__anonymous_98);
			trail_names.accept(_position__anonymous_98);
			attack_names.accept(_position__anonymous_98);
			reason_names.accept(_position__anonymous_98);
			trait_names.accept(_position__anonymous_98);
			condition_names.accept(_position__anonymous_98);
			payment_short_type_names.accept(_position__anonymous_98);
			skill_names.accept(_position__anonymous_98);
			map_names.accept(_position__anonymous_98);
			event_names.accept(_position__anonymous_98);
			image_names.accept(_position__anonymous_98);
			tile_symbols.accept(_position__anonymous_98);
			payment_long_type_names.accept(_position__anonymous_98);
			area_names.accept(_position__anonymous_98);
			structure_names.accept(_position__anonymous_98);
			tile_names.accept(_position__anonymous_98);
			hero_stat.accept(_position__anonymous_98);
		}
	}
	public void parse__anonymous_91() {
		int _position__anonymous_91 = -1;
		Token.Parsed _token__anonymous_91 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_91=_position;
		_token__anonymous_91=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='/') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_53.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain /");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"patch_position(_anonymous_91)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_91;
		}
		else {
			parse_patch_dimension();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"patch_position(_anonymous_91)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_91;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_91.addAll(_token);
			_token__anonymous_91.setValue(_token.getValue());
		}
		_token=_token__anonymous_91;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_91);
			association_names.reject(_position__anonymous_91);
			room_names.reject(_position__anonymous_91);
			activity_names.reject(_position__anonymous_91);
			siding_names.reject(_position__anonymous_91);
			item_names.reject(_position__anonymous_91);
			aspect_names.reject(_position__anonymous_91);
			affinity_names.reject(_position__anonymous_91);
			activity_type_names.reject(_position__anonymous_91);
			trail_names.reject(_position__anonymous_91);
			attack_names.reject(_position__anonymous_91);
			reason_names.reject(_position__anonymous_91);
			trait_names.reject(_position__anonymous_91);
			condition_names.reject(_position__anonymous_91);
			payment_short_type_names.reject(_position__anonymous_91);
			skill_names.reject(_position__anonymous_91);
			map_names.reject(_position__anonymous_91);
			event_names.reject(_position__anonymous_91);
			image_names.reject(_position__anonymous_91);
			tile_symbols.reject(_position__anonymous_91);
			payment_long_type_names.reject(_position__anonymous_91);
			area_names.reject(_position__anonymous_91);
			structure_names.reject(_position__anonymous_91);
			tile_names.reject(_position__anonymous_91);
			hero_stat.reject(_position__anonymous_91);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_91);
			association_names.accept(_position__anonymous_91);
			room_names.accept(_position__anonymous_91);
			activity_names.accept(_position__anonymous_91);
			siding_names.accept(_position__anonymous_91);
			item_names.accept(_position__anonymous_91);
			aspect_names.accept(_position__anonymous_91);
			affinity_names.accept(_position__anonymous_91);
			activity_type_names.accept(_position__anonymous_91);
			trail_names.accept(_position__anonymous_91);
			attack_names.accept(_position__anonymous_91);
			reason_names.accept(_position__anonymous_91);
			trait_names.accept(_position__anonymous_91);
			condition_names.accept(_position__anonymous_91);
			payment_short_type_names.accept(_position__anonymous_91);
			skill_names.accept(_position__anonymous_91);
			map_names.accept(_position__anonymous_91);
			event_names.accept(_position__anonymous_91);
			image_names.accept(_position__anonymous_91);
			tile_symbols.accept(_position__anonymous_91);
			payment_long_type_names.accept(_position__anonymous_91);
			area_names.accept(_position__anonymous_91);
			structure_names.accept(_position__anonymous_91);
			tile_names.accept(_position__anonymous_91);
			hero_stat.accept(_position__anonymous_91);
		}
	}
	public void parse__anonymous_90() {
		int _position__anonymous_90 = -1;
		Token.Parsed _token__anonymous_90 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_90=_position;
		_token__anonymous_90=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+2-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='s') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_70.SYNTAX);
			_position=_position+2;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain as");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"patch_goto(_anonymous_90)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_90;
		}
		else {
			_token_NAME=_token;
			_token=new Tokens.Name.NodeNameToken();
			_position_NAME=_position;
			parse_NAME();
			if(_state==SUCCESS) {
				_token_NAME.add(_position_NAME,_token);
			}
			_token=_token_NAME;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"patch_goto(_anonymous_90)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_90;
			}
			else {
				if(_position+2-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!='i') {
						_state=FAILED;
					}
					if(_inputArray[_position+1]!='n') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_71.SYNTAX);
					_position=_position+2;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain in");
						_furthestPosition=_position;
					}
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"patch_goto(_anonymous_90)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_90;
				}
				else {
					if(_pass==FIRST_PASS) {
						String _result = _preparsed_NAME.get(_position);
						if(_result==null) {
							_state=FAILED;
						}
						else {
							Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
							_token.add(_position,_first_pass_token);
							_position+=_result.length();
							while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
								++_position;
							}
						}
					}
					else if(_pass==SECOND_PASS) {
						_list_name_result=_preparsed_NAME.get(_position);
						if(_list_name_result!=null&&trail_names.contains(_list_name_result)) {
							if(_position+_list_name_result.length()<_inputLength) {
								int _next_char = _inputArray[_position+_list_name_result.length()];
								if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
									_state=FAILED;
								}
							}
							if(_state==SUCCESS) {
								_token.add(_position,new Tokens.Name.TrailNamesToken(_list_name_result));
								_position+=_list_name_result.length();
								while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
									++_position;
								}
							}
						}
						else {
							_state=FAILED;
						}
						if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"trail_names");
								_furthestPosition=_position;
							}
						}
					}
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"patch_goto(_anonymous_90)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_90;
					}
					else {
					}
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_90.addAll(_token);
			_token__anonymous_90.setValue(_token.getValue());
		}
		_token=_token__anonymous_90;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_90);
			association_names.reject(_position__anonymous_90);
			room_names.reject(_position__anonymous_90);
			activity_names.reject(_position__anonymous_90);
			siding_names.reject(_position__anonymous_90);
			item_names.reject(_position__anonymous_90);
			aspect_names.reject(_position__anonymous_90);
			affinity_names.reject(_position__anonymous_90);
			activity_type_names.reject(_position__anonymous_90);
			trail_names.reject(_position__anonymous_90);
			attack_names.reject(_position__anonymous_90);
			reason_names.reject(_position__anonymous_90);
			trait_names.reject(_position__anonymous_90);
			condition_names.reject(_position__anonymous_90);
			payment_short_type_names.reject(_position__anonymous_90);
			skill_names.reject(_position__anonymous_90);
			map_names.reject(_position__anonymous_90);
			event_names.reject(_position__anonymous_90);
			image_names.reject(_position__anonymous_90);
			tile_symbols.reject(_position__anonymous_90);
			payment_long_type_names.reject(_position__anonymous_90);
			area_names.reject(_position__anonymous_90);
			structure_names.reject(_position__anonymous_90);
			tile_names.reject(_position__anonymous_90);
			hero_stat.reject(_position__anonymous_90);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_90);
			association_names.accept(_position__anonymous_90);
			room_names.accept(_position__anonymous_90);
			activity_names.accept(_position__anonymous_90);
			siding_names.accept(_position__anonymous_90);
			item_names.accept(_position__anonymous_90);
			aspect_names.accept(_position__anonymous_90);
			affinity_names.accept(_position__anonymous_90);
			activity_type_names.accept(_position__anonymous_90);
			trail_names.accept(_position__anonymous_90);
			attack_names.accept(_position__anonymous_90);
			reason_names.accept(_position__anonymous_90);
			trait_names.accept(_position__anonymous_90);
			condition_names.accept(_position__anonymous_90);
			payment_short_type_names.accept(_position__anonymous_90);
			skill_names.accept(_position__anonymous_90);
			map_names.accept(_position__anonymous_90);
			event_names.accept(_position__anonymous_90);
			image_names.accept(_position__anonymous_90);
			tile_symbols.accept(_position__anonymous_90);
			payment_long_type_names.accept(_position__anonymous_90);
			area_names.accept(_position__anonymous_90);
			structure_names.accept(_position__anonymous_90);
			tile_names.accept(_position__anonymous_90);
			hero_stat.accept(_position__anonymous_90);
		}
	}
	public void parse__anonymous_93() {
		int _position__anonymous_93 = -1;
		Token.Parsed _token__anonymous_93 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_93=_position;
		_token__anonymous_93=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse_direction_name();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"patch_rimcals(_anonymous_93)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_93;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_93.addAll(_token);
			_token__anonymous_93.setValue(_token.getValue());
		}
		_token=_token__anonymous_93;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_93);
			association_names.reject(_position__anonymous_93);
			room_names.reject(_position__anonymous_93);
			activity_names.reject(_position__anonymous_93);
			siding_names.reject(_position__anonymous_93);
			item_names.reject(_position__anonymous_93);
			aspect_names.reject(_position__anonymous_93);
			affinity_names.reject(_position__anonymous_93);
			activity_type_names.reject(_position__anonymous_93);
			trail_names.reject(_position__anonymous_93);
			attack_names.reject(_position__anonymous_93);
			reason_names.reject(_position__anonymous_93);
			trait_names.reject(_position__anonymous_93);
			condition_names.reject(_position__anonymous_93);
			payment_short_type_names.reject(_position__anonymous_93);
			skill_names.reject(_position__anonymous_93);
			map_names.reject(_position__anonymous_93);
			event_names.reject(_position__anonymous_93);
			image_names.reject(_position__anonymous_93);
			tile_symbols.reject(_position__anonymous_93);
			payment_long_type_names.reject(_position__anonymous_93);
			area_names.reject(_position__anonymous_93);
			structure_names.reject(_position__anonymous_93);
			tile_names.reject(_position__anonymous_93);
			hero_stat.reject(_position__anonymous_93);
			_state=SUCCESS;
			_position__anonymous_93=_position;
			_token__anonymous_93=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			if(_position+5-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='S') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='i') {
					_state=FAILED;
				}
				if(_inputArray[_position+2]!='d') {
					_state=FAILED;
				}
				if(_inputArray[_position+3]!='e') {
					_state=FAILED;
				}
				if(_inputArray[_position+4]!='s') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_73.SYNTAX);
				_position=_position+5;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain Sides");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"patch_rimcals(_anonymous_93)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_93;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_93.addAll(_token);
				_token__anonymous_93.setValue(_token.getValue());
			}
			_token=_token__anonymous_93;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_93);
				association_names.reject(_position__anonymous_93);
				room_names.reject(_position__anonymous_93);
				activity_names.reject(_position__anonymous_93);
				siding_names.reject(_position__anonymous_93);
				item_names.reject(_position__anonymous_93);
				aspect_names.reject(_position__anonymous_93);
				affinity_names.reject(_position__anonymous_93);
				activity_type_names.reject(_position__anonymous_93);
				trail_names.reject(_position__anonymous_93);
				attack_names.reject(_position__anonymous_93);
				reason_names.reject(_position__anonymous_93);
				trait_names.reject(_position__anonymous_93);
				condition_names.reject(_position__anonymous_93);
				payment_short_type_names.reject(_position__anonymous_93);
				skill_names.reject(_position__anonymous_93);
				map_names.reject(_position__anonymous_93);
				event_names.reject(_position__anonymous_93);
				image_names.reject(_position__anonymous_93);
				tile_symbols.reject(_position__anonymous_93);
				payment_long_type_names.reject(_position__anonymous_93);
				area_names.reject(_position__anonymous_93);
				structure_names.reject(_position__anonymous_93);
				tile_names.reject(_position__anonymous_93);
				hero_stat.reject(_position__anonymous_93);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_93);
				association_names.accept(_position__anonymous_93);
				room_names.accept(_position__anonymous_93);
				activity_names.accept(_position__anonymous_93);
				siding_names.accept(_position__anonymous_93);
				item_names.accept(_position__anonymous_93);
				aspect_names.accept(_position__anonymous_93);
				affinity_names.accept(_position__anonymous_93);
				activity_type_names.accept(_position__anonymous_93);
				trail_names.accept(_position__anonymous_93);
				attack_names.accept(_position__anonymous_93);
				reason_names.accept(_position__anonymous_93);
				trait_names.accept(_position__anonymous_93);
				condition_names.accept(_position__anonymous_93);
				payment_short_type_names.accept(_position__anonymous_93);
				skill_names.accept(_position__anonymous_93);
				map_names.accept(_position__anonymous_93);
				event_names.accept(_position__anonymous_93);
				image_names.accept(_position__anonymous_93);
				tile_symbols.accept(_position__anonymous_93);
				payment_long_type_names.accept(_position__anonymous_93);
				area_names.accept(_position__anonymous_93);
				structure_names.accept(_position__anonymous_93);
				tile_names.accept(_position__anonymous_93);
				hero_stat.accept(_position__anonymous_93);
			}
		}
	}
	public void parse__anonymous_92() {
		int _position__anonymous_92 = -1;
		Token.Parsed _token__anonymous_92 = null;
		int _position_INTEGER = -1;
		Token.Parsed _token_INTEGER = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_92=_position;
		_token__anonymous_92=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='-') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_15.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain -");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"patch_range(_anonymous_92)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_92;
		}
		else {
			_token_INTEGER=_token;
			_token=new Tokens.Name.UpperBoundToken();
			_position_INTEGER=_position;
			parse_INTEGER();
			if(_state==SUCCESS) {
				_token_INTEGER.add(_position_INTEGER,_token);
			}
			_token=_token_INTEGER;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"patch_range(_anonymous_92)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_92;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_92.addAll(_token);
			_token__anonymous_92.setValue(_token.getValue());
		}
		_token=_token__anonymous_92;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_92);
			association_names.reject(_position__anonymous_92);
			room_names.reject(_position__anonymous_92);
			activity_names.reject(_position__anonymous_92);
			siding_names.reject(_position__anonymous_92);
			item_names.reject(_position__anonymous_92);
			aspect_names.reject(_position__anonymous_92);
			affinity_names.reject(_position__anonymous_92);
			activity_type_names.reject(_position__anonymous_92);
			trail_names.reject(_position__anonymous_92);
			attack_names.reject(_position__anonymous_92);
			reason_names.reject(_position__anonymous_92);
			trait_names.reject(_position__anonymous_92);
			condition_names.reject(_position__anonymous_92);
			payment_short_type_names.reject(_position__anonymous_92);
			skill_names.reject(_position__anonymous_92);
			map_names.reject(_position__anonymous_92);
			event_names.reject(_position__anonymous_92);
			image_names.reject(_position__anonymous_92);
			tile_symbols.reject(_position__anonymous_92);
			payment_long_type_names.reject(_position__anonymous_92);
			area_names.reject(_position__anonymous_92);
			structure_names.reject(_position__anonymous_92);
			tile_names.reject(_position__anonymous_92);
			hero_stat.reject(_position__anonymous_92);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_92);
			association_names.accept(_position__anonymous_92);
			room_names.accept(_position__anonymous_92);
			activity_names.accept(_position__anonymous_92);
			siding_names.accept(_position__anonymous_92);
			item_names.accept(_position__anonymous_92);
			aspect_names.accept(_position__anonymous_92);
			affinity_names.accept(_position__anonymous_92);
			activity_type_names.accept(_position__anonymous_92);
			trail_names.accept(_position__anonymous_92);
			attack_names.accept(_position__anonymous_92);
			reason_names.accept(_position__anonymous_92);
			trait_names.accept(_position__anonymous_92);
			condition_names.accept(_position__anonymous_92);
			payment_short_type_names.accept(_position__anonymous_92);
			skill_names.accept(_position__anonymous_92);
			map_names.accept(_position__anonymous_92);
			event_names.accept(_position__anonymous_92);
			image_names.accept(_position__anonymous_92);
			tile_symbols.accept(_position__anonymous_92);
			payment_long_type_names.accept(_position__anonymous_92);
			area_names.accept(_position__anonymous_92);
			structure_names.accept(_position__anonymous_92);
			tile_names.accept(_position__anonymous_92);
			hero_stat.accept(_position__anonymous_92);
		}
	}
	public void parse__anonymous_95() {
		int _position__anonymous_95 = -1;
		Token.Parsed _token__anonymous_95 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_95=_position;
		_token__anonymous_95=_token;
		_token=new Tokens.Name.FloorDeclarationToken();
		int _state_114 = _state;
		boolean _iteration_achieved_114 = false;
		while(_position<_inputLength) {
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='*') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_19.SYNTAX);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain *");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				break;
			}
			else {
				_iteration_achieved_114=true;
			}
		}
		if(_iteration_achieved_114==false) {
			_state=FAILED;
		}
		else if(_state_114==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_95)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_95;
		}
		else {
			if(_position+5-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='F') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='l') {
					_state=FAILED;
				}
				if(_inputArray[_position+2]!='o') {
					_state=FAILED;
				}
				if(_inputArray[_position+3]!='o') {
					_state=FAILED;
				}
				if(_inputArray[_position+4]!='r') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_75.SYNTAX);
				_position=_position+5;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain Floor");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_95)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_95;
			}
			else {
				int _state_115 = _state;
				boolean _iteration_achieved_115 = false;
				while(_position<_inputLength) {
					if(_position+1-1 >=_inputLength) {
						_state=FAILED;
					}
					else {
						if(_inputArray[_position+0]!='*') {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,Tokens.Syntax.syntax_19.SYNTAX);
						_position=_position+1;
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
					else if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain *");
							_furthestPosition=_position;
						}
					}
					if(_state==FAILED) {
						break;
					}
					else {
						_iteration_achieved_115=true;
					}
				}
				if(_iteration_achieved_115==false) {
					_state=FAILED;
				}
				else if(_state_115==SUCCESS&&_state==FAILED) {
					_state=SUCCESS;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_95)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_95;
				}
				else {
					int _state_116 = _state;
					while(_position<_inputLength) {
						if(_position+1-1 >=_inputLength) {
							_state=FAILED;
						}
						else {
							if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
								_state=FAILED;
							}
						}
						if(_state==SUCCESS) {
							_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
							_position=_position+1;
							while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
								++_position;
							}
						}
						else if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
								_furthestPosition=_position;
							}
						}
						if(_state==FAILED) {
							break;
						}
					}
					if(_state_116==SUCCESS&&_state==FAILED) {
						_state=SUCCESS;
					}
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_95)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_95;
					}
					else {
						int _state_117 = _state;
						while(_position<_inputLength) {
							parse_edge_definition();
							if(_state==FAILED) {
								break;
							}
						}
						if(_state_117==SUCCESS&&_state==FAILED) {
							_state=SUCCESS;
						}
						if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_95)");
								_furthestPosition=_position;
							}
							_position=_position__anonymous_95;
						}
						else {
							int _state_118 = _state;
							while(_position<_inputLength) {
								if(_position+1-1 >=_inputLength) {
									_state=FAILED;
								}
								else {
									if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
										_state=FAILED;
									}
								}
								if(_state==SUCCESS) {
									_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
									_position=_position+1;
									while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
										++_position;
									}
								}
								else if(_state==FAILED) {
									if(_position>=_furthestPosition) {
										_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
										_furthestPosition=_position;
									}
								}
								if(_state==FAILED) {
									break;
								}
							}
							if(_state_118==SUCCESS&&_state==FAILED) {
								_state=SUCCESS;
							}
							if(_state==FAILED) {
								if(_position>=_furthestPosition) {
									_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_95)");
									_furthestPosition=_position;
								}
								_position=_position__anonymous_95;
							}
							else {
								int _state_119 = _state;
								while(_position<_inputLength) {
									parse_tile_definition();
									if(_state==FAILED) {
										break;
									}
								}
								if(_state_119==SUCCESS&&_state==FAILED) {
									_state=SUCCESS;
								}
								if(_state==FAILED) {
									if(_position>=_furthestPosition) {
										_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_95)");
										_furthestPosition=_position;
									}
									_position=_position__anonymous_95;
								}
								else {
								}
							}
						}
					}
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_95.add(_position__anonymous_95,_token);
		}
		_token=_token__anonymous_95;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_95);
			association_names.reject(_position__anonymous_95);
			room_names.reject(_position__anonymous_95);
			activity_names.reject(_position__anonymous_95);
			siding_names.reject(_position__anonymous_95);
			item_names.reject(_position__anonymous_95);
			aspect_names.reject(_position__anonymous_95);
			affinity_names.reject(_position__anonymous_95);
			activity_type_names.reject(_position__anonymous_95);
			trail_names.reject(_position__anonymous_95);
			attack_names.reject(_position__anonymous_95);
			reason_names.reject(_position__anonymous_95);
			trait_names.reject(_position__anonymous_95);
			condition_names.reject(_position__anonymous_95);
			payment_short_type_names.reject(_position__anonymous_95);
			skill_names.reject(_position__anonymous_95);
			map_names.reject(_position__anonymous_95);
			event_names.reject(_position__anonymous_95);
			image_names.reject(_position__anonymous_95);
			tile_symbols.reject(_position__anonymous_95);
			payment_long_type_names.reject(_position__anonymous_95);
			area_names.reject(_position__anonymous_95);
			structure_names.reject(_position__anonymous_95);
			tile_names.reject(_position__anonymous_95);
			hero_stat.reject(_position__anonymous_95);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_95);
			association_names.accept(_position__anonymous_95);
			room_names.accept(_position__anonymous_95);
			activity_names.accept(_position__anonymous_95);
			siding_names.accept(_position__anonymous_95);
			item_names.accept(_position__anonymous_95);
			aspect_names.accept(_position__anonymous_95);
			affinity_names.accept(_position__anonymous_95);
			activity_type_names.accept(_position__anonymous_95);
			trail_names.accept(_position__anonymous_95);
			attack_names.accept(_position__anonymous_95);
			reason_names.accept(_position__anonymous_95);
			trait_names.accept(_position__anonymous_95);
			condition_names.accept(_position__anonymous_95);
			payment_short_type_names.accept(_position__anonymous_95);
			skill_names.accept(_position__anonymous_95);
			map_names.accept(_position__anonymous_95);
			event_names.accept(_position__anonymous_95);
			image_names.accept(_position__anonymous_95);
			tile_symbols.accept(_position__anonymous_95);
			payment_long_type_names.accept(_position__anonymous_95);
			area_names.accept(_position__anonymous_95);
			structure_names.accept(_position__anonymous_95);
			tile_names.accept(_position__anonymous_95);
			hero_stat.accept(_position__anonymous_95);
		}
	}
	public void parse__anonymous_94() {
		int _position__anonymous_94 = -1;
		Token.Parsed _token__anonymous_94 = null;
		int _position_comments = -1;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_94=_position;
		_token__anonymous_94=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_tile(_anonymous_94)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_94;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_94.addAll(_token);
			_token__anonymous_94.setValue(_token.getValue());
		}
		_token=_token__anonymous_94;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_94);
			association_names.reject(_position__anonymous_94);
			room_names.reject(_position__anonymous_94);
			activity_names.reject(_position__anonymous_94);
			siding_names.reject(_position__anonymous_94);
			item_names.reject(_position__anonymous_94);
			aspect_names.reject(_position__anonymous_94);
			affinity_names.reject(_position__anonymous_94);
			activity_type_names.reject(_position__anonymous_94);
			trail_names.reject(_position__anonymous_94);
			attack_names.reject(_position__anonymous_94);
			reason_names.reject(_position__anonymous_94);
			trait_names.reject(_position__anonymous_94);
			condition_names.reject(_position__anonymous_94);
			payment_short_type_names.reject(_position__anonymous_94);
			skill_names.reject(_position__anonymous_94);
			map_names.reject(_position__anonymous_94);
			event_names.reject(_position__anonymous_94);
			image_names.reject(_position__anonymous_94);
			tile_symbols.reject(_position__anonymous_94);
			payment_long_type_names.reject(_position__anonymous_94);
			area_names.reject(_position__anonymous_94);
			structure_names.reject(_position__anonymous_94);
			tile_names.reject(_position__anonymous_94);
			hero_stat.reject(_position__anonymous_94);
			_state=SUCCESS;
			_position__anonymous_94=_position;
			_token__anonymous_94=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			_position_comments=_position;
			if(_state==SUCCESS&&!_recursion_protection_comments_29.contains(_position)) {
				_recursion_protection_comments_29.add(_position);
				parse_comments();
				_recursion_protection_comments_29.remove(_position_comments);
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_tile(_anonymous_94)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_94;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_94.addAll(_token);
				_token__anonymous_94.setValue(_token.getValue());
			}
			_token=_token__anonymous_94;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_94);
				association_names.reject(_position__anonymous_94);
				room_names.reject(_position__anonymous_94);
				activity_names.reject(_position__anonymous_94);
				siding_names.reject(_position__anonymous_94);
				item_names.reject(_position__anonymous_94);
				aspect_names.reject(_position__anonymous_94);
				affinity_names.reject(_position__anonymous_94);
				activity_type_names.reject(_position__anonymous_94);
				trail_names.reject(_position__anonymous_94);
				attack_names.reject(_position__anonymous_94);
				reason_names.reject(_position__anonymous_94);
				trait_names.reject(_position__anonymous_94);
				condition_names.reject(_position__anonymous_94);
				payment_short_type_names.reject(_position__anonymous_94);
				skill_names.reject(_position__anonymous_94);
				map_names.reject(_position__anonymous_94);
				event_names.reject(_position__anonymous_94);
				image_names.reject(_position__anonymous_94);
				tile_symbols.reject(_position__anonymous_94);
				payment_long_type_names.reject(_position__anonymous_94);
				area_names.reject(_position__anonymous_94);
				structure_names.reject(_position__anonymous_94);
				tile_names.reject(_position__anonymous_94);
				hero_stat.reject(_position__anonymous_94);
				_state=SUCCESS;
				_position__anonymous_94=_position;
				_token__anonymous_94=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				parse_tile_declaration();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_tile(_anonymous_94)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_94;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_94.addAll(_token);
					_token__anonymous_94.setValue(_token.getValue());
				}
				_token=_token__anonymous_94;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_94);
					association_names.reject(_position__anonymous_94);
					room_names.reject(_position__anonymous_94);
					activity_names.reject(_position__anonymous_94);
					siding_names.reject(_position__anonymous_94);
					item_names.reject(_position__anonymous_94);
					aspect_names.reject(_position__anonymous_94);
					affinity_names.reject(_position__anonymous_94);
					activity_type_names.reject(_position__anonymous_94);
					trail_names.reject(_position__anonymous_94);
					attack_names.reject(_position__anonymous_94);
					reason_names.reject(_position__anonymous_94);
					trait_names.reject(_position__anonymous_94);
					condition_names.reject(_position__anonymous_94);
					payment_short_type_names.reject(_position__anonymous_94);
					skill_names.reject(_position__anonymous_94);
					map_names.reject(_position__anonymous_94);
					event_names.reject(_position__anonymous_94);
					image_names.reject(_position__anonymous_94);
					tile_symbols.reject(_position__anonymous_94);
					payment_long_type_names.reject(_position__anonymous_94);
					area_names.reject(_position__anonymous_94);
					structure_names.reject(_position__anonymous_94);
					tile_names.reject(_position__anonymous_94);
					hero_stat.reject(_position__anonymous_94);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_94);
					association_names.accept(_position__anonymous_94);
					room_names.accept(_position__anonymous_94);
					activity_names.accept(_position__anonymous_94);
					siding_names.accept(_position__anonymous_94);
					item_names.accept(_position__anonymous_94);
					aspect_names.accept(_position__anonymous_94);
					affinity_names.accept(_position__anonymous_94);
					activity_type_names.accept(_position__anonymous_94);
					trail_names.accept(_position__anonymous_94);
					attack_names.accept(_position__anonymous_94);
					reason_names.accept(_position__anonymous_94);
					trait_names.accept(_position__anonymous_94);
					condition_names.accept(_position__anonymous_94);
					payment_short_type_names.accept(_position__anonymous_94);
					skill_names.accept(_position__anonymous_94);
					map_names.accept(_position__anonymous_94);
					event_names.accept(_position__anonymous_94);
					image_names.accept(_position__anonymous_94);
					tile_symbols.accept(_position__anonymous_94);
					payment_long_type_names.accept(_position__anonymous_94);
					area_names.accept(_position__anonymous_94);
					structure_names.accept(_position__anonymous_94);
					tile_names.accept(_position__anonymous_94);
					hero_stat.accept(_position__anonymous_94);
				}
			}
		}
	}
	public void parse__anonymous_97() {
		int _position__anonymous_97 = -1;
		Token.Parsed _token__anonymous_97 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_97=_position;
		_token__anonymous_97=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		int _state_123 = _state;
		while(_position<_inputLength) {
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				break;
			}
		}
		if(_state_123==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_97)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_97;
		}
		else {
			parse_siding_definition();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_97)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_97;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_97.addAll(_token);
			_token__anonymous_97.setValue(_token.getValue());
		}
		_token=_token__anonymous_97;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_97);
			association_names.reject(_position__anonymous_97);
			room_names.reject(_position__anonymous_97);
			activity_names.reject(_position__anonymous_97);
			siding_names.reject(_position__anonymous_97);
			item_names.reject(_position__anonymous_97);
			aspect_names.reject(_position__anonymous_97);
			affinity_names.reject(_position__anonymous_97);
			activity_type_names.reject(_position__anonymous_97);
			trail_names.reject(_position__anonymous_97);
			attack_names.reject(_position__anonymous_97);
			reason_names.reject(_position__anonymous_97);
			trait_names.reject(_position__anonymous_97);
			condition_names.reject(_position__anonymous_97);
			payment_short_type_names.reject(_position__anonymous_97);
			skill_names.reject(_position__anonymous_97);
			map_names.reject(_position__anonymous_97);
			event_names.reject(_position__anonymous_97);
			image_names.reject(_position__anonymous_97);
			tile_symbols.reject(_position__anonymous_97);
			payment_long_type_names.reject(_position__anonymous_97);
			area_names.reject(_position__anonymous_97);
			structure_names.reject(_position__anonymous_97);
			tile_names.reject(_position__anonymous_97);
			hero_stat.reject(_position__anonymous_97);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_97);
			association_names.accept(_position__anonymous_97);
			room_names.accept(_position__anonymous_97);
			activity_names.accept(_position__anonymous_97);
			siding_names.accept(_position__anonymous_97);
			item_names.accept(_position__anonymous_97);
			aspect_names.accept(_position__anonymous_97);
			affinity_names.accept(_position__anonymous_97);
			activity_type_names.accept(_position__anonymous_97);
			trail_names.accept(_position__anonymous_97);
			attack_names.accept(_position__anonymous_97);
			reason_names.accept(_position__anonymous_97);
			trait_names.accept(_position__anonymous_97);
			condition_names.accept(_position__anonymous_97);
			payment_short_type_names.accept(_position__anonymous_97);
			skill_names.accept(_position__anonymous_97);
			map_names.accept(_position__anonymous_97);
			event_names.accept(_position__anonymous_97);
			image_names.accept(_position__anonymous_97);
			tile_symbols.accept(_position__anonymous_97);
			payment_long_type_names.accept(_position__anonymous_97);
			area_names.accept(_position__anonymous_97);
			structure_names.accept(_position__anonymous_97);
			tile_names.accept(_position__anonymous_97);
			hero_stat.accept(_position__anonymous_97);
		}
	}
	public void parse__anonymous_96() {
		int _position__anonymous_96 = -1;
		Token.Parsed _token__anonymous_96 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_96=_position;
		_token__anonymous_96=_token;
		_token=new Tokens.Name.SidingDeclarationToken();
		int _state_120 = _state;
		boolean _iteration_achieved_120 = false;
		while(_position<_inputLength) {
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='*') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_19.SYNTAX);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain *");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				break;
			}
			else {
				_iteration_achieved_120=true;
			}
		}
		if(_iteration_achieved_120==false) {
			_state=FAILED;
		}
		else if(_state_120==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_96)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_96;
		}
		else {
			if(_position+4-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='E') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='d') {
					_state=FAILED;
				}
				if(_inputArray[_position+2]!='g') {
					_state=FAILED;
				}
				if(_inputArray[_position+3]!='e') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_76.SYNTAX);
				_position=_position+4;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain Edge");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_96)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_96;
			}
			else {
				int _state_121 = _state;
				boolean _iteration_achieved_121 = false;
				while(_position<_inputLength) {
					if(_position+1-1 >=_inputLength) {
						_state=FAILED;
					}
					else {
						if(_inputArray[_position+0]!='*') {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,Tokens.Syntax.syntax_19.SYNTAX);
						_position=_position+1;
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
					else if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain *");
							_furthestPosition=_position;
						}
					}
					if(_state==FAILED) {
						break;
					}
					else {
						_iteration_achieved_121=true;
					}
				}
				if(_iteration_achieved_121==false) {
					_state=FAILED;
				}
				else if(_state_121==SUCCESS&&_state==FAILED) {
					_state=SUCCESS;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_96)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_96;
				}
				else {
					int _state_122 = _state;
					while(_position<_inputLength) {
						parse__anonymous_97();
						if(_state==FAILED) {
							break;
						}
					}
					if(_state_122==SUCCESS&&_state==FAILED) {
						_state=SUCCESS;
					}
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_96)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_96;
					}
					else {
					}
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_96.add(_position__anonymous_96,_token);
		}
		_token=_token__anonymous_96;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_96);
			association_names.reject(_position__anonymous_96);
			room_names.reject(_position__anonymous_96);
			activity_names.reject(_position__anonymous_96);
			siding_names.reject(_position__anonymous_96);
			item_names.reject(_position__anonymous_96);
			aspect_names.reject(_position__anonymous_96);
			affinity_names.reject(_position__anonymous_96);
			activity_type_names.reject(_position__anonymous_96);
			trail_names.reject(_position__anonymous_96);
			attack_names.reject(_position__anonymous_96);
			reason_names.reject(_position__anonymous_96);
			trait_names.reject(_position__anonymous_96);
			condition_names.reject(_position__anonymous_96);
			payment_short_type_names.reject(_position__anonymous_96);
			skill_names.reject(_position__anonymous_96);
			map_names.reject(_position__anonymous_96);
			event_names.reject(_position__anonymous_96);
			image_names.reject(_position__anonymous_96);
			tile_symbols.reject(_position__anonymous_96);
			payment_long_type_names.reject(_position__anonymous_96);
			area_names.reject(_position__anonymous_96);
			structure_names.reject(_position__anonymous_96);
			tile_names.reject(_position__anonymous_96);
			hero_stat.reject(_position__anonymous_96);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_96);
			association_names.accept(_position__anonymous_96);
			room_names.accept(_position__anonymous_96);
			activity_names.accept(_position__anonymous_96);
			siding_names.accept(_position__anonymous_96);
			item_names.accept(_position__anonymous_96);
			aspect_names.accept(_position__anonymous_96);
			affinity_names.accept(_position__anonymous_96);
			activity_type_names.accept(_position__anonymous_96);
			trail_names.accept(_position__anonymous_96);
			attack_names.accept(_position__anonymous_96);
			reason_names.accept(_position__anonymous_96);
			trait_names.accept(_position__anonymous_96);
			condition_names.accept(_position__anonymous_96);
			payment_short_type_names.accept(_position__anonymous_96);
			skill_names.accept(_position__anonymous_96);
			map_names.accept(_position__anonymous_96);
			event_names.accept(_position__anonymous_96);
			image_names.accept(_position__anonymous_96);
			tile_symbols.accept(_position__anonymous_96);
			payment_long_type_names.accept(_position__anonymous_96);
			area_names.accept(_position__anonymous_96);
			structure_names.accept(_position__anonymous_96);
			tile_names.accept(_position__anonymous_96);
			hero_stat.accept(_position__anonymous_96);
		}
	}
	public void parse__anonymous_88() {
		int _position__anonymous_88 = -1;
		Token.Parsed _token__anonymous_88 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_88=_position;
		_token__anonymous_88=_token;
		_token=new Tokens.Name.DestinationToken();
		if(_pass==FIRST_PASS) {
			String _result = _preparsed_NAME.get(_position);
			if(_result==null) {
				_state=FAILED;
			}
			else {
				Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
				_token.add(_position,_first_pass_token);
				_position+=_result.length();
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
		}
		else if(_pass==SECOND_PASS) {
			_list_name_result=_preparsed_NAME.get(_position);
			if(_list_name_result!=null&&map_names.contains(_list_name_result)) {
				if(_position+_list_name_result.length()<_inputLength) {
					int _next_char = _inputArray[_position+_list_name_result.length()];
					if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,new Tokens.Name.MapNamesToken(_list_name_result));
					_position+=_list_name_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"map_names");
					_furthestPosition=_position;
				}
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"patch_goto(_anonymous_88)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_88;
		}
		else {
			int _state_108 = _state;
			while(_position<_inputLength) {
				parse__anonymous_89();
				if(_state==FAILED) {
					break;
				}
			}
			if(_state_108==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"patch_goto(_anonymous_88)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_88;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_88.add(_position__anonymous_88,_token);
		}
		_token=_token__anonymous_88;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_88);
			association_names.reject(_position__anonymous_88);
			room_names.reject(_position__anonymous_88);
			activity_names.reject(_position__anonymous_88);
			siding_names.reject(_position__anonymous_88);
			item_names.reject(_position__anonymous_88);
			aspect_names.reject(_position__anonymous_88);
			affinity_names.reject(_position__anonymous_88);
			activity_type_names.reject(_position__anonymous_88);
			trail_names.reject(_position__anonymous_88);
			attack_names.reject(_position__anonymous_88);
			reason_names.reject(_position__anonymous_88);
			trait_names.reject(_position__anonymous_88);
			condition_names.reject(_position__anonymous_88);
			payment_short_type_names.reject(_position__anonymous_88);
			skill_names.reject(_position__anonymous_88);
			map_names.reject(_position__anonymous_88);
			event_names.reject(_position__anonymous_88);
			image_names.reject(_position__anonymous_88);
			tile_symbols.reject(_position__anonymous_88);
			payment_long_type_names.reject(_position__anonymous_88);
			area_names.reject(_position__anonymous_88);
			structure_names.reject(_position__anonymous_88);
			tile_names.reject(_position__anonymous_88);
			hero_stat.reject(_position__anonymous_88);
			_state=SUCCESS;
			_position__anonymous_88=_position;
			_token__anonymous_88=_token;
			_token=new Tokens.Name.DestinationToken();
			if(_pass==FIRST_PASS) {
				String _result = _preparsed_NAME.get(_position);
				if(_result==null) {
					_state=FAILED;
				}
				else {
					Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
					_token.add(_position,_first_pass_token);
					_position+=_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else if(_pass==SECOND_PASS) {
				_list_name_result=_preparsed_NAME.get(_position);
				if(_list_name_result!=null&&room_names.contains(_list_name_result)) {
					if(_position+_list_name_result.length()<_inputLength) {
						int _next_char = _inputArray[_position+_list_name_result.length()];
						if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,new Tokens.Name.RoomNamesToken(_list_name_result));
						_position+=_list_name_result.length();
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
				}
				else {
					_state=FAILED;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"room_names");
						_furthestPosition=_position;
					}
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"patch_goto(_anonymous_88)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_88;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_88.add(_position__anonymous_88,_token);
			}
			_token=_token__anonymous_88;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_88);
				association_names.reject(_position__anonymous_88);
				room_names.reject(_position__anonymous_88);
				activity_names.reject(_position__anonymous_88);
				siding_names.reject(_position__anonymous_88);
				item_names.reject(_position__anonymous_88);
				aspect_names.reject(_position__anonymous_88);
				affinity_names.reject(_position__anonymous_88);
				activity_type_names.reject(_position__anonymous_88);
				trail_names.reject(_position__anonymous_88);
				attack_names.reject(_position__anonymous_88);
				reason_names.reject(_position__anonymous_88);
				trait_names.reject(_position__anonymous_88);
				condition_names.reject(_position__anonymous_88);
				payment_short_type_names.reject(_position__anonymous_88);
				skill_names.reject(_position__anonymous_88);
				map_names.reject(_position__anonymous_88);
				event_names.reject(_position__anonymous_88);
				image_names.reject(_position__anonymous_88);
				tile_symbols.reject(_position__anonymous_88);
				payment_long_type_names.reject(_position__anonymous_88);
				area_names.reject(_position__anonymous_88);
				structure_names.reject(_position__anonymous_88);
				tile_names.reject(_position__anonymous_88);
				hero_stat.reject(_position__anonymous_88);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_88);
				association_names.accept(_position__anonymous_88);
				room_names.accept(_position__anonymous_88);
				activity_names.accept(_position__anonymous_88);
				siding_names.accept(_position__anonymous_88);
				item_names.accept(_position__anonymous_88);
				aspect_names.accept(_position__anonymous_88);
				affinity_names.accept(_position__anonymous_88);
				activity_type_names.accept(_position__anonymous_88);
				trail_names.accept(_position__anonymous_88);
				attack_names.accept(_position__anonymous_88);
				reason_names.accept(_position__anonymous_88);
				trait_names.accept(_position__anonymous_88);
				condition_names.accept(_position__anonymous_88);
				payment_short_type_names.accept(_position__anonymous_88);
				skill_names.accept(_position__anonymous_88);
				map_names.accept(_position__anonymous_88);
				event_names.accept(_position__anonymous_88);
				image_names.accept(_position__anonymous_88);
				tile_symbols.accept(_position__anonymous_88);
				payment_long_type_names.accept(_position__anonymous_88);
				area_names.accept(_position__anonymous_88);
				structure_names.accept(_position__anonymous_88);
				tile_names.accept(_position__anonymous_88);
				hero_stat.accept(_position__anonymous_88);
			}
		}
	}
	public void parse__anonymous_87() {
		int _position__anonymous_87 = -1;
		Token.Parsed _token__anonymous_87 = null;
		int _position_INTEGER = -1;
		Token.Parsed _token_INTEGER = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_87=_position;
		_token__anonymous_87=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='+') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_14.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain +");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"patch_probability(_anonymous_87)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_87;
		}
		else {
			_token_INTEGER=_token;
			_token=new Tokens.Name.ProbabilityToken();
			_position_INTEGER=_position;
			parse_INTEGER();
			if(_state==SUCCESS) {
				_token_INTEGER.add(_position_INTEGER,_token);
			}
			_token=_token_INTEGER;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"patch_probability(_anonymous_87)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_87;
			}
			else {
				if(_position+1-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!='%') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_56.SYNTAX);
					_position=_position+1;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain %");
						_furthestPosition=_position;
					}
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"patch_probability(_anonymous_87)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_87;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_87.addAll(_token);
			_token__anonymous_87.setValue(_token.getValue());
		}
		_token=_token__anonymous_87;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_87);
			association_names.reject(_position__anonymous_87);
			room_names.reject(_position__anonymous_87);
			activity_names.reject(_position__anonymous_87);
			siding_names.reject(_position__anonymous_87);
			item_names.reject(_position__anonymous_87);
			aspect_names.reject(_position__anonymous_87);
			affinity_names.reject(_position__anonymous_87);
			activity_type_names.reject(_position__anonymous_87);
			trail_names.reject(_position__anonymous_87);
			attack_names.reject(_position__anonymous_87);
			reason_names.reject(_position__anonymous_87);
			trait_names.reject(_position__anonymous_87);
			condition_names.reject(_position__anonymous_87);
			payment_short_type_names.reject(_position__anonymous_87);
			skill_names.reject(_position__anonymous_87);
			map_names.reject(_position__anonymous_87);
			event_names.reject(_position__anonymous_87);
			image_names.reject(_position__anonymous_87);
			tile_symbols.reject(_position__anonymous_87);
			payment_long_type_names.reject(_position__anonymous_87);
			area_names.reject(_position__anonymous_87);
			structure_names.reject(_position__anonymous_87);
			tile_names.reject(_position__anonymous_87);
			hero_stat.reject(_position__anonymous_87);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_87);
			association_names.accept(_position__anonymous_87);
			room_names.accept(_position__anonymous_87);
			activity_names.accept(_position__anonymous_87);
			siding_names.accept(_position__anonymous_87);
			item_names.accept(_position__anonymous_87);
			aspect_names.accept(_position__anonymous_87);
			affinity_names.accept(_position__anonymous_87);
			activity_type_names.accept(_position__anonymous_87);
			trail_names.accept(_position__anonymous_87);
			attack_names.accept(_position__anonymous_87);
			reason_names.accept(_position__anonymous_87);
			trait_names.accept(_position__anonymous_87);
			condition_names.accept(_position__anonymous_87);
			payment_short_type_names.accept(_position__anonymous_87);
			skill_names.accept(_position__anonymous_87);
			map_names.accept(_position__anonymous_87);
			event_names.accept(_position__anonymous_87);
			image_names.accept(_position__anonymous_87);
			tile_symbols.accept(_position__anonymous_87);
			payment_long_type_names.accept(_position__anonymous_87);
			area_names.accept(_position__anonymous_87);
			structure_names.accept(_position__anonymous_87);
			tile_names.accept(_position__anonymous_87);
			hero_stat.accept(_position__anonymous_87);
		}
	}
	public void parse__anonymous_230() {
		int _position__anonymous_230 = -1;
		Token.Parsed _token__anonymous_230 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_230=_position;
		_token__anonymous_230=_token;
		_token=new Tokens.Name.PositionToken();
		parse_drawable_dimensions();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_multiple_element(_anonymous_230)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_230;
		}
		else {
			int _state_252 = _state;
			while(_position<_inputLength) {
				parse__anonymous_231();
				if(_state==FAILED) {
					break;
				}
			}
			if(_state_252==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_multiple_element(_anonymous_230)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_230;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_230.add(_position__anonymous_230,_token);
		}
		_token=_token__anonymous_230;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_230);
			association_names.reject(_position__anonymous_230);
			room_names.reject(_position__anonymous_230);
			activity_names.reject(_position__anonymous_230);
			siding_names.reject(_position__anonymous_230);
			item_names.reject(_position__anonymous_230);
			aspect_names.reject(_position__anonymous_230);
			affinity_names.reject(_position__anonymous_230);
			activity_type_names.reject(_position__anonymous_230);
			trail_names.reject(_position__anonymous_230);
			attack_names.reject(_position__anonymous_230);
			reason_names.reject(_position__anonymous_230);
			trait_names.reject(_position__anonymous_230);
			condition_names.reject(_position__anonymous_230);
			payment_short_type_names.reject(_position__anonymous_230);
			skill_names.reject(_position__anonymous_230);
			map_names.reject(_position__anonymous_230);
			event_names.reject(_position__anonymous_230);
			image_names.reject(_position__anonymous_230);
			tile_symbols.reject(_position__anonymous_230);
			payment_long_type_names.reject(_position__anonymous_230);
			area_names.reject(_position__anonymous_230);
			structure_names.reject(_position__anonymous_230);
			tile_names.reject(_position__anonymous_230);
			hero_stat.reject(_position__anonymous_230);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_230);
			association_names.accept(_position__anonymous_230);
			room_names.accept(_position__anonymous_230);
			activity_names.accept(_position__anonymous_230);
			siding_names.accept(_position__anonymous_230);
			item_names.accept(_position__anonymous_230);
			aspect_names.accept(_position__anonymous_230);
			affinity_names.accept(_position__anonymous_230);
			activity_type_names.accept(_position__anonymous_230);
			trail_names.accept(_position__anonymous_230);
			attack_names.accept(_position__anonymous_230);
			reason_names.accept(_position__anonymous_230);
			trait_names.accept(_position__anonymous_230);
			condition_names.accept(_position__anonymous_230);
			payment_short_type_names.accept(_position__anonymous_230);
			skill_names.accept(_position__anonymous_230);
			map_names.accept(_position__anonymous_230);
			event_names.accept(_position__anonymous_230);
			image_names.accept(_position__anonymous_230);
			tile_symbols.accept(_position__anonymous_230);
			payment_long_type_names.accept(_position__anonymous_230);
			area_names.accept(_position__anonymous_230);
			structure_names.accept(_position__anonymous_230);
			tile_names.accept(_position__anonymous_230);
			hero_stat.accept(_position__anonymous_230);
		}
	}
	public void parse__anonymous_89() {
		int _position__anonymous_89 = -1;
		Token.Parsed _token__anonymous_89 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_89=_position;
		_token__anonymous_89=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='.') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_69.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain .");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"patch_goto(_anonymous_89)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_89;
		}
		else {
			if(_pass==FIRST_PASS) {
				String _result = _preparsed_NAME.get(_position);
				if(_result==null) {
					_state=FAILED;
				}
				else {
					Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
					_token.add(_position,_first_pass_token);
					_position+=_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else if(_pass==SECOND_PASS) {
				_list_name_result=_preparsed_NAME.get(_position);
				if(_list_name_result!=null&&area_names.contains(_list_name_result)) {
					if(_position+_list_name_result.length()<_inputLength) {
						int _next_char = _inputArray[_position+_list_name_result.length()];
						if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,new Tokens.Name.AreaNamesToken(_list_name_result));
						_position+=_list_name_result.length();
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
				}
				else {
					_state=FAILED;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"area_names");
						_furthestPosition=_position;
					}
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"patch_goto(_anonymous_89)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_89;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_89.addAll(_token);
			_token__anonymous_89.setValue(_token.getValue());
		}
		_token=_token__anonymous_89;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_89);
			association_names.reject(_position__anonymous_89);
			room_names.reject(_position__anonymous_89);
			activity_names.reject(_position__anonymous_89);
			siding_names.reject(_position__anonymous_89);
			item_names.reject(_position__anonymous_89);
			aspect_names.reject(_position__anonymous_89);
			affinity_names.reject(_position__anonymous_89);
			activity_type_names.reject(_position__anonymous_89);
			trail_names.reject(_position__anonymous_89);
			attack_names.reject(_position__anonymous_89);
			reason_names.reject(_position__anonymous_89);
			trait_names.reject(_position__anonymous_89);
			condition_names.reject(_position__anonymous_89);
			payment_short_type_names.reject(_position__anonymous_89);
			skill_names.reject(_position__anonymous_89);
			map_names.reject(_position__anonymous_89);
			event_names.reject(_position__anonymous_89);
			image_names.reject(_position__anonymous_89);
			tile_symbols.reject(_position__anonymous_89);
			payment_long_type_names.reject(_position__anonymous_89);
			area_names.reject(_position__anonymous_89);
			structure_names.reject(_position__anonymous_89);
			tile_names.reject(_position__anonymous_89);
			hero_stat.reject(_position__anonymous_89);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_89);
			association_names.accept(_position__anonymous_89);
			room_names.accept(_position__anonymous_89);
			activity_names.accept(_position__anonymous_89);
			siding_names.accept(_position__anonymous_89);
			item_names.accept(_position__anonymous_89);
			aspect_names.accept(_position__anonymous_89);
			affinity_names.accept(_position__anonymous_89);
			activity_type_names.accept(_position__anonymous_89);
			trail_names.accept(_position__anonymous_89);
			attack_names.accept(_position__anonymous_89);
			reason_names.accept(_position__anonymous_89);
			trait_names.accept(_position__anonymous_89);
			condition_names.accept(_position__anonymous_89);
			payment_short_type_names.accept(_position__anonymous_89);
			skill_names.accept(_position__anonymous_89);
			map_names.accept(_position__anonymous_89);
			event_names.accept(_position__anonymous_89);
			image_names.accept(_position__anonymous_89);
			tile_symbols.accept(_position__anonymous_89);
			payment_long_type_names.accept(_position__anonymous_89);
			area_names.accept(_position__anonymous_89);
			structure_names.accept(_position__anonymous_89);
			tile_names.accept(_position__anonymous_89);
			hero_stat.accept(_position__anonymous_89);
		}
	}
	public void parse__anonymous_110() {
		int _position__anonymous_110 = -1;
		Token.Parsed _token__anonymous_110 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_110=_position;
		_token__anonymous_110=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!=',') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_23.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ,");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_definition(_anonymous_110)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_110;
		}
		else {
			parse__anonymous_111();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_definition(_anonymous_110)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_110;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_110.addAll(_token);
			_token__anonymous_110.setValue(_token.getValue());
		}
		_token=_token__anonymous_110;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_110);
			association_names.reject(_position__anonymous_110);
			room_names.reject(_position__anonymous_110);
			activity_names.reject(_position__anonymous_110);
			siding_names.reject(_position__anonymous_110);
			item_names.reject(_position__anonymous_110);
			aspect_names.reject(_position__anonymous_110);
			affinity_names.reject(_position__anonymous_110);
			activity_type_names.reject(_position__anonymous_110);
			trail_names.reject(_position__anonymous_110);
			attack_names.reject(_position__anonymous_110);
			reason_names.reject(_position__anonymous_110);
			trait_names.reject(_position__anonymous_110);
			condition_names.reject(_position__anonymous_110);
			payment_short_type_names.reject(_position__anonymous_110);
			skill_names.reject(_position__anonymous_110);
			map_names.reject(_position__anonymous_110);
			event_names.reject(_position__anonymous_110);
			image_names.reject(_position__anonymous_110);
			tile_symbols.reject(_position__anonymous_110);
			payment_long_type_names.reject(_position__anonymous_110);
			area_names.reject(_position__anonymous_110);
			structure_names.reject(_position__anonymous_110);
			tile_names.reject(_position__anonymous_110);
			hero_stat.reject(_position__anonymous_110);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_110);
			association_names.accept(_position__anonymous_110);
			room_names.accept(_position__anonymous_110);
			activity_names.accept(_position__anonymous_110);
			siding_names.accept(_position__anonymous_110);
			item_names.accept(_position__anonymous_110);
			aspect_names.accept(_position__anonymous_110);
			affinity_names.accept(_position__anonymous_110);
			activity_type_names.accept(_position__anonymous_110);
			trail_names.accept(_position__anonymous_110);
			attack_names.accept(_position__anonymous_110);
			reason_names.accept(_position__anonymous_110);
			trait_names.accept(_position__anonymous_110);
			condition_names.accept(_position__anonymous_110);
			payment_short_type_names.accept(_position__anonymous_110);
			skill_names.accept(_position__anonymous_110);
			map_names.accept(_position__anonymous_110);
			event_names.accept(_position__anonymous_110);
			image_names.accept(_position__anonymous_110);
			tile_symbols.accept(_position__anonymous_110);
			payment_long_type_names.accept(_position__anonymous_110);
			area_names.accept(_position__anonymous_110);
			structure_names.accept(_position__anonymous_110);
			tile_names.accept(_position__anonymous_110);
			hero_stat.accept(_position__anonymous_110);
		}
	}
	public void parse__anonymous_231() {
		int _position__anonymous_231 = -1;
		Token.Parsed _token__anonymous_231 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_231=_position;
		_token__anonymous_231=_token;
		_token=new Tokens.Name.SupplementaryToken();
		parse_drawable_arthmetic_operator();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_multiple_element(_anonymous_231)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_231;
		}
		else {
			parse_drawable_multiple_value();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_multiple_element(_anonymous_231)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_231;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_231.add(_position__anonymous_231,_token);
		}
		_token=_token__anonymous_231;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_231);
			association_names.reject(_position__anonymous_231);
			room_names.reject(_position__anonymous_231);
			activity_names.reject(_position__anonymous_231);
			siding_names.reject(_position__anonymous_231);
			item_names.reject(_position__anonymous_231);
			aspect_names.reject(_position__anonymous_231);
			affinity_names.reject(_position__anonymous_231);
			activity_type_names.reject(_position__anonymous_231);
			trail_names.reject(_position__anonymous_231);
			attack_names.reject(_position__anonymous_231);
			reason_names.reject(_position__anonymous_231);
			trait_names.reject(_position__anonymous_231);
			condition_names.reject(_position__anonymous_231);
			payment_short_type_names.reject(_position__anonymous_231);
			skill_names.reject(_position__anonymous_231);
			map_names.reject(_position__anonymous_231);
			event_names.reject(_position__anonymous_231);
			image_names.reject(_position__anonymous_231);
			tile_symbols.reject(_position__anonymous_231);
			payment_long_type_names.reject(_position__anonymous_231);
			area_names.reject(_position__anonymous_231);
			structure_names.reject(_position__anonymous_231);
			tile_names.reject(_position__anonymous_231);
			hero_stat.reject(_position__anonymous_231);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_231);
			association_names.accept(_position__anonymous_231);
			room_names.accept(_position__anonymous_231);
			activity_names.accept(_position__anonymous_231);
			siding_names.accept(_position__anonymous_231);
			item_names.accept(_position__anonymous_231);
			aspect_names.accept(_position__anonymous_231);
			affinity_names.accept(_position__anonymous_231);
			activity_type_names.accept(_position__anonymous_231);
			trail_names.accept(_position__anonymous_231);
			attack_names.accept(_position__anonymous_231);
			reason_names.accept(_position__anonymous_231);
			trait_names.accept(_position__anonymous_231);
			condition_names.accept(_position__anonymous_231);
			payment_short_type_names.accept(_position__anonymous_231);
			skill_names.accept(_position__anonymous_231);
			map_names.accept(_position__anonymous_231);
			event_names.accept(_position__anonymous_231);
			image_names.accept(_position__anonymous_231);
			tile_symbols.accept(_position__anonymous_231);
			payment_long_type_names.accept(_position__anonymous_231);
			area_names.accept(_position__anonymous_231);
			structure_names.accept(_position__anonymous_231);
			tile_names.accept(_position__anonymous_231);
			hero_stat.accept(_position__anonymous_231);
		}
	}
	public void parse__anonymous_80() {
		int _position__anonymous_80 = -1;
		Token.Parsed _token__anonymous_80 = null;
		int _position_INTEGER = -1;
		Token.Parsed _token_INTEGER = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_80=_position;
		_token__anonymous_80=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!=',') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_23.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ,");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"structure_payment(_anonymous_80)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_80;
		}
		else {
			_token_INTEGER=_token;
			_token=new Tokens.Name.AmountToken();
			_position_INTEGER=_position;
			parse_INTEGER();
			if(_state==SUCCESS) {
				_token_INTEGER.add(_position_INTEGER,_token);
			}
			_token=_token_INTEGER;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"structure_payment(_anonymous_80)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_80;
			}
			else {
				parse__anonymous_81();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"structure_payment(_anonymous_80)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_80;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_80.addAll(_token);
			_token__anonymous_80.setValue(_token.getValue());
		}
		_token=_token__anonymous_80;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_80);
			association_names.reject(_position__anonymous_80);
			room_names.reject(_position__anonymous_80);
			activity_names.reject(_position__anonymous_80);
			siding_names.reject(_position__anonymous_80);
			item_names.reject(_position__anonymous_80);
			aspect_names.reject(_position__anonymous_80);
			affinity_names.reject(_position__anonymous_80);
			activity_type_names.reject(_position__anonymous_80);
			trail_names.reject(_position__anonymous_80);
			attack_names.reject(_position__anonymous_80);
			reason_names.reject(_position__anonymous_80);
			trait_names.reject(_position__anonymous_80);
			condition_names.reject(_position__anonymous_80);
			payment_short_type_names.reject(_position__anonymous_80);
			skill_names.reject(_position__anonymous_80);
			map_names.reject(_position__anonymous_80);
			event_names.reject(_position__anonymous_80);
			image_names.reject(_position__anonymous_80);
			tile_symbols.reject(_position__anonymous_80);
			payment_long_type_names.reject(_position__anonymous_80);
			area_names.reject(_position__anonymous_80);
			structure_names.reject(_position__anonymous_80);
			tile_names.reject(_position__anonymous_80);
			hero_stat.reject(_position__anonymous_80);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_80);
			association_names.accept(_position__anonymous_80);
			room_names.accept(_position__anonymous_80);
			activity_names.accept(_position__anonymous_80);
			siding_names.accept(_position__anonymous_80);
			item_names.accept(_position__anonymous_80);
			aspect_names.accept(_position__anonymous_80);
			affinity_names.accept(_position__anonymous_80);
			activity_type_names.accept(_position__anonymous_80);
			trail_names.accept(_position__anonymous_80);
			attack_names.accept(_position__anonymous_80);
			reason_names.accept(_position__anonymous_80);
			trait_names.accept(_position__anonymous_80);
			condition_names.accept(_position__anonymous_80);
			payment_short_type_names.accept(_position__anonymous_80);
			skill_names.accept(_position__anonymous_80);
			map_names.accept(_position__anonymous_80);
			event_names.accept(_position__anonymous_80);
			image_names.accept(_position__anonymous_80);
			tile_symbols.accept(_position__anonymous_80);
			payment_long_type_names.accept(_position__anonymous_80);
			area_names.accept(_position__anonymous_80);
			structure_names.accept(_position__anonymous_80);
			tile_names.accept(_position__anonymous_80);
			hero_stat.accept(_position__anonymous_80);
		}
	}
	public void parse__anonymous_104() {
		int _position__anonymous_104 = -1;
		Token.Parsed _token__anonymous_104 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_104=_position;
		_token__anonymous_104=_token;
		_token=new Tokens.Name.NeighbourIfToken();
		if(_position+2-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='i') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='f') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_89.SYNTAX);
			_position=_position+2;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain if");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"edge_if(_anonymous_104)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_104;
		}
		else {
			if(_position+9-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='N') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='e') {
					_state=FAILED;
				}
				if(_inputArray[_position+2]!='i') {
					_state=FAILED;
				}
				if(_inputArray[_position+3]!='g') {
					_state=FAILED;
				}
				if(_inputArray[_position+4]!='h') {
					_state=FAILED;
				}
				if(_inputArray[_position+5]!='b') {
					_state=FAILED;
				}
				if(_inputArray[_position+6]!='o') {
					_state=FAILED;
				}
				if(_inputArray[_position+7]!='u') {
					_state=FAILED;
				}
				if(_inputArray[_position+8]!='r') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_90.SYNTAX);
				_position=_position+9;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain Neighbour");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"edge_if(_anonymous_104)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_104;
			}
			else {
				parse__anonymous_105();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"edge_if(_anonymous_104)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_104;
				}
				else {
					parse_edge_if_operator();
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"edge_if(_anonymous_104)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_104;
					}
					else {
						parse__anonymous_106();
						if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"edge_if(_anonymous_104)");
								_furthestPosition=_position;
							}
							_position=_position__anonymous_104;
						}
						else {
						}
					}
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_104.add(_position__anonymous_104,_token);
		}
		_token=_token__anonymous_104;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_104);
			association_names.reject(_position__anonymous_104);
			room_names.reject(_position__anonymous_104);
			activity_names.reject(_position__anonymous_104);
			siding_names.reject(_position__anonymous_104);
			item_names.reject(_position__anonymous_104);
			aspect_names.reject(_position__anonymous_104);
			affinity_names.reject(_position__anonymous_104);
			activity_type_names.reject(_position__anonymous_104);
			trail_names.reject(_position__anonymous_104);
			attack_names.reject(_position__anonymous_104);
			reason_names.reject(_position__anonymous_104);
			trait_names.reject(_position__anonymous_104);
			condition_names.reject(_position__anonymous_104);
			payment_short_type_names.reject(_position__anonymous_104);
			skill_names.reject(_position__anonymous_104);
			map_names.reject(_position__anonymous_104);
			event_names.reject(_position__anonymous_104);
			image_names.reject(_position__anonymous_104);
			tile_symbols.reject(_position__anonymous_104);
			payment_long_type_names.reject(_position__anonymous_104);
			area_names.reject(_position__anonymous_104);
			structure_names.reject(_position__anonymous_104);
			tile_names.reject(_position__anonymous_104);
			hero_stat.reject(_position__anonymous_104);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_104);
			association_names.accept(_position__anonymous_104);
			room_names.accept(_position__anonymous_104);
			activity_names.accept(_position__anonymous_104);
			siding_names.accept(_position__anonymous_104);
			item_names.accept(_position__anonymous_104);
			aspect_names.accept(_position__anonymous_104);
			affinity_names.accept(_position__anonymous_104);
			activity_type_names.accept(_position__anonymous_104);
			trail_names.accept(_position__anonymous_104);
			attack_names.accept(_position__anonymous_104);
			reason_names.accept(_position__anonymous_104);
			trait_names.accept(_position__anonymous_104);
			condition_names.accept(_position__anonymous_104);
			payment_short_type_names.accept(_position__anonymous_104);
			skill_names.accept(_position__anonymous_104);
			map_names.accept(_position__anonymous_104);
			event_names.accept(_position__anonymous_104);
			image_names.accept(_position__anonymous_104);
			tile_symbols.accept(_position__anonymous_104);
			payment_long_type_names.accept(_position__anonymous_104);
			area_names.accept(_position__anonymous_104);
			structure_names.accept(_position__anonymous_104);
			tile_names.accept(_position__anonymous_104);
			hero_stat.accept(_position__anonymous_104);
		}
	}
	public void parse__anonymous_225() {
		int _position__anonymous_225 = -1;
		Token.Parsed _token__anonymous_225 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_225=_position;
		_token__anonymous_225=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse_drawable_arthmetic_operator();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_dimensions(_anonymous_225)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_225;
		}
		else {
			parse_drawable_multiple_value();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_dimensions(_anonymous_225)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_225;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_225.addAll(_token);
			_token__anonymous_225.setValue(_token.getValue());
		}
		_token=_token__anonymous_225;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_225);
			association_names.reject(_position__anonymous_225);
			room_names.reject(_position__anonymous_225);
			activity_names.reject(_position__anonymous_225);
			siding_names.reject(_position__anonymous_225);
			item_names.reject(_position__anonymous_225);
			aspect_names.reject(_position__anonymous_225);
			affinity_names.reject(_position__anonymous_225);
			activity_type_names.reject(_position__anonymous_225);
			trail_names.reject(_position__anonymous_225);
			attack_names.reject(_position__anonymous_225);
			reason_names.reject(_position__anonymous_225);
			trait_names.reject(_position__anonymous_225);
			condition_names.reject(_position__anonymous_225);
			payment_short_type_names.reject(_position__anonymous_225);
			skill_names.reject(_position__anonymous_225);
			map_names.reject(_position__anonymous_225);
			event_names.reject(_position__anonymous_225);
			image_names.reject(_position__anonymous_225);
			tile_symbols.reject(_position__anonymous_225);
			payment_long_type_names.reject(_position__anonymous_225);
			area_names.reject(_position__anonymous_225);
			structure_names.reject(_position__anonymous_225);
			tile_names.reject(_position__anonymous_225);
			hero_stat.reject(_position__anonymous_225);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_225);
			association_names.accept(_position__anonymous_225);
			room_names.accept(_position__anonymous_225);
			activity_names.accept(_position__anonymous_225);
			siding_names.accept(_position__anonymous_225);
			item_names.accept(_position__anonymous_225);
			aspect_names.accept(_position__anonymous_225);
			affinity_names.accept(_position__anonymous_225);
			activity_type_names.accept(_position__anonymous_225);
			trail_names.accept(_position__anonymous_225);
			attack_names.accept(_position__anonymous_225);
			reason_names.accept(_position__anonymous_225);
			trait_names.accept(_position__anonymous_225);
			condition_names.accept(_position__anonymous_225);
			payment_short_type_names.accept(_position__anonymous_225);
			skill_names.accept(_position__anonymous_225);
			map_names.accept(_position__anonymous_225);
			event_names.accept(_position__anonymous_225);
			image_names.accept(_position__anonymous_225);
			tile_symbols.accept(_position__anonymous_225);
			payment_long_type_names.accept(_position__anonymous_225);
			area_names.accept(_position__anonymous_225);
			structure_names.accept(_position__anonymous_225);
			tile_names.accept(_position__anonymous_225);
			hero_stat.accept(_position__anonymous_225);
		}
	}
	public void parse__anonymous_105() {
		int _position__anonymous_105 = -1;
		Token.Parsed _token__anonymous_105 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_105=_position;
		_token__anonymous_105=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+2-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='i') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='n') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_71.SYNTAX);
			_position=_position+2;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain in");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"edge_if(_anonymous_105)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_105;
		}
		else {
			if(_position+9-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='D') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='i') {
					_state=FAILED;
				}
				if(_inputArray[_position+2]!='r') {
					_state=FAILED;
				}
				if(_inputArray[_position+3]!='e') {
					_state=FAILED;
				}
				if(_inputArray[_position+4]!='c') {
					_state=FAILED;
				}
				if(_inputArray[_position+5]!='t') {
					_state=FAILED;
				}
				if(_inputArray[_position+6]!='i') {
					_state=FAILED;
				}
				if(_inputArray[_position+7]!='o') {
					_state=FAILED;
				}
				if(_inputArray[_position+8]!='n') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_91.SYNTAX);
				_position=_position+9;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain Direction");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"edge_if(_anonymous_105)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_105;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_105.addAll(_token);
			_token__anonymous_105.setValue(_token.getValue());
		}
		_token=_token__anonymous_105;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_105);
			association_names.reject(_position__anonymous_105);
			room_names.reject(_position__anonymous_105);
			activity_names.reject(_position__anonymous_105);
			siding_names.reject(_position__anonymous_105);
			item_names.reject(_position__anonymous_105);
			aspect_names.reject(_position__anonymous_105);
			affinity_names.reject(_position__anonymous_105);
			activity_type_names.reject(_position__anonymous_105);
			trail_names.reject(_position__anonymous_105);
			attack_names.reject(_position__anonymous_105);
			reason_names.reject(_position__anonymous_105);
			trait_names.reject(_position__anonymous_105);
			condition_names.reject(_position__anonymous_105);
			payment_short_type_names.reject(_position__anonymous_105);
			skill_names.reject(_position__anonymous_105);
			map_names.reject(_position__anonymous_105);
			event_names.reject(_position__anonymous_105);
			image_names.reject(_position__anonymous_105);
			tile_symbols.reject(_position__anonymous_105);
			payment_long_type_names.reject(_position__anonymous_105);
			area_names.reject(_position__anonymous_105);
			structure_names.reject(_position__anonymous_105);
			tile_names.reject(_position__anonymous_105);
			hero_stat.reject(_position__anonymous_105);
			_state=SUCCESS;
			_position__anonymous_105=_position;
			_token__anonymous_105=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			parse_INTEGER();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"edge_if(_anonymous_105)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_105;
			}
			else {
				parse_INTEGER();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"edge_if(_anonymous_105)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_105;
				}
				else {
				}
			}
			if(_state==SUCCESS) {
				_token__anonymous_105.addAll(_token);
				_token__anonymous_105.setValue(_token.getValue());
			}
			_token=_token__anonymous_105;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_105);
				association_names.reject(_position__anonymous_105);
				room_names.reject(_position__anonymous_105);
				activity_names.reject(_position__anonymous_105);
				siding_names.reject(_position__anonymous_105);
				item_names.reject(_position__anonymous_105);
				aspect_names.reject(_position__anonymous_105);
				affinity_names.reject(_position__anonymous_105);
				activity_type_names.reject(_position__anonymous_105);
				trail_names.reject(_position__anonymous_105);
				attack_names.reject(_position__anonymous_105);
				reason_names.reject(_position__anonymous_105);
				trait_names.reject(_position__anonymous_105);
				condition_names.reject(_position__anonymous_105);
				payment_short_type_names.reject(_position__anonymous_105);
				skill_names.reject(_position__anonymous_105);
				map_names.reject(_position__anonymous_105);
				event_names.reject(_position__anonymous_105);
				image_names.reject(_position__anonymous_105);
				tile_symbols.reject(_position__anonymous_105);
				payment_long_type_names.reject(_position__anonymous_105);
				area_names.reject(_position__anonymous_105);
				structure_names.reject(_position__anonymous_105);
				tile_names.reject(_position__anonymous_105);
				hero_stat.reject(_position__anonymous_105);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_105);
				association_names.accept(_position__anonymous_105);
				room_names.accept(_position__anonymous_105);
				activity_names.accept(_position__anonymous_105);
				siding_names.accept(_position__anonymous_105);
				item_names.accept(_position__anonymous_105);
				aspect_names.accept(_position__anonymous_105);
				affinity_names.accept(_position__anonymous_105);
				activity_type_names.accept(_position__anonymous_105);
				trail_names.accept(_position__anonymous_105);
				attack_names.accept(_position__anonymous_105);
				reason_names.accept(_position__anonymous_105);
				trait_names.accept(_position__anonymous_105);
				condition_names.accept(_position__anonymous_105);
				payment_short_type_names.accept(_position__anonymous_105);
				skill_names.accept(_position__anonymous_105);
				map_names.accept(_position__anonymous_105);
				event_names.accept(_position__anonymous_105);
				image_names.accept(_position__anonymous_105);
				tile_symbols.accept(_position__anonymous_105);
				payment_long_type_names.accept(_position__anonymous_105);
				area_names.accept(_position__anonymous_105);
				structure_names.accept(_position__anonymous_105);
				tile_names.accept(_position__anonymous_105);
				hero_stat.accept(_position__anonymous_105);
			}
		}
	}
	public void parse__anonymous_226() {
		int _position__anonymous_226 = -1;
		Token.Parsed _token__anonymous_226 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_226=_position;
		_token__anonymous_226=_token;
		_token=new Tokens.Name.RightParameterToken();
		parse_drawable_multiple_value();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_dimensions(_anonymous_226)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_226;
		}
		else {
			int _state_250 = _state;
			while(_position<_inputLength) {
				parse__anonymous_227();
				if(_state==FAILED) {
					break;
				}
			}
			if(_state_250==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_dimensions(_anonymous_226)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_226;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_226.add(_position__anonymous_226,_token);
		}
		_token=_token__anonymous_226;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_226);
			association_names.reject(_position__anonymous_226);
			room_names.reject(_position__anonymous_226);
			activity_names.reject(_position__anonymous_226);
			siding_names.reject(_position__anonymous_226);
			item_names.reject(_position__anonymous_226);
			aspect_names.reject(_position__anonymous_226);
			affinity_names.reject(_position__anonymous_226);
			activity_type_names.reject(_position__anonymous_226);
			trail_names.reject(_position__anonymous_226);
			attack_names.reject(_position__anonymous_226);
			reason_names.reject(_position__anonymous_226);
			trait_names.reject(_position__anonymous_226);
			condition_names.reject(_position__anonymous_226);
			payment_short_type_names.reject(_position__anonymous_226);
			skill_names.reject(_position__anonymous_226);
			map_names.reject(_position__anonymous_226);
			event_names.reject(_position__anonymous_226);
			image_names.reject(_position__anonymous_226);
			tile_symbols.reject(_position__anonymous_226);
			payment_long_type_names.reject(_position__anonymous_226);
			area_names.reject(_position__anonymous_226);
			structure_names.reject(_position__anonymous_226);
			tile_names.reject(_position__anonymous_226);
			hero_stat.reject(_position__anonymous_226);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_226);
			association_names.accept(_position__anonymous_226);
			room_names.accept(_position__anonymous_226);
			activity_names.accept(_position__anonymous_226);
			siding_names.accept(_position__anonymous_226);
			item_names.accept(_position__anonymous_226);
			aspect_names.accept(_position__anonymous_226);
			affinity_names.accept(_position__anonymous_226);
			activity_type_names.accept(_position__anonymous_226);
			trail_names.accept(_position__anonymous_226);
			attack_names.accept(_position__anonymous_226);
			reason_names.accept(_position__anonymous_226);
			trait_names.accept(_position__anonymous_226);
			condition_names.accept(_position__anonymous_226);
			payment_short_type_names.accept(_position__anonymous_226);
			skill_names.accept(_position__anonymous_226);
			map_names.accept(_position__anonymous_226);
			event_names.accept(_position__anonymous_226);
			image_names.accept(_position__anonymous_226);
			tile_symbols.accept(_position__anonymous_226);
			payment_long_type_names.accept(_position__anonymous_226);
			area_names.accept(_position__anonymous_226);
			structure_names.accept(_position__anonymous_226);
			tile_names.accept(_position__anonymous_226);
			hero_stat.accept(_position__anonymous_226);
		}
	}
	public void parse__anonymous_82() {
		int _position__anonymous_82 = -1;
		Token.Parsed _token__anonymous_82 = null;
		int _position_comments = -1;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_82=_position;
		_token__anonymous_82=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_map(_anonymous_82)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_82;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_82.addAll(_token);
			_token__anonymous_82.setValue(_token.getValue());
		}
		_token=_token__anonymous_82;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_82);
			association_names.reject(_position__anonymous_82);
			room_names.reject(_position__anonymous_82);
			activity_names.reject(_position__anonymous_82);
			siding_names.reject(_position__anonymous_82);
			item_names.reject(_position__anonymous_82);
			aspect_names.reject(_position__anonymous_82);
			affinity_names.reject(_position__anonymous_82);
			activity_type_names.reject(_position__anonymous_82);
			trail_names.reject(_position__anonymous_82);
			attack_names.reject(_position__anonymous_82);
			reason_names.reject(_position__anonymous_82);
			trait_names.reject(_position__anonymous_82);
			condition_names.reject(_position__anonymous_82);
			payment_short_type_names.reject(_position__anonymous_82);
			skill_names.reject(_position__anonymous_82);
			map_names.reject(_position__anonymous_82);
			event_names.reject(_position__anonymous_82);
			image_names.reject(_position__anonymous_82);
			tile_symbols.reject(_position__anonymous_82);
			payment_long_type_names.reject(_position__anonymous_82);
			area_names.reject(_position__anonymous_82);
			structure_names.reject(_position__anonymous_82);
			tile_names.reject(_position__anonymous_82);
			hero_stat.reject(_position__anonymous_82);
			_state=SUCCESS;
			_position__anonymous_82=_position;
			_token__anonymous_82=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			_position_comments=_position;
			if(_state==SUCCESS&&!_recursion_protection_comments_26.contains(_position)) {
				_recursion_protection_comments_26.add(_position);
				parse_comments();
				_recursion_protection_comments_26.remove(_position_comments);
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_map(_anonymous_82)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_82;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_82.addAll(_token);
				_token__anonymous_82.setValue(_token.getValue());
			}
			_token=_token__anonymous_82;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_82);
				association_names.reject(_position__anonymous_82);
				room_names.reject(_position__anonymous_82);
				activity_names.reject(_position__anonymous_82);
				siding_names.reject(_position__anonymous_82);
				item_names.reject(_position__anonymous_82);
				aspect_names.reject(_position__anonymous_82);
				affinity_names.reject(_position__anonymous_82);
				activity_type_names.reject(_position__anonymous_82);
				trail_names.reject(_position__anonymous_82);
				attack_names.reject(_position__anonymous_82);
				reason_names.reject(_position__anonymous_82);
				trait_names.reject(_position__anonymous_82);
				condition_names.reject(_position__anonymous_82);
				payment_short_type_names.reject(_position__anonymous_82);
				skill_names.reject(_position__anonymous_82);
				map_names.reject(_position__anonymous_82);
				event_names.reject(_position__anonymous_82);
				image_names.reject(_position__anonymous_82);
				tile_symbols.reject(_position__anonymous_82);
				payment_long_type_names.reject(_position__anonymous_82);
				area_names.reject(_position__anonymous_82);
				structure_names.reject(_position__anonymous_82);
				tile_names.reject(_position__anonymous_82);
				hero_stat.reject(_position__anonymous_82);
				_state=SUCCESS;
				_position__anonymous_82=_position;
				_token__anonymous_82=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				parse_map_header();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_map(_anonymous_82)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_82;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_82.addAll(_token);
					_token__anonymous_82.setValue(_token.getValue());
				}
				_token=_token__anonymous_82;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_82);
					association_names.reject(_position__anonymous_82);
					room_names.reject(_position__anonymous_82);
					activity_names.reject(_position__anonymous_82);
					siding_names.reject(_position__anonymous_82);
					item_names.reject(_position__anonymous_82);
					aspect_names.reject(_position__anonymous_82);
					affinity_names.reject(_position__anonymous_82);
					activity_type_names.reject(_position__anonymous_82);
					trail_names.reject(_position__anonymous_82);
					attack_names.reject(_position__anonymous_82);
					reason_names.reject(_position__anonymous_82);
					trait_names.reject(_position__anonymous_82);
					condition_names.reject(_position__anonymous_82);
					payment_short_type_names.reject(_position__anonymous_82);
					skill_names.reject(_position__anonymous_82);
					map_names.reject(_position__anonymous_82);
					event_names.reject(_position__anonymous_82);
					image_names.reject(_position__anonymous_82);
					tile_symbols.reject(_position__anonymous_82);
					payment_long_type_names.reject(_position__anonymous_82);
					area_names.reject(_position__anonymous_82);
					structure_names.reject(_position__anonymous_82);
					tile_names.reject(_position__anonymous_82);
					hero_stat.reject(_position__anonymous_82);
					_state=SUCCESS;
					_position__anonymous_82=_position;
					_token__anonymous_82=_token;
					_token=new Token.Parsed(Token.Id.ANON);
					parse_hints();
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_map(_anonymous_82)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_82;
					}
					else {
					}
					if(_state==SUCCESS) {
						_token__anonymous_82.addAll(_token);
						_token__anonymous_82.setValue(_token.getValue());
					}
					_token=_token__anonymous_82;
					if(_state==FAILED) {
						support_names.reject(_position__anonymous_82);
						association_names.reject(_position__anonymous_82);
						room_names.reject(_position__anonymous_82);
						activity_names.reject(_position__anonymous_82);
						siding_names.reject(_position__anonymous_82);
						item_names.reject(_position__anonymous_82);
						aspect_names.reject(_position__anonymous_82);
						affinity_names.reject(_position__anonymous_82);
						activity_type_names.reject(_position__anonymous_82);
						trail_names.reject(_position__anonymous_82);
						attack_names.reject(_position__anonymous_82);
						reason_names.reject(_position__anonymous_82);
						trait_names.reject(_position__anonymous_82);
						condition_names.reject(_position__anonymous_82);
						payment_short_type_names.reject(_position__anonymous_82);
						skill_names.reject(_position__anonymous_82);
						map_names.reject(_position__anonymous_82);
						event_names.reject(_position__anonymous_82);
						image_names.reject(_position__anonymous_82);
						tile_symbols.reject(_position__anonymous_82);
						payment_long_type_names.reject(_position__anonymous_82);
						area_names.reject(_position__anonymous_82);
						structure_names.reject(_position__anonymous_82);
						tile_names.reject(_position__anonymous_82);
						hero_stat.reject(_position__anonymous_82);
						_state=SUCCESS;
						_position__anonymous_82=_position;
						_token__anonymous_82=_token;
						_token=new Token.Parsed(Token.Id.ANON);
						parse_trails_declaration();
						if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_map(_anonymous_82)");
								_furthestPosition=_position;
							}
							_position=_position__anonymous_82;
						}
						else {
						}
						if(_state==SUCCESS) {
							_token__anonymous_82.addAll(_token);
							_token__anonymous_82.setValue(_token.getValue());
						}
						_token=_token__anonymous_82;
						if(_state==FAILED) {
							support_names.reject(_position__anonymous_82);
							association_names.reject(_position__anonymous_82);
							room_names.reject(_position__anonymous_82);
							activity_names.reject(_position__anonymous_82);
							siding_names.reject(_position__anonymous_82);
							item_names.reject(_position__anonymous_82);
							aspect_names.reject(_position__anonymous_82);
							affinity_names.reject(_position__anonymous_82);
							activity_type_names.reject(_position__anonymous_82);
							trail_names.reject(_position__anonymous_82);
							attack_names.reject(_position__anonymous_82);
							reason_names.reject(_position__anonymous_82);
							trait_names.reject(_position__anonymous_82);
							condition_names.reject(_position__anonymous_82);
							payment_short_type_names.reject(_position__anonymous_82);
							skill_names.reject(_position__anonymous_82);
							map_names.reject(_position__anonymous_82);
							event_names.reject(_position__anonymous_82);
							image_names.reject(_position__anonymous_82);
							tile_symbols.reject(_position__anonymous_82);
							payment_long_type_names.reject(_position__anonymous_82);
							area_names.reject(_position__anonymous_82);
							structure_names.reject(_position__anonymous_82);
							tile_names.reject(_position__anonymous_82);
							hero_stat.reject(_position__anonymous_82);
							_state=SUCCESS;
							_position__anonymous_82=_position;
							_token__anonymous_82=_token;
							_token=new Token.Parsed(Token.Id.ANON);
							parse_structures_declaration();
							if(_state==FAILED) {
								if(_position>=_furthestPosition) {
									_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_map(_anonymous_82)");
									_furthestPosition=_position;
								}
								_position=_position__anonymous_82;
							}
							else {
							}
							if(_state==SUCCESS) {
								_token__anonymous_82.addAll(_token);
								_token__anonymous_82.setValue(_token.getValue());
							}
							_token=_token__anonymous_82;
							if(_state==FAILED) {
								support_names.reject(_position__anonymous_82);
								association_names.reject(_position__anonymous_82);
								room_names.reject(_position__anonymous_82);
								activity_names.reject(_position__anonymous_82);
								siding_names.reject(_position__anonymous_82);
								item_names.reject(_position__anonymous_82);
								aspect_names.reject(_position__anonymous_82);
								affinity_names.reject(_position__anonymous_82);
								activity_type_names.reject(_position__anonymous_82);
								trail_names.reject(_position__anonymous_82);
								attack_names.reject(_position__anonymous_82);
								reason_names.reject(_position__anonymous_82);
								trait_names.reject(_position__anonymous_82);
								condition_names.reject(_position__anonymous_82);
								payment_short_type_names.reject(_position__anonymous_82);
								skill_names.reject(_position__anonymous_82);
								map_names.reject(_position__anonymous_82);
								event_names.reject(_position__anonymous_82);
								image_names.reject(_position__anonymous_82);
								tile_symbols.reject(_position__anonymous_82);
								payment_long_type_names.reject(_position__anonymous_82);
								area_names.reject(_position__anonymous_82);
								structure_names.reject(_position__anonymous_82);
								tile_names.reject(_position__anonymous_82);
								hero_stat.reject(_position__anonymous_82);
								_state=SUCCESS;
								_position__anonymous_82=_position;
								_token__anonymous_82=_token;
								_token=new Token.Parsed(Token.Id.ANON);
								parse_area_declaration();
								if(_state==FAILED) {
									if(_position>=_furthestPosition) {
										_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_map(_anonymous_82)");
										_furthestPosition=_position;
									}
									_position=_position__anonymous_82;
								}
								else {
								}
								if(_state==SUCCESS) {
									_token__anonymous_82.addAll(_token);
									_token__anonymous_82.setValue(_token.getValue());
								}
								_token=_token__anonymous_82;
								if(_state==FAILED) {
									support_names.reject(_position__anonymous_82);
									association_names.reject(_position__anonymous_82);
									room_names.reject(_position__anonymous_82);
									activity_names.reject(_position__anonymous_82);
									siding_names.reject(_position__anonymous_82);
									item_names.reject(_position__anonymous_82);
									aspect_names.reject(_position__anonymous_82);
									affinity_names.reject(_position__anonymous_82);
									activity_type_names.reject(_position__anonymous_82);
									trail_names.reject(_position__anonymous_82);
									attack_names.reject(_position__anonymous_82);
									reason_names.reject(_position__anonymous_82);
									trait_names.reject(_position__anonymous_82);
									condition_names.reject(_position__anonymous_82);
									payment_short_type_names.reject(_position__anonymous_82);
									skill_names.reject(_position__anonymous_82);
									map_names.reject(_position__anonymous_82);
									event_names.reject(_position__anonymous_82);
									image_names.reject(_position__anonymous_82);
									tile_symbols.reject(_position__anonymous_82);
									payment_long_type_names.reject(_position__anonymous_82);
									area_names.reject(_position__anonymous_82);
									structure_names.reject(_position__anonymous_82);
									tile_names.reject(_position__anonymous_82);
									hero_stat.reject(_position__anonymous_82);
								}
								else if(_state==SUCCESS) {
									support_names.accept(_position__anonymous_82);
									association_names.accept(_position__anonymous_82);
									room_names.accept(_position__anonymous_82);
									activity_names.accept(_position__anonymous_82);
									siding_names.accept(_position__anonymous_82);
									item_names.accept(_position__anonymous_82);
									aspect_names.accept(_position__anonymous_82);
									affinity_names.accept(_position__anonymous_82);
									activity_type_names.accept(_position__anonymous_82);
									trail_names.accept(_position__anonymous_82);
									attack_names.accept(_position__anonymous_82);
									reason_names.accept(_position__anonymous_82);
									trait_names.accept(_position__anonymous_82);
									condition_names.accept(_position__anonymous_82);
									payment_short_type_names.accept(_position__anonymous_82);
									skill_names.accept(_position__anonymous_82);
									map_names.accept(_position__anonymous_82);
									event_names.accept(_position__anonymous_82);
									image_names.accept(_position__anonymous_82);
									tile_symbols.accept(_position__anonymous_82);
									payment_long_type_names.accept(_position__anonymous_82);
									area_names.accept(_position__anonymous_82);
									structure_names.accept(_position__anonymous_82);
									tile_names.accept(_position__anonymous_82);
									hero_stat.accept(_position__anonymous_82);
								}
							}
						}
					}
				}
			}
		}
	}
	public void parse__anonymous_106() {
		int _position__anonymous_106 = -1;
		Token.Parsed _token__anonymous_106 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_106=_position;
		_token__anonymous_106=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+4-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='n') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='u') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='l') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='l') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_92.SYNTAX);
			_position=_position+4;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain null");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"edge_if(_anonymous_106)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_106;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_106.addAll(_token);
			_token__anonymous_106.setValue(_token.getValue());
		}
		_token=_token__anonymous_106;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_106);
			association_names.reject(_position__anonymous_106);
			room_names.reject(_position__anonymous_106);
			activity_names.reject(_position__anonymous_106);
			siding_names.reject(_position__anonymous_106);
			item_names.reject(_position__anonymous_106);
			aspect_names.reject(_position__anonymous_106);
			affinity_names.reject(_position__anonymous_106);
			activity_type_names.reject(_position__anonymous_106);
			trail_names.reject(_position__anonymous_106);
			attack_names.reject(_position__anonymous_106);
			reason_names.reject(_position__anonymous_106);
			trait_names.reject(_position__anonymous_106);
			condition_names.reject(_position__anonymous_106);
			payment_short_type_names.reject(_position__anonymous_106);
			skill_names.reject(_position__anonymous_106);
			map_names.reject(_position__anonymous_106);
			event_names.reject(_position__anonymous_106);
			image_names.reject(_position__anonymous_106);
			tile_symbols.reject(_position__anonymous_106);
			payment_long_type_names.reject(_position__anonymous_106);
			area_names.reject(_position__anonymous_106);
			structure_names.reject(_position__anonymous_106);
			tile_names.reject(_position__anonymous_106);
			hero_stat.reject(_position__anonymous_106);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_106);
			association_names.accept(_position__anonymous_106);
			room_names.accept(_position__anonymous_106);
			activity_names.accept(_position__anonymous_106);
			siding_names.accept(_position__anonymous_106);
			item_names.accept(_position__anonymous_106);
			aspect_names.accept(_position__anonymous_106);
			affinity_names.accept(_position__anonymous_106);
			activity_type_names.accept(_position__anonymous_106);
			trail_names.accept(_position__anonymous_106);
			attack_names.accept(_position__anonymous_106);
			reason_names.accept(_position__anonymous_106);
			trait_names.accept(_position__anonymous_106);
			condition_names.accept(_position__anonymous_106);
			payment_short_type_names.accept(_position__anonymous_106);
			skill_names.accept(_position__anonymous_106);
			map_names.accept(_position__anonymous_106);
			event_names.accept(_position__anonymous_106);
			image_names.accept(_position__anonymous_106);
			tile_symbols.accept(_position__anonymous_106);
			payment_long_type_names.accept(_position__anonymous_106);
			area_names.accept(_position__anonymous_106);
			structure_names.accept(_position__anonymous_106);
			tile_names.accept(_position__anonymous_106);
			hero_stat.accept(_position__anonymous_106);
		}
	}
	public void parse__anonymous_227() {
		int _position__anonymous_227 = -1;
		Token.Parsed _token__anonymous_227 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_227=_position;
		_token__anonymous_227=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse_drawable_arthmetic_operator();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_dimensions(_anonymous_227)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_227;
		}
		else {
			parse_drawable_multiple_value();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_dimensions(_anonymous_227)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_227;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_227.addAll(_token);
			_token__anonymous_227.setValue(_token.getValue());
		}
		_token=_token__anonymous_227;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_227);
			association_names.reject(_position__anonymous_227);
			room_names.reject(_position__anonymous_227);
			activity_names.reject(_position__anonymous_227);
			siding_names.reject(_position__anonymous_227);
			item_names.reject(_position__anonymous_227);
			aspect_names.reject(_position__anonymous_227);
			affinity_names.reject(_position__anonymous_227);
			activity_type_names.reject(_position__anonymous_227);
			trail_names.reject(_position__anonymous_227);
			attack_names.reject(_position__anonymous_227);
			reason_names.reject(_position__anonymous_227);
			trait_names.reject(_position__anonymous_227);
			condition_names.reject(_position__anonymous_227);
			payment_short_type_names.reject(_position__anonymous_227);
			skill_names.reject(_position__anonymous_227);
			map_names.reject(_position__anonymous_227);
			event_names.reject(_position__anonymous_227);
			image_names.reject(_position__anonymous_227);
			tile_symbols.reject(_position__anonymous_227);
			payment_long_type_names.reject(_position__anonymous_227);
			area_names.reject(_position__anonymous_227);
			structure_names.reject(_position__anonymous_227);
			tile_names.reject(_position__anonymous_227);
			hero_stat.reject(_position__anonymous_227);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_227);
			association_names.accept(_position__anonymous_227);
			room_names.accept(_position__anonymous_227);
			activity_names.accept(_position__anonymous_227);
			siding_names.accept(_position__anonymous_227);
			item_names.accept(_position__anonymous_227);
			aspect_names.accept(_position__anonymous_227);
			affinity_names.accept(_position__anonymous_227);
			activity_type_names.accept(_position__anonymous_227);
			trail_names.accept(_position__anonymous_227);
			attack_names.accept(_position__anonymous_227);
			reason_names.accept(_position__anonymous_227);
			trait_names.accept(_position__anonymous_227);
			condition_names.accept(_position__anonymous_227);
			payment_short_type_names.accept(_position__anonymous_227);
			skill_names.accept(_position__anonymous_227);
			map_names.accept(_position__anonymous_227);
			event_names.accept(_position__anonymous_227);
			image_names.accept(_position__anonymous_227);
			tile_symbols.accept(_position__anonymous_227);
			payment_long_type_names.accept(_position__anonymous_227);
			area_names.accept(_position__anonymous_227);
			structure_names.accept(_position__anonymous_227);
			tile_names.accept(_position__anonymous_227);
			hero_stat.accept(_position__anonymous_227);
		}
	}
	public void parse__anonymous_81() {
		int _position__anonymous_81 = -1;
		Token.Parsed _token__anonymous_81 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_81=_position;
		_token__anonymous_81=_token;
		_token=new Tokens.Name.PaymentTypeToken();
		if(_pass==FIRST_PASS) {
			String _result = _preparsed_NAME.get(_position);
			if(_result==null) {
				_state=FAILED;
			}
			else {
				Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
				_token.add(_position,_first_pass_token);
				_position+=_result.length();
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
		}
		else if(_pass==SECOND_PASS) {
			_list_name_result=_preparsed_NAME.get(_position);
			if(_list_name_result!=null&&payment_long_type_names.contains(_list_name_result)) {
				if(_position+_list_name_result.length()<_inputLength) {
					int _next_char = _inputArray[_position+_list_name_result.length()];
					if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,new Tokens.Name.PaymentLongTypeNamesToken(_list_name_result));
					_position+=_list_name_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"payment_long_type_names");
					_furthestPosition=_position;
				}
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"structure_payment(_anonymous_81)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_81;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_81.add(_position__anonymous_81,_token);
		}
		_token=_token__anonymous_81;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_81);
			association_names.reject(_position__anonymous_81);
			room_names.reject(_position__anonymous_81);
			activity_names.reject(_position__anonymous_81);
			siding_names.reject(_position__anonymous_81);
			item_names.reject(_position__anonymous_81);
			aspect_names.reject(_position__anonymous_81);
			affinity_names.reject(_position__anonymous_81);
			activity_type_names.reject(_position__anonymous_81);
			trail_names.reject(_position__anonymous_81);
			attack_names.reject(_position__anonymous_81);
			reason_names.reject(_position__anonymous_81);
			trait_names.reject(_position__anonymous_81);
			condition_names.reject(_position__anonymous_81);
			payment_short_type_names.reject(_position__anonymous_81);
			skill_names.reject(_position__anonymous_81);
			map_names.reject(_position__anonymous_81);
			event_names.reject(_position__anonymous_81);
			image_names.reject(_position__anonymous_81);
			tile_symbols.reject(_position__anonymous_81);
			payment_long_type_names.reject(_position__anonymous_81);
			area_names.reject(_position__anonymous_81);
			structure_names.reject(_position__anonymous_81);
			tile_names.reject(_position__anonymous_81);
			hero_stat.reject(_position__anonymous_81);
			_state=SUCCESS;
			_position__anonymous_81=_position;
			_token__anonymous_81=_token;
			_token=new Tokens.Name.PaymentTypeToken();
			if(_pass==FIRST_PASS) {
				String _result = _preparsed_NAME.get(_position);
				if(_result==null) {
					_state=FAILED;
				}
				else {
					Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
					_token.add(_position,_first_pass_token);
					_position+=_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else if(_pass==SECOND_PASS) {
				_list_name_result=_preparsed_NAME.get(_position);
				if(_list_name_result!=null&&payment_short_type_names.contains(_list_name_result)) {
					if(_position+_list_name_result.length()<_inputLength) {
						int _next_char = _inputArray[_position+_list_name_result.length()];
						if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,new Tokens.Name.PaymentShortTypeNamesToken(_list_name_result));
						_position+=_list_name_result.length();
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
				}
				else {
					_state=FAILED;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"payment_short_type_names");
						_furthestPosition=_position;
					}
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"structure_payment(_anonymous_81)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_81;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_81.add(_position__anonymous_81,_token);
			}
			_token=_token__anonymous_81;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_81);
				association_names.reject(_position__anonymous_81);
				room_names.reject(_position__anonymous_81);
				activity_names.reject(_position__anonymous_81);
				siding_names.reject(_position__anonymous_81);
				item_names.reject(_position__anonymous_81);
				aspect_names.reject(_position__anonymous_81);
				affinity_names.reject(_position__anonymous_81);
				activity_type_names.reject(_position__anonymous_81);
				trail_names.reject(_position__anonymous_81);
				attack_names.reject(_position__anonymous_81);
				reason_names.reject(_position__anonymous_81);
				trait_names.reject(_position__anonymous_81);
				condition_names.reject(_position__anonymous_81);
				payment_short_type_names.reject(_position__anonymous_81);
				skill_names.reject(_position__anonymous_81);
				map_names.reject(_position__anonymous_81);
				event_names.reject(_position__anonymous_81);
				image_names.reject(_position__anonymous_81);
				tile_symbols.reject(_position__anonymous_81);
				payment_long_type_names.reject(_position__anonymous_81);
				area_names.reject(_position__anonymous_81);
				structure_names.reject(_position__anonymous_81);
				tile_names.reject(_position__anonymous_81);
				hero_stat.reject(_position__anonymous_81);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_81);
				association_names.accept(_position__anonymous_81);
				room_names.accept(_position__anonymous_81);
				activity_names.accept(_position__anonymous_81);
				siding_names.accept(_position__anonymous_81);
				item_names.accept(_position__anonymous_81);
				aspect_names.accept(_position__anonymous_81);
				affinity_names.accept(_position__anonymous_81);
				activity_type_names.accept(_position__anonymous_81);
				trail_names.accept(_position__anonymous_81);
				attack_names.accept(_position__anonymous_81);
				reason_names.accept(_position__anonymous_81);
				trait_names.accept(_position__anonymous_81);
				condition_names.accept(_position__anonymous_81);
				payment_short_type_names.accept(_position__anonymous_81);
				skill_names.accept(_position__anonymous_81);
				map_names.accept(_position__anonymous_81);
				event_names.accept(_position__anonymous_81);
				image_names.accept(_position__anonymous_81);
				tile_symbols.accept(_position__anonymous_81);
				payment_long_type_names.accept(_position__anonymous_81);
				area_names.accept(_position__anonymous_81);
				structure_names.accept(_position__anonymous_81);
				tile_names.accept(_position__anonymous_81);
				hero_stat.accept(_position__anonymous_81);
			}
		}
	}
	public void parse__anonymous_107() {
		int _position__anonymous_107 = -1;
		Token.Parsed _token__anonymous_107 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_107=_position;
		_token__anonymous_107=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse__anonymous_108();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_definition(_anonymous_107)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_107;
		}
		else {
			if(_position+2-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!=':') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!=':') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_93.SYNTAX);
				_position=_position+2;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ::");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_definition(_anonymous_107)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_107;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_107.addAll(_token);
			_token__anonymous_107.setValue(_token.getValue());
		}
		_token=_token__anonymous_107;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_107);
			association_names.reject(_position__anonymous_107);
			room_names.reject(_position__anonymous_107);
			activity_names.reject(_position__anonymous_107);
			siding_names.reject(_position__anonymous_107);
			item_names.reject(_position__anonymous_107);
			aspect_names.reject(_position__anonymous_107);
			affinity_names.reject(_position__anonymous_107);
			activity_type_names.reject(_position__anonymous_107);
			trail_names.reject(_position__anonymous_107);
			attack_names.reject(_position__anonymous_107);
			reason_names.reject(_position__anonymous_107);
			trait_names.reject(_position__anonymous_107);
			condition_names.reject(_position__anonymous_107);
			payment_short_type_names.reject(_position__anonymous_107);
			skill_names.reject(_position__anonymous_107);
			map_names.reject(_position__anonymous_107);
			event_names.reject(_position__anonymous_107);
			image_names.reject(_position__anonymous_107);
			tile_symbols.reject(_position__anonymous_107);
			payment_long_type_names.reject(_position__anonymous_107);
			area_names.reject(_position__anonymous_107);
			structure_names.reject(_position__anonymous_107);
			tile_names.reject(_position__anonymous_107);
			hero_stat.reject(_position__anonymous_107);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_107);
			association_names.accept(_position__anonymous_107);
			room_names.accept(_position__anonymous_107);
			activity_names.accept(_position__anonymous_107);
			siding_names.accept(_position__anonymous_107);
			item_names.accept(_position__anonymous_107);
			aspect_names.accept(_position__anonymous_107);
			affinity_names.accept(_position__anonymous_107);
			activity_type_names.accept(_position__anonymous_107);
			trail_names.accept(_position__anonymous_107);
			attack_names.accept(_position__anonymous_107);
			reason_names.accept(_position__anonymous_107);
			trait_names.accept(_position__anonymous_107);
			condition_names.accept(_position__anonymous_107);
			payment_short_type_names.accept(_position__anonymous_107);
			skill_names.accept(_position__anonymous_107);
			map_names.accept(_position__anonymous_107);
			event_names.accept(_position__anonymous_107);
			image_names.accept(_position__anonymous_107);
			tile_symbols.accept(_position__anonymous_107);
			payment_long_type_names.accept(_position__anonymous_107);
			area_names.accept(_position__anonymous_107);
			structure_names.accept(_position__anonymous_107);
			tile_names.accept(_position__anonymous_107);
			hero_stat.accept(_position__anonymous_107);
		}
	}
	public void parse__anonymous_228() {
		int _position__anonymous_228 = -1;
		Token.Parsed _token__anonymous_228 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_228=_position;
		_token__anonymous_228=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='*') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_19.defaultState);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain *");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_multiple_element(_anonymous_228)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_228;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_228.addAll(_token);
			_token__anonymous_228.setValue(_token.getValue());
		}
		_token=_token__anonymous_228;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_228);
			association_names.reject(_position__anonymous_228);
			room_names.reject(_position__anonymous_228);
			activity_names.reject(_position__anonymous_228);
			siding_names.reject(_position__anonymous_228);
			item_names.reject(_position__anonymous_228);
			aspect_names.reject(_position__anonymous_228);
			affinity_names.reject(_position__anonymous_228);
			activity_type_names.reject(_position__anonymous_228);
			trail_names.reject(_position__anonymous_228);
			attack_names.reject(_position__anonymous_228);
			reason_names.reject(_position__anonymous_228);
			trait_names.reject(_position__anonymous_228);
			condition_names.reject(_position__anonymous_228);
			payment_short_type_names.reject(_position__anonymous_228);
			skill_names.reject(_position__anonymous_228);
			map_names.reject(_position__anonymous_228);
			event_names.reject(_position__anonymous_228);
			image_names.reject(_position__anonymous_228);
			tile_symbols.reject(_position__anonymous_228);
			payment_long_type_names.reject(_position__anonymous_228);
			area_names.reject(_position__anonymous_228);
			structure_names.reject(_position__anonymous_228);
			tile_names.reject(_position__anonymous_228);
			hero_stat.reject(_position__anonymous_228);
			_state=SUCCESS;
			_position__anonymous_228=_position;
			_token__anonymous_228=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			int _state_251 = _state;
			boolean _iteration_achieved_251 = false;
			while(_position<_inputLength) {
				parse__anonymous_229();
				if(_state==FAILED) {
					break;
				}
				else {
					_iteration_achieved_251=true;
				}
			}
			if(_iteration_achieved_251==false) {
				_state=FAILED;
			}
			else if(_state_251==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_multiple_element(_anonymous_228)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_228;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_228.addAll(_token);
				_token__anonymous_228.setValue(_token.getValue());
			}
			_token=_token__anonymous_228;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_228);
				association_names.reject(_position__anonymous_228);
				room_names.reject(_position__anonymous_228);
				activity_names.reject(_position__anonymous_228);
				siding_names.reject(_position__anonymous_228);
				item_names.reject(_position__anonymous_228);
				aspect_names.reject(_position__anonymous_228);
				affinity_names.reject(_position__anonymous_228);
				activity_type_names.reject(_position__anonymous_228);
				trail_names.reject(_position__anonymous_228);
				attack_names.reject(_position__anonymous_228);
				reason_names.reject(_position__anonymous_228);
				trait_names.reject(_position__anonymous_228);
				condition_names.reject(_position__anonymous_228);
				payment_short_type_names.reject(_position__anonymous_228);
				skill_names.reject(_position__anonymous_228);
				map_names.reject(_position__anonymous_228);
				event_names.reject(_position__anonymous_228);
				image_names.reject(_position__anonymous_228);
				tile_symbols.reject(_position__anonymous_228);
				payment_long_type_names.reject(_position__anonymous_228);
				area_names.reject(_position__anonymous_228);
				structure_names.reject(_position__anonymous_228);
				tile_names.reject(_position__anonymous_228);
				hero_stat.reject(_position__anonymous_228);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_228);
				association_names.accept(_position__anonymous_228);
				room_names.accept(_position__anonymous_228);
				activity_names.accept(_position__anonymous_228);
				siding_names.accept(_position__anonymous_228);
				item_names.accept(_position__anonymous_228);
				aspect_names.accept(_position__anonymous_228);
				affinity_names.accept(_position__anonymous_228);
				activity_type_names.accept(_position__anonymous_228);
				trail_names.accept(_position__anonymous_228);
				attack_names.accept(_position__anonymous_228);
				reason_names.accept(_position__anonymous_228);
				trait_names.accept(_position__anonymous_228);
				condition_names.accept(_position__anonymous_228);
				payment_short_type_names.accept(_position__anonymous_228);
				skill_names.accept(_position__anonymous_228);
				map_names.accept(_position__anonymous_228);
				event_names.accept(_position__anonymous_228);
				image_names.accept(_position__anonymous_228);
				tile_symbols.accept(_position__anonymous_228);
				payment_long_type_names.accept(_position__anonymous_228);
				area_names.accept(_position__anonymous_228);
				structure_names.accept(_position__anonymous_228);
				tile_names.accept(_position__anonymous_228);
				hero_stat.accept(_position__anonymous_228);
			}
		}
	}
	public void parse__anonymous_84() {
		int _position__anonymous_84 = -1;
		Token.Parsed _token__anonymous_84 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_84=_position;
		_token__anonymous_84=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+2-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='\t') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_5.SYNTAX);
			_position=_position+2;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n\t");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"area_declaration(_anonymous_84)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_84;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_84.addAll(_token);
			_token__anonymous_84.setValue(_token.getValue());
		}
		_token=_token__anonymous_84;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_84);
			association_names.reject(_position__anonymous_84);
			room_names.reject(_position__anonymous_84);
			activity_names.reject(_position__anonymous_84);
			siding_names.reject(_position__anonymous_84);
			item_names.reject(_position__anonymous_84);
			aspect_names.reject(_position__anonymous_84);
			affinity_names.reject(_position__anonymous_84);
			activity_type_names.reject(_position__anonymous_84);
			trail_names.reject(_position__anonymous_84);
			attack_names.reject(_position__anonymous_84);
			reason_names.reject(_position__anonymous_84);
			trait_names.reject(_position__anonymous_84);
			condition_names.reject(_position__anonymous_84);
			payment_short_type_names.reject(_position__anonymous_84);
			skill_names.reject(_position__anonymous_84);
			map_names.reject(_position__anonymous_84);
			event_names.reject(_position__anonymous_84);
			image_names.reject(_position__anonymous_84);
			tile_symbols.reject(_position__anonymous_84);
			payment_long_type_names.reject(_position__anonymous_84);
			area_names.reject(_position__anonymous_84);
			structure_names.reject(_position__anonymous_84);
			tile_names.reject(_position__anonymous_84);
			hero_stat.reject(_position__anonymous_84);
			_state=SUCCESS;
			_position__anonymous_84=_position;
			_token__anonymous_84=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!=',') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_23.SYNTAX);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ,");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"area_declaration(_anonymous_84)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_84;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_84.addAll(_token);
				_token__anonymous_84.setValue(_token.getValue());
			}
			_token=_token__anonymous_84;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_84);
				association_names.reject(_position__anonymous_84);
				room_names.reject(_position__anonymous_84);
				activity_names.reject(_position__anonymous_84);
				siding_names.reject(_position__anonymous_84);
				item_names.reject(_position__anonymous_84);
				aspect_names.reject(_position__anonymous_84);
				affinity_names.reject(_position__anonymous_84);
				activity_type_names.reject(_position__anonymous_84);
				trail_names.reject(_position__anonymous_84);
				attack_names.reject(_position__anonymous_84);
				reason_names.reject(_position__anonymous_84);
				trait_names.reject(_position__anonymous_84);
				condition_names.reject(_position__anonymous_84);
				payment_short_type_names.reject(_position__anonymous_84);
				skill_names.reject(_position__anonymous_84);
				map_names.reject(_position__anonymous_84);
				event_names.reject(_position__anonymous_84);
				image_names.reject(_position__anonymous_84);
				tile_symbols.reject(_position__anonymous_84);
				payment_long_type_names.reject(_position__anonymous_84);
				area_names.reject(_position__anonymous_84);
				structure_names.reject(_position__anonymous_84);
				tile_names.reject(_position__anonymous_84);
				hero_stat.reject(_position__anonymous_84);
				_state=SUCCESS;
				_position__anonymous_84=_position;
				_token__anonymous_84=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				if(_position+1-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!='&') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_68.SYNTAX);
					_position=_position+1;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain &");
						_furthestPosition=_position;
					}
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"area_declaration(_anonymous_84)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_84;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_84.addAll(_token);
					_token__anonymous_84.setValue(_token.getValue());
				}
				_token=_token__anonymous_84;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_84);
					association_names.reject(_position__anonymous_84);
					room_names.reject(_position__anonymous_84);
					activity_names.reject(_position__anonymous_84);
					siding_names.reject(_position__anonymous_84);
					item_names.reject(_position__anonymous_84);
					aspect_names.reject(_position__anonymous_84);
					affinity_names.reject(_position__anonymous_84);
					activity_type_names.reject(_position__anonymous_84);
					trail_names.reject(_position__anonymous_84);
					attack_names.reject(_position__anonymous_84);
					reason_names.reject(_position__anonymous_84);
					trait_names.reject(_position__anonymous_84);
					condition_names.reject(_position__anonymous_84);
					payment_short_type_names.reject(_position__anonymous_84);
					skill_names.reject(_position__anonymous_84);
					map_names.reject(_position__anonymous_84);
					event_names.reject(_position__anonymous_84);
					image_names.reject(_position__anonymous_84);
					tile_symbols.reject(_position__anonymous_84);
					payment_long_type_names.reject(_position__anonymous_84);
					area_names.reject(_position__anonymous_84);
					structure_names.reject(_position__anonymous_84);
					tile_names.reject(_position__anonymous_84);
					hero_stat.reject(_position__anonymous_84);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_84);
					association_names.accept(_position__anonymous_84);
					room_names.accept(_position__anonymous_84);
					activity_names.accept(_position__anonymous_84);
					siding_names.accept(_position__anonymous_84);
					item_names.accept(_position__anonymous_84);
					aspect_names.accept(_position__anonymous_84);
					affinity_names.accept(_position__anonymous_84);
					activity_type_names.accept(_position__anonymous_84);
					trail_names.accept(_position__anonymous_84);
					attack_names.accept(_position__anonymous_84);
					reason_names.accept(_position__anonymous_84);
					trait_names.accept(_position__anonymous_84);
					condition_names.accept(_position__anonymous_84);
					payment_short_type_names.accept(_position__anonymous_84);
					skill_names.accept(_position__anonymous_84);
					map_names.accept(_position__anonymous_84);
					event_names.accept(_position__anonymous_84);
					image_names.accept(_position__anonymous_84);
					tile_symbols.accept(_position__anonymous_84);
					payment_long_type_names.accept(_position__anonymous_84);
					area_names.accept(_position__anonymous_84);
					structure_names.accept(_position__anonymous_84);
					tile_names.accept(_position__anonymous_84);
					hero_stat.accept(_position__anonymous_84);
				}
			}
		}
	}
	public void parse__anonymous_100() {
		int _position__anonymous_100 = -1;
		Token.Parsed _token__anonymous_100 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_100=_position;
		_token__anonymous_100=_token;
		_token=new Tokens.Name.ChestsDeclarationToken();
		int _state_132 = _state;
		boolean _iteration_achieved_132 = false;
		while(_position<_inputLength) {
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='*') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_19.SYNTAX);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain *");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				break;
			}
			else {
				_iteration_achieved_132=true;
			}
		}
		if(_iteration_achieved_132==false) {
			_state=FAILED;
		}
		else if(_state_132==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_100)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_100;
		}
		else {
			if(_position+6-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='C') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='h') {
					_state=FAILED;
				}
				if(_inputArray[_position+2]!='e') {
					_state=FAILED;
				}
				if(_inputArray[_position+3]!='s') {
					_state=FAILED;
				}
				if(_inputArray[_position+4]!='t') {
					_state=FAILED;
				}
				if(_inputArray[_position+5]!='s') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_79.SYNTAX);
				_position=_position+6;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain Chests");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_100)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_100;
			}
			else {
				int _state_133 = _state;
				boolean _iteration_achieved_133 = false;
				while(_position<_inputLength) {
					if(_position+1-1 >=_inputLength) {
						_state=FAILED;
					}
					else {
						if(_inputArray[_position+0]!='*') {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,Tokens.Syntax.syntax_19.SYNTAX);
						_position=_position+1;
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
					else if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain *");
							_furthestPosition=_position;
						}
					}
					if(_state==FAILED) {
						break;
					}
					else {
						_iteration_achieved_133=true;
					}
				}
				if(_iteration_achieved_133==false) {
					_state=FAILED;
				}
				else if(_state_133==SUCCESS&&_state==FAILED) {
					_state=SUCCESS;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_100)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_100;
				}
				else {
					int _state_134 = _state;
					while(_position<_inputLength) {
						if(_position+1-1 >=_inputLength) {
							_state=FAILED;
						}
						else {
							if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
								_state=FAILED;
							}
						}
						if(_state==SUCCESS) {
							_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
							_position=_position+1;
							while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
								++_position;
							}
						}
						else if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
								_furthestPosition=_position;
							}
						}
						if(_state==FAILED) {
							break;
						}
					}
					if(_state_134==SUCCESS&&_state==FAILED) {
						_state=SUCCESS;
					}
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_100)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_100;
					}
					else {
						int _state_135 = _state;
						while(_position<_inputLength) {
							parse_tile_definition();
							if(_state==FAILED) {
								break;
							}
						}
						if(_state_135==SUCCESS&&_state==FAILED) {
							_state=SUCCESS;
						}
						if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_declaration(_anonymous_100)");
								_furthestPosition=_position;
							}
							_position=_position__anonymous_100;
						}
						else {
						}
					}
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_100.add(_position__anonymous_100,_token);
		}
		_token=_token__anonymous_100;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_100);
			association_names.reject(_position__anonymous_100);
			room_names.reject(_position__anonymous_100);
			activity_names.reject(_position__anonymous_100);
			siding_names.reject(_position__anonymous_100);
			item_names.reject(_position__anonymous_100);
			aspect_names.reject(_position__anonymous_100);
			affinity_names.reject(_position__anonymous_100);
			activity_type_names.reject(_position__anonymous_100);
			trail_names.reject(_position__anonymous_100);
			attack_names.reject(_position__anonymous_100);
			reason_names.reject(_position__anonymous_100);
			trait_names.reject(_position__anonymous_100);
			condition_names.reject(_position__anonymous_100);
			payment_short_type_names.reject(_position__anonymous_100);
			skill_names.reject(_position__anonymous_100);
			map_names.reject(_position__anonymous_100);
			event_names.reject(_position__anonymous_100);
			image_names.reject(_position__anonymous_100);
			tile_symbols.reject(_position__anonymous_100);
			payment_long_type_names.reject(_position__anonymous_100);
			area_names.reject(_position__anonymous_100);
			structure_names.reject(_position__anonymous_100);
			tile_names.reject(_position__anonymous_100);
			hero_stat.reject(_position__anonymous_100);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_100);
			association_names.accept(_position__anonymous_100);
			room_names.accept(_position__anonymous_100);
			activity_names.accept(_position__anonymous_100);
			siding_names.accept(_position__anonymous_100);
			item_names.accept(_position__anonymous_100);
			aspect_names.accept(_position__anonymous_100);
			affinity_names.accept(_position__anonymous_100);
			activity_type_names.accept(_position__anonymous_100);
			trail_names.accept(_position__anonymous_100);
			attack_names.accept(_position__anonymous_100);
			reason_names.accept(_position__anonymous_100);
			trait_names.accept(_position__anonymous_100);
			condition_names.accept(_position__anonymous_100);
			payment_short_type_names.accept(_position__anonymous_100);
			skill_names.accept(_position__anonymous_100);
			map_names.accept(_position__anonymous_100);
			event_names.accept(_position__anonymous_100);
			image_names.accept(_position__anonymous_100);
			tile_symbols.accept(_position__anonymous_100);
			payment_long_type_names.accept(_position__anonymous_100);
			area_names.accept(_position__anonymous_100);
			structure_names.accept(_position__anonymous_100);
			tile_names.accept(_position__anonymous_100);
			hero_stat.accept(_position__anonymous_100);
		}
	}
	public void parse__anonymous_221() {
		int _position__anonymous_221 = -1;
		Token.Parsed _token__anonymous_221 = null;
		int _position_INTEGER = -1;
		Token.Parsed _token_INTEGER = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_221=_position;
		_token__anonymous_221=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!=',') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_23.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ,");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation(_anonymous_221)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_221;
		}
		else {
			_token_INTEGER=_token;
			_token=new Tokens.Name.RightToken();
			_position_INTEGER=_position;
			parse_INTEGER();
			if(_state==SUCCESS) {
				_token_INTEGER.add(_position_INTEGER,_token);
			}
			_token=_token_INTEGER;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation(_anonymous_221)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_221;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_221.addAll(_token);
			_token__anonymous_221.setValue(_token.getValue());
		}
		_token=_token__anonymous_221;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_221);
			association_names.reject(_position__anonymous_221);
			room_names.reject(_position__anonymous_221);
			activity_names.reject(_position__anonymous_221);
			siding_names.reject(_position__anonymous_221);
			item_names.reject(_position__anonymous_221);
			aspect_names.reject(_position__anonymous_221);
			affinity_names.reject(_position__anonymous_221);
			activity_type_names.reject(_position__anonymous_221);
			trail_names.reject(_position__anonymous_221);
			attack_names.reject(_position__anonymous_221);
			reason_names.reject(_position__anonymous_221);
			trait_names.reject(_position__anonymous_221);
			condition_names.reject(_position__anonymous_221);
			payment_short_type_names.reject(_position__anonymous_221);
			skill_names.reject(_position__anonymous_221);
			map_names.reject(_position__anonymous_221);
			event_names.reject(_position__anonymous_221);
			image_names.reject(_position__anonymous_221);
			tile_symbols.reject(_position__anonymous_221);
			payment_long_type_names.reject(_position__anonymous_221);
			area_names.reject(_position__anonymous_221);
			structure_names.reject(_position__anonymous_221);
			tile_names.reject(_position__anonymous_221);
			hero_stat.reject(_position__anonymous_221);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_221);
			association_names.accept(_position__anonymous_221);
			room_names.accept(_position__anonymous_221);
			activity_names.accept(_position__anonymous_221);
			siding_names.accept(_position__anonymous_221);
			item_names.accept(_position__anonymous_221);
			aspect_names.accept(_position__anonymous_221);
			affinity_names.accept(_position__anonymous_221);
			activity_type_names.accept(_position__anonymous_221);
			trail_names.accept(_position__anonymous_221);
			attack_names.accept(_position__anonymous_221);
			reason_names.accept(_position__anonymous_221);
			trait_names.accept(_position__anonymous_221);
			condition_names.accept(_position__anonymous_221);
			payment_short_type_names.accept(_position__anonymous_221);
			skill_names.accept(_position__anonymous_221);
			map_names.accept(_position__anonymous_221);
			event_names.accept(_position__anonymous_221);
			image_names.accept(_position__anonymous_221);
			tile_symbols.accept(_position__anonymous_221);
			payment_long_type_names.accept(_position__anonymous_221);
			area_names.accept(_position__anonymous_221);
			structure_names.accept(_position__anonymous_221);
			tile_names.accept(_position__anonymous_221);
			hero_stat.accept(_position__anonymous_221);
		}
	}
	public void parse__anonymous_83() {
		int _position__anonymous_83 = -1;
		Token.Parsed _token__anonymous_83 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_83=_position;
		_token__anonymous_83=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse__anonymous_84();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"area_declaration(_anonymous_83)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_83;
		}
		else {
			parse_patch_options();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"area_declaration(_anonymous_83)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_83;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_83.addAll(_token);
			_token__anonymous_83.setValue(_token.getValue());
		}
		_token=_token__anonymous_83;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_83);
			association_names.reject(_position__anonymous_83);
			room_names.reject(_position__anonymous_83);
			activity_names.reject(_position__anonymous_83);
			siding_names.reject(_position__anonymous_83);
			item_names.reject(_position__anonymous_83);
			aspect_names.reject(_position__anonymous_83);
			affinity_names.reject(_position__anonymous_83);
			activity_type_names.reject(_position__anonymous_83);
			trail_names.reject(_position__anonymous_83);
			attack_names.reject(_position__anonymous_83);
			reason_names.reject(_position__anonymous_83);
			trait_names.reject(_position__anonymous_83);
			condition_names.reject(_position__anonymous_83);
			payment_short_type_names.reject(_position__anonymous_83);
			skill_names.reject(_position__anonymous_83);
			map_names.reject(_position__anonymous_83);
			event_names.reject(_position__anonymous_83);
			image_names.reject(_position__anonymous_83);
			tile_symbols.reject(_position__anonymous_83);
			payment_long_type_names.reject(_position__anonymous_83);
			area_names.reject(_position__anonymous_83);
			structure_names.reject(_position__anonymous_83);
			tile_names.reject(_position__anonymous_83);
			hero_stat.reject(_position__anonymous_83);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_83);
			association_names.accept(_position__anonymous_83);
			room_names.accept(_position__anonymous_83);
			activity_names.accept(_position__anonymous_83);
			siding_names.accept(_position__anonymous_83);
			item_names.accept(_position__anonymous_83);
			aspect_names.accept(_position__anonymous_83);
			affinity_names.accept(_position__anonymous_83);
			activity_type_names.accept(_position__anonymous_83);
			trail_names.accept(_position__anonymous_83);
			attack_names.accept(_position__anonymous_83);
			reason_names.accept(_position__anonymous_83);
			trait_names.accept(_position__anonymous_83);
			condition_names.accept(_position__anonymous_83);
			payment_short_type_names.accept(_position__anonymous_83);
			skill_names.accept(_position__anonymous_83);
			map_names.accept(_position__anonymous_83);
			event_names.accept(_position__anonymous_83);
			image_names.accept(_position__anonymous_83);
			tile_symbols.accept(_position__anonymous_83);
			payment_long_type_names.accept(_position__anonymous_83);
			area_names.accept(_position__anonymous_83);
			structure_names.accept(_position__anonymous_83);
			tile_names.accept(_position__anonymous_83);
			hero_stat.accept(_position__anonymous_83);
		}
	}
	public void parse__anonymous_101() {
		int _position__anonymous_101 = -1;
		Token.Parsed _token__anonymous_101 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_101=_position;
		_token__anonymous_101=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='|') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_35.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain |");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"edge_definition(_anonymous_101)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_101;
		}
		else {
			_token_NAME=_token;
			_token=new Tokens.Name.EdgeTileNameToken();
			_position_NAME=_position;
			parse_NAME();
			if(_state==SUCCESS) {
				_token_NAME.add(_position_NAME,_token);
			}
			_token=_token_NAME;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"edge_definition(_anonymous_101)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_101;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_101.addAll(_token);
			_token__anonymous_101.setValue(_token.getValue());
		}
		_token=_token__anonymous_101;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_101);
			association_names.reject(_position__anonymous_101);
			room_names.reject(_position__anonymous_101);
			activity_names.reject(_position__anonymous_101);
			siding_names.reject(_position__anonymous_101);
			item_names.reject(_position__anonymous_101);
			aspect_names.reject(_position__anonymous_101);
			affinity_names.reject(_position__anonymous_101);
			activity_type_names.reject(_position__anonymous_101);
			trail_names.reject(_position__anonymous_101);
			attack_names.reject(_position__anonymous_101);
			reason_names.reject(_position__anonymous_101);
			trait_names.reject(_position__anonymous_101);
			condition_names.reject(_position__anonymous_101);
			payment_short_type_names.reject(_position__anonymous_101);
			skill_names.reject(_position__anonymous_101);
			map_names.reject(_position__anonymous_101);
			event_names.reject(_position__anonymous_101);
			image_names.reject(_position__anonymous_101);
			tile_symbols.reject(_position__anonymous_101);
			payment_long_type_names.reject(_position__anonymous_101);
			area_names.reject(_position__anonymous_101);
			structure_names.reject(_position__anonymous_101);
			tile_names.reject(_position__anonymous_101);
			hero_stat.reject(_position__anonymous_101);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_101);
			association_names.accept(_position__anonymous_101);
			room_names.accept(_position__anonymous_101);
			activity_names.accept(_position__anonymous_101);
			siding_names.accept(_position__anonymous_101);
			item_names.accept(_position__anonymous_101);
			aspect_names.accept(_position__anonymous_101);
			affinity_names.accept(_position__anonymous_101);
			activity_type_names.accept(_position__anonymous_101);
			trail_names.accept(_position__anonymous_101);
			attack_names.accept(_position__anonymous_101);
			reason_names.accept(_position__anonymous_101);
			trait_names.accept(_position__anonymous_101);
			condition_names.accept(_position__anonymous_101);
			payment_short_type_names.accept(_position__anonymous_101);
			skill_names.accept(_position__anonymous_101);
			map_names.accept(_position__anonymous_101);
			event_names.accept(_position__anonymous_101);
			image_names.accept(_position__anonymous_101);
			tile_symbols.accept(_position__anonymous_101);
			payment_long_type_names.accept(_position__anonymous_101);
			area_names.accept(_position__anonymous_101);
			structure_names.accept(_position__anonymous_101);
			tile_names.accept(_position__anonymous_101);
			hero_stat.accept(_position__anonymous_101);
		}
	}
	public void parse__anonymous_222() {
		int _position__anonymous_222 = -1;
		Token.Parsed _token__anonymous_222 = null;
		int _position_comments = -1;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_222=_position;
		_token__anonymous_222=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_drawable(_anonymous_222)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_222;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_222.addAll(_token);
			_token__anonymous_222.setValue(_token.getValue());
		}
		_token=_token__anonymous_222;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_222);
			association_names.reject(_position__anonymous_222);
			room_names.reject(_position__anonymous_222);
			activity_names.reject(_position__anonymous_222);
			siding_names.reject(_position__anonymous_222);
			item_names.reject(_position__anonymous_222);
			aspect_names.reject(_position__anonymous_222);
			affinity_names.reject(_position__anonymous_222);
			activity_type_names.reject(_position__anonymous_222);
			trail_names.reject(_position__anonymous_222);
			attack_names.reject(_position__anonymous_222);
			reason_names.reject(_position__anonymous_222);
			trait_names.reject(_position__anonymous_222);
			condition_names.reject(_position__anonymous_222);
			payment_short_type_names.reject(_position__anonymous_222);
			skill_names.reject(_position__anonymous_222);
			map_names.reject(_position__anonymous_222);
			event_names.reject(_position__anonymous_222);
			image_names.reject(_position__anonymous_222);
			tile_symbols.reject(_position__anonymous_222);
			payment_long_type_names.reject(_position__anonymous_222);
			area_names.reject(_position__anonymous_222);
			structure_names.reject(_position__anonymous_222);
			tile_names.reject(_position__anonymous_222);
			hero_stat.reject(_position__anonymous_222);
			_state=SUCCESS;
			_position__anonymous_222=_position;
			_token__anonymous_222=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			_position_comments=_position;
			if(_state==SUCCESS&&!_recursion_protection_comments_51.contains(_position)) {
				_recursion_protection_comments_51.add(_position);
				parse_comments();
				_recursion_protection_comments_51.remove(_position_comments);
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_drawable(_anonymous_222)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_222;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_222.addAll(_token);
				_token__anonymous_222.setValue(_token.getValue());
			}
			_token=_token__anonymous_222;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_222);
				association_names.reject(_position__anonymous_222);
				room_names.reject(_position__anonymous_222);
				activity_names.reject(_position__anonymous_222);
				siding_names.reject(_position__anonymous_222);
				item_names.reject(_position__anonymous_222);
				aspect_names.reject(_position__anonymous_222);
				affinity_names.reject(_position__anonymous_222);
				activity_type_names.reject(_position__anonymous_222);
				trail_names.reject(_position__anonymous_222);
				attack_names.reject(_position__anonymous_222);
				reason_names.reject(_position__anonymous_222);
				trait_names.reject(_position__anonymous_222);
				condition_names.reject(_position__anonymous_222);
				payment_short_type_names.reject(_position__anonymous_222);
				skill_names.reject(_position__anonymous_222);
				map_names.reject(_position__anonymous_222);
				event_names.reject(_position__anonymous_222);
				image_names.reject(_position__anonymous_222);
				tile_symbols.reject(_position__anonymous_222);
				payment_long_type_names.reject(_position__anonymous_222);
				area_names.reject(_position__anonymous_222);
				structure_names.reject(_position__anonymous_222);
				tile_names.reject(_position__anonymous_222);
				hero_stat.reject(_position__anonymous_222);
				_state=SUCCESS;
				_position__anonymous_222=_position;
				_token__anonymous_222=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				parse_multiple_drawable_declaration();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_drawable(_anonymous_222)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_222;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_222.addAll(_token);
					_token__anonymous_222.setValue(_token.getValue());
				}
				_token=_token__anonymous_222;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_222);
					association_names.reject(_position__anonymous_222);
					room_names.reject(_position__anonymous_222);
					activity_names.reject(_position__anonymous_222);
					siding_names.reject(_position__anonymous_222);
					item_names.reject(_position__anonymous_222);
					aspect_names.reject(_position__anonymous_222);
					affinity_names.reject(_position__anonymous_222);
					activity_type_names.reject(_position__anonymous_222);
					trail_names.reject(_position__anonymous_222);
					attack_names.reject(_position__anonymous_222);
					reason_names.reject(_position__anonymous_222);
					trait_names.reject(_position__anonymous_222);
					condition_names.reject(_position__anonymous_222);
					payment_short_type_names.reject(_position__anonymous_222);
					skill_names.reject(_position__anonymous_222);
					map_names.reject(_position__anonymous_222);
					event_names.reject(_position__anonymous_222);
					image_names.reject(_position__anonymous_222);
					tile_symbols.reject(_position__anonymous_222);
					payment_long_type_names.reject(_position__anonymous_222);
					area_names.reject(_position__anonymous_222);
					structure_names.reject(_position__anonymous_222);
					tile_names.reject(_position__anonymous_222);
					hero_stat.reject(_position__anonymous_222);
					_state=SUCCESS;
					_position__anonymous_222=_position;
					_token__anonymous_222=_token;
					_token=new Token.Parsed(Token.Id.ANON);
					parse_drawable_declaration();
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_drawable(_anonymous_222)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_222;
					}
					else {
					}
					if(_state==SUCCESS) {
						_token__anonymous_222.addAll(_token);
						_token__anonymous_222.setValue(_token.getValue());
					}
					_token=_token__anonymous_222;
					if(_state==FAILED) {
						support_names.reject(_position__anonymous_222);
						association_names.reject(_position__anonymous_222);
						room_names.reject(_position__anonymous_222);
						activity_names.reject(_position__anonymous_222);
						siding_names.reject(_position__anonymous_222);
						item_names.reject(_position__anonymous_222);
						aspect_names.reject(_position__anonymous_222);
						affinity_names.reject(_position__anonymous_222);
						activity_type_names.reject(_position__anonymous_222);
						trail_names.reject(_position__anonymous_222);
						attack_names.reject(_position__anonymous_222);
						reason_names.reject(_position__anonymous_222);
						trait_names.reject(_position__anonymous_222);
						condition_names.reject(_position__anonymous_222);
						payment_short_type_names.reject(_position__anonymous_222);
						skill_names.reject(_position__anonymous_222);
						map_names.reject(_position__anonymous_222);
						event_names.reject(_position__anonymous_222);
						image_names.reject(_position__anonymous_222);
						tile_symbols.reject(_position__anonymous_222);
						payment_long_type_names.reject(_position__anonymous_222);
						area_names.reject(_position__anonymous_222);
						structure_names.reject(_position__anonymous_222);
						tile_names.reject(_position__anonymous_222);
						hero_stat.reject(_position__anonymous_222);
					}
					else if(_state==SUCCESS) {
						support_names.accept(_position__anonymous_222);
						association_names.accept(_position__anonymous_222);
						room_names.accept(_position__anonymous_222);
						activity_names.accept(_position__anonymous_222);
						siding_names.accept(_position__anonymous_222);
						item_names.accept(_position__anonymous_222);
						aspect_names.accept(_position__anonymous_222);
						affinity_names.accept(_position__anonymous_222);
						activity_type_names.accept(_position__anonymous_222);
						trail_names.accept(_position__anonymous_222);
						attack_names.accept(_position__anonymous_222);
						reason_names.accept(_position__anonymous_222);
						trait_names.accept(_position__anonymous_222);
						condition_names.accept(_position__anonymous_222);
						payment_short_type_names.accept(_position__anonymous_222);
						skill_names.accept(_position__anonymous_222);
						map_names.accept(_position__anonymous_222);
						event_names.accept(_position__anonymous_222);
						image_names.accept(_position__anonymous_222);
						tile_symbols.accept(_position__anonymous_222);
						payment_long_type_names.accept(_position__anonymous_222);
						area_names.accept(_position__anonymous_222);
						structure_names.accept(_position__anonymous_222);
						tile_names.accept(_position__anonymous_222);
						hero_stat.accept(_position__anonymous_222);
					}
				}
			}
		}
	}
	public void parse__anonymous_86() {
		int _position__anonymous_86 = -1;
		Token.Parsed _token__anonymous_86 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_86=_position;
		_token__anonymous_86=_token;
		_token=new Tokens.Name.SubGeneratorToken();
		if(_pass==FIRST_PASS) {
			String _result = _preparsed_NAME.get(_position);
			if(_result==null) {
				_state=FAILED;
			}
			else {
				Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
				_token.add(_position,_first_pass_token);
				_position+=_result.length();
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
		}
		else if(_pass==SECOND_PASS) {
			_list_name_result=_preparsed_NAME.get(_position);
			if(_list_name_result!=null&&area_names.contains(_list_name_result)) {
				if(_position+_list_name_result.length()<_inputLength) {
					int _next_char = _inputArray[_position+_list_name_result.length()];
					if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,new Tokens.Name.AreaNamesToken(_list_name_result));
					_position+=_list_name_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"area_names");
					_furthestPosition=_position;
				}
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"patch_element(_anonymous_86)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_86;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_86.add(_position__anonymous_86,_token);
		}
		_token=_token__anonymous_86;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_86);
			association_names.reject(_position__anonymous_86);
			room_names.reject(_position__anonymous_86);
			activity_names.reject(_position__anonymous_86);
			siding_names.reject(_position__anonymous_86);
			item_names.reject(_position__anonymous_86);
			aspect_names.reject(_position__anonymous_86);
			affinity_names.reject(_position__anonymous_86);
			activity_type_names.reject(_position__anonymous_86);
			trail_names.reject(_position__anonymous_86);
			attack_names.reject(_position__anonymous_86);
			reason_names.reject(_position__anonymous_86);
			trait_names.reject(_position__anonymous_86);
			condition_names.reject(_position__anonymous_86);
			payment_short_type_names.reject(_position__anonymous_86);
			skill_names.reject(_position__anonymous_86);
			map_names.reject(_position__anonymous_86);
			event_names.reject(_position__anonymous_86);
			image_names.reject(_position__anonymous_86);
			tile_symbols.reject(_position__anonymous_86);
			payment_long_type_names.reject(_position__anonymous_86);
			area_names.reject(_position__anonymous_86);
			structure_names.reject(_position__anonymous_86);
			tile_names.reject(_position__anonymous_86);
			hero_stat.reject(_position__anonymous_86);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_86);
			association_names.accept(_position__anonymous_86);
			room_names.accept(_position__anonymous_86);
			activity_names.accept(_position__anonymous_86);
			siding_names.accept(_position__anonymous_86);
			item_names.accept(_position__anonymous_86);
			aspect_names.accept(_position__anonymous_86);
			affinity_names.accept(_position__anonymous_86);
			activity_type_names.accept(_position__anonymous_86);
			trail_names.accept(_position__anonymous_86);
			attack_names.accept(_position__anonymous_86);
			reason_names.accept(_position__anonymous_86);
			trait_names.accept(_position__anonymous_86);
			condition_names.accept(_position__anonymous_86);
			payment_short_type_names.accept(_position__anonymous_86);
			skill_names.accept(_position__anonymous_86);
			map_names.accept(_position__anonymous_86);
			event_names.accept(_position__anonymous_86);
			image_names.accept(_position__anonymous_86);
			tile_symbols.accept(_position__anonymous_86);
			payment_long_type_names.accept(_position__anonymous_86);
			area_names.accept(_position__anonymous_86);
			structure_names.accept(_position__anonymous_86);
			tile_names.accept(_position__anonymous_86);
			hero_stat.accept(_position__anonymous_86);
		}
	}
	public void parse__anonymous_102() {
		int _position__anonymous_102 = -1;
		Token.Parsed _token__anonymous_102 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_102=_position;
		_token__anonymous_102=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='|') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_35.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain |");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"edge_definition(_anonymous_102)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_102;
		}
		else {
			parse_direction_name();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"edge_definition(_anonymous_102)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_102;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_102.addAll(_token);
			_token__anonymous_102.setValue(_token.getValue());
		}
		_token=_token__anonymous_102;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_102);
			association_names.reject(_position__anonymous_102);
			room_names.reject(_position__anonymous_102);
			activity_names.reject(_position__anonymous_102);
			siding_names.reject(_position__anonymous_102);
			item_names.reject(_position__anonymous_102);
			aspect_names.reject(_position__anonymous_102);
			affinity_names.reject(_position__anonymous_102);
			activity_type_names.reject(_position__anonymous_102);
			trail_names.reject(_position__anonymous_102);
			attack_names.reject(_position__anonymous_102);
			reason_names.reject(_position__anonymous_102);
			trait_names.reject(_position__anonymous_102);
			condition_names.reject(_position__anonymous_102);
			payment_short_type_names.reject(_position__anonymous_102);
			skill_names.reject(_position__anonymous_102);
			map_names.reject(_position__anonymous_102);
			event_names.reject(_position__anonymous_102);
			image_names.reject(_position__anonymous_102);
			tile_symbols.reject(_position__anonymous_102);
			payment_long_type_names.reject(_position__anonymous_102);
			area_names.reject(_position__anonymous_102);
			structure_names.reject(_position__anonymous_102);
			tile_names.reject(_position__anonymous_102);
			hero_stat.reject(_position__anonymous_102);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_102);
			association_names.accept(_position__anonymous_102);
			room_names.accept(_position__anonymous_102);
			activity_names.accept(_position__anonymous_102);
			siding_names.accept(_position__anonymous_102);
			item_names.accept(_position__anonymous_102);
			aspect_names.accept(_position__anonymous_102);
			affinity_names.accept(_position__anonymous_102);
			activity_type_names.accept(_position__anonymous_102);
			trail_names.accept(_position__anonymous_102);
			attack_names.accept(_position__anonymous_102);
			reason_names.accept(_position__anonymous_102);
			trait_names.accept(_position__anonymous_102);
			condition_names.accept(_position__anonymous_102);
			payment_short_type_names.accept(_position__anonymous_102);
			skill_names.accept(_position__anonymous_102);
			map_names.accept(_position__anonymous_102);
			event_names.accept(_position__anonymous_102);
			image_names.accept(_position__anonymous_102);
			tile_symbols.accept(_position__anonymous_102);
			payment_long_type_names.accept(_position__anonymous_102);
			area_names.accept(_position__anonymous_102);
			structure_names.accept(_position__anonymous_102);
			tile_names.accept(_position__anonymous_102);
			hero_stat.accept(_position__anonymous_102);
		}
	}
	public void parse__anonymous_223() {
		int _position__anonymous_223 = -1;
		Token.Parsed _token__anonymous_223 = null;
		int _position_INTEGER = -1;
		Token.Parsed _token_INTEGER = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_223=_position;
		_token__anonymous_223=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!=',') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_23.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ,");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"multiple_drawable_points(_anonymous_223)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_223;
		}
		else {
			_token_INTEGER=_token;
			_token=new Tokens.Name.PointToken();
			_position_INTEGER=_position;
			parse_INTEGER();
			if(_state==SUCCESS) {
				_token_INTEGER.add(_position_INTEGER,_token);
			}
			_token=_token_INTEGER;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"multiple_drawable_points(_anonymous_223)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_223;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_223.addAll(_token);
			_token__anonymous_223.setValue(_token.getValue());
		}
		_token=_token__anonymous_223;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_223);
			association_names.reject(_position__anonymous_223);
			room_names.reject(_position__anonymous_223);
			activity_names.reject(_position__anonymous_223);
			siding_names.reject(_position__anonymous_223);
			item_names.reject(_position__anonymous_223);
			aspect_names.reject(_position__anonymous_223);
			affinity_names.reject(_position__anonymous_223);
			activity_type_names.reject(_position__anonymous_223);
			trail_names.reject(_position__anonymous_223);
			attack_names.reject(_position__anonymous_223);
			reason_names.reject(_position__anonymous_223);
			trait_names.reject(_position__anonymous_223);
			condition_names.reject(_position__anonymous_223);
			payment_short_type_names.reject(_position__anonymous_223);
			skill_names.reject(_position__anonymous_223);
			map_names.reject(_position__anonymous_223);
			event_names.reject(_position__anonymous_223);
			image_names.reject(_position__anonymous_223);
			tile_symbols.reject(_position__anonymous_223);
			payment_long_type_names.reject(_position__anonymous_223);
			area_names.reject(_position__anonymous_223);
			structure_names.reject(_position__anonymous_223);
			tile_names.reject(_position__anonymous_223);
			hero_stat.reject(_position__anonymous_223);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_223);
			association_names.accept(_position__anonymous_223);
			room_names.accept(_position__anonymous_223);
			activity_names.accept(_position__anonymous_223);
			siding_names.accept(_position__anonymous_223);
			item_names.accept(_position__anonymous_223);
			aspect_names.accept(_position__anonymous_223);
			affinity_names.accept(_position__anonymous_223);
			activity_type_names.accept(_position__anonymous_223);
			trail_names.accept(_position__anonymous_223);
			attack_names.accept(_position__anonymous_223);
			reason_names.accept(_position__anonymous_223);
			trait_names.accept(_position__anonymous_223);
			condition_names.accept(_position__anonymous_223);
			payment_short_type_names.accept(_position__anonymous_223);
			skill_names.accept(_position__anonymous_223);
			map_names.accept(_position__anonymous_223);
			event_names.accept(_position__anonymous_223);
			image_names.accept(_position__anonymous_223);
			tile_symbols.accept(_position__anonymous_223);
			payment_long_type_names.accept(_position__anonymous_223);
			area_names.accept(_position__anonymous_223);
			structure_names.accept(_position__anonymous_223);
			tile_names.accept(_position__anonymous_223);
			hero_stat.accept(_position__anonymous_223);
		}
	}
	public void parse__anonymous_85() {
		int _position__anonymous_85 = -1;
		Token.Parsed _token__anonymous_85 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_85=_position;
		_token__anonymous_85=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='|') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_35.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain |");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"patch_options(_anonymous_85)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_85;
		}
		else {
			parse_patch_element();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"patch_options(_anonymous_85)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_85;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_85.addAll(_token);
			_token__anonymous_85.setValue(_token.getValue());
		}
		_token=_token__anonymous_85;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_85);
			association_names.reject(_position__anonymous_85);
			room_names.reject(_position__anonymous_85);
			activity_names.reject(_position__anonymous_85);
			siding_names.reject(_position__anonymous_85);
			item_names.reject(_position__anonymous_85);
			aspect_names.reject(_position__anonymous_85);
			affinity_names.reject(_position__anonymous_85);
			activity_type_names.reject(_position__anonymous_85);
			trail_names.reject(_position__anonymous_85);
			attack_names.reject(_position__anonymous_85);
			reason_names.reject(_position__anonymous_85);
			trait_names.reject(_position__anonymous_85);
			condition_names.reject(_position__anonymous_85);
			payment_short_type_names.reject(_position__anonymous_85);
			skill_names.reject(_position__anonymous_85);
			map_names.reject(_position__anonymous_85);
			event_names.reject(_position__anonymous_85);
			image_names.reject(_position__anonymous_85);
			tile_symbols.reject(_position__anonymous_85);
			payment_long_type_names.reject(_position__anonymous_85);
			area_names.reject(_position__anonymous_85);
			structure_names.reject(_position__anonymous_85);
			tile_names.reject(_position__anonymous_85);
			hero_stat.reject(_position__anonymous_85);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_85);
			association_names.accept(_position__anonymous_85);
			room_names.accept(_position__anonymous_85);
			activity_names.accept(_position__anonymous_85);
			siding_names.accept(_position__anonymous_85);
			item_names.accept(_position__anonymous_85);
			aspect_names.accept(_position__anonymous_85);
			affinity_names.accept(_position__anonymous_85);
			activity_type_names.accept(_position__anonymous_85);
			trail_names.accept(_position__anonymous_85);
			attack_names.accept(_position__anonymous_85);
			reason_names.accept(_position__anonymous_85);
			trait_names.accept(_position__anonymous_85);
			condition_names.accept(_position__anonymous_85);
			payment_short_type_names.accept(_position__anonymous_85);
			skill_names.accept(_position__anonymous_85);
			map_names.accept(_position__anonymous_85);
			event_names.accept(_position__anonymous_85);
			image_names.accept(_position__anonymous_85);
			tile_symbols.accept(_position__anonymous_85);
			payment_long_type_names.accept(_position__anonymous_85);
			area_names.accept(_position__anonymous_85);
			structure_names.accept(_position__anonymous_85);
			tile_names.accept(_position__anonymous_85);
			hero_stat.accept(_position__anonymous_85);
		}
	}
	public void parse__anonymous_103() {
		int _position__anonymous_103 = -1;
		Token.Parsed _token__anonymous_103 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_103=_position;
		_token__anonymous_103=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"edge_definition(_anonymous_103)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_103;
		}
		else {
			parse_edge_if();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"edge_definition(_anonymous_103)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_103;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_103.addAll(_token);
			_token__anonymous_103.setValue(_token.getValue());
		}
		_token=_token__anonymous_103;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_103);
			association_names.reject(_position__anonymous_103);
			room_names.reject(_position__anonymous_103);
			activity_names.reject(_position__anonymous_103);
			siding_names.reject(_position__anonymous_103);
			item_names.reject(_position__anonymous_103);
			aspect_names.reject(_position__anonymous_103);
			affinity_names.reject(_position__anonymous_103);
			activity_type_names.reject(_position__anonymous_103);
			trail_names.reject(_position__anonymous_103);
			attack_names.reject(_position__anonymous_103);
			reason_names.reject(_position__anonymous_103);
			trait_names.reject(_position__anonymous_103);
			condition_names.reject(_position__anonymous_103);
			payment_short_type_names.reject(_position__anonymous_103);
			skill_names.reject(_position__anonymous_103);
			map_names.reject(_position__anonymous_103);
			event_names.reject(_position__anonymous_103);
			image_names.reject(_position__anonymous_103);
			tile_symbols.reject(_position__anonymous_103);
			payment_long_type_names.reject(_position__anonymous_103);
			area_names.reject(_position__anonymous_103);
			structure_names.reject(_position__anonymous_103);
			tile_names.reject(_position__anonymous_103);
			hero_stat.reject(_position__anonymous_103);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_103);
			association_names.accept(_position__anonymous_103);
			room_names.accept(_position__anonymous_103);
			activity_names.accept(_position__anonymous_103);
			siding_names.accept(_position__anonymous_103);
			item_names.accept(_position__anonymous_103);
			aspect_names.accept(_position__anonymous_103);
			affinity_names.accept(_position__anonymous_103);
			activity_type_names.accept(_position__anonymous_103);
			trail_names.accept(_position__anonymous_103);
			attack_names.accept(_position__anonymous_103);
			reason_names.accept(_position__anonymous_103);
			trait_names.accept(_position__anonymous_103);
			condition_names.accept(_position__anonymous_103);
			payment_short_type_names.accept(_position__anonymous_103);
			skill_names.accept(_position__anonymous_103);
			map_names.accept(_position__anonymous_103);
			event_names.accept(_position__anonymous_103);
			image_names.accept(_position__anonymous_103);
			tile_symbols.accept(_position__anonymous_103);
			payment_long_type_names.accept(_position__anonymous_103);
			area_names.accept(_position__anonymous_103);
			structure_names.accept(_position__anonymous_103);
			tile_names.accept(_position__anonymous_103);
			hero_stat.accept(_position__anonymous_103);
		}
	}
	public void parse__anonymous_224() {
		int _position__anonymous_224 = -1;
		Token.Parsed _token__anonymous_224 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_224=_position;
		_token__anonymous_224=_token;
		_token=new Tokens.Name.LeftParameterToken();
		parse_drawable_multiple_value();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_dimensions(_anonymous_224)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_224;
		}
		else {
			int _state_249 = _state;
			while(_position<_inputLength) {
				parse__anonymous_225();
				if(_state==FAILED) {
					break;
				}
			}
			if(_state_249==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_dimensions(_anonymous_224)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_224;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_224.add(_position__anonymous_224,_token);
		}
		_token=_token__anonymous_224;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_224);
			association_names.reject(_position__anonymous_224);
			room_names.reject(_position__anonymous_224);
			activity_names.reject(_position__anonymous_224);
			siding_names.reject(_position__anonymous_224);
			item_names.reject(_position__anonymous_224);
			aspect_names.reject(_position__anonymous_224);
			affinity_names.reject(_position__anonymous_224);
			activity_type_names.reject(_position__anonymous_224);
			trail_names.reject(_position__anonymous_224);
			attack_names.reject(_position__anonymous_224);
			reason_names.reject(_position__anonymous_224);
			trait_names.reject(_position__anonymous_224);
			condition_names.reject(_position__anonymous_224);
			payment_short_type_names.reject(_position__anonymous_224);
			skill_names.reject(_position__anonymous_224);
			map_names.reject(_position__anonymous_224);
			event_names.reject(_position__anonymous_224);
			image_names.reject(_position__anonymous_224);
			tile_symbols.reject(_position__anonymous_224);
			payment_long_type_names.reject(_position__anonymous_224);
			area_names.reject(_position__anonymous_224);
			structure_names.reject(_position__anonymous_224);
			tile_names.reject(_position__anonymous_224);
			hero_stat.reject(_position__anonymous_224);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_224);
			association_names.accept(_position__anonymous_224);
			room_names.accept(_position__anonymous_224);
			activity_names.accept(_position__anonymous_224);
			siding_names.accept(_position__anonymous_224);
			item_names.accept(_position__anonymous_224);
			aspect_names.accept(_position__anonymous_224);
			affinity_names.accept(_position__anonymous_224);
			activity_type_names.accept(_position__anonymous_224);
			trail_names.accept(_position__anonymous_224);
			attack_names.accept(_position__anonymous_224);
			reason_names.accept(_position__anonymous_224);
			trait_names.accept(_position__anonymous_224);
			condition_names.accept(_position__anonymous_224);
			payment_short_type_names.accept(_position__anonymous_224);
			skill_names.accept(_position__anonymous_224);
			map_names.accept(_position__anonymous_224);
			event_names.accept(_position__anonymous_224);
			image_names.accept(_position__anonymous_224);
			tile_symbols.accept(_position__anonymous_224);
			payment_long_type_names.accept(_position__anonymous_224);
			area_names.accept(_position__anonymous_224);
			structure_names.accept(_position__anonymous_224);
			tile_names.accept(_position__anonymous_224);
			hero_stat.accept(_position__anonymous_224);
		}
	}
	public void parse__anonymous_108() {
		int _position__anonymous_108 = -1;
		Token.Parsed _token__anonymous_108 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_108=_position;
		_token__anonymous_108=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse__anonymous_109();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_definition(_anonymous_108)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_108;
		}
		else {
			int _state_143 = _state;
			while(_position<_inputLength) {
				parse__anonymous_110();
				if(_state==FAILED) {
					break;
				}
			}
			if(_state_143==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_definition(_anonymous_108)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_108;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_108.addAll(_token);
			_token__anonymous_108.setValue(_token.getValue());
		}
		_token=_token__anonymous_108;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_108);
			association_names.reject(_position__anonymous_108);
			room_names.reject(_position__anonymous_108);
			activity_names.reject(_position__anonymous_108);
			siding_names.reject(_position__anonymous_108);
			item_names.reject(_position__anonymous_108);
			aspect_names.reject(_position__anonymous_108);
			affinity_names.reject(_position__anonymous_108);
			activity_type_names.reject(_position__anonymous_108);
			trail_names.reject(_position__anonymous_108);
			attack_names.reject(_position__anonymous_108);
			reason_names.reject(_position__anonymous_108);
			trait_names.reject(_position__anonymous_108);
			condition_names.reject(_position__anonymous_108);
			payment_short_type_names.reject(_position__anonymous_108);
			skill_names.reject(_position__anonymous_108);
			map_names.reject(_position__anonymous_108);
			event_names.reject(_position__anonymous_108);
			image_names.reject(_position__anonymous_108);
			tile_symbols.reject(_position__anonymous_108);
			payment_long_type_names.reject(_position__anonymous_108);
			area_names.reject(_position__anonymous_108);
			structure_names.reject(_position__anonymous_108);
			tile_names.reject(_position__anonymous_108);
			hero_stat.reject(_position__anonymous_108);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_108);
			association_names.accept(_position__anonymous_108);
			room_names.accept(_position__anonymous_108);
			activity_names.accept(_position__anonymous_108);
			siding_names.accept(_position__anonymous_108);
			item_names.accept(_position__anonymous_108);
			aspect_names.accept(_position__anonymous_108);
			affinity_names.accept(_position__anonymous_108);
			activity_type_names.accept(_position__anonymous_108);
			trail_names.accept(_position__anonymous_108);
			attack_names.accept(_position__anonymous_108);
			reason_names.accept(_position__anonymous_108);
			trait_names.accept(_position__anonymous_108);
			condition_names.accept(_position__anonymous_108);
			payment_short_type_names.accept(_position__anonymous_108);
			skill_names.accept(_position__anonymous_108);
			map_names.accept(_position__anonymous_108);
			event_names.accept(_position__anonymous_108);
			image_names.accept(_position__anonymous_108);
			tile_symbols.accept(_position__anonymous_108);
			payment_long_type_names.accept(_position__anonymous_108);
			area_names.accept(_position__anonymous_108);
			structure_names.accept(_position__anonymous_108);
			tile_names.accept(_position__anonymous_108);
			hero_stat.accept(_position__anonymous_108);
		}
	}
	public void parse__anonymous_229() {
		int _position__anonymous_229 = -1;
		Token.Parsed _token__anonymous_229 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_229=_position;
		_token__anonymous_229=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+2-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='-') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='>') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_57.SYNTAX);
			_position=_position+2;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ->");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_multiple_element(_anonymous_229)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_229;
		}
		else {
			_token_NAME=_token;
			_token=new Tokens.Name.NewStateNameToken();
			_position_NAME=_position;
			parse_NAME();
			if(_state==SUCCESS) {
				_token_NAME.add(_position_NAME,_token);
			}
			_token=_token_NAME;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_multiple_element(_anonymous_229)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_229;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_229.addAll(_token);
			_token__anonymous_229.setValue(_token.getValue());
		}
		_token=_token__anonymous_229;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_229);
			association_names.reject(_position__anonymous_229);
			room_names.reject(_position__anonymous_229);
			activity_names.reject(_position__anonymous_229);
			siding_names.reject(_position__anonymous_229);
			item_names.reject(_position__anonymous_229);
			aspect_names.reject(_position__anonymous_229);
			affinity_names.reject(_position__anonymous_229);
			activity_type_names.reject(_position__anonymous_229);
			trail_names.reject(_position__anonymous_229);
			attack_names.reject(_position__anonymous_229);
			reason_names.reject(_position__anonymous_229);
			trait_names.reject(_position__anonymous_229);
			condition_names.reject(_position__anonymous_229);
			payment_short_type_names.reject(_position__anonymous_229);
			skill_names.reject(_position__anonymous_229);
			map_names.reject(_position__anonymous_229);
			event_names.reject(_position__anonymous_229);
			image_names.reject(_position__anonymous_229);
			tile_symbols.reject(_position__anonymous_229);
			payment_long_type_names.reject(_position__anonymous_229);
			area_names.reject(_position__anonymous_229);
			structure_names.reject(_position__anonymous_229);
			tile_names.reject(_position__anonymous_229);
			hero_stat.reject(_position__anonymous_229);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_229);
			association_names.accept(_position__anonymous_229);
			room_names.accept(_position__anonymous_229);
			activity_names.accept(_position__anonymous_229);
			siding_names.accept(_position__anonymous_229);
			item_names.accept(_position__anonymous_229);
			aspect_names.accept(_position__anonymous_229);
			affinity_names.accept(_position__anonymous_229);
			activity_type_names.accept(_position__anonymous_229);
			trail_names.accept(_position__anonymous_229);
			attack_names.accept(_position__anonymous_229);
			reason_names.accept(_position__anonymous_229);
			trait_names.accept(_position__anonymous_229);
			condition_names.accept(_position__anonymous_229);
			payment_short_type_names.accept(_position__anonymous_229);
			skill_names.accept(_position__anonymous_229);
			map_names.accept(_position__anonymous_229);
			event_names.accept(_position__anonymous_229);
			image_names.accept(_position__anonymous_229);
			tile_symbols.accept(_position__anonymous_229);
			payment_long_type_names.accept(_position__anonymous_229);
			area_names.accept(_position__anonymous_229);
			structure_names.accept(_position__anonymous_229);
			tile_names.accept(_position__anonymous_229);
			hero_stat.accept(_position__anonymous_229);
		}
	}
	public void parse__anonymous_109() {
		int _position__anonymous_109 = -1;
		Token.Parsed _token__anonymous_109 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_109=_position;
		_token__anonymous_109=_token;
		_token=new Tokens.Name.FloorParentNameToken();
		if(_pass==FIRST_PASS) {
			String _result = _preparsed_NAME.get(_position);
			if(_result==null) {
				_state=FAILED;
			}
			else {
				Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
				_token.add(_position,_first_pass_token);
				_position+=_result.length();
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
		}
		else if(_pass==SECOND_PASS) {
			_list_name_result=_preparsed_NAME.get(_position);
			if(_list_name_result!=null&&tile_names.contains(_list_name_result)) {
				if(_position+_list_name_result.length()<_inputLength) {
					int _next_char = _inputArray[_position+_list_name_result.length()];
					if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,new Tokens.Name.TileNamesToken(_list_name_result));
					_position+=_list_name_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_names");
					_furthestPosition=_position;
				}
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_definition(_anonymous_109)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_109;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_109.add(_position__anonymous_109,_token);
		}
		_token=_token__anonymous_109;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_109);
			association_names.reject(_position__anonymous_109);
			room_names.reject(_position__anonymous_109);
			activity_names.reject(_position__anonymous_109);
			siding_names.reject(_position__anonymous_109);
			item_names.reject(_position__anonymous_109);
			aspect_names.reject(_position__anonymous_109);
			affinity_names.reject(_position__anonymous_109);
			activity_type_names.reject(_position__anonymous_109);
			trail_names.reject(_position__anonymous_109);
			attack_names.reject(_position__anonymous_109);
			reason_names.reject(_position__anonymous_109);
			trait_names.reject(_position__anonymous_109);
			condition_names.reject(_position__anonymous_109);
			payment_short_type_names.reject(_position__anonymous_109);
			skill_names.reject(_position__anonymous_109);
			map_names.reject(_position__anonymous_109);
			event_names.reject(_position__anonymous_109);
			image_names.reject(_position__anonymous_109);
			tile_symbols.reject(_position__anonymous_109);
			payment_long_type_names.reject(_position__anonymous_109);
			area_names.reject(_position__anonymous_109);
			structure_names.reject(_position__anonymous_109);
			tile_names.reject(_position__anonymous_109);
			hero_stat.reject(_position__anonymous_109);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_109);
			association_names.accept(_position__anonymous_109);
			room_names.accept(_position__anonymous_109);
			activity_names.accept(_position__anonymous_109);
			siding_names.accept(_position__anonymous_109);
			item_names.accept(_position__anonymous_109);
			aspect_names.accept(_position__anonymous_109);
			affinity_names.accept(_position__anonymous_109);
			activity_type_names.accept(_position__anonymous_109);
			trail_names.accept(_position__anonymous_109);
			attack_names.accept(_position__anonymous_109);
			reason_names.accept(_position__anonymous_109);
			trait_names.accept(_position__anonymous_109);
			condition_names.accept(_position__anonymous_109);
			payment_short_type_names.accept(_position__anonymous_109);
			skill_names.accept(_position__anonymous_109);
			map_names.accept(_position__anonymous_109);
			event_names.accept(_position__anonymous_109);
			image_names.accept(_position__anonymous_109);
			tile_symbols.accept(_position__anonymous_109);
			payment_long_type_names.accept(_position__anonymous_109);
			area_names.accept(_position__anonymous_109);
			structure_names.accept(_position__anonymous_109);
			tile_names.accept(_position__anonymous_109);
			hero_stat.accept(_position__anonymous_109);
		}
	}
	public void parse__anonymous_77() {
		int _position__anonymous_77 = -1;
		Token.Parsed _token__anonymous_77 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_77=_position;
		_token__anonymous_77=_token;
		_token=new Tokens.Name.DefaultTileNameToken();
		if(_pass==FIRST_PASS) {
			String _result = _preparsed_NAME.get(_position);
			if(_result==null) {
				_state=FAILED;
			}
			else {
				Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
				_token.add(_position,_first_pass_token);
				_position+=_result.length();
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
		}
		else if(_pass==SECOND_PASS) {
			_list_name_result=_preparsed_NAME.get(_position);
			if(_list_name_result!=null&&tile_names.contains(_list_name_result)) {
				if(_position+_list_name_result.length()<_inputLength) {
					int _next_char = _inputArray[_position+_list_name_result.length()];
					if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,new Tokens.Name.TileNamesToken(_list_name_result));
					_position+=_list_name_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_names");
					_furthestPosition=_position;
				}
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"structure_declaration(_anonymous_77)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_77;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_77.add(_position__anonymous_77,_token);
		}
		_token=_token__anonymous_77;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_77);
			association_names.reject(_position__anonymous_77);
			room_names.reject(_position__anonymous_77);
			activity_names.reject(_position__anonymous_77);
			siding_names.reject(_position__anonymous_77);
			item_names.reject(_position__anonymous_77);
			aspect_names.reject(_position__anonymous_77);
			affinity_names.reject(_position__anonymous_77);
			activity_type_names.reject(_position__anonymous_77);
			trail_names.reject(_position__anonymous_77);
			attack_names.reject(_position__anonymous_77);
			reason_names.reject(_position__anonymous_77);
			trait_names.reject(_position__anonymous_77);
			condition_names.reject(_position__anonymous_77);
			payment_short_type_names.reject(_position__anonymous_77);
			skill_names.reject(_position__anonymous_77);
			map_names.reject(_position__anonymous_77);
			event_names.reject(_position__anonymous_77);
			image_names.reject(_position__anonymous_77);
			tile_symbols.reject(_position__anonymous_77);
			payment_long_type_names.reject(_position__anonymous_77);
			area_names.reject(_position__anonymous_77);
			structure_names.reject(_position__anonymous_77);
			tile_names.reject(_position__anonymous_77);
			hero_stat.reject(_position__anonymous_77);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_77);
			association_names.accept(_position__anonymous_77);
			room_names.accept(_position__anonymous_77);
			activity_names.accept(_position__anonymous_77);
			siding_names.accept(_position__anonymous_77);
			item_names.accept(_position__anonymous_77);
			aspect_names.accept(_position__anonymous_77);
			affinity_names.accept(_position__anonymous_77);
			activity_type_names.accept(_position__anonymous_77);
			trail_names.accept(_position__anonymous_77);
			attack_names.accept(_position__anonymous_77);
			reason_names.accept(_position__anonymous_77);
			trait_names.accept(_position__anonymous_77);
			condition_names.accept(_position__anonymous_77);
			payment_short_type_names.accept(_position__anonymous_77);
			skill_names.accept(_position__anonymous_77);
			map_names.accept(_position__anonymous_77);
			event_names.accept(_position__anonymous_77);
			image_names.accept(_position__anonymous_77);
			tile_symbols.accept(_position__anonymous_77);
			payment_long_type_names.accept(_position__anonymous_77);
			area_names.accept(_position__anonymous_77);
			structure_names.accept(_position__anonymous_77);
			tile_names.accept(_position__anonymous_77);
			hero_stat.accept(_position__anonymous_77);
		}
	}
	public void parse__anonymous_76() {
		int _position__anonymous_76 = -1;
		Token.Parsed _token__anonymous_76 = null;
		int _position_patch_dimension = -1;
		Token.Parsed _token_patch_dimension = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_76=_position;
		_token__anonymous_76=_token;
		_token=new Tokens.Name.StructureDefinitionToken();
		if(_position+3-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='\t') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='\t') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_12.SYNTAX);
			_position=_position+3;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n\t\t");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"structure_declaration(_anonymous_76)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_76;
		}
		else {
			parse_NAME();
			if(_state==SUCCESS) {
				String _value = _token.getLastValue();
				if(_value!=null) {
					room_names.add(_value);
				}
				_token.add(_position,new Tokens.Name.RoomNameToken(_value));
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"structure_declaration(_anonymous_76)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_76;
			}
			else {
				parse__anonymous_77();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"structure_declaration(_anonymous_76)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_76;
				}
				else {
					_token_patch_dimension=_token;
					_token=new Tokens.Name.DefaultSizeToken();
					_position_patch_dimension=_position;
					parse_patch_dimension();
					if(_state==SUCCESS) {
						_token_patch_dimension.add(_position_patch_dimension,_token);
					}
					_token=_token_patch_dimension;
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"structure_declaration(_anonymous_76)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_76;
					}
					else {
						int _state_96 = _state;
						while(_position<_inputLength) {
							parse_patch_rimcals();
							if(_state==FAILED) {
								break;
							}
						}
						if(_state_96==SUCCESS&&_state==FAILED) {
							_state=SUCCESS;
						}
						if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"structure_declaration(_anonymous_76)");
								_furthestPosition=_position;
							}
							_position=_position__anonymous_76;
						}
						else {
							if(_position+1-1 >=_inputLength) {
								_state=FAILED;
							}
							else {
								if(_inputArray[_position+0]!=':') {
									_state=FAILED;
								}
							}
							if(_state==SUCCESS) {
								_token.add(_position,Tokens.Syntax.syntax_59.SYNTAX);
								_position=_position+1;
								while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
									++_position;
								}
							}
							else if(_state==FAILED) {
								if(_position>=_furthestPosition) {
									_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain :");
									_furthestPosition=_position;
								}
							}
							if(_state==FAILED) {
								if(_position>=_furthestPosition) {
									_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"structure_declaration(_anonymous_76)");
									_furthestPosition=_position;
								}
								_position=_position__anonymous_76;
							}
							else {
								int _state_97 = _state;
								while(_position<_inputLength) {
									parse__anonymous_78();
									if(_state==FAILED) {
										break;
									}
								}
								if(_state_97==SUCCESS&&_state==FAILED) {
									_state=SUCCESS;
								}
								if(_state==FAILED) {
									if(_position>=_furthestPosition) {
										_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"structure_declaration(_anonymous_76)");
										_furthestPosition=_position;
									}
									_position=_position__anonymous_76;
								}
								else {
								}
							}
						}
					}
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_76.add(_position__anonymous_76,_token);
		}
		_token=_token__anonymous_76;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_76);
			association_names.reject(_position__anonymous_76);
			room_names.reject(_position__anonymous_76);
			activity_names.reject(_position__anonymous_76);
			siding_names.reject(_position__anonymous_76);
			item_names.reject(_position__anonymous_76);
			aspect_names.reject(_position__anonymous_76);
			affinity_names.reject(_position__anonymous_76);
			activity_type_names.reject(_position__anonymous_76);
			trail_names.reject(_position__anonymous_76);
			attack_names.reject(_position__anonymous_76);
			reason_names.reject(_position__anonymous_76);
			trait_names.reject(_position__anonymous_76);
			condition_names.reject(_position__anonymous_76);
			payment_short_type_names.reject(_position__anonymous_76);
			skill_names.reject(_position__anonymous_76);
			map_names.reject(_position__anonymous_76);
			event_names.reject(_position__anonymous_76);
			image_names.reject(_position__anonymous_76);
			tile_symbols.reject(_position__anonymous_76);
			payment_long_type_names.reject(_position__anonymous_76);
			area_names.reject(_position__anonymous_76);
			structure_names.reject(_position__anonymous_76);
			tile_names.reject(_position__anonymous_76);
			hero_stat.reject(_position__anonymous_76);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_76);
			association_names.accept(_position__anonymous_76);
			room_names.accept(_position__anonymous_76);
			activity_names.accept(_position__anonymous_76);
			siding_names.accept(_position__anonymous_76);
			item_names.accept(_position__anonymous_76);
			aspect_names.accept(_position__anonymous_76);
			affinity_names.accept(_position__anonymous_76);
			activity_type_names.accept(_position__anonymous_76);
			trail_names.accept(_position__anonymous_76);
			attack_names.accept(_position__anonymous_76);
			reason_names.accept(_position__anonymous_76);
			trait_names.accept(_position__anonymous_76);
			condition_names.accept(_position__anonymous_76);
			payment_short_type_names.accept(_position__anonymous_76);
			skill_names.accept(_position__anonymous_76);
			map_names.accept(_position__anonymous_76);
			event_names.accept(_position__anonymous_76);
			image_names.accept(_position__anonymous_76);
			tile_symbols.accept(_position__anonymous_76);
			payment_long_type_names.accept(_position__anonymous_76);
			area_names.accept(_position__anonymous_76);
			structure_names.accept(_position__anonymous_76);
			tile_names.accept(_position__anonymous_76);
			hero_stat.accept(_position__anonymous_76);
		}
	}
	public void parse__anonymous_79() {
		int _position__anonymous_79 = -1;
		Token.Parsed _token__anonymous_79 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_79=_position;
		_token__anonymous_79=_token;
		_token=new Tokens.Name.PaymentTypeToken();
		if(_pass==FIRST_PASS) {
			String _result = _preparsed_NAME.get(_position);
			if(_result==null) {
				_state=FAILED;
			}
			else {
				Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
				_token.add(_position,_first_pass_token);
				_position+=_result.length();
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
		}
		else if(_pass==SECOND_PASS) {
			_list_name_result=_preparsed_NAME.get(_position);
			if(_list_name_result!=null&&payment_long_type_names.contains(_list_name_result)) {
				if(_position+_list_name_result.length()<_inputLength) {
					int _next_char = _inputArray[_position+_list_name_result.length()];
					if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,new Tokens.Name.PaymentLongTypeNamesToken(_list_name_result));
					_position+=_list_name_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"payment_long_type_names");
					_furthestPosition=_position;
				}
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"structure_payment(_anonymous_79)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_79;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_79.add(_position__anonymous_79,_token);
		}
		_token=_token__anonymous_79;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_79);
			association_names.reject(_position__anonymous_79);
			room_names.reject(_position__anonymous_79);
			activity_names.reject(_position__anonymous_79);
			siding_names.reject(_position__anonymous_79);
			item_names.reject(_position__anonymous_79);
			aspect_names.reject(_position__anonymous_79);
			affinity_names.reject(_position__anonymous_79);
			activity_type_names.reject(_position__anonymous_79);
			trail_names.reject(_position__anonymous_79);
			attack_names.reject(_position__anonymous_79);
			reason_names.reject(_position__anonymous_79);
			trait_names.reject(_position__anonymous_79);
			condition_names.reject(_position__anonymous_79);
			payment_short_type_names.reject(_position__anonymous_79);
			skill_names.reject(_position__anonymous_79);
			map_names.reject(_position__anonymous_79);
			event_names.reject(_position__anonymous_79);
			image_names.reject(_position__anonymous_79);
			tile_symbols.reject(_position__anonymous_79);
			payment_long_type_names.reject(_position__anonymous_79);
			area_names.reject(_position__anonymous_79);
			structure_names.reject(_position__anonymous_79);
			tile_names.reject(_position__anonymous_79);
			hero_stat.reject(_position__anonymous_79);
			_state=SUCCESS;
			_position__anonymous_79=_position;
			_token__anonymous_79=_token;
			_token=new Tokens.Name.PaymentTypeToken();
			if(_pass==FIRST_PASS) {
				String _result = _preparsed_NAME.get(_position);
				if(_result==null) {
					_state=FAILED;
				}
				else {
					Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
					_token.add(_position,_first_pass_token);
					_position+=_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else if(_pass==SECOND_PASS) {
				_list_name_result=_preparsed_NAME.get(_position);
				if(_list_name_result!=null&&payment_short_type_names.contains(_list_name_result)) {
					if(_position+_list_name_result.length()<_inputLength) {
						int _next_char = _inputArray[_position+_list_name_result.length()];
						if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,new Tokens.Name.PaymentShortTypeNamesToken(_list_name_result));
						_position+=_list_name_result.length();
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
				}
				else {
					_state=FAILED;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"payment_short_type_names");
						_furthestPosition=_position;
					}
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"structure_payment(_anonymous_79)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_79;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_79.add(_position__anonymous_79,_token);
			}
			_token=_token__anonymous_79;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_79);
				association_names.reject(_position__anonymous_79);
				room_names.reject(_position__anonymous_79);
				activity_names.reject(_position__anonymous_79);
				siding_names.reject(_position__anonymous_79);
				item_names.reject(_position__anonymous_79);
				aspect_names.reject(_position__anonymous_79);
				affinity_names.reject(_position__anonymous_79);
				activity_type_names.reject(_position__anonymous_79);
				trail_names.reject(_position__anonymous_79);
				attack_names.reject(_position__anonymous_79);
				reason_names.reject(_position__anonymous_79);
				trait_names.reject(_position__anonymous_79);
				condition_names.reject(_position__anonymous_79);
				payment_short_type_names.reject(_position__anonymous_79);
				skill_names.reject(_position__anonymous_79);
				map_names.reject(_position__anonymous_79);
				event_names.reject(_position__anonymous_79);
				image_names.reject(_position__anonymous_79);
				tile_symbols.reject(_position__anonymous_79);
				payment_long_type_names.reject(_position__anonymous_79);
				area_names.reject(_position__anonymous_79);
				structure_names.reject(_position__anonymous_79);
				tile_names.reject(_position__anonymous_79);
				hero_stat.reject(_position__anonymous_79);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_79);
				association_names.accept(_position__anonymous_79);
				room_names.accept(_position__anonymous_79);
				activity_names.accept(_position__anonymous_79);
				siding_names.accept(_position__anonymous_79);
				item_names.accept(_position__anonymous_79);
				aspect_names.accept(_position__anonymous_79);
				affinity_names.accept(_position__anonymous_79);
				activity_type_names.accept(_position__anonymous_79);
				trail_names.accept(_position__anonymous_79);
				attack_names.accept(_position__anonymous_79);
				reason_names.accept(_position__anonymous_79);
				trait_names.accept(_position__anonymous_79);
				condition_names.accept(_position__anonymous_79);
				payment_short_type_names.accept(_position__anonymous_79);
				skill_names.accept(_position__anonymous_79);
				map_names.accept(_position__anonymous_79);
				event_names.accept(_position__anonymous_79);
				image_names.accept(_position__anonymous_79);
				tile_symbols.accept(_position__anonymous_79);
				payment_long_type_names.accept(_position__anonymous_79);
				area_names.accept(_position__anonymous_79);
				structure_names.accept(_position__anonymous_79);
				tile_names.accept(_position__anonymous_79);
				hero_stat.accept(_position__anonymous_79);
			}
		}
	}
	public void parse__anonymous_78() {
		int _position__anonymous_78 = -1;
		Token.Parsed _token__anonymous_78 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_78=_position;
		_token__anonymous_78=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+4-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='\t') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='\t') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='\t') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_65.SYNTAX);
			_position=_position+4;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n\t\t\t");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"structure_declaration(_anonymous_78)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_78;
		}
		else {
			parse_patch_element();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"structure_declaration(_anonymous_78)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_78;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_78.addAll(_token);
			_token__anonymous_78.setValue(_token.getValue());
		}
		_token=_token__anonymous_78;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_78);
			association_names.reject(_position__anonymous_78);
			room_names.reject(_position__anonymous_78);
			activity_names.reject(_position__anonymous_78);
			siding_names.reject(_position__anonymous_78);
			item_names.reject(_position__anonymous_78);
			aspect_names.reject(_position__anonymous_78);
			affinity_names.reject(_position__anonymous_78);
			activity_type_names.reject(_position__anonymous_78);
			trail_names.reject(_position__anonymous_78);
			attack_names.reject(_position__anonymous_78);
			reason_names.reject(_position__anonymous_78);
			trait_names.reject(_position__anonymous_78);
			condition_names.reject(_position__anonymous_78);
			payment_short_type_names.reject(_position__anonymous_78);
			skill_names.reject(_position__anonymous_78);
			map_names.reject(_position__anonymous_78);
			event_names.reject(_position__anonymous_78);
			image_names.reject(_position__anonymous_78);
			tile_symbols.reject(_position__anonymous_78);
			payment_long_type_names.reject(_position__anonymous_78);
			area_names.reject(_position__anonymous_78);
			structure_names.reject(_position__anonymous_78);
			tile_names.reject(_position__anonymous_78);
			hero_stat.reject(_position__anonymous_78);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_78);
			association_names.accept(_position__anonymous_78);
			room_names.accept(_position__anonymous_78);
			activity_names.accept(_position__anonymous_78);
			siding_names.accept(_position__anonymous_78);
			item_names.accept(_position__anonymous_78);
			aspect_names.accept(_position__anonymous_78);
			affinity_names.accept(_position__anonymous_78);
			activity_type_names.accept(_position__anonymous_78);
			trail_names.accept(_position__anonymous_78);
			attack_names.accept(_position__anonymous_78);
			reason_names.accept(_position__anonymous_78);
			trait_names.accept(_position__anonymous_78);
			condition_names.accept(_position__anonymous_78);
			payment_short_type_names.accept(_position__anonymous_78);
			skill_names.accept(_position__anonymous_78);
			map_names.accept(_position__anonymous_78);
			event_names.accept(_position__anonymous_78);
			image_names.accept(_position__anonymous_78);
			tile_symbols.accept(_position__anonymous_78);
			payment_long_type_names.accept(_position__anonymous_78);
			area_names.accept(_position__anonymous_78);
			structure_names.accept(_position__anonymous_78);
			tile_names.accept(_position__anonymous_78);
			hero_stat.accept(_position__anonymous_78);
		}
	}
	public void parse__anonymous_220() {
		int _position__anonymous_220 = -1;
		Token.Parsed _token__anonymous_220 = null;
		int _position_INTEGER = -1;
		Token.Parsed _token_INTEGER = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_220=_position;
		_token__anonymous_220=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_pass==FIRST_PASS) {
			String _result = _preparsed_NAME.get(_position);
			if(_result==null) {
				_state=FAILED;
			}
			else {
				Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
				_token.add(_position,_first_pass_token);
				_position+=_result.length();
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
		}
		else if(_pass==SECOND_PASS) {
			_list_name_result=_preparsed_NAME.get(_position);
			if(_list_name_result!=null&&image_names.contains(_list_name_result)) {
				if(_position+_list_name_result.length()<_inputLength) {
					int _next_char = _inputArray[_position+_list_name_result.length()];
					if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,new Tokens.Name.ImageNamesToken(_list_name_result));
					_position+=_list_name_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"image_names");
					_furthestPosition=_position;
				}
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation(_anonymous_220)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_220;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_220.addAll(_token);
			_token__anonymous_220.setValue(_token.getValue());
		}
		_token=_token__anonymous_220;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_220);
			association_names.reject(_position__anonymous_220);
			room_names.reject(_position__anonymous_220);
			activity_names.reject(_position__anonymous_220);
			siding_names.reject(_position__anonymous_220);
			item_names.reject(_position__anonymous_220);
			aspect_names.reject(_position__anonymous_220);
			affinity_names.reject(_position__anonymous_220);
			activity_type_names.reject(_position__anonymous_220);
			trail_names.reject(_position__anonymous_220);
			attack_names.reject(_position__anonymous_220);
			reason_names.reject(_position__anonymous_220);
			trait_names.reject(_position__anonymous_220);
			condition_names.reject(_position__anonymous_220);
			payment_short_type_names.reject(_position__anonymous_220);
			skill_names.reject(_position__anonymous_220);
			map_names.reject(_position__anonymous_220);
			event_names.reject(_position__anonymous_220);
			image_names.reject(_position__anonymous_220);
			tile_symbols.reject(_position__anonymous_220);
			payment_long_type_names.reject(_position__anonymous_220);
			area_names.reject(_position__anonymous_220);
			structure_names.reject(_position__anonymous_220);
			tile_names.reject(_position__anonymous_220);
			hero_stat.reject(_position__anonymous_220);
			_state=SUCCESS;
			_position__anonymous_220=_position;
			_token__anonymous_220=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			_token_INTEGER=_token;
			_token=new Tokens.Name.LeftToken();
			_position_INTEGER=_position;
			parse_INTEGER();
			if(_state==SUCCESS) {
				_token_INTEGER.add(_position_INTEGER,_token);
			}
			_token=_token_INTEGER;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation(_anonymous_220)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_220;
			}
			else {
				int _state_241 = _state;
				parse__anonymous_221();
				if(_state_241==SUCCESS&&_state==FAILED) {
					_state=SUCCESS;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation(_anonymous_220)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_220;
				}
				else {
				}
			}
			if(_state==SUCCESS) {
				_token__anonymous_220.addAll(_token);
				_token__anonymous_220.setValue(_token.getValue());
			}
			_token=_token__anonymous_220;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_220);
				association_names.reject(_position__anonymous_220);
				room_names.reject(_position__anonymous_220);
				activity_names.reject(_position__anonymous_220);
				siding_names.reject(_position__anonymous_220);
				item_names.reject(_position__anonymous_220);
				aspect_names.reject(_position__anonymous_220);
				affinity_names.reject(_position__anonymous_220);
				activity_type_names.reject(_position__anonymous_220);
				trail_names.reject(_position__anonymous_220);
				attack_names.reject(_position__anonymous_220);
				reason_names.reject(_position__anonymous_220);
				trait_names.reject(_position__anonymous_220);
				condition_names.reject(_position__anonymous_220);
				payment_short_type_names.reject(_position__anonymous_220);
				skill_names.reject(_position__anonymous_220);
				map_names.reject(_position__anonymous_220);
				event_names.reject(_position__anonymous_220);
				image_names.reject(_position__anonymous_220);
				tile_symbols.reject(_position__anonymous_220);
				payment_long_type_names.reject(_position__anonymous_220);
				area_names.reject(_position__anonymous_220);
				structure_names.reject(_position__anonymous_220);
				tile_names.reject(_position__anonymous_220);
				hero_stat.reject(_position__anonymous_220);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_220);
				association_names.accept(_position__anonymous_220);
				room_names.accept(_position__anonymous_220);
				activity_names.accept(_position__anonymous_220);
				siding_names.accept(_position__anonymous_220);
				item_names.accept(_position__anonymous_220);
				aspect_names.accept(_position__anonymous_220);
				affinity_names.accept(_position__anonymous_220);
				activity_type_names.accept(_position__anonymous_220);
				trail_names.accept(_position__anonymous_220);
				attack_names.accept(_position__anonymous_220);
				reason_names.accept(_position__anonymous_220);
				trait_names.accept(_position__anonymous_220);
				condition_names.accept(_position__anonymous_220);
				payment_short_type_names.accept(_position__anonymous_220);
				skill_names.accept(_position__anonymous_220);
				map_names.accept(_position__anonymous_220);
				event_names.accept(_position__anonymous_220);
				image_names.accept(_position__anonymous_220);
				tile_symbols.accept(_position__anonymous_220);
				payment_long_type_names.accept(_position__anonymous_220);
				area_names.accept(_position__anonymous_220);
				structure_names.accept(_position__anonymous_220);
				tile_names.accept(_position__anonymous_220);
				hero_stat.accept(_position__anonymous_220);
			}
		}
	}
	public void parse__anonymous_214() {
		int _position__anonymous_214 = -1;
		Token.Parsed _token__anonymous_214 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_214=_position;
		_token__anonymous_214=_token;
		_token=new Tokens.Name.ParentStateToken();
		_token_NAME=_token;
		_token=new Tokens.Name.AnimationIdToken();
		_position_NAME=_position;
		parse_NAME();
		if(_state==SUCCESS) {
			_token_NAME.add(_position_NAME,_token);
		}
		_token=_token_NAME;
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_state(_anonymous_214)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_214;
		}
		else {
			parse_animation_substates();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_state(_anonymous_214)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_214;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_214.add(_position__anonymous_214,_token);
		}
		_token=_token__anonymous_214;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_214);
			association_names.reject(_position__anonymous_214);
			room_names.reject(_position__anonymous_214);
			activity_names.reject(_position__anonymous_214);
			siding_names.reject(_position__anonymous_214);
			item_names.reject(_position__anonymous_214);
			aspect_names.reject(_position__anonymous_214);
			affinity_names.reject(_position__anonymous_214);
			activity_type_names.reject(_position__anonymous_214);
			trail_names.reject(_position__anonymous_214);
			attack_names.reject(_position__anonymous_214);
			reason_names.reject(_position__anonymous_214);
			trait_names.reject(_position__anonymous_214);
			condition_names.reject(_position__anonymous_214);
			payment_short_type_names.reject(_position__anonymous_214);
			skill_names.reject(_position__anonymous_214);
			map_names.reject(_position__anonymous_214);
			event_names.reject(_position__anonymous_214);
			image_names.reject(_position__anonymous_214);
			tile_symbols.reject(_position__anonymous_214);
			payment_long_type_names.reject(_position__anonymous_214);
			area_names.reject(_position__anonymous_214);
			structure_names.reject(_position__anonymous_214);
			tile_names.reject(_position__anonymous_214);
			hero_stat.reject(_position__anonymous_214);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_214);
			association_names.accept(_position__anonymous_214);
			room_names.accept(_position__anonymous_214);
			activity_names.accept(_position__anonymous_214);
			siding_names.accept(_position__anonymous_214);
			item_names.accept(_position__anonymous_214);
			aspect_names.accept(_position__anonymous_214);
			affinity_names.accept(_position__anonymous_214);
			activity_type_names.accept(_position__anonymous_214);
			trail_names.accept(_position__anonymous_214);
			attack_names.accept(_position__anonymous_214);
			reason_names.accept(_position__anonymous_214);
			trait_names.accept(_position__anonymous_214);
			condition_names.accept(_position__anonymous_214);
			payment_short_type_names.accept(_position__anonymous_214);
			skill_names.accept(_position__anonymous_214);
			map_names.accept(_position__anonymous_214);
			event_names.accept(_position__anonymous_214);
			image_names.accept(_position__anonymous_214);
			tile_symbols.accept(_position__anonymous_214);
			payment_long_type_names.accept(_position__anonymous_214);
			area_names.accept(_position__anonymous_214);
			structure_names.accept(_position__anonymous_214);
			tile_names.accept(_position__anonymous_214);
			hero_stat.accept(_position__anonymous_214);
		}
	}
	public void parse__anonymous_215() {
		int _position__anonymous_215 = -1;
		Token.Parsed _token__anonymous_215 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_215=_position;
		_token__anonymous_215=_token;
		_token=new Tokens.Name.FinalStateToken();
		_token_NAME=_token;
		_token=new Tokens.Name.AnimationIdToken();
		_position_NAME=_position;
		parse_NAME();
		if(_state==SUCCESS) {
			_token_NAME.add(_position_NAME,_token);
		}
		_token=_token_NAME;
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_state(_anonymous_215)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_215;
		}
		else {
			int _state_235 = _state;
			parse__anonymous_216();
			if(_state_235==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_state(_anonymous_215)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_215;
			}
			else {
				if(_position+1-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!=':') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_59.SYNTAX);
					_position=_position+1;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain :");
						_furthestPosition=_position;
					}
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_state(_anonymous_215)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_215;
				}
				else {
					_token_NAME=_token;
					_token=new Tokens.Name.AnimationTypeNameToken();
					_position_NAME=_position;
					parse_NAME();
					if(_state==SUCCESS) {
						_token_NAME.add(_position_NAME,_token);
					}
					_token=_token_NAME;
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_state(_anonymous_215)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_215;
					}
					else {
						int _state_236 = _state;
						while(_position<_inputLength) {
							parse_animation_variable_value();
							if(_state==FAILED) {
								break;
							}
						}
						if(_state_236==SUCCESS&&_state==FAILED) {
							_state=SUCCESS;
						}
						if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_state(_anonymous_215)");
								_furthestPosition=_position;
							}
							_position=_position__anonymous_215;
						}
						else {
						}
					}
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_215.add(_position__anonymous_215,_token);
		}
		_token=_token__anonymous_215;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_215);
			association_names.reject(_position__anonymous_215);
			room_names.reject(_position__anonymous_215);
			activity_names.reject(_position__anonymous_215);
			siding_names.reject(_position__anonymous_215);
			item_names.reject(_position__anonymous_215);
			aspect_names.reject(_position__anonymous_215);
			affinity_names.reject(_position__anonymous_215);
			activity_type_names.reject(_position__anonymous_215);
			trail_names.reject(_position__anonymous_215);
			attack_names.reject(_position__anonymous_215);
			reason_names.reject(_position__anonymous_215);
			trait_names.reject(_position__anonymous_215);
			condition_names.reject(_position__anonymous_215);
			payment_short_type_names.reject(_position__anonymous_215);
			skill_names.reject(_position__anonymous_215);
			map_names.reject(_position__anonymous_215);
			event_names.reject(_position__anonymous_215);
			image_names.reject(_position__anonymous_215);
			tile_symbols.reject(_position__anonymous_215);
			payment_long_type_names.reject(_position__anonymous_215);
			area_names.reject(_position__anonymous_215);
			structure_names.reject(_position__anonymous_215);
			tile_names.reject(_position__anonymous_215);
			hero_stat.reject(_position__anonymous_215);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_215);
			association_names.accept(_position__anonymous_215);
			room_names.accept(_position__anonymous_215);
			activity_names.accept(_position__anonymous_215);
			siding_names.accept(_position__anonymous_215);
			item_names.accept(_position__anonymous_215);
			aspect_names.accept(_position__anonymous_215);
			affinity_names.accept(_position__anonymous_215);
			activity_type_names.accept(_position__anonymous_215);
			trail_names.accept(_position__anonymous_215);
			attack_names.accept(_position__anonymous_215);
			reason_names.accept(_position__anonymous_215);
			trait_names.accept(_position__anonymous_215);
			condition_names.accept(_position__anonymous_215);
			payment_short_type_names.accept(_position__anonymous_215);
			skill_names.accept(_position__anonymous_215);
			map_names.accept(_position__anonymous_215);
			event_names.accept(_position__anonymous_215);
			image_names.accept(_position__anonymous_215);
			tile_symbols.accept(_position__anonymous_215);
			payment_long_type_names.accept(_position__anonymous_215);
			area_names.accept(_position__anonymous_215);
			structure_names.accept(_position__anonymous_215);
			tile_names.accept(_position__anonymous_215);
			hero_stat.accept(_position__anonymous_215);
		}
	}
	public void parse__anonymous_71() {
		int _position__anonymous_71 = -1;
		Token.Parsed _token__anonymous_71 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_71=_position;
		_token__anonymous_71=_token;
		_token=new Tokens.Name.SkillToken();
		if(_pass==FIRST_PASS) {
			String _result = _preparsed_NAME.get(_position);
			if(_result==null) {
				_state=FAILED;
			}
			else {
				Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
				_token.add(_position,_first_pass_token);
				_position+=_result.length();
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
		}
		else if(_pass==SECOND_PASS) {
			_list_name_result=_preparsed_NAME.get(_position);
			if(_list_name_result!=null&&skill_names.contains(_list_name_result)) {
				if(_position+_list_name_result.length()<_inputLength) {
					int _next_char = _inputArray[_position+_list_name_result.length()];
					if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,new Tokens.Name.SkillNamesToken(_list_name_result));
					_position+=_list_name_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"skill_names");
					_furthestPosition=_position;
				}
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"entity_definition(_anonymous_71)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_71;
		}
		else {
			int _state_89 = _state;
			parse_method_arguments();
			if(_state_89==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"entity_definition(_anonymous_71)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_71;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_71.add(_position__anonymous_71,_token);
		}
		_token=_token__anonymous_71;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_71);
			association_names.reject(_position__anonymous_71);
			room_names.reject(_position__anonymous_71);
			activity_names.reject(_position__anonymous_71);
			siding_names.reject(_position__anonymous_71);
			item_names.reject(_position__anonymous_71);
			aspect_names.reject(_position__anonymous_71);
			affinity_names.reject(_position__anonymous_71);
			activity_type_names.reject(_position__anonymous_71);
			trail_names.reject(_position__anonymous_71);
			attack_names.reject(_position__anonymous_71);
			reason_names.reject(_position__anonymous_71);
			trait_names.reject(_position__anonymous_71);
			condition_names.reject(_position__anonymous_71);
			payment_short_type_names.reject(_position__anonymous_71);
			skill_names.reject(_position__anonymous_71);
			map_names.reject(_position__anonymous_71);
			event_names.reject(_position__anonymous_71);
			image_names.reject(_position__anonymous_71);
			tile_symbols.reject(_position__anonymous_71);
			payment_long_type_names.reject(_position__anonymous_71);
			area_names.reject(_position__anonymous_71);
			structure_names.reject(_position__anonymous_71);
			tile_names.reject(_position__anonymous_71);
			hero_stat.reject(_position__anonymous_71);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_71);
			association_names.accept(_position__anonymous_71);
			room_names.accept(_position__anonymous_71);
			activity_names.accept(_position__anonymous_71);
			siding_names.accept(_position__anonymous_71);
			item_names.accept(_position__anonymous_71);
			aspect_names.accept(_position__anonymous_71);
			affinity_names.accept(_position__anonymous_71);
			activity_type_names.accept(_position__anonymous_71);
			trail_names.accept(_position__anonymous_71);
			attack_names.accept(_position__anonymous_71);
			reason_names.accept(_position__anonymous_71);
			trait_names.accept(_position__anonymous_71);
			condition_names.accept(_position__anonymous_71);
			payment_short_type_names.accept(_position__anonymous_71);
			skill_names.accept(_position__anonymous_71);
			map_names.accept(_position__anonymous_71);
			event_names.accept(_position__anonymous_71);
			image_names.accept(_position__anonymous_71);
			tile_symbols.accept(_position__anonymous_71);
			payment_long_type_names.accept(_position__anonymous_71);
			area_names.accept(_position__anonymous_71);
			structure_names.accept(_position__anonymous_71);
			tile_names.accept(_position__anonymous_71);
			hero_stat.accept(_position__anonymous_71);
		}
	}
	public void parse__anonymous_216() {
		int _position__anonymous_216 = -1;
		Token.Parsed _token__anonymous_216 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_216=_position;
		_token__anonymous_216=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='|') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_35.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain |");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_state(_anonymous_216)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_216;
		}
		else {
			_token_NAME=_token;
			_token=new Tokens.Name.FlipAnimationIdToken();
			_position_NAME=_position;
			parse_NAME();
			if(_state==SUCCESS) {
				_token_NAME.add(_position_NAME,_token);
			}
			_token=_token_NAME;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_state(_anonymous_216)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_216;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_216.addAll(_token);
			_token__anonymous_216.setValue(_token.getValue());
		}
		_token=_token__anonymous_216;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_216);
			association_names.reject(_position__anonymous_216);
			room_names.reject(_position__anonymous_216);
			activity_names.reject(_position__anonymous_216);
			siding_names.reject(_position__anonymous_216);
			item_names.reject(_position__anonymous_216);
			aspect_names.reject(_position__anonymous_216);
			affinity_names.reject(_position__anonymous_216);
			activity_type_names.reject(_position__anonymous_216);
			trail_names.reject(_position__anonymous_216);
			attack_names.reject(_position__anonymous_216);
			reason_names.reject(_position__anonymous_216);
			trait_names.reject(_position__anonymous_216);
			condition_names.reject(_position__anonymous_216);
			payment_short_type_names.reject(_position__anonymous_216);
			skill_names.reject(_position__anonymous_216);
			map_names.reject(_position__anonymous_216);
			event_names.reject(_position__anonymous_216);
			image_names.reject(_position__anonymous_216);
			tile_symbols.reject(_position__anonymous_216);
			payment_long_type_names.reject(_position__anonymous_216);
			area_names.reject(_position__anonymous_216);
			structure_names.reject(_position__anonymous_216);
			tile_names.reject(_position__anonymous_216);
			hero_stat.reject(_position__anonymous_216);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_216);
			association_names.accept(_position__anonymous_216);
			room_names.accept(_position__anonymous_216);
			activity_names.accept(_position__anonymous_216);
			siding_names.accept(_position__anonymous_216);
			item_names.accept(_position__anonymous_216);
			aspect_names.accept(_position__anonymous_216);
			affinity_names.accept(_position__anonymous_216);
			activity_type_names.accept(_position__anonymous_216);
			trail_names.accept(_position__anonymous_216);
			attack_names.accept(_position__anonymous_216);
			reason_names.accept(_position__anonymous_216);
			trait_names.accept(_position__anonymous_216);
			condition_names.accept(_position__anonymous_216);
			payment_short_type_names.accept(_position__anonymous_216);
			skill_names.accept(_position__anonymous_216);
			map_names.accept(_position__anonymous_216);
			event_names.accept(_position__anonymous_216);
			image_names.accept(_position__anonymous_216);
			tile_symbols.accept(_position__anonymous_216);
			payment_long_type_names.accept(_position__anonymous_216);
			area_names.accept(_position__anonymous_216);
			structure_names.accept(_position__anonymous_216);
			tile_names.accept(_position__anonymous_216);
			hero_stat.accept(_position__anonymous_216);
		}
	}
	public void parse__anonymous_70() {
		int _position__anonymous_70 = -1;
		Token.Parsed _token__anonymous_70 = null;
		int _position_INTEGER = -1;
		Token.Parsed _token_INTEGER = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_70=_position;
		_token__anonymous_70=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='-') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_15.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain -");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"entity_definition(_anonymous_70)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_70;
		}
		else {
			_token_INTEGER=_token;
			_token=new Tokens.Name.RightToken();
			_position_INTEGER=_position;
			parse_INTEGER();
			if(_state==SUCCESS) {
				_token_INTEGER.add(_position_INTEGER,_token);
			}
			_token=_token_INTEGER;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"entity_definition(_anonymous_70)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_70;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_70.addAll(_token);
			_token__anonymous_70.setValue(_token.getValue());
		}
		_token=_token__anonymous_70;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_70);
			association_names.reject(_position__anonymous_70);
			room_names.reject(_position__anonymous_70);
			activity_names.reject(_position__anonymous_70);
			siding_names.reject(_position__anonymous_70);
			item_names.reject(_position__anonymous_70);
			aspect_names.reject(_position__anonymous_70);
			affinity_names.reject(_position__anonymous_70);
			activity_type_names.reject(_position__anonymous_70);
			trail_names.reject(_position__anonymous_70);
			attack_names.reject(_position__anonymous_70);
			reason_names.reject(_position__anonymous_70);
			trait_names.reject(_position__anonymous_70);
			condition_names.reject(_position__anonymous_70);
			payment_short_type_names.reject(_position__anonymous_70);
			skill_names.reject(_position__anonymous_70);
			map_names.reject(_position__anonymous_70);
			event_names.reject(_position__anonymous_70);
			image_names.reject(_position__anonymous_70);
			tile_symbols.reject(_position__anonymous_70);
			payment_long_type_names.reject(_position__anonymous_70);
			area_names.reject(_position__anonymous_70);
			structure_names.reject(_position__anonymous_70);
			tile_names.reject(_position__anonymous_70);
			hero_stat.reject(_position__anonymous_70);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_70);
			association_names.accept(_position__anonymous_70);
			room_names.accept(_position__anonymous_70);
			activity_names.accept(_position__anonymous_70);
			siding_names.accept(_position__anonymous_70);
			item_names.accept(_position__anonymous_70);
			aspect_names.accept(_position__anonymous_70);
			affinity_names.accept(_position__anonymous_70);
			activity_type_names.accept(_position__anonymous_70);
			trail_names.accept(_position__anonymous_70);
			attack_names.accept(_position__anonymous_70);
			reason_names.accept(_position__anonymous_70);
			trait_names.accept(_position__anonymous_70);
			condition_names.accept(_position__anonymous_70);
			payment_short_type_names.accept(_position__anonymous_70);
			skill_names.accept(_position__anonymous_70);
			map_names.accept(_position__anonymous_70);
			event_names.accept(_position__anonymous_70);
			image_names.accept(_position__anonymous_70);
			tile_symbols.accept(_position__anonymous_70);
			payment_long_type_names.accept(_position__anonymous_70);
			area_names.accept(_position__anonymous_70);
			structure_names.accept(_position__anonymous_70);
			tile_names.accept(_position__anonymous_70);
			hero_stat.accept(_position__anonymous_70);
		}
	}
	public void parse__anonymous_217() {
		int _position__anonymous_217 = -1;
		Token.Parsed _token__anonymous_217 = null;
		int _position_INTEGER = -1;
		Token.Parsed _token_INTEGER = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_217=_position;
		_token__anonymous_217=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		_token_INTEGER=_token;
		_token=new Tokens.Name.FrameWidthToken();
		_position_INTEGER=_position;
		parse_INTEGER();
		if(_state==SUCCESS) {
			_token_INTEGER.add(_position_INTEGER,_token);
		}
		_token=_token_INTEGER;
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"image_id(_anonymous_217)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_217;
		}
		else {
			int _state_238 = _state;
			parse__anonymous_218();
			if(_state_238==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"image_id(_anonymous_217)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_217;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_217.addAll(_token);
			_token__anonymous_217.setValue(_token.getValue());
		}
		_token=_token__anonymous_217;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_217);
			association_names.reject(_position__anonymous_217);
			room_names.reject(_position__anonymous_217);
			activity_names.reject(_position__anonymous_217);
			siding_names.reject(_position__anonymous_217);
			item_names.reject(_position__anonymous_217);
			aspect_names.reject(_position__anonymous_217);
			affinity_names.reject(_position__anonymous_217);
			activity_type_names.reject(_position__anonymous_217);
			trail_names.reject(_position__anonymous_217);
			attack_names.reject(_position__anonymous_217);
			reason_names.reject(_position__anonymous_217);
			trait_names.reject(_position__anonymous_217);
			condition_names.reject(_position__anonymous_217);
			payment_short_type_names.reject(_position__anonymous_217);
			skill_names.reject(_position__anonymous_217);
			map_names.reject(_position__anonymous_217);
			event_names.reject(_position__anonymous_217);
			image_names.reject(_position__anonymous_217);
			tile_symbols.reject(_position__anonymous_217);
			payment_long_type_names.reject(_position__anonymous_217);
			area_names.reject(_position__anonymous_217);
			structure_names.reject(_position__anonymous_217);
			tile_names.reject(_position__anonymous_217);
			hero_stat.reject(_position__anonymous_217);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_217);
			association_names.accept(_position__anonymous_217);
			room_names.accept(_position__anonymous_217);
			activity_names.accept(_position__anonymous_217);
			siding_names.accept(_position__anonymous_217);
			item_names.accept(_position__anonymous_217);
			aspect_names.accept(_position__anonymous_217);
			affinity_names.accept(_position__anonymous_217);
			activity_type_names.accept(_position__anonymous_217);
			trail_names.accept(_position__anonymous_217);
			attack_names.accept(_position__anonymous_217);
			reason_names.accept(_position__anonymous_217);
			trait_names.accept(_position__anonymous_217);
			condition_names.accept(_position__anonymous_217);
			payment_short_type_names.accept(_position__anonymous_217);
			skill_names.accept(_position__anonymous_217);
			map_names.accept(_position__anonymous_217);
			event_names.accept(_position__anonymous_217);
			image_names.accept(_position__anonymous_217);
			tile_symbols.accept(_position__anonymous_217);
			payment_long_type_names.accept(_position__anonymous_217);
			area_names.accept(_position__anonymous_217);
			structure_names.accept(_position__anonymous_217);
			tile_names.accept(_position__anonymous_217);
			hero_stat.accept(_position__anonymous_217);
		}
	}
	public void parse__anonymous_73() {
		int _position__anonymous_73 = -1;
		Token.Parsed _token__anonymous_73 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_73=_position;
		_token__anonymous_73=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+2-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='\t') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_5.SYNTAX);
			_position=_position+2;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n\t");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"trails_declaration(_anonymous_73)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_73;
		}
		else {
			parse_trail_declaration();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"trails_declaration(_anonymous_73)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_73;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_73.addAll(_token);
			_token__anonymous_73.setValue(_token.getValue());
		}
		_token=_token__anonymous_73;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_73);
			association_names.reject(_position__anonymous_73);
			room_names.reject(_position__anonymous_73);
			activity_names.reject(_position__anonymous_73);
			siding_names.reject(_position__anonymous_73);
			item_names.reject(_position__anonymous_73);
			aspect_names.reject(_position__anonymous_73);
			affinity_names.reject(_position__anonymous_73);
			activity_type_names.reject(_position__anonymous_73);
			trail_names.reject(_position__anonymous_73);
			attack_names.reject(_position__anonymous_73);
			reason_names.reject(_position__anonymous_73);
			trait_names.reject(_position__anonymous_73);
			condition_names.reject(_position__anonymous_73);
			payment_short_type_names.reject(_position__anonymous_73);
			skill_names.reject(_position__anonymous_73);
			map_names.reject(_position__anonymous_73);
			event_names.reject(_position__anonymous_73);
			image_names.reject(_position__anonymous_73);
			tile_symbols.reject(_position__anonymous_73);
			payment_long_type_names.reject(_position__anonymous_73);
			area_names.reject(_position__anonymous_73);
			structure_names.reject(_position__anonymous_73);
			tile_names.reject(_position__anonymous_73);
			hero_stat.reject(_position__anonymous_73);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_73);
			association_names.accept(_position__anonymous_73);
			room_names.accept(_position__anonymous_73);
			activity_names.accept(_position__anonymous_73);
			siding_names.accept(_position__anonymous_73);
			item_names.accept(_position__anonymous_73);
			aspect_names.accept(_position__anonymous_73);
			affinity_names.accept(_position__anonymous_73);
			activity_type_names.accept(_position__anonymous_73);
			trail_names.accept(_position__anonymous_73);
			attack_names.accept(_position__anonymous_73);
			reason_names.accept(_position__anonymous_73);
			trait_names.accept(_position__anonymous_73);
			condition_names.accept(_position__anonymous_73);
			payment_short_type_names.accept(_position__anonymous_73);
			skill_names.accept(_position__anonymous_73);
			map_names.accept(_position__anonymous_73);
			event_names.accept(_position__anonymous_73);
			image_names.accept(_position__anonymous_73);
			tile_symbols.accept(_position__anonymous_73);
			payment_long_type_names.accept(_position__anonymous_73);
			area_names.accept(_position__anonymous_73);
			structure_names.accept(_position__anonymous_73);
			tile_names.accept(_position__anonymous_73);
			hero_stat.accept(_position__anonymous_73);
		}
	}
	public void parse__anonymous_210() {
		int _position__anonymous_210 = -1;
		Token.Parsed _token__anonymous_210 = null;
		int _position_comments = -1;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_210=_position;
		_token__anonymous_210=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_image(_anonymous_210)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_210;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_210.addAll(_token);
			_token__anonymous_210.setValue(_token.getValue());
		}
		_token=_token__anonymous_210;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_210);
			association_names.reject(_position__anonymous_210);
			room_names.reject(_position__anonymous_210);
			activity_names.reject(_position__anonymous_210);
			siding_names.reject(_position__anonymous_210);
			item_names.reject(_position__anonymous_210);
			aspect_names.reject(_position__anonymous_210);
			affinity_names.reject(_position__anonymous_210);
			activity_type_names.reject(_position__anonymous_210);
			trail_names.reject(_position__anonymous_210);
			attack_names.reject(_position__anonymous_210);
			reason_names.reject(_position__anonymous_210);
			trait_names.reject(_position__anonymous_210);
			condition_names.reject(_position__anonymous_210);
			payment_short_type_names.reject(_position__anonymous_210);
			skill_names.reject(_position__anonymous_210);
			map_names.reject(_position__anonymous_210);
			event_names.reject(_position__anonymous_210);
			image_names.reject(_position__anonymous_210);
			tile_symbols.reject(_position__anonymous_210);
			payment_long_type_names.reject(_position__anonymous_210);
			area_names.reject(_position__anonymous_210);
			structure_names.reject(_position__anonymous_210);
			tile_names.reject(_position__anonymous_210);
			hero_stat.reject(_position__anonymous_210);
			_state=SUCCESS;
			_position__anonymous_210=_position;
			_token__anonymous_210=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			_position_comments=_position;
			if(_state==SUCCESS&&!_recursion_protection_comments_48.contains(_position)) {
				_recursion_protection_comments_48.add(_position);
				parse_comments();
				_recursion_protection_comments_48.remove(_position_comments);
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_image(_anonymous_210)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_210;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_210.addAll(_token);
				_token__anonymous_210.setValue(_token.getValue());
			}
			_token=_token__anonymous_210;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_210);
				association_names.reject(_position__anonymous_210);
				room_names.reject(_position__anonymous_210);
				activity_names.reject(_position__anonymous_210);
				siding_names.reject(_position__anonymous_210);
				item_names.reject(_position__anonymous_210);
				aspect_names.reject(_position__anonymous_210);
				affinity_names.reject(_position__anonymous_210);
				activity_type_names.reject(_position__anonymous_210);
				trail_names.reject(_position__anonymous_210);
				attack_names.reject(_position__anonymous_210);
				reason_names.reject(_position__anonymous_210);
				trait_names.reject(_position__anonymous_210);
				condition_names.reject(_position__anonymous_210);
				payment_short_type_names.reject(_position__anonymous_210);
				skill_names.reject(_position__anonymous_210);
				map_names.reject(_position__anonymous_210);
				event_names.reject(_position__anonymous_210);
				image_names.reject(_position__anonymous_210);
				tile_symbols.reject(_position__anonymous_210);
				payment_long_type_names.reject(_position__anonymous_210);
				area_names.reject(_position__anonymous_210);
				structure_names.reject(_position__anonymous_210);
				tile_names.reject(_position__anonymous_210);
				hero_stat.reject(_position__anonymous_210);
				_state=SUCCESS;
				_position__anonymous_210=_position;
				_token__anonymous_210=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				parse_image_declaration();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_image(_anonymous_210)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_210;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_210.addAll(_token);
					_token__anonymous_210.setValue(_token.getValue());
				}
				_token=_token__anonymous_210;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_210);
					association_names.reject(_position__anonymous_210);
					room_names.reject(_position__anonymous_210);
					activity_names.reject(_position__anonymous_210);
					siding_names.reject(_position__anonymous_210);
					item_names.reject(_position__anonymous_210);
					aspect_names.reject(_position__anonymous_210);
					affinity_names.reject(_position__anonymous_210);
					activity_type_names.reject(_position__anonymous_210);
					trail_names.reject(_position__anonymous_210);
					attack_names.reject(_position__anonymous_210);
					reason_names.reject(_position__anonymous_210);
					trait_names.reject(_position__anonymous_210);
					condition_names.reject(_position__anonymous_210);
					payment_short_type_names.reject(_position__anonymous_210);
					skill_names.reject(_position__anonymous_210);
					map_names.reject(_position__anonymous_210);
					event_names.reject(_position__anonymous_210);
					image_names.reject(_position__anonymous_210);
					tile_symbols.reject(_position__anonymous_210);
					payment_long_type_names.reject(_position__anonymous_210);
					area_names.reject(_position__anonymous_210);
					structure_names.reject(_position__anonymous_210);
					tile_names.reject(_position__anonymous_210);
					hero_stat.reject(_position__anonymous_210);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_210);
					association_names.accept(_position__anonymous_210);
					room_names.accept(_position__anonymous_210);
					activity_names.accept(_position__anonymous_210);
					siding_names.accept(_position__anonymous_210);
					item_names.accept(_position__anonymous_210);
					aspect_names.accept(_position__anonymous_210);
					affinity_names.accept(_position__anonymous_210);
					activity_type_names.accept(_position__anonymous_210);
					trail_names.accept(_position__anonymous_210);
					attack_names.accept(_position__anonymous_210);
					reason_names.accept(_position__anonymous_210);
					trait_names.accept(_position__anonymous_210);
					condition_names.accept(_position__anonymous_210);
					payment_short_type_names.accept(_position__anonymous_210);
					skill_names.accept(_position__anonymous_210);
					map_names.accept(_position__anonymous_210);
					event_names.accept(_position__anonymous_210);
					image_names.accept(_position__anonymous_210);
					tile_symbols.accept(_position__anonymous_210);
					payment_long_type_names.accept(_position__anonymous_210);
					area_names.accept(_position__anonymous_210);
					structure_names.accept(_position__anonymous_210);
					tile_names.accept(_position__anonymous_210);
					hero_stat.accept(_position__anonymous_210);
				}
			}
		}
	}
	public void parse__anonymous_72() {
		int _position__anonymous_72 = -1;
		Token.Parsed _token__anonymous_72 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_72=_position;
		_token__anonymous_72=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+2-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='\t') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_5.SYNTAX);
			_position=_position+2;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n\t");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"hints(_anonymous_72)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_72;
		}
		else {
			parse_DESCRIPTION();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"hints(_anonymous_72)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_72;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_72.addAll(_token);
			_token__anonymous_72.setValue(_token.getValue());
		}
		_token=_token__anonymous_72;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_72);
			association_names.reject(_position__anonymous_72);
			room_names.reject(_position__anonymous_72);
			activity_names.reject(_position__anonymous_72);
			siding_names.reject(_position__anonymous_72);
			item_names.reject(_position__anonymous_72);
			aspect_names.reject(_position__anonymous_72);
			affinity_names.reject(_position__anonymous_72);
			activity_type_names.reject(_position__anonymous_72);
			trail_names.reject(_position__anonymous_72);
			attack_names.reject(_position__anonymous_72);
			reason_names.reject(_position__anonymous_72);
			trait_names.reject(_position__anonymous_72);
			condition_names.reject(_position__anonymous_72);
			payment_short_type_names.reject(_position__anonymous_72);
			skill_names.reject(_position__anonymous_72);
			map_names.reject(_position__anonymous_72);
			event_names.reject(_position__anonymous_72);
			image_names.reject(_position__anonymous_72);
			tile_symbols.reject(_position__anonymous_72);
			payment_long_type_names.reject(_position__anonymous_72);
			area_names.reject(_position__anonymous_72);
			structure_names.reject(_position__anonymous_72);
			tile_names.reject(_position__anonymous_72);
			hero_stat.reject(_position__anonymous_72);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_72);
			association_names.accept(_position__anonymous_72);
			room_names.accept(_position__anonymous_72);
			activity_names.accept(_position__anonymous_72);
			siding_names.accept(_position__anonymous_72);
			item_names.accept(_position__anonymous_72);
			aspect_names.accept(_position__anonymous_72);
			affinity_names.accept(_position__anonymous_72);
			activity_type_names.accept(_position__anonymous_72);
			trail_names.accept(_position__anonymous_72);
			attack_names.accept(_position__anonymous_72);
			reason_names.accept(_position__anonymous_72);
			trait_names.accept(_position__anonymous_72);
			condition_names.accept(_position__anonymous_72);
			payment_short_type_names.accept(_position__anonymous_72);
			skill_names.accept(_position__anonymous_72);
			map_names.accept(_position__anonymous_72);
			event_names.accept(_position__anonymous_72);
			image_names.accept(_position__anonymous_72);
			tile_symbols.accept(_position__anonymous_72);
			payment_long_type_names.accept(_position__anonymous_72);
			area_names.accept(_position__anonymous_72);
			structure_names.accept(_position__anonymous_72);
			tile_names.accept(_position__anonymous_72);
			hero_stat.accept(_position__anonymous_72);
		}
	}
	public void parse__anonymous_211() {
		int _position__anonymous_211 = -1;
		Token.Parsed _token__anonymous_211 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_211=_position;
		_token__anonymous_211=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		int _state_230 = _state;
		boolean _iteration_achieved_230 = false;
		while(_position<_inputLength) {
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				break;
			}
			else {
				_iteration_achieved_230=true;
			}
		}
		if(_iteration_achieved_230==false) {
			_state=FAILED;
		}
		else if(_state_230==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_substates(_anonymous_211)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_211;
		}
		else {
			parse_animation_state();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_substates(_anonymous_211)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_211;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_211.addAll(_token);
			_token__anonymous_211.setValue(_token.getValue());
		}
		_token=_token__anonymous_211;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_211);
			association_names.reject(_position__anonymous_211);
			room_names.reject(_position__anonymous_211);
			activity_names.reject(_position__anonymous_211);
			siding_names.reject(_position__anonymous_211);
			item_names.reject(_position__anonymous_211);
			aspect_names.reject(_position__anonymous_211);
			affinity_names.reject(_position__anonymous_211);
			activity_type_names.reject(_position__anonymous_211);
			trail_names.reject(_position__anonymous_211);
			attack_names.reject(_position__anonymous_211);
			reason_names.reject(_position__anonymous_211);
			trait_names.reject(_position__anonymous_211);
			condition_names.reject(_position__anonymous_211);
			payment_short_type_names.reject(_position__anonymous_211);
			skill_names.reject(_position__anonymous_211);
			map_names.reject(_position__anonymous_211);
			event_names.reject(_position__anonymous_211);
			image_names.reject(_position__anonymous_211);
			tile_symbols.reject(_position__anonymous_211);
			payment_long_type_names.reject(_position__anonymous_211);
			area_names.reject(_position__anonymous_211);
			structure_names.reject(_position__anonymous_211);
			tile_names.reject(_position__anonymous_211);
			hero_stat.reject(_position__anonymous_211);
			_state=SUCCESS;
			_position__anonymous_211=_position;
			_token__anonymous_211=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_substates(_anonymous_211)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_211;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_211.addAll(_token);
				_token__anonymous_211.setValue(_token.getValue());
			}
			_token=_token__anonymous_211;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_211);
				association_names.reject(_position__anonymous_211);
				room_names.reject(_position__anonymous_211);
				activity_names.reject(_position__anonymous_211);
				siding_names.reject(_position__anonymous_211);
				item_names.reject(_position__anonymous_211);
				aspect_names.reject(_position__anonymous_211);
				affinity_names.reject(_position__anonymous_211);
				activity_type_names.reject(_position__anonymous_211);
				trail_names.reject(_position__anonymous_211);
				attack_names.reject(_position__anonymous_211);
				reason_names.reject(_position__anonymous_211);
				trait_names.reject(_position__anonymous_211);
				condition_names.reject(_position__anonymous_211);
				payment_short_type_names.reject(_position__anonymous_211);
				skill_names.reject(_position__anonymous_211);
				map_names.reject(_position__anonymous_211);
				event_names.reject(_position__anonymous_211);
				image_names.reject(_position__anonymous_211);
				tile_symbols.reject(_position__anonymous_211);
				payment_long_type_names.reject(_position__anonymous_211);
				area_names.reject(_position__anonymous_211);
				structure_names.reject(_position__anonymous_211);
				tile_names.reject(_position__anonymous_211);
				hero_stat.reject(_position__anonymous_211);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_211);
				association_names.accept(_position__anonymous_211);
				room_names.accept(_position__anonymous_211);
				activity_names.accept(_position__anonymous_211);
				siding_names.accept(_position__anonymous_211);
				item_names.accept(_position__anonymous_211);
				aspect_names.accept(_position__anonymous_211);
				affinity_names.accept(_position__anonymous_211);
				activity_type_names.accept(_position__anonymous_211);
				trail_names.accept(_position__anonymous_211);
				attack_names.accept(_position__anonymous_211);
				reason_names.accept(_position__anonymous_211);
				trait_names.accept(_position__anonymous_211);
				condition_names.accept(_position__anonymous_211);
				payment_short_type_names.accept(_position__anonymous_211);
				skill_names.accept(_position__anonymous_211);
				map_names.accept(_position__anonymous_211);
				event_names.accept(_position__anonymous_211);
				image_names.accept(_position__anonymous_211);
				tile_symbols.accept(_position__anonymous_211);
				payment_long_type_names.accept(_position__anonymous_211);
				area_names.accept(_position__anonymous_211);
				structure_names.accept(_position__anonymous_211);
				tile_names.accept(_position__anonymous_211);
				hero_stat.accept(_position__anonymous_211);
			}
		}
	}
	public void parse__anonymous_75() {
		int _position__anonymous_75 = -1;
		Token.Parsed _token__anonymous_75 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_75=_position;
		_token__anonymous_75=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+2-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='\t') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_5.SYNTAX);
			_position=_position+2;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n\t");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"structures_declaration(_anonymous_75)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_75;
		}
		else {
			parse_structure_declaration();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"structures_declaration(_anonymous_75)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_75;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_75.addAll(_token);
			_token__anonymous_75.setValue(_token.getValue());
		}
		_token=_token__anonymous_75;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_75);
			association_names.reject(_position__anonymous_75);
			room_names.reject(_position__anonymous_75);
			activity_names.reject(_position__anonymous_75);
			siding_names.reject(_position__anonymous_75);
			item_names.reject(_position__anonymous_75);
			aspect_names.reject(_position__anonymous_75);
			affinity_names.reject(_position__anonymous_75);
			activity_type_names.reject(_position__anonymous_75);
			trail_names.reject(_position__anonymous_75);
			attack_names.reject(_position__anonymous_75);
			reason_names.reject(_position__anonymous_75);
			trait_names.reject(_position__anonymous_75);
			condition_names.reject(_position__anonymous_75);
			payment_short_type_names.reject(_position__anonymous_75);
			skill_names.reject(_position__anonymous_75);
			map_names.reject(_position__anonymous_75);
			event_names.reject(_position__anonymous_75);
			image_names.reject(_position__anonymous_75);
			tile_symbols.reject(_position__anonymous_75);
			payment_long_type_names.reject(_position__anonymous_75);
			area_names.reject(_position__anonymous_75);
			structure_names.reject(_position__anonymous_75);
			tile_names.reject(_position__anonymous_75);
			hero_stat.reject(_position__anonymous_75);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_75);
			association_names.accept(_position__anonymous_75);
			room_names.accept(_position__anonymous_75);
			activity_names.accept(_position__anonymous_75);
			siding_names.accept(_position__anonymous_75);
			item_names.accept(_position__anonymous_75);
			aspect_names.accept(_position__anonymous_75);
			affinity_names.accept(_position__anonymous_75);
			activity_type_names.accept(_position__anonymous_75);
			trail_names.accept(_position__anonymous_75);
			attack_names.accept(_position__anonymous_75);
			reason_names.accept(_position__anonymous_75);
			trait_names.accept(_position__anonymous_75);
			condition_names.accept(_position__anonymous_75);
			payment_short_type_names.accept(_position__anonymous_75);
			skill_names.accept(_position__anonymous_75);
			map_names.accept(_position__anonymous_75);
			event_names.accept(_position__anonymous_75);
			image_names.accept(_position__anonymous_75);
			tile_symbols.accept(_position__anonymous_75);
			payment_long_type_names.accept(_position__anonymous_75);
			area_names.accept(_position__anonymous_75);
			structure_names.accept(_position__anonymous_75);
			tile_names.accept(_position__anonymous_75);
			hero_stat.accept(_position__anonymous_75);
		}
	}
	public void parse__anonymous_212() {
		int _position__anonymous_212 = -1;
		Token.Parsed _token__anonymous_212 = null;
		int _position_INTEGER = -1;
		Token.Parsed _token_INTEGER = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_212=_position;
		_token__anonymous_212=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		_token_INTEGER=_token;
		_token=new Tokens.Name.FrameWidthToken();
		_position_INTEGER=_position;
		if(_state==SUCCESS&&!_recursion_protection_INTEGER_50.contains(_position)) {
			_recursion_protection_INTEGER_50.add(_position);
			parse_INTEGER();
			_recursion_protection_INTEGER_50.remove(_position_INTEGER);
		}
		else {
			_state=FAILED;
		}
		if(_state==SUCCESS) {
			_token_INTEGER.add(_position_INTEGER,_token);
		}
		_token=_token_INTEGER;
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"image_declaration(_anonymous_212)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_212;
		}
		else {
			int _position_regex_13 = _position;
			if(_position<_inputLength) {
				if(_inputArray[_position]=='x'||_inputArray[_position]=='X') {
					++_position;
				}
				else {
					_state=FAILED;
				}
			}
			else {
				_state=FAILED;
			}
			if(_state==SUCCESS) {
				_token.setValue(_input.substring(_position_regex_13,_position));
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"[xX]");
					_furthestPosition=_position;
				}
				_position=_position_regex_13;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"image_declaration(_anonymous_212)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_212;
			}
			else {
				int _state_231 = _state;
				_token_INTEGER=_token;
				_token=new Tokens.Name.FrameHeightToken();
				_position_INTEGER=_position;
				parse_INTEGER();
				if(_state==SUCCESS) {
					_token_INTEGER.add(_position_INTEGER,_token);
				}
				_token=_token_INTEGER;
				if(_state_231==SUCCESS&&_state==FAILED) {
					_state=SUCCESS;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"image_declaration(_anonymous_212)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_212;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_212.addAll(_token);
			_token__anonymous_212.setValue(_token.getValue());
		}
		_token=_token__anonymous_212;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_212);
			association_names.reject(_position__anonymous_212);
			room_names.reject(_position__anonymous_212);
			activity_names.reject(_position__anonymous_212);
			siding_names.reject(_position__anonymous_212);
			item_names.reject(_position__anonymous_212);
			aspect_names.reject(_position__anonymous_212);
			affinity_names.reject(_position__anonymous_212);
			activity_type_names.reject(_position__anonymous_212);
			trail_names.reject(_position__anonymous_212);
			attack_names.reject(_position__anonymous_212);
			reason_names.reject(_position__anonymous_212);
			trait_names.reject(_position__anonymous_212);
			condition_names.reject(_position__anonymous_212);
			payment_short_type_names.reject(_position__anonymous_212);
			skill_names.reject(_position__anonymous_212);
			map_names.reject(_position__anonymous_212);
			event_names.reject(_position__anonymous_212);
			image_names.reject(_position__anonymous_212);
			tile_symbols.reject(_position__anonymous_212);
			payment_long_type_names.reject(_position__anonymous_212);
			area_names.reject(_position__anonymous_212);
			structure_names.reject(_position__anonymous_212);
			tile_names.reject(_position__anonymous_212);
			hero_stat.reject(_position__anonymous_212);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_212);
			association_names.accept(_position__anonymous_212);
			room_names.accept(_position__anonymous_212);
			activity_names.accept(_position__anonymous_212);
			siding_names.accept(_position__anonymous_212);
			item_names.accept(_position__anonymous_212);
			aspect_names.accept(_position__anonymous_212);
			affinity_names.accept(_position__anonymous_212);
			activity_type_names.accept(_position__anonymous_212);
			trail_names.accept(_position__anonymous_212);
			attack_names.accept(_position__anonymous_212);
			reason_names.accept(_position__anonymous_212);
			trait_names.accept(_position__anonymous_212);
			condition_names.accept(_position__anonymous_212);
			payment_short_type_names.accept(_position__anonymous_212);
			skill_names.accept(_position__anonymous_212);
			map_names.accept(_position__anonymous_212);
			event_names.accept(_position__anonymous_212);
			image_names.accept(_position__anonymous_212);
			tile_symbols.accept(_position__anonymous_212);
			payment_long_type_names.accept(_position__anonymous_212);
			area_names.accept(_position__anonymous_212);
			structure_names.accept(_position__anonymous_212);
			tile_names.accept(_position__anonymous_212);
			hero_stat.accept(_position__anonymous_212);
		}
	}
	public void parse__anonymous_74() {
		int _position__anonymous_74 = -1;
		Token.Parsed _token__anonymous_74 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_74=_position;
		_token__anonymous_74=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+3-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='\t') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='\t') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_12.SYNTAX);
			_position=_position+3;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n\t\t");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"trail_declaration(_anonymous_74)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_74;
		}
		else {
			parse_connection_declaration();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"trail_declaration(_anonymous_74)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_74;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_74.addAll(_token);
			_token__anonymous_74.setValue(_token.getValue());
		}
		_token=_token__anonymous_74;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_74);
			association_names.reject(_position__anonymous_74);
			room_names.reject(_position__anonymous_74);
			activity_names.reject(_position__anonymous_74);
			siding_names.reject(_position__anonymous_74);
			item_names.reject(_position__anonymous_74);
			aspect_names.reject(_position__anonymous_74);
			affinity_names.reject(_position__anonymous_74);
			activity_type_names.reject(_position__anonymous_74);
			trail_names.reject(_position__anonymous_74);
			attack_names.reject(_position__anonymous_74);
			reason_names.reject(_position__anonymous_74);
			trait_names.reject(_position__anonymous_74);
			condition_names.reject(_position__anonymous_74);
			payment_short_type_names.reject(_position__anonymous_74);
			skill_names.reject(_position__anonymous_74);
			map_names.reject(_position__anonymous_74);
			event_names.reject(_position__anonymous_74);
			image_names.reject(_position__anonymous_74);
			tile_symbols.reject(_position__anonymous_74);
			payment_long_type_names.reject(_position__anonymous_74);
			area_names.reject(_position__anonymous_74);
			structure_names.reject(_position__anonymous_74);
			tile_names.reject(_position__anonymous_74);
			hero_stat.reject(_position__anonymous_74);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_74);
			association_names.accept(_position__anonymous_74);
			room_names.accept(_position__anonymous_74);
			activity_names.accept(_position__anonymous_74);
			siding_names.accept(_position__anonymous_74);
			item_names.accept(_position__anonymous_74);
			aspect_names.accept(_position__anonymous_74);
			affinity_names.accept(_position__anonymous_74);
			activity_type_names.accept(_position__anonymous_74);
			trail_names.accept(_position__anonymous_74);
			attack_names.accept(_position__anonymous_74);
			reason_names.accept(_position__anonymous_74);
			trait_names.accept(_position__anonymous_74);
			condition_names.accept(_position__anonymous_74);
			payment_short_type_names.accept(_position__anonymous_74);
			skill_names.accept(_position__anonymous_74);
			map_names.accept(_position__anonymous_74);
			event_names.accept(_position__anonymous_74);
			image_names.accept(_position__anonymous_74);
			tile_symbols.accept(_position__anonymous_74);
			payment_long_type_names.accept(_position__anonymous_74);
			area_names.accept(_position__anonymous_74);
			structure_names.accept(_position__anonymous_74);
			tile_names.accept(_position__anonymous_74);
			hero_stat.accept(_position__anonymous_74);
		}
	}
	public void parse__anonymous_213() {
		int _position__anonymous_213 = -1;
		Token.Parsed _token__anonymous_213 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_213=_position;
		_token__anonymous_213=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+2-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='\t') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_5.SYNTAX);
			_position=_position+2;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n\t");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"image_declaration(_anonymous_213)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_213;
		}
		else {
			parse_animation_state();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"image_declaration(_anonymous_213)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_213;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_213.addAll(_token);
			_token__anonymous_213.setValue(_token.getValue());
		}
		_token=_token__anonymous_213;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_213);
			association_names.reject(_position__anonymous_213);
			room_names.reject(_position__anonymous_213);
			activity_names.reject(_position__anonymous_213);
			siding_names.reject(_position__anonymous_213);
			item_names.reject(_position__anonymous_213);
			aspect_names.reject(_position__anonymous_213);
			affinity_names.reject(_position__anonymous_213);
			activity_type_names.reject(_position__anonymous_213);
			trail_names.reject(_position__anonymous_213);
			attack_names.reject(_position__anonymous_213);
			reason_names.reject(_position__anonymous_213);
			trait_names.reject(_position__anonymous_213);
			condition_names.reject(_position__anonymous_213);
			payment_short_type_names.reject(_position__anonymous_213);
			skill_names.reject(_position__anonymous_213);
			map_names.reject(_position__anonymous_213);
			event_names.reject(_position__anonymous_213);
			image_names.reject(_position__anonymous_213);
			tile_symbols.reject(_position__anonymous_213);
			payment_long_type_names.reject(_position__anonymous_213);
			area_names.reject(_position__anonymous_213);
			structure_names.reject(_position__anonymous_213);
			tile_names.reject(_position__anonymous_213);
			hero_stat.reject(_position__anonymous_213);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_213);
			association_names.accept(_position__anonymous_213);
			room_names.accept(_position__anonymous_213);
			activity_names.accept(_position__anonymous_213);
			siding_names.accept(_position__anonymous_213);
			item_names.accept(_position__anonymous_213);
			aspect_names.accept(_position__anonymous_213);
			affinity_names.accept(_position__anonymous_213);
			activity_type_names.accept(_position__anonymous_213);
			trail_names.accept(_position__anonymous_213);
			attack_names.accept(_position__anonymous_213);
			reason_names.accept(_position__anonymous_213);
			trait_names.accept(_position__anonymous_213);
			condition_names.accept(_position__anonymous_213);
			payment_short_type_names.accept(_position__anonymous_213);
			skill_names.accept(_position__anonymous_213);
			map_names.accept(_position__anonymous_213);
			event_names.accept(_position__anonymous_213);
			image_names.accept(_position__anonymous_213);
			tile_symbols.accept(_position__anonymous_213);
			payment_long_type_names.accept(_position__anonymous_213);
			area_names.accept(_position__anonymous_213);
			structure_names.accept(_position__anonymous_213);
			tile_names.accept(_position__anonymous_213);
			hero_stat.accept(_position__anonymous_213);
		}
	}
	public void parse__anonymous_218() {
		int _position__anonymous_218 = -1;
		Token.Parsed _token__anonymous_218 = null;
		int _position_INTEGER = -1;
		Token.Parsed _token_INTEGER = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_218=_position;
		_token__anonymous_218=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!=',') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_23.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ,");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"image_id(_anonymous_218)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_218;
		}
		else {
			_token_INTEGER=_token;
			_token=new Tokens.Name.FrameHeightToken();
			_position_INTEGER=_position;
			parse_INTEGER();
			if(_state==SUCCESS) {
				_token_INTEGER.add(_position_INTEGER,_token);
			}
			_token=_token_INTEGER;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"image_id(_anonymous_218)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_218;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_218.addAll(_token);
			_token__anonymous_218.setValue(_token.getValue());
		}
		_token=_token__anonymous_218;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_218);
			association_names.reject(_position__anonymous_218);
			room_names.reject(_position__anonymous_218);
			activity_names.reject(_position__anonymous_218);
			siding_names.reject(_position__anonymous_218);
			item_names.reject(_position__anonymous_218);
			aspect_names.reject(_position__anonymous_218);
			affinity_names.reject(_position__anonymous_218);
			activity_type_names.reject(_position__anonymous_218);
			trail_names.reject(_position__anonymous_218);
			attack_names.reject(_position__anonymous_218);
			reason_names.reject(_position__anonymous_218);
			trait_names.reject(_position__anonymous_218);
			condition_names.reject(_position__anonymous_218);
			payment_short_type_names.reject(_position__anonymous_218);
			skill_names.reject(_position__anonymous_218);
			map_names.reject(_position__anonymous_218);
			event_names.reject(_position__anonymous_218);
			image_names.reject(_position__anonymous_218);
			tile_symbols.reject(_position__anonymous_218);
			payment_long_type_names.reject(_position__anonymous_218);
			area_names.reject(_position__anonymous_218);
			structure_names.reject(_position__anonymous_218);
			tile_names.reject(_position__anonymous_218);
			hero_stat.reject(_position__anonymous_218);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_218);
			association_names.accept(_position__anonymous_218);
			room_names.accept(_position__anonymous_218);
			activity_names.accept(_position__anonymous_218);
			siding_names.accept(_position__anonymous_218);
			item_names.accept(_position__anonymous_218);
			aspect_names.accept(_position__anonymous_218);
			affinity_names.accept(_position__anonymous_218);
			activity_type_names.accept(_position__anonymous_218);
			trail_names.accept(_position__anonymous_218);
			attack_names.accept(_position__anonymous_218);
			reason_names.accept(_position__anonymous_218);
			trait_names.accept(_position__anonymous_218);
			condition_names.accept(_position__anonymous_218);
			payment_short_type_names.accept(_position__anonymous_218);
			skill_names.accept(_position__anonymous_218);
			map_names.accept(_position__anonymous_218);
			event_names.accept(_position__anonymous_218);
			image_names.accept(_position__anonymous_218);
			tile_symbols.accept(_position__anonymous_218);
			payment_long_type_names.accept(_position__anonymous_218);
			area_names.accept(_position__anonymous_218);
			structure_names.accept(_position__anonymous_218);
			tile_names.accept(_position__anonymous_218);
			hero_stat.accept(_position__anonymous_218);
		}
	}
	public void parse__anonymous_219() {
		int _position__anonymous_219 = -1;
		Token.Parsed _token__anonymous_219 = null;
		int _position_INTEGER = -1;
		Token.Parsed _token_INTEGER = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_219=_position;
		_token__anonymous_219=_token;
		_token=new Tokens.Name.DeltaToken();
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='-') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_15.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain -");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation(_anonymous_219)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_219;
		}
		else {
			int _state_240 = _state;
			_token_INTEGER=_token;
			_token=new Tokens.Name.FramesToken();
			_position_INTEGER=_position;
			parse_INTEGER();
			if(_state==SUCCESS) {
				_token_INTEGER.add(_position_INTEGER,_token);
			}
			_token=_token_INTEGER;
			if(_state_240==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation(_anonymous_219)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_219;
			}
			else {
				if(_position+1-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!='<') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_153.SYNTAX);
					_position=_position+1;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain <");
						_furthestPosition=_position;
					}
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation(_anonymous_219)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_219;
				}
				else {
					parse__anonymous_220();
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation(_anonymous_219)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_219;
					}
					else {
					}
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_219.add(_position__anonymous_219,_token);
		}
		_token=_token__anonymous_219;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_219);
			association_names.reject(_position__anonymous_219);
			room_names.reject(_position__anonymous_219);
			activity_names.reject(_position__anonymous_219);
			siding_names.reject(_position__anonymous_219);
			item_names.reject(_position__anonymous_219);
			aspect_names.reject(_position__anonymous_219);
			affinity_names.reject(_position__anonymous_219);
			activity_type_names.reject(_position__anonymous_219);
			trail_names.reject(_position__anonymous_219);
			attack_names.reject(_position__anonymous_219);
			reason_names.reject(_position__anonymous_219);
			trait_names.reject(_position__anonymous_219);
			condition_names.reject(_position__anonymous_219);
			payment_short_type_names.reject(_position__anonymous_219);
			skill_names.reject(_position__anonymous_219);
			map_names.reject(_position__anonymous_219);
			event_names.reject(_position__anonymous_219);
			image_names.reject(_position__anonymous_219);
			tile_symbols.reject(_position__anonymous_219);
			payment_long_type_names.reject(_position__anonymous_219);
			area_names.reject(_position__anonymous_219);
			structure_names.reject(_position__anonymous_219);
			tile_names.reject(_position__anonymous_219);
			hero_stat.reject(_position__anonymous_219);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_219);
			association_names.accept(_position__anonymous_219);
			room_names.accept(_position__anonymous_219);
			activity_names.accept(_position__anonymous_219);
			siding_names.accept(_position__anonymous_219);
			item_names.accept(_position__anonymous_219);
			aspect_names.accept(_position__anonymous_219);
			affinity_names.accept(_position__anonymous_219);
			activity_type_names.accept(_position__anonymous_219);
			trail_names.accept(_position__anonymous_219);
			attack_names.accept(_position__anonymous_219);
			reason_names.accept(_position__anonymous_219);
			trait_names.accept(_position__anonymous_219);
			condition_names.accept(_position__anonymous_219);
			payment_short_type_names.accept(_position__anonymous_219);
			skill_names.accept(_position__anonymous_219);
			map_names.accept(_position__anonymous_219);
			event_names.accept(_position__anonymous_219);
			image_names.accept(_position__anonymous_219);
			tile_symbols.accept(_position__anonymous_219);
			payment_long_type_names.accept(_position__anonymous_219);
			area_names.accept(_position__anonymous_219);
			structure_names.accept(_position__anonymous_219);
			tile_names.accept(_position__anonymous_219);
			hero_stat.accept(_position__anonymous_219);
		}
	}
	public void parse__anonymous_66() {
		int _position__anonymous_66 = -1;
		Token.Parsed _token__anonymous_66 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_66=_position;
		_token__anonymous_66=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+2-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='-') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='>') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_57.SYNTAX);
			_position=_position+2;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ->");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"entity_image_specification(_anonymous_66)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_66;
		}
		else {
			_token_NAME=_token;
			_token=new Tokens.Name.ImageIdToken();
			_position_NAME=_position;
			parse_NAME();
			if(_state==SUCCESS) {
				_token_NAME.add(_position_NAME,_token);
			}
			_token=_token_NAME;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"entity_image_specification(_anonymous_66)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_66;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_66.addAll(_token);
			_token__anonymous_66.setValue(_token.getValue());
		}
		_token=_token__anonymous_66;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_66);
			association_names.reject(_position__anonymous_66);
			room_names.reject(_position__anonymous_66);
			activity_names.reject(_position__anonymous_66);
			siding_names.reject(_position__anonymous_66);
			item_names.reject(_position__anonymous_66);
			aspect_names.reject(_position__anonymous_66);
			affinity_names.reject(_position__anonymous_66);
			activity_type_names.reject(_position__anonymous_66);
			trail_names.reject(_position__anonymous_66);
			attack_names.reject(_position__anonymous_66);
			reason_names.reject(_position__anonymous_66);
			trait_names.reject(_position__anonymous_66);
			condition_names.reject(_position__anonymous_66);
			payment_short_type_names.reject(_position__anonymous_66);
			skill_names.reject(_position__anonymous_66);
			map_names.reject(_position__anonymous_66);
			event_names.reject(_position__anonymous_66);
			image_names.reject(_position__anonymous_66);
			tile_symbols.reject(_position__anonymous_66);
			payment_long_type_names.reject(_position__anonymous_66);
			area_names.reject(_position__anonymous_66);
			structure_names.reject(_position__anonymous_66);
			tile_names.reject(_position__anonymous_66);
			hero_stat.reject(_position__anonymous_66);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_66);
			association_names.accept(_position__anonymous_66);
			room_names.accept(_position__anonymous_66);
			activity_names.accept(_position__anonymous_66);
			siding_names.accept(_position__anonymous_66);
			item_names.accept(_position__anonymous_66);
			aspect_names.accept(_position__anonymous_66);
			affinity_names.accept(_position__anonymous_66);
			activity_type_names.accept(_position__anonymous_66);
			trail_names.accept(_position__anonymous_66);
			attack_names.accept(_position__anonymous_66);
			reason_names.accept(_position__anonymous_66);
			trait_names.accept(_position__anonymous_66);
			condition_names.accept(_position__anonymous_66);
			payment_short_type_names.accept(_position__anonymous_66);
			skill_names.accept(_position__anonymous_66);
			map_names.accept(_position__anonymous_66);
			event_names.accept(_position__anonymous_66);
			image_names.accept(_position__anonymous_66);
			tile_symbols.accept(_position__anonymous_66);
			payment_long_type_names.accept(_position__anonymous_66);
			area_names.accept(_position__anonymous_66);
			structure_names.accept(_position__anonymous_66);
			tile_names.accept(_position__anonymous_66);
			hero_stat.accept(_position__anonymous_66);
		}
	}
	public void parse__anonymous_65() {
		int _position__anonymous_65 = -1;
		Token.Parsed _token__anonymous_65 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_65=_position;
		_token__anonymous_65=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		_token_NAME=_token;
		_token=new Tokens.Name.ImageNameToken();
		_position_NAME=_position;
		parse_NAME();
		if(_state==SUCCESS) {
			_token_NAME.add(_position_NAME,_token);
		}
		_token=_token_NAME;
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"entity_image_specification(_anonymous_65)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_65;
		}
		else {
			int _state_85 = _state;
			while(_position<_inputLength) {
				parse__anonymous_66();
				if(_state==FAILED) {
					break;
				}
			}
			if(_state_85==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"entity_image_specification(_anonymous_65)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_65;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_65.addAll(_token);
			_token__anonymous_65.setValue(_token.getValue());
		}
		_token=_token__anonymous_65;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_65);
			association_names.reject(_position__anonymous_65);
			room_names.reject(_position__anonymous_65);
			activity_names.reject(_position__anonymous_65);
			siding_names.reject(_position__anonymous_65);
			item_names.reject(_position__anonymous_65);
			aspect_names.reject(_position__anonymous_65);
			affinity_names.reject(_position__anonymous_65);
			activity_type_names.reject(_position__anonymous_65);
			trail_names.reject(_position__anonymous_65);
			attack_names.reject(_position__anonymous_65);
			reason_names.reject(_position__anonymous_65);
			trait_names.reject(_position__anonymous_65);
			condition_names.reject(_position__anonymous_65);
			payment_short_type_names.reject(_position__anonymous_65);
			skill_names.reject(_position__anonymous_65);
			map_names.reject(_position__anonymous_65);
			event_names.reject(_position__anonymous_65);
			image_names.reject(_position__anonymous_65);
			tile_symbols.reject(_position__anonymous_65);
			payment_long_type_names.reject(_position__anonymous_65);
			area_names.reject(_position__anonymous_65);
			structure_names.reject(_position__anonymous_65);
			tile_names.reject(_position__anonymous_65);
			hero_stat.reject(_position__anonymous_65);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_65);
			association_names.accept(_position__anonymous_65);
			room_names.accept(_position__anonymous_65);
			activity_names.accept(_position__anonymous_65);
			siding_names.accept(_position__anonymous_65);
			item_names.accept(_position__anonymous_65);
			aspect_names.accept(_position__anonymous_65);
			affinity_names.accept(_position__anonymous_65);
			activity_type_names.accept(_position__anonymous_65);
			trail_names.accept(_position__anonymous_65);
			attack_names.accept(_position__anonymous_65);
			reason_names.accept(_position__anonymous_65);
			trait_names.accept(_position__anonymous_65);
			condition_names.accept(_position__anonymous_65);
			payment_short_type_names.accept(_position__anonymous_65);
			skill_names.accept(_position__anonymous_65);
			map_names.accept(_position__anonymous_65);
			event_names.accept(_position__anonymous_65);
			image_names.accept(_position__anonymous_65);
			tile_symbols.accept(_position__anonymous_65);
			payment_long_type_names.accept(_position__anonymous_65);
			area_names.accept(_position__anonymous_65);
			structure_names.accept(_position__anonymous_65);
			tile_names.accept(_position__anonymous_65);
			hero_stat.accept(_position__anonymous_65);
		}
	}
	public void parse__anonymous_130() {
		int _position__anonymous_130 = -1;
		Token.Parsed _token__anonymous_130 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_130=_position;
		_token__anonymous_130=_token;
		_token=new Tokens.Name.TileNameToken();
		int _state_165 = _state;
		boolean _iteration_achieved_165 = false;
		while(_position<_inputLength) {
			_token_NAME=_token;
			_token=new Tokens.Name.NamePartToken();
			_position_NAME=_position;
			parse_NAME();
			if(_state==SUCCESS) {
				_token_NAME.add(_position_NAME,_token);
			}
			_token=_token_NAME;
			if(_state==FAILED) {
				break;
			}
			else {
				_iteration_achieved_165=true;
			}
		}
		if(_iteration_achieved_165==false) {
			_state=FAILED;
		}
		else if(_state_165==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_id_choice(_anonymous_130)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_130;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_130.add(_position__anonymous_130,_token);
		}
		_token=_token__anonymous_130;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_130);
			association_names.reject(_position__anonymous_130);
			room_names.reject(_position__anonymous_130);
			activity_names.reject(_position__anonymous_130);
			siding_names.reject(_position__anonymous_130);
			item_names.reject(_position__anonymous_130);
			aspect_names.reject(_position__anonymous_130);
			affinity_names.reject(_position__anonymous_130);
			activity_type_names.reject(_position__anonymous_130);
			trail_names.reject(_position__anonymous_130);
			attack_names.reject(_position__anonymous_130);
			reason_names.reject(_position__anonymous_130);
			trait_names.reject(_position__anonymous_130);
			condition_names.reject(_position__anonymous_130);
			payment_short_type_names.reject(_position__anonymous_130);
			skill_names.reject(_position__anonymous_130);
			map_names.reject(_position__anonymous_130);
			event_names.reject(_position__anonymous_130);
			image_names.reject(_position__anonymous_130);
			tile_symbols.reject(_position__anonymous_130);
			payment_long_type_names.reject(_position__anonymous_130);
			area_names.reject(_position__anonymous_130);
			structure_names.reject(_position__anonymous_130);
			tile_names.reject(_position__anonymous_130);
			hero_stat.reject(_position__anonymous_130);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_130);
			association_names.accept(_position__anonymous_130);
			room_names.accept(_position__anonymous_130);
			activity_names.accept(_position__anonymous_130);
			siding_names.accept(_position__anonymous_130);
			item_names.accept(_position__anonymous_130);
			aspect_names.accept(_position__anonymous_130);
			affinity_names.accept(_position__anonymous_130);
			activity_type_names.accept(_position__anonymous_130);
			trail_names.accept(_position__anonymous_130);
			attack_names.accept(_position__anonymous_130);
			reason_names.accept(_position__anonymous_130);
			trait_names.accept(_position__anonymous_130);
			condition_names.accept(_position__anonymous_130);
			payment_short_type_names.accept(_position__anonymous_130);
			skill_names.accept(_position__anonymous_130);
			map_names.accept(_position__anonymous_130);
			event_names.accept(_position__anonymous_130);
			image_names.accept(_position__anonymous_130);
			tile_symbols.accept(_position__anonymous_130);
			payment_long_type_names.accept(_position__anonymous_130);
			area_names.accept(_position__anonymous_130);
			structure_names.accept(_position__anonymous_130);
			tile_names.accept(_position__anonymous_130);
			hero_stat.accept(_position__anonymous_130);
		}
	}
	public void parse__anonymous_68() {
		int _position__anonymous_68 = -1;
		Token.Parsed _token__anonymous_68 = null;
		int _position_INTEGER = -1;
		Token.Parsed _token_INTEGER = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_68=_position;
		_token__anonymous_68=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='-') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_15.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain -");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"entity_definition(_anonymous_68)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_68;
		}
		else {
			_token_INTEGER=_token;
			_token=new Tokens.Name.RightToken();
			_position_INTEGER=_position;
			parse_INTEGER();
			if(_state==SUCCESS) {
				_token_INTEGER.add(_position_INTEGER,_token);
			}
			_token=_token_INTEGER;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"entity_definition(_anonymous_68)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_68;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_68.addAll(_token);
			_token__anonymous_68.setValue(_token.getValue());
		}
		_token=_token__anonymous_68;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_68);
			association_names.reject(_position__anonymous_68);
			room_names.reject(_position__anonymous_68);
			activity_names.reject(_position__anonymous_68);
			siding_names.reject(_position__anonymous_68);
			item_names.reject(_position__anonymous_68);
			aspect_names.reject(_position__anonymous_68);
			affinity_names.reject(_position__anonymous_68);
			activity_type_names.reject(_position__anonymous_68);
			trail_names.reject(_position__anonymous_68);
			attack_names.reject(_position__anonymous_68);
			reason_names.reject(_position__anonymous_68);
			trait_names.reject(_position__anonymous_68);
			condition_names.reject(_position__anonymous_68);
			payment_short_type_names.reject(_position__anonymous_68);
			skill_names.reject(_position__anonymous_68);
			map_names.reject(_position__anonymous_68);
			event_names.reject(_position__anonymous_68);
			image_names.reject(_position__anonymous_68);
			tile_symbols.reject(_position__anonymous_68);
			payment_long_type_names.reject(_position__anonymous_68);
			area_names.reject(_position__anonymous_68);
			structure_names.reject(_position__anonymous_68);
			tile_names.reject(_position__anonymous_68);
			hero_stat.reject(_position__anonymous_68);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_68);
			association_names.accept(_position__anonymous_68);
			room_names.accept(_position__anonymous_68);
			activity_names.accept(_position__anonymous_68);
			siding_names.accept(_position__anonymous_68);
			item_names.accept(_position__anonymous_68);
			aspect_names.accept(_position__anonymous_68);
			affinity_names.accept(_position__anonymous_68);
			activity_type_names.accept(_position__anonymous_68);
			trail_names.accept(_position__anonymous_68);
			attack_names.accept(_position__anonymous_68);
			reason_names.accept(_position__anonymous_68);
			trait_names.accept(_position__anonymous_68);
			condition_names.accept(_position__anonymous_68);
			payment_short_type_names.accept(_position__anonymous_68);
			skill_names.accept(_position__anonymous_68);
			map_names.accept(_position__anonymous_68);
			event_names.accept(_position__anonymous_68);
			image_names.accept(_position__anonymous_68);
			tile_symbols.accept(_position__anonymous_68);
			payment_long_type_names.accept(_position__anonymous_68);
			area_names.accept(_position__anonymous_68);
			structure_names.accept(_position__anonymous_68);
			tile_names.accept(_position__anonymous_68);
			hero_stat.accept(_position__anonymous_68);
		}
	}
	public void parse__anonymous_131() {
		int _position__anonymous_131 = -1;
		Token.Parsed _token__anonymous_131 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_131=_position;
		_token__anonymous_131=_token;
		_token=new Tokens.Name.EntityNameToken();
		int _state_166 = _state;
		boolean _iteration_achieved_166 = false;
		while(_position<_inputLength) {
			_token_NAME=_token;
			_token=new Tokens.Name.NamePartToken();
			_position_NAME=_position;
			parse_NAME();
			if(_state==SUCCESS) {
				_token_NAME.add(_position_NAME,_token);
			}
			_token=_token_NAME;
			if(_state==FAILED) {
				break;
			}
			else {
				_iteration_achieved_166=true;
			}
		}
		if(_iteration_achieved_166==false) {
			_state=FAILED;
		}
		else if(_state_166==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"entity_id_choice(_anonymous_131)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_131;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_131.add(_position__anonymous_131,_token);
		}
		_token=_token__anonymous_131;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_131);
			association_names.reject(_position__anonymous_131);
			room_names.reject(_position__anonymous_131);
			activity_names.reject(_position__anonymous_131);
			siding_names.reject(_position__anonymous_131);
			item_names.reject(_position__anonymous_131);
			aspect_names.reject(_position__anonymous_131);
			affinity_names.reject(_position__anonymous_131);
			activity_type_names.reject(_position__anonymous_131);
			trail_names.reject(_position__anonymous_131);
			attack_names.reject(_position__anonymous_131);
			reason_names.reject(_position__anonymous_131);
			trait_names.reject(_position__anonymous_131);
			condition_names.reject(_position__anonymous_131);
			payment_short_type_names.reject(_position__anonymous_131);
			skill_names.reject(_position__anonymous_131);
			map_names.reject(_position__anonymous_131);
			event_names.reject(_position__anonymous_131);
			image_names.reject(_position__anonymous_131);
			tile_symbols.reject(_position__anonymous_131);
			payment_long_type_names.reject(_position__anonymous_131);
			area_names.reject(_position__anonymous_131);
			structure_names.reject(_position__anonymous_131);
			tile_names.reject(_position__anonymous_131);
			hero_stat.reject(_position__anonymous_131);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_131);
			association_names.accept(_position__anonymous_131);
			room_names.accept(_position__anonymous_131);
			activity_names.accept(_position__anonymous_131);
			siding_names.accept(_position__anonymous_131);
			item_names.accept(_position__anonymous_131);
			aspect_names.accept(_position__anonymous_131);
			affinity_names.accept(_position__anonymous_131);
			activity_type_names.accept(_position__anonymous_131);
			trail_names.accept(_position__anonymous_131);
			attack_names.accept(_position__anonymous_131);
			reason_names.accept(_position__anonymous_131);
			trait_names.accept(_position__anonymous_131);
			condition_names.accept(_position__anonymous_131);
			payment_short_type_names.accept(_position__anonymous_131);
			skill_names.accept(_position__anonymous_131);
			map_names.accept(_position__anonymous_131);
			event_names.accept(_position__anonymous_131);
			image_names.accept(_position__anonymous_131);
			tile_symbols.accept(_position__anonymous_131);
			payment_long_type_names.accept(_position__anonymous_131);
			area_names.accept(_position__anonymous_131);
			structure_names.accept(_position__anonymous_131);
			tile_names.accept(_position__anonymous_131);
			hero_stat.accept(_position__anonymous_131);
		}
	}
	public void parse__anonymous_67() {
		int _position__anonymous_67 = -1;
		Token.Parsed _token__anonymous_67 = null;
		int _position_INTEGER = -1;
		Token.Parsed _token_INTEGER = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_67=_position;
		_token__anonymous_67=_token;
		_token=new Tokens.Name.StatRangeToken();
		if(_pass==FIRST_PASS) {
			String _result = _preparsed_NAME.get(_position);
			if(_result==null) {
				_state=FAILED;
			}
			else {
				Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
				_token.add(_position,_first_pass_token);
				_position+=_result.length();
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
		}
		else if(_pass==SECOND_PASS) {
			_list_name_result=_preparsed_NAME.get(_position);
			if(_list_name_result!=null&&hero_stat.contains(_list_name_result)) {
				if(_position+_list_name_result.length()<_inputLength) {
					int _next_char = _inputArray[_position+_list_name_result.length()];
					if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,new Tokens.Name.HeroStatToken(_list_name_result));
					_position+=_list_name_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"hero_stat");
					_furthestPosition=_position;
				}
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"entity_definition(_anonymous_67)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_67;
		}
		else {
			_token_INTEGER=_token;
			_token=new Tokens.Name.LeftToken();
			_position_INTEGER=_position;
			parse_INTEGER();
			if(_state==SUCCESS) {
				_token_INTEGER.add(_position_INTEGER,_token);
			}
			_token=_token_INTEGER;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"entity_definition(_anonymous_67)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_67;
			}
			else {
				int _state_86 = _state;
				parse__anonymous_68();
				if(_state_86==SUCCESS&&_state==FAILED) {
					_state=SUCCESS;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"entity_definition(_anonymous_67)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_67;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_67.add(_position__anonymous_67,_token);
		}
		_token=_token__anonymous_67;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_67);
			association_names.reject(_position__anonymous_67);
			room_names.reject(_position__anonymous_67);
			activity_names.reject(_position__anonymous_67);
			siding_names.reject(_position__anonymous_67);
			item_names.reject(_position__anonymous_67);
			aspect_names.reject(_position__anonymous_67);
			affinity_names.reject(_position__anonymous_67);
			activity_type_names.reject(_position__anonymous_67);
			trail_names.reject(_position__anonymous_67);
			attack_names.reject(_position__anonymous_67);
			reason_names.reject(_position__anonymous_67);
			trait_names.reject(_position__anonymous_67);
			condition_names.reject(_position__anonymous_67);
			payment_short_type_names.reject(_position__anonymous_67);
			skill_names.reject(_position__anonymous_67);
			map_names.reject(_position__anonymous_67);
			event_names.reject(_position__anonymous_67);
			image_names.reject(_position__anonymous_67);
			tile_symbols.reject(_position__anonymous_67);
			payment_long_type_names.reject(_position__anonymous_67);
			area_names.reject(_position__anonymous_67);
			structure_names.reject(_position__anonymous_67);
			tile_names.reject(_position__anonymous_67);
			hero_stat.reject(_position__anonymous_67);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_67);
			association_names.accept(_position__anonymous_67);
			room_names.accept(_position__anonymous_67);
			activity_names.accept(_position__anonymous_67);
			siding_names.accept(_position__anonymous_67);
			item_names.accept(_position__anonymous_67);
			aspect_names.accept(_position__anonymous_67);
			affinity_names.accept(_position__anonymous_67);
			activity_type_names.accept(_position__anonymous_67);
			trail_names.accept(_position__anonymous_67);
			attack_names.accept(_position__anonymous_67);
			reason_names.accept(_position__anonymous_67);
			trait_names.accept(_position__anonymous_67);
			condition_names.accept(_position__anonymous_67);
			payment_short_type_names.accept(_position__anonymous_67);
			skill_names.accept(_position__anonymous_67);
			map_names.accept(_position__anonymous_67);
			event_names.accept(_position__anonymous_67);
			image_names.accept(_position__anonymous_67);
			tile_symbols.accept(_position__anonymous_67);
			payment_long_type_names.accept(_position__anonymous_67);
			area_names.accept(_position__anonymous_67);
			structure_names.accept(_position__anonymous_67);
			tile_names.accept(_position__anonymous_67);
			hero_stat.accept(_position__anonymous_67);
		}
	}
	public void parse__anonymous_132() {
		int _position__anonymous_132 = -1;
		Token.Parsed _token__anonymous_132 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_132=_position;
		_token__anonymous_132=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='|') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_35.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain |");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"entity_id_choice(_anonymous_132)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_132;
		}
		else {
			parse__anonymous_133();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"entity_id_choice(_anonymous_132)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_132;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_132.addAll(_token);
			_token__anonymous_132.setValue(_token.getValue());
		}
		_token=_token__anonymous_132;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_132);
			association_names.reject(_position__anonymous_132);
			room_names.reject(_position__anonymous_132);
			activity_names.reject(_position__anonymous_132);
			siding_names.reject(_position__anonymous_132);
			item_names.reject(_position__anonymous_132);
			aspect_names.reject(_position__anonymous_132);
			affinity_names.reject(_position__anonymous_132);
			activity_type_names.reject(_position__anonymous_132);
			trail_names.reject(_position__anonymous_132);
			attack_names.reject(_position__anonymous_132);
			reason_names.reject(_position__anonymous_132);
			trait_names.reject(_position__anonymous_132);
			condition_names.reject(_position__anonymous_132);
			payment_short_type_names.reject(_position__anonymous_132);
			skill_names.reject(_position__anonymous_132);
			map_names.reject(_position__anonymous_132);
			event_names.reject(_position__anonymous_132);
			image_names.reject(_position__anonymous_132);
			tile_symbols.reject(_position__anonymous_132);
			payment_long_type_names.reject(_position__anonymous_132);
			area_names.reject(_position__anonymous_132);
			structure_names.reject(_position__anonymous_132);
			tile_names.reject(_position__anonymous_132);
			hero_stat.reject(_position__anonymous_132);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_132);
			association_names.accept(_position__anonymous_132);
			room_names.accept(_position__anonymous_132);
			activity_names.accept(_position__anonymous_132);
			siding_names.accept(_position__anonymous_132);
			item_names.accept(_position__anonymous_132);
			aspect_names.accept(_position__anonymous_132);
			affinity_names.accept(_position__anonymous_132);
			activity_type_names.accept(_position__anonymous_132);
			trail_names.accept(_position__anonymous_132);
			attack_names.accept(_position__anonymous_132);
			reason_names.accept(_position__anonymous_132);
			trait_names.accept(_position__anonymous_132);
			condition_names.accept(_position__anonymous_132);
			payment_short_type_names.accept(_position__anonymous_132);
			skill_names.accept(_position__anonymous_132);
			map_names.accept(_position__anonymous_132);
			event_names.accept(_position__anonymous_132);
			image_names.accept(_position__anonymous_132);
			tile_symbols.accept(_position__anonymous_132);
			payment_long_type_names.accept(_position__anonymous_132);
			area_names.accept(_position__anonymous_132);
			structure_names.accept(_position__anonymous_132);
			tile_names.accept(_position__anonymous_132);
			hero_stat.accept(_position__anonymous_132);
		}
	}
	public void parse__anonymous_69() {
		int _position__anonymous_69 = -1;
		Token.Parsed _token__anonymous_69 = null;
		int _position_INTEGER = -1;
		Token.Parsed _token_INTEGER = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_69=_position;
		_token__anonymous_69=_token;
		_token=new Tokens.Name.StatRangeToken();
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='|') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_35.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain |");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"entity_definition(_anonymous_69)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_69;
		}
		else {
			if(_pass==FIRST_PASS) {
				String _result = _preparsed_NAME.get(_position);
				if(_result==null) {
					_state=FAILED;
				}
				else {
					Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
					_token.add(_position,_first_pass_token);
					_position+=_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else if(_pass==SECOND_PASS) {
				_list_name_result=_preparsed_NAME.get(_position);
				if(_list_name_result!=null&&hero_stat.contains(_list_name_result)) {
					if(_position+_list_name_result.length()<_inputLength) {
						int _next_char = _inputArray[_position+_list_name_result.length()];
						if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,new Tokens.Name.HeroStatToken(_list_name_result));
						_position+=_list_name_result.length();
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
				}
				else {
					_state=FAILED;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"hero_stat");
						_furthestPosition=_position;
					}
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"entity_definition(_anonymous_69)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_69;
			}
			else {
				_token_INTEGER=_token;
				_token=new Tokens.Name.LeftToken();
				_position_INTEGER=_position;
				parse_INTEGER();
				if(_state==SUCCESS) {
					_token_INTEGER.add(_position_INTEGER,_token);
				}
				_token=_token_INTEGER;
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"entity_definition(_anonymous_69)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_69;
				}
				else {
					int _state_88 = _state;
					parse__anonymous_70();
					if(_state_88==SUCCESS&&_state==FAILED) {
						_state=SUCCESS;
					}
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"entity_definition(_anonymous_69)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_69;
					}
					else {
					}
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_69.add(_position__anonymous_69,_token);
		}
		_token=_token__anonymous_69;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_69);
			association_names.reject(_position__anonymous_69);
			room_names.reject(_position__anonymous_69);
			activity_names.reject(_position__anonymous_69);
			siding_names.reject(_position__anonymous_69);
			item_names.reject(_position__anonymous_69);
			aspect_names.reject(_position__anonymous_69);
			affinity_names.reject(_position__anonymous_69);
			activity_type_names.reject(_position__anonymous_69);
			trail_names.reject(_position__anonymous_69);
			attack_names.reject(_position__anonymous_69);
			reason_names.reject(_position__anonymous_69);
			trait_names.reject(_position__anonymous_69);
			condition_names.reject(_position__anonymous_69);
			payment_short_type_names.reject(_position__anonymous_69);
			skill_names.reject(_position__anonymous_69);
			map_names.reject(_position__anonymous_69);
			event_names.reject(_position__anonymous_69);
			image_names.reject(_position__anonymous_69);
			tile_symbols.reject(_position__anonymous_69);
			payment_long_type_names.reject(_position__anonymous_69);
			area_names.reject(_position__anonymous_69);
			structure_names.reject(_position__anonymous_69);
			tile_names.reject(_position__anonymous_69);
			hero_stat.reject(_position__anonymous_69);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_69);
			association_names.accept(_position__anonymous_69);
			room_names.accept(_position__anonymous_69);
			activity_names.accept(_position__anonymous_69);
			siding_names.accept(_position__anonymous_69);
			item_names.accept(_position__anonymous_69);
			aspect_names.accept(_position__anonymous_69);
			affinity_names.accept(_position__anonymous_69);
			activity_type_names.accept(_position__anonymous_69);
			trail_names.accept(_position__anonymous_69);
			attack_names.accept(_position__anonymous_69);
			reason_names.accept(_position__anonymous_69);
			trait_names.accept(_position__anonymous_69);
			condition_names.accept(_position__anonymous_69);
			payment_short_type_names.accept(_position__anonymous_69);
			skill_names.accept(_position__anonymous_69);
			map_names.accept(_position__anonymous_69);
			event_names.accept(_position__anonymous_69);
			image_names.accept(_position__anonymous_69);
			tile_symbols.accept(_position__anonymous_69);
			payment_long_type_names.accept(_position__anonymous_69);
			area_names.accept(_position__anonymous_69);
			structure_names.accept(_position__anonymous_69);
			tile_names.accept(_position__anonymous_69);
			hero_stat.accept(_position__anonymous_69);
		}
	}
	public void parse__anonymous_126() {
		int _position__anonymous_126 = -1;
		Token.Parsed _token__anonymous_126 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_126=_position;
		_token__anonymous_126=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse_variable_header();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"method_parameters(_anonymous_126)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_126;
		}
		else {
			int _state_162 = _state;
			while(_position<_inputLength) {
				parse__anonymous_127();
				if(_state==FAILED) {
					break;
				}
			}
			if(_state_162==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"method_parameters(_anonymous_126)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_126;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_126.addAll(_token);
			_token__anonymous_126.setValue(_token.getValue());
		}
		_token=_token__anonymous_126;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_126);
			association_names.reject(_position__anonymous_126);
			room_names.reject(_position__anonymous_126);
			activity_names.reject(_position__anonymous_126);
			siding_names.reject(_position__anonymous_126);
			item_names.reject(_position__anonymous_126);
			aspect_names.reject(_position__anonymous_126);
			affinity_names.reject(_position__anonymous_126);
			activity_type_names.reject(_position__anonymous_126);
			trail_names.reject(_position__anonymous_126);
			attack_names.reject(_position__anonymous_126);
			reason_names.reject(_position__anonymous_126);
			trait_names.reject(_position__anonymous_126);
			condition_names.reject(_position__anonymous_126);
			payment_short_type_names.reject(_position__anonymous_126);
			skill_names.reject(_position__anonymous_126);
			map_names.reject(_position__anonymous_126);
			event_names.reject(_position__anonymous_126);
			image_names.reject(_position__anonymous_126);
			tile_symbols.reject(_position__anonymous_126);
			payment_long_type_names.reject(_position__anonymous_126);
			area_names.reject(_position__anonymous_126);
			structure_names.reject(_position__anonymous_126);
			tile_names.reject(_position__anonymous_126);
			hero_stat.reject(_position__anonymous_126);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_126);
			association_names.accept(_position__anonymous_126);
			room_names.accept(_position__anonymous_126);
			activity_names.accept(_position__anonymous_126);
			siding_names.accept(_position__anonymous_126);
			item_names.accept(_position__anonymous_126);
			aspect_names.accept(_position__anonymous_126);
			affinity_names.accept(_position__anonymous_126);
			activity_type_names.accept(_position__anonymous_126);
			trail_names.accept(_position__anonymous_126);
			attack_names.accept(_position__anonymous_126);
			reason_names.accept(_position__anonymous_126);
			trait_names.accept(_position__anonymous_126);
			condition_names.accept(_position__anonymous_126);
			payment_short_type_names.accept(_position__anonymous_126);
			skill_names.accept(_position__anonymous_126);
			map_names.accept(_position__anonymous_126);
			event_names.accept(_position__anonymous_126);
			image_names.accept(_position__anonymous_126);
			tile_symbols.accept(_position__anonymous_126);
			payment_long_type_names.accept(_position__anonymous_126);
			area_names.accept(_position__anonymous_126);
			structure_names.accept(_position__anonymous_126);
			tile_names.accept(_position__anonymous_126);
			hero_stat.accept(_position__anonymous_126);
		}
	}
	public void parse__anonymous_127() {
		int _position__anonymous_127 = -1;
		Token.Parsed _token__anonymous_127 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_127=_position;
		_token__anonymous_127=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!=',') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_23.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ,");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"method_parameters(_anonymous_127)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_127;
		}
		else {
			parse_variable_header();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"method_parameters(_anonymous_127)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_127;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_127.addAll(_token);
			_token__anonymous_127.setValue(_token.getValue());
		}
		_token=_token__anonymous_127;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_127);
			association_names.reject(_position__anonymous_127);
			room_names.reject(_position__anonymous_127);
			activity_names.reject(_position__anonymous_127);
			siding_names.reject(_position__anonymous_127);
			item_names.reject(_position__anonymous_127);
			aspect_names.reject(_position__anonymous_127);
			affinity_names.reject(_position__anonymous_127);
			activity_type_names.reject(_position__anonymous_127);
			trail_names.reject(_position__anonymous_127);
			attack_names.reject(_position__anonymous_127);
			reason_names.reject(_position__anonymous_127);
			trait_names.reject(_position__anonymous_127);
			condition_names.reject(_position__anonymous_127);
			payment_short_type_names.reject(_position__anonymous_127);
			skill_names.reject(_position__anonymous_127);
			map_names.reject(_position__anonymous_127);
			event_names.reject(_position__anonymous_127);
			image_names.reject(_position__anonymous_127);
			tile_symbols.reject(_position__anonymous_127);
			payment_long_type_names.reject(_position__anonymous_127);
			area_names.reject(_position__anonymous_127);
			structure_names.reject(_position__anonymous_127);
			tile_names.reject(_position__anonymous_127);
			hero_stat.reject(_position__anonymous_127);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_127);
			association_names.accept(_position__anonymous_127);
			room_names.accept(_position__anonymous_127);
			activity_names.accept(_position__anonymous_127);
			siding_names.accept(_position__anonymous_127);
			item_names.accept(_position__anonymous_127);
			aspect_names.accept(_position__anonymous_127);
			affinity_names.accept(_position__anonymous_127);
			activity_type_names.accept(_position__anonymous_127);
			trail_names.accept(_position__anonymous_127);
			attack_names.accept(_position__anonymous_127);
			reason_names.accept(_position__anonymous_127);
			trait_names.accept(_position__anonymous_127);
			condition_names.accept(_position__anonymous_127);
			payment_short_type_names.accept(_position__anonymous_127);
			skill_names.accept(_position__anonymous_127);
			map_names.accept(_position__anonymous_127);
			event_names.accept(_position__anonymous_127);
			image_names.accept(_position__anonymous_127);
			tile_symbols.accept(_position__anonymous_127);
			payment_long_type_names.accept(_position__anonymous_127);
			area_names.accept(_position__anonymous_127);
			structure_names.accept(_position__anonymous_127);
			tile_names.accept(_position__anonymous_127);
			hero_stat.accept(_position__anonymous_127);
		}
	}
	public void parse__anonymous_60() {
		int _position__anonymous_60 = -1;
		Token.Parsed _token__anonymous_60 = null;
		int _position_comments = -1;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_60=_position;
		_token__anonymous_60=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_reason(_anonymous_60)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_60;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_60.addAll(_token);
			_token__anonymous_60.setValue(_token.getValue());
		}
		_token=_token__anonymous_60;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_60);
			association_names.reject(_position__anonymous_60);
			room_names.reject(_position__anonymous_60);
			activity_names.reject(_position__anonymous_60);
			siding_names.reject(_position__anonymous_60);
			item_names.reject(_position__anonymous_60);
			aspect_names.reject(_position__anonymous_60);
			affinity_names.reject(_position__anonymous_60);
			activity_type_names.reject(_position__anonymous_60);
			trail_names.reject(_position__anonymous_60);
			attack_names.reject(_position__anonymous_60);
			reason_names.reject(_position__anonymous_60);
			trait_names.reject(_position__anonymous_60);
			condition_names.reject(_position__anonymous_60);
			payment_short_type_names.reject(_position__anonymous_60);
			skill_names.reject(_position__anonymous_60);
			map_names.reject(_position__anonymous_60);
			event_names.reject(_position__anonymous_60);
			image_names.reject(_position__anonymous_60);
			tile_symbols.reject(_position__anonymous_60);
			payment_long_type_names.reject(_position__anonymous_60);
			area_names.reject(_position__anonymous_60);
			structure_names.reject(_position__anonymous_60);
			tile_names.reject(_position__anonymous_60);
			hero_stat.reject(_position__anonymous_60);
			_state=SUCCESS;
			_position__anonymous_60=_position;
			_token__anonymous_60=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			_position_comments=_position;
			if(_state==SUCCESS&&!_recursion_protection_comments_24.contains(_position)) {
				_recursion_protection_comments_24.add(_position);
				parse_comments();
				_recursion_protection_comments_24.remove(_position_comments);
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_reason(_anonymous_60)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_60;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_60.addAll(_token);
				_token__anonymous_60.setValue(_token.getValue());
			}
			_token=_token__anonymous_60;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_60);
				association_names.reject(_position__anonymous_60);
				room_names.reject(_position__anonymous_60);
				activity_names.reject(_position__anonymous_60);
				siding_names.reject(_position__anonymous_60);
				item_names.reject(_position__anonymous_60);
				aspect_names.reject(_position__anonymous_60);
				affinity_names.reject(_position__anonymous_60);
				activity_type_names.reject(_position__anonymous_60);
				trail_names.reject(_position__anonymous_60);
				attack_names.reject(_position__anonymous_60);
				reason_names.reject(_position__anonymous_60);
				trait_names.reject(_position__anonymous_60);
				condition_names.reject(_position__anonymous_60);
				payment_short_type_names.reject(_position__anonymous_60);
				skill_names.reject(_position__anonymous_60);
				map_names.reject(_position__anonymous_60);
				event_names.reject(_position__anonymous_60);
				image_names.reject(_position__anonymous_60);
				tile_symbols.reject(_position__anonymous_60);
				payment_long_type_names.reject(_position__anonymous_60);
				area_names.reject(_position__anonymous_60);
				structure_names.reject(_position__anonymous_60);
				tile_names.reject(_position__anonymous_60);
				hero_stat.reject(_position__anonymous_60);
				_state=SUCCESS;
				_position__anonymous_60=_position;
				_token__anonymous_60=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				parse_reason_declaration();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_reason(_anonymous_60)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_60;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_60.addAll(_token);
					_token__anonymous_60.setValue(_token.getValue());
				}
				_token=_token__anonymous_60;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_60);
					association_names.reject(_position__anonymous_60);
					room_names.reject(_position__anonymous_60);
					activity_names.reject(_position__anonymous_60);
					siding_names.reject(_position__anonymous_60);
					item_names.reject(_position__anonymous_60);
					aspect_names.reject(_position__anonymous_60);
					affinity_names.reject(_position__anonymous_60);
					activity_type_names.reject(_position__anonymous_60);
					trail_names.reject(_position__anonymous_60);
					attack_names.reject(_position__anonymous_60);
					reason_names.reject(_position__anonymous_60);
					trait_names.reject(_position__anonymous_60);
					condition_names.reject(_position__anonymous_60);
					payment_short_type_names.reject(_position__anonymous_60);
					skill_names.reject(_position__anonymous_60);
					map_names.reject(_position__anonymous_60);
					event_names.reject(_position__anonymous_60);
					image_names.reject(_position__anonymous_60);
					tile_symbols.reject(_position__anonymous_60);
					payment_long_type_names.reject(_position__anonymous_60);
					area_names.reject(_position__anonymous_60);
					structure_names.reject(_position__anonymous_60);
					tile_names.reject(_position__anonymous_60);
					hero_stat.reject(_position__anonymous_60);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_60);
					association_names.accept(_position__anonymous_60);
					room_names.accept(_position__anonymous_60);
					activity_names.accept(_position__anonymous_60);
					siding_names.accept(_position__anonymous_60);
					item_names.accept(_position__anonymous_60);
					aspect_names.accept(_position__anonymous_60);
					affinity_names.accept(_position__anonymous_60);
					activity_type_names.accept(_position__anonymous_60);
					trail_names.accept(_position__anonymous_60);
					attack_names.accept(_position__anonymous_60);
					reason_names.accept(_position__anonymous_60);
					trait_names.accept(_position__anonymous_60);
					condition_names.accept(_position__anonymous_60);
					payment_short_type_names.accept(_position__anonymous_60);
					skill_names.accept(_position__anonymous_60);
					map_names.accept(_position__anonymous_60);
					event_names.accept(_position__anonymous_60);
					image_names.accept(_position__anonymous_60);
					tile_symbols.accept(_position__anonymous_60);
					payment_long_type_names.accept(_position__anonymous_60);
					area_names.accept(_position__anonymous_60);
					structure_names.accept(_position__anonymous_60);
					tile_names.accept(_position__anonymous_60);
					hero_stat.accept(_position__anonymous_60);
				}
			}
		}
	}
	public void parse__anonymous_128() {
		int _position__anonymous_128 = -1;
		Token.Parsed _token__anonymous_128 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_128=_position;
		_token__anonymous_128=_token;
		_token=new Tokens.Name.TileNameToken();
		int _state_163 = _state;
		boolean _iteration_achieved_163 = false;
		while(_position<_inputLength) {
			_token_NAME=_token;
			_token=new Tokens.Name.NamePartToken();
			_position_NAME=_position;
			parse_NAME();
			if(_state==SUCCESS) {
				_token_NAME.add(_position_NAME,_token);
			}
			_token=_token_NAME;
			if(_state==FAILED) {
				break;
			}
			else {
				_iteration_achieved_163=true;
			}
		}
		if(_iteration_achieved_163==false) {
			_state=FAILED;
		}
		else if(_state_163==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_id_choice(_anonymous_128)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_128;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_128.add(_position__anonymous_128,_token);
		}
		_token=_token__anonymous_128;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_128);
			association_names.reject(_position__anonymous_128);
			room_names.reject(_position__anonymous_128);
			activity_names.reject(_position__anonymous_128);
			siding_names.reject(_position__anonymous_128);
			item_names.reject(_position__anonymous_128);
			aspect_names.reject(_position__anonymous_128);
			affinity_names.reject(_position__anonymous_128);
			activity_type_names.reject(_position__anonymous_128);
			trail_names.reject(_position__anonymous_128);
			attack_names.reject(_position__anonymous_128);
			reason_names.reject(_position__anonymous_128);
			trait_names.reject(_position__anonymous_128);
			condition_names.reject(_position__anonymous_128);
			payment_short_type_names.reject(_position__anonymous_128);
			skill_names.reject(_position__anonymous_128);
			map_names.reject(_position__anonymous_128);
			event_names.reject(_position__anonymous_128);
			image_names.reject(_position__anonymous_128);
			tile_symbols.reject(_position__anonymous_128);
			payment_long_type_names.reject(_position__anonymous_128);
			area_names.reject(_position__anonymous_128);
			structure_names.reject(_position__anonymous_128);
			tile_names.reject(_position__anonymous_128);
			hero_stat.reject(_position__anonymous_128);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_128);
			association_names.accept(_position__anonymous_128);
			room_names.accept(_position__anonymous_128);
			activity_names.accept(_position__anonymous_128);
			siding_names.accept(_position__anonymous_128);
			item_names.accept(_position__anonymous_128);
			aspect_names.accept(_position__anonymous_128);
			affinity_names.accept(_position__anonymous_128);
			activity_type_names.accept(_position__anonymous_128);
			trail_names.accept(_position__anonymous_128);
			attack_names.accept(_position__anonymous_128);
			reason_names.accept(_position__anonymous_128);
			trait_names.accept(_position__anonymous_128);
			condition_names.accept(_position__anonymous_128);
			payment_short_type_names.accept(_position__anonymous_128);
			skill_names.accept(_position__anonymous_128);
			map_names.accept(_position__anonymous_128);
			event_names.accept(_position__anonymous_128);
			image_names.accept(_position__anonymous_128);
			tile_symbols.accept(_position__anonymous_128);
			payment_long_type_names.accept(_position__anonymous_128);
			area_names.accept(_position__anonymous_128);
			structure_names.accept(_position__anonymous_128);
			tile_names.accept(_position__anonymous_128);
			hero_stat.accept(_position__anonymous_128);
		}
	}
	public void parse__anonymous_129() {
		int _position__anonymous_129 = -1;
		Token.Parsed _token__anonymous_129 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_129=_position;
		_token__anonymous_129=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='|') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_35.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain |");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_id_choice(_anonymous_129)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_129;
		}
		else {
			parse__anonymous_130();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_id_choice(_anonymous_129)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_129;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_129.addAll(_token);
			_token__anonymous_129.setValue(_token.getValue());
		}
		_token=_token__anonymous_129;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_129);
			association_names.reject(_position__anonymous_129);
			room_names.reject(_position__anonymous_129);
			activity_names.reject(_position__anonymous_129);
			siding_names.reject(_position__anonymous_129);
			item_names.reject(_position__anonymous_129);
			aspect_names.reject(_position__anonymous_129);
			affinity_names.reject(_position__anonymous_129);
			activity_type_names.reject(_position__anonymous_129);
			trail_names.reject(_position__anonymous_129);
			attack_names.reject(_position__anonymous_129);
			reason_names.reject(_position__anonymous_129);
			trait_names.reject(_position__anonymous_129);
			condition_names.reject(_position__anonymous_129);
			payment_short_type_names.reject(_position__anonymous_129);
			skill_names.reject(_position__anonymous_129);
			map_names.reject(_position__anonymous_129);
			event_names.reject(_position__anonymous_129);
			image_names.reject(_position__anonymous_129);
			tile_symbols.reject(_position__anonymous_129);
			payment_long_type_names.reject(_position__anonymous_129);
			area_names.reject(_position__anonymous_129);
			structure_names.reject(_position__anonymous_129);
			tile_names.reject(_position__anonymous_129);
			hero_stat.reject(_position__anonymous_129);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_129);
			association_names.accept(_position__anonymous_129);
			room_names.accept(_position__anonymous_129);
			activity_names.accept(_position__anonymous_129);
			siding_names.accept(_position__anonymous_129);
			item_names.accept(_position__anonymous_129);
			aspect_names.accept(_position__anonymous_129);
			affinity_names.accept(_position__anonymous_129);
			activity_type_names.accept(_position__anonymous_129);
			trail_names.accept(_position__anonymous_129);
			attack_names.accept(_position__anonymous_129);
			reason_names.accept(_position__anonymous_129);
			trait_names.accept(_position__anonymous_129);
			condition_names.accept(_position__anonymous_129);
			payment_short_type_names.accept(_position__anonymous_129);
			skill_names.accept(_position__anonymous_129);
			map_names.accept(_position__anonymous_129);
			event_names.accept(_position__anonymous_129);
			image_names.accept(_position__anonymous_129);
			tile_symbols.accept(_position__anonymous_129);
			payment_long_type_names.accept(_position__anonymous_129);
			area_names.accept(_position__anonymous_129);
			structure_names.accept(_position__anonymous_129);
			tile_names.accept(_position__anonymous_129);
			hero_stat.accept(_position__anonymous_129);
		}
	}
	public void parse__anonymous_62() {
		int _position__anonymous_62 = -1;
		Token.Parsed _token__anonymous_62 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_62=_position;
		_token__anonymous_62=_token;
		_token=new Tokens.Name.OperatorToken();
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='+') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_14.PLUS);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain +");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"stat_range(_anonymous_62)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_62;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_62.add(_position__anonymous_62,_token);
		}
		_token=_token__anonymous_62;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_62);
			association_names.reject(_position__anonymous_62);
			room_names.reject(_position__anonymous_62);
			activity_names.reject(_position__anonymous_62);
			siding_names.reject(_position__anonymous_62);
			item_names.reject(_position__anonymous_62);
			aspect_names.reject(_position__anonymous_62);
			affinity_names.reject(_position__anonymous_62);
			activity_type_names.reject(_position__anonymous_62);
			trail_names.reject(_position__anonymous_62);
			attack_names.reject(_position__anonymous_62);
			reason_names.reject(_position__anonymous_62);
			trait_names.reject(_position__anonymous_62);
			condition_names.reject(_position__anonymous_62);
			payment_short_type_names.reject(_position__anonymous_62);
			skill_names.reject(_position__anonymous_62);
			map_names.reject(_position__anonymous_62);
			event_names.reject(_position__anonymous_62);
			image_names.reject(_position__anonymous_62);
			tile_symbols.reject(_position__anonymous_62);
			payment_long_type_names.reject(_position__anonymous_62);
			area_names.reject(_position__anonymous_62);
			structure_names.reject(_position__anonymous_62);
			tile_names.reject(_position__anonymous_62);
			hero_stat.reject(_position__anonymous_62);
			_state=SUCCESS;
			_position__anonymous_62=_position;
			_token__anonymous_62=_token;
			_token=new Tokens.Name.OperatorToken();
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='*') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_19.MULTIPLY);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain *");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"stat_range(_anonymous_62)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_62;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_62.add(_position__anonymous_62,_token);
			}
			_token=_token__anonymous_62;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_62);
				association_names.reject(_position__anonymous_62);
				room_names.reject(_position__anonymous_62);
				activity_names.reject(_position__anonymous_62);
				siding_names.reject(_position__anonymous_62);
				item_names.reject(_position__anonymous_62);
				aspect_names.reject(_position__anonymous_62);
				affinity_names.reject(_position__anonymous_62);
				activity_type_names.reject(_position__anonymous_62);
				trail_names.reject(_position__anonymous_62);
				attack_names.reject(_position__anonymous_62);
				reason_names.reject(_position__anonymous_62);
				trait_names.reject(_position__anonymous_62);
				condition_names.reject(_position__anonymous_62);
				payment_short_type_names.reject(_position__anonymous_62);
				skill_names.reject(_position__anonymous_62);
				map_names.reject(_position__anonymous_62);
				event_names.reject(_position__anonymous_62);
				image_names.reject(_position__anonymous_62);
				tile_symbols.reject(_position__anonymous_62);
				payment_long_type_names.reject(_position__anonymous_62);
				area_names.reject(_position__anonymous_62);
				structure_names.reject(_position__anonymous_62);
				tile_names.reject(_position__anonymous_62);
				hero_stat.reject(_position__anonymous_62);
				_state=SUCCESS;
				_position__anonymous_62=_position;
				_token__anonymous_62=_token;
				_token=new Tokens.Name.OperatorToken();
				if(_position+1-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!='/') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_53.DIVIDE);
					_position=_position+1;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain /");
						_furthestPosition=_position;
					}
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"stat_range(_anonymous_62)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_62;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_62.add(_position__anonymous_62,_token);
				}
				_token=_token__anonymous_62;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_62);
					association_names.reject(_position__anonymous_62);
					room_names.reject(_position__anonymous_62);
					activity_names.reject(_position__anonymous_62);
					siding_names.reject(_position__anonymous_62);
					item_names.reject(_position__anonymous_62);
					aspect_names.reject(_position__anonymous_62);
					affinity_names.reject(_position__anonymous_62);
					activity_type_names.reject(_position__anonymous_62);
					trail_names.reject(_position__anonymous_62);
					attack_names.reject(_position__anonymous_62);
					reason_names.reject(_position__anonymous_62);
					trait_names.reject(_position__anonymous_62);
					condition_names.reject(_position__anonymous_62);
					payment_short_type_names.reject(_position__anonymous_62);
					skill_names.reject(_position__anonymous_62);
					map_names.reject(_position__anonymous_62);
					event_names.reject(_position__anonymous_62);
					image_names.reject(_position__anonymous_62);
					tile_symbols.reject(_position__anonymous_62);
					payment_long_type_names.reject(_position__anonymous_62);
					area_names.reject(_position__anonymous_62);
					structure_names.reject(_position__anonymous_62);
					tile_names.reject(_position__anonymous_62);
					hero_stat.reject(_position__anonymous_62);
					_state=SUCCESS;
					_position__anonymous_62=_position;
					_token__anonymous_62=_token;
					_token=new Tokens.Name.OperatorToken();
					if(_position+1-1 >=_inputLength) {
						_state=FAILED;
					}
					else {
						if(_inputArray[_position+0]!='-') {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,Tokens.Syntax.syntax_15.MINUS);
						_position=_position+1;
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
					else if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain -");
							_furthestPosition=_position;
						}
					}
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"stat_range(_anonymous_62)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_62;
					}
					else {
					}
					if(_state==SUCCESS) {
						_token__anonymous_62.add(_position__anonymous_62,_token);
					}
					_token=_token__anonymous_62;
					if(_state==FAILED) {
						support_names.reject(_position__anonymous_62);
						association_names.reject(_position__anonymous_62);
						room_names.reject(_position__anonymous_62);
						activity_names.reject(_position__anonymous_62);
						siding_names.reject(_position__anonymous_62);
						item_names.reject(_position__anonymous_62);
						aspect_names.reject(_position__anonymous_62);
						affinity_names.reject(_position__anonymous_62);
						activity_type_names.reject(_position__anonymous_62);
						trail_names.reject(_position__anonymous_62);
						attack_names.reject(_position__anonymous_62);
						reason_names.reject(_position__anonymous_62);
						trait_names.reject(_position__anonymous_62);
						condition_names.reject(_position__anonymous_62);
						payment_short_type_names.reject(_position__anonymous_62);
						skill_names.reject(_position__anonymous_62);
						map_names.reject(_position__anonymous_62);
						event_names.reject(_position__anonymous_62);
						image_names.reject(_position__anonymous_62);
						tile_symbols.reject(_position__anonymous_62);
						payment_long_type_names.reject(_position__anonymous_62);
						area_names.reject(_position__anonymous_62);
						structure_names.reject(_position__anonymous_62);
						tile_names.reject(_position__anonymous_62);
						hero_stat.reject(_position__anonymous_62);
					}
					else if(_state==SUCCESS) {
						support_names.accept(_position__anonymous_62);
						association_names.accept(_position__anonymous_62);
						room_names.accept(_position__anonymous_62);
						activity_names.accept(_position__anonymous_62);
						siding_names.accept(_position__anonymous_62);
						item_names.accept(_position__anonymous_62);
						aspect_names.accept(_position__anonymous_62);
						affinity_names.accept(_position__anonymous_62);
						activity_type_names.accept(_position__anonymous_62);
						trail_names.accept(_position__anonymous_62);
						attack_names.accept(_position__anonymous_62);
						reason_names.accept(_position__anonymous_62);
						trait_names.accept(_position__anonymous_62);
						condition_names.accept(_position__anonymous_62);
						payment_short_type_names.accept(_position__anonymous_62);
						skill_names.accept(_position__anonymous_62);
						map_names.accept(_position__anonymous_62);
						event_names.accept(_position__anonymous_62);
						image_names.accept(_position__anonymous_62);
						tile_symbols.accept(_position__anonymous_62);
						payment_long_type_names.accept(_position__anonymous_62);
						area_names.accept(_position__anonymous_62);
						structure_names.accept(_position__anonymous_62);
						tile_names.accept(_position__anonymous_62);
						hero_stat.accept(_position__anonymous_62);
					}
				}
			}
		}
	}
	public void parse__anonymous_122() {
		int _position__anonymous_122 = -1;
		Token.Parsed _token__anonymous_122 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_122=_position;
		_token__anonymous_122=_token;
		_token=new Tokens.Name.ParameterToken();
		if(_position+2-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='\t') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_5.SYNTAX);
			_position=_position+2;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n\t");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"event_declaration(_anonymous_122)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_122;
		}
		else {
			parse_type_name();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"event_declaration(_anonymous_122)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_122;
			}
			else {
				parse_NAME();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"event_declaration(_anonymous_122)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_122;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_122.add(_position__anonymous_122,_token);
		}
		_token=_token__anonymous_122;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_122);
			association_names.reject(_position__anonymous_122);
			room_names.reject(_position__anonymous_122);
			activity_names.reject(_position__anonymous_122);
			siding_names.reject(_position__anonymous_122);
			item_names.reject(_position__anonymous_122);
			aspect_names.reject(_position__anonymous_122);
			affinity_names.reject(_position__anonymous_122);
			activity_type_names.reject(_position__anonymous_122);
			trail_names.reject(_position__anonymous_122);
			attack_names.reject(_position__anonymous_122);
			reason_names.reject(_position__anonymous_122);
			trait_names.reject(_position__anonymous_122);
			condition_names.reject(_position__anonymous_122);
			payment_short_type_names.reject(_position__anonymous_122);
			skill_names.reject(_position__anonymous_122);
			map_names.reject(_position__anonymous_122);
			event_names.reject(_position__anonymous_122);
			image_names.reject(_position__anonymous_122);
			tile_symbols.reject(_position__anonymous_122);
			payment_long_type_names.reject(_position__anonymous_122);
			area_names.reject(_position__anonymous_122);
			structure_names.reject(_position__anonymous_122);
			tile_names.reject(_position__anonymous_122);
			hero_stat.reject(_position__anonymous_122);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_122);
			association_names.accept(_position__anonymous_122);
			room_names.accept(_position__anonymous_122);
			activity_names.accept(_position__anonymous_122);
			siding_names.accept(_position__anonymous_122);
			item_names.accept(_position__anonymous_122);
			aspect_names.accept(_position__anonymous_122);
			affinity_names.accept(_position__anonymous_122);
			activity_type_names.accept(_position__anonymous_122);
			trail_names.accept(_position__anonymous_122);
			attack_names.accept(_position__anonymous_122);
			reason_names.accept(_position__anonymous_122);
			trait_names.accept(_position__anonymous_122);
			condition_names.accept(_position__anonymous_122);
			payment_short_type_names.accept(_position__anonymous_122);
			skill_names.accept(_position__anonymous_122);
			map_names.accept(_position__anonymous_122);
			event_names.accept(_position__anonymous_122);
			image_names.accept(_position__anonymous_122);
			tile_symbols.accept(_position__anonymous_122);
			payment_long_type_names.accept(_position__anonymous_122);
			area_names.accept(_position__anonymous_122);
			structure_names.accept(_position__anonymous_122);
			tile_names.accept(_position__anonymous_122);
			hero_stat.accept(_position__anonymous_122);
		}
	}
	public void parse__anonymous_243() {
		int _position__anonymous_243 = -1;
		Token.Parsed _token__anonymous_243 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_243=_position;
		_token__anonymous_243=_token;
		_token=new Tokens.Name.BlueToken();
		parse_FLOAT();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"colour_declaration(_anonymous_243)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_243;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_243.add(_position__anonymous_243,_token);
		}
		_token=_token__anonymous_243;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_243);
			association_names.reject(_position__anonymous_243);
			room_names.reject(_position__anonymous_243);
			activity_names.reject(_position__anonymous_243);
			siding_names.reject(_position__anonymous_243);
			item_names.reject(_position__anonymous_243);
			aspect_names.reject(_position__anonymous_243);
			affinity_names.reject(_position__anonymous_243);
			activity_type_names.reject(_position__anonymous_243);
			trail_names.reject(_position__anonymous_243);
			attack_names.reject(_position__anonymous_243);
			reason_names.reject(_position__anonymous_243);
			trait_names.reject(_position__anonymous_243);
			condition_names.reject(_position__anonymous_243);
			payment_short_type_names.reject(_position__anonymous_243);
			skill_names.reject(_position__anonymous_243);
			map_names.reject(_position__anonymous_243);
			event_names.reject(_position__anonymous_243);
			image_names.reject(_position__anonymous_243);
			tile_symbols.reject(_position__anonymous_243);
			payment_long_type_names.reject(_position__anonymous_243);
			area_names.reject(_position__anonymous_243);
			structure_names.reject(_position__anonymous_243);
			tile_names.reject(_position__anonymous_243);
			hero_stat.reject(_position__anonymous_243);
			_state=SUCCESS;
			_position__anonymous_243=_position;
			_token__anonymous_243=_token;
			_token=new Tokens.Name.BlueToken();
			parse_INTEGER();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"colour_declaration(_anonymous_243)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_243;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_243.add(_position__anonymous_243,_token);
			}
			_token=_token__anonymous_243;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_243);
				association_names.reject(_position__anonymous_243);
				room_names.reject(_position__anonymous_243);
				activity_names.reject(_position__anonymous_243);
				siding_names.reject(_position__anonymous_243);
				item_names.reject(_position__anonymous_243);
				aspect_names.reject(_position__anonymous_243);
				affinity_names.reject(_position__anonymous_243);
				activity_type_names.reject(_position__anonymous_243);
				trail_names.reject(_position__anonymous_243);
				attack_names.reject(_position__anonymous_243);
				reason_names.reject(_position__anonymous_243);
				trait_names.reject(_position__anonymous_243);
				condition_names.reject(_position__anonymous_243);
				payment_short_type_names.reject(_position__anonymous_243);
				skill_names.reject(_position__anonymous_243);
				map_names.reject(_position__anonymous_243);
				event_names.reject(_position__anonymous_243);
				image_names.reject(_position__anonymous_243);
				tile_symbols.reject(_position__anonymous_243);
				payment_long_type_names.reject(_position__anonymous_243);
				area_names.reject(_position__anonymous_243);
				structure_names.reject(_position__anonymous_243);
				tile_names.reject(_position__anonymous_243);
				hero_stat.reject(_position__anonymous_243);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_243);
				association_names.accept(_position__anonymous_243);
				room_names.accept(_position__anonymous_243);
				activity_names.accept(_position__anonymous_243);
				siding_names.accept(_position__anonymous_243);
				item_names.accept(_position__anonymous_243);
				aspect_names.accept(_position__anonymous_243);
				affinity_names.accept(_position__anonymous_243);
				activity_type_names.accept(_position__anonymous_243);
				trail_names.accept(_position__anonymous_243);
				attack_names.accept(_position__anonymous_243);
				reason_names.accept(_position__anonymous_243);
				trait_names.accept(_position__anonymous_243);
				condition_names.accept(_position__anonymous_243);
				payment_short_type_names.accept(_position__anonymous_243);
				skill_names.accept(_position__anonymous_243);
				map_names.accept(_position__anonymous_243);
				event_names.accept(_position__anonymous_243);
				image_names.accept(_position__anonymous_243);
				tile_symbols.accept(_position__anonymous_243);
				payment_long_type_names.accept(_position__anonymous_243);
				area_names.accept(_position__anonymous_243);
				structure_names.accept(_position__anonymous_243);
				tile_names.accept(_position__anonymous_243);
				hero_stat.accept(_position__anonymous_243);
			}
		}
	}
	public void parse__anonymous_61() {
		int _position__anonymous_61 = -1;
		Token.Parsed _token__anonymous_61 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_61=_position;
		_token__anonymous_61=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse__anonymous_62();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"stat_range(_anonymous_61)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_61;
		}
		else {
			parse_stat_range();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"stat_range(_anonymous_61)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_61;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_61.addAll(_token);
			_token__anonymous_61.setValue(_token.getValue());
		}
		_token=_token__anonymous_61;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_61);
			association_names.reject(_position__anonymous_61);
			room_names.reject(_position__anonymous_61);
			activity_names.reject(_position__anonymous_61);
			siding_names.reject(_position__anonymous_61);
			item_names.reject(_position__anonymous_61);
			aspect_names.reject(_position__anonymous_61);
			affinity_names.reject(_position__anonymous_61);
			activity_type_names.reject(_position__anonymous_61);
			trail_names.reject(_position__anonymous_61);
			attack_names.reject(_position__anonymous_61);
			reason_names.reject(_position__anonymous_61);
			trait_names.reject(_position__anonymous_61);
			condition_names.reject(_position__anonymous_61);
			payment_short_type_names.reject(_position__anonymous_61);
			skill_names.reject(_position__anonymous_61);
			map_names.reject(_position__anonymous_61);
			event_names.reject(_position__anonymous_61);
			image_names.reject(_position__anonymous_61);
			tile_symbols.reject(_position__anonymous_61);
			payment_long_type_names.reject(_position__anonymous_61);
			area_names.reject(_position__anonymous_61);
			structure_names.reject(_position__anonymous_61);
			tile_names.reject(_position__anonymous_61);
			hero_stat.reject(_position__anonymous_61);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_61);
			association_names.accept(_position__anonymous_61);
			room_names.accept(_position__anonymous_61);
			activity_names.accept(_position__anonymous_61);
			siding_names.accept(_position__anonymous_61);
			item_names.accept(_position__anonymous_61);
			aspect_names.accept(_position__anonymous_61);
			affinity_names.accept(_position__anonymous_61);
			activity_type_names.accept(_position__anonymous_61);
			trail_names.accept(_position__anonymous_61);
			attack_names.accept(_position__anonymous_61);
			reason_names.accept(_position__anonymous_61);
			trait_names.accept(_position__anonymous_61);
			condition_names.accept(_position__anonymous_61);
			payment_short_type_names.accept(_position__anonymous_61);
			skill_names.accept(_position__anonymous_61);
			map_names.accept(_position__anonymous_61);
			event_names.accept(_position__anonymous_61);
			image_names.accept(_position__anonymous_61);
			tile_symbols.accept(_position__anonymous_61);
			payment_long_type_names.accept(_position__anonymous_61);
			area_names.accept(_position__anonymous_61);
			structure_names.accept(_position__anonymous_61);
			tile_names.accept(_position__anonymous_61);
			hero_stat.accept(_position__anonymous_61);
		}
	}
	public void parse__anonymous_123() {
		int _position__anonymous_123 = -1;
		Token.Parsed _token__anonymous_123 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_123=_position;
		_token__anonymous_123=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_pass==FIRST_PASS) {
			String _result = _preparsed_NAME.get(_position);
			if(_result==null) {
				_state=FAILED;
			}
			else {
				Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
				_token.add(_position,_first_pass_token);
				_position+=_result.length();
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
		}
		else if(_pass==SECOND_PASS) {
			_list_name_result=_preparsed_NAME.get(_position);
			if(_list_name_result!=null&&event_names.contains(_list_name_result)) {
				if(_position+_list_name_result.length()<_inputLength) {
					int _next_char = _inputArray[_position+_list_name_result.length()];
					if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,new Tokens.Name.EventNamesToken(_list_name_result));
					_position+=_list_name_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"event_names");
					_furthestPosition=_position;
				}
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"event_statement(_anonymous_123)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_123;
		}
		else {
			int _state_154 = _state;
			parse_animation();
			if(_state_154==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"event_statement(_anonymous_123)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_123;
			}
			else {
				parse_std_body();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"event_statement(_anonymous_123)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_123;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_123.addAll(_token);
			_token__anonymous_123.setValue(_token.getValue());
		}
		_token=_token__anonymous_123;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_123);
			association_names.reject(_position__anonymous_123);
			room_names.reject(_position__anonymous_123);
			activity_names.reject(_position__anonymous_123);
			siding_names.reject(_position__anonymous_123);
			item_names.reject(_position__anonymous_123);
			aspect_names.reject(_position__anonymous_123);
			affinity_names.reject(_position__anonymous_123);
			activity_type_names.reject(_position__anonymous_123);
			trail_names.reject(_position__anonymous_123);
			attack_names.reject(_position__anonymous_123);
			reason_names.reject(_position__anonymous_123);
			trait_names.reject(_position__anonymous_123);
			condition_names.reject(_position__anonymous_123);
			payment_short_type_names.reject(_position__anonymous_123);
			skill_names.reject(_position__anonymous_123);
			map_names.reject(_position__anonymous_123);
			event_names.reject(_position__anonymous_123);
			image_names.reject(_position__anonymous_123);
			tile_symbols.reject(_position__anonymous_123);
			payment_long_type_names.reject(_position__anonymous_123);
			area_names.reject(_position__anonymous_123);
			structure_names.reject(_position__anonymous_123);
			tile_names.reject(_position__anonymous_123);
			hero_stat.reject(_position__anonymous_123);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_123);
			association_names.accept(_position__anonymous_123);
			room_names.accept(_position__anonymous_123);
			activity_names.accept(_position__anonymous_123);
			siding_names.accept(_position__anonymous_123);
			item_names.accept(_position__anonymous_123);
			aspect_names.accept(_position__anonymous_123);
			affinity_names.accept(_position__anonymous_123);
			activity_type_names.accept(_position__anonymous_123);
			trail_names.accept(_position__anonymous_123);
			attack_names.accept(_position__anonymous_123);
			reason_names.accept(_position__anonymous_123);
			trait_names.accept(_position__anonymous_123);
			condition_names.accept(_position__anonymous_123);
			payment_short_type_names.accept(_position__anonymous_123);
			skill_names.accept(_position__anonymous_123);
			map_names.accept(_position__anonymous_123);
			event_names.accept(_position__anonymous_123);
			image_names.accept(_position__anonymous_123);
			tile_symbols.accept(_position__anonymous_123);
			payment_long_type_names.accept(_position__anonymous_123);
			area_names.accept(_position__anonymous_123);
			structure_names.accept(_position__anonymous_123);
			tile_names.accept(_position__anonymous_123);
			hero_stat.accept(_position__anonymous_123);
		}
	}
	public void parse__anonymous_244() {
		int _position__anonymous_244 = -1;
		Token.Parsed _token__anonymous_244 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_244=_position;
		_token__anonymous_244=_token;
		_token=new Tokens.Name.GreenToken();
		parse_FLOAT();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"colour_declaration(_anonymous_244)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_244;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_244.add(_position__anonymous_244,_token);
		}
		_token=_token__anonymous_244;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_244);
			association_names.reject(_position__anonymous_244);
			room_names.reject(_position__anonymous_244);
			activity_names.reject(_position__anonymous_244);
			siding_names.reject(_position__anonymous_244);
			item_names.reject(_position__anonymous_244);
			aspect_names.reject(_position__anonymous_244);
			affinity_names.reject(_position__anonymous_244);
			activity_type_names.reject(_position__anonymous_244);
			trail_names.reject(_position__anonymous_244);
			attack_names.reject(_position__anonymous_244);
			reason_names.reject(_position__anonymous_244);
			trait_names.reject(_position__anonymous_244);
			condition_names.reject(_position__anonymous_244);
			payment_short_type_names.reject(_position__anonymous_244);
			skill_names.reject(_position__anonymous_244);
			map_names.reject(_position__anonymous_244);
			event_names.reject(_position__anonymous_244);
			image_names.reject(_position__anonymous_244);
			tile_symbols.reject(_position__anonymous_244);
			payment_long_type_names.reject(_position__anonymous_244);
			area_names.reject(_position__anonymous_244);
			structure_names.reject(_position__anonymous_244);
			tile_names.reject(_position__anonymous_244);
			hero_stat.reject(_position__anonymous_244);
			_state=SUCCESS;
			_position__anonymous_244=_position;
			_token__anonymous_244=_token;
			_token=new Tokens.Name.GreenToken();
			parse_INTEGER();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"colour_declaration(_anonymous_244)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_244;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_244.add(_position__anonymous_244,_token);
			}
			_token=_token__anonymous_244;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_244);
				association_names.reject(_position__anonymous_244);
				room_names.reject(_position__anonymous_244);
				activity_names.reject(_position__anonymous_244);
				siding_names.reject(_position__anonymous_244);
				item_names.reject(_position__anonymous_244);
				aspect_names.reject(_position__anonymous_244);
				affinity_names.reject(_position__anonymous_244);
				activity_type_names.reject(_position__anonymous_244);
				trail_names.reject(_position__anonymous_244);
				attack_names.reject(_position__anonymous_244);
				reason_names.reject(_position__anonymous_244);
				trait_names.reject(_position__anonymous_244);
				condition_names.reject(_position__anonymous_244);
				payment_short_type_names.reject(_position__anonymous_244);
				skill_names.reject(_position__anonymous_244);
				map_names.reject(_position__anonymous_244);
				event_names.reject(_position__anonymous_244);
				image_names.reject(_position__anonymous_244);
				tile_symbols.reject(_position__anonymous_244);
				payment_long_type_names.reject(_position__anonymous_244);
				area_names.reject(_position__anonymous_244);
				structure_names.reject(_position__anonymous_244);
				tile_names.reject(_position__anonymous_244);
				hero_stat.reject(_position__anonymous_244);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_244);
				association_names.accept(_position__anonymous_244);
				room_names.accept(_position__anonymous_244);
				activity_names.accept(_position__anonymous_244);
				siding_names.accept(_position__anonymous_244);
				item_names.accept(_position__anonymous_244);
				aspect_names.accept(_position__anonymous_244);
				affinity_names.accept(_position__anonymous_244);
				activity_type_names.accept(_position__anonymous_244);
				trail_names.accept(_position__anonymous_244);
				attack_names.accept(_position__anonymous_244);
				reason_names.accept(_position__anonymous_244);
				trait_names.accept(_position__anonymous_244);
				condition_names.accept(_position__anonymous_244);
				payment_short_type_names.accept(_position__anonymous_244);
				skill_names.accept(_position__anonymous_244);
				map_names.accept(_position__anonymous_244);
				event_names.accept(_position__anonymous_244);
				image_names.accept(_position__anonymous_244);
				tile_symbols.accept(_position__anonymous_244);
				payment_long_type_names.accept(_position__anonymous_244);
				area_names.accept(_position__anonymous_244);
				structure_names.accept(_position__anonymous_244);
				tile_names.accept(_position__anonymous_244);
				hero_stat.accept(_position__anonymous_244);
			}
		}
	}
	public void parse__anonymous_64() {
		int _position__anonymous_64 = -1;
		Token.Parsed _token__anonymous_64 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_64=_position;
		_token__anonymous_64=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='-') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_15.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain -");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"state_range_element(_anonymous_64)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_64;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_64.addAll(_token);
			_token__anonymous_64.setValue(_token.getValue());
		}
		_token=_token__anonymous_64;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_64);
			association_names.reject(_position__anonymous_64);
			room_names.reject(_position__anonymous_64);
			activity_names.reject(_position__anonymous_64);
			siding_names.reject(_position__anonymous_64);
			item_names.reject(_position__anonymous_64);
			aspect_names.reject(_position__anonymous_64);
			affinity_names.reject(_position__anonymous_64);
			activity_type_names.reject(_position__anonymous_64);
			trail_names.reject(_position__anonymous_64);
			attack_names.reject(_position__anonymous_64);
			reason_names.reject(_position__anonymous_64);
			trait_names.reject(_position__anonymous_64);
			condition_names.reject(_position__anonymous_64);
			payment_short_type_names.reject(_position__anonymous_64);
			skill_names.reject(_position__anonymous_64);
			map_names.reject(_position__anonymous_64);
			event_names.reject(_position__anonymous_64);
			image_names.reject(_position__anonymous_64);
			tile_symbols.reject(_position__anonymous_64);
			payment_long_type_names.reject(_position__anonymous_64);
			area_names.reject(_position__anonymous_64);
			structure_names.reject(_position__anonymous_64);
			tile_names.reject(_position__anonymous_64);
			hero_stat.reject(_position__anonymous_64);
			_state=SUCCESS;
			_position__anonymous_64=_position;
			_token__anonymous_64=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			if(_position+2-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='.') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='.') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_55.SYNTAX);
				_position=_position+2;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ..");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"state_range_element(_anonymous_64)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_64;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_64.addAll(_token);
				_token__anonymous_64.setValue(_token.getValue());
			}
			_token=_token__anonymous_64;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_64);
				association_names.reject(_position__anonymous_64);
				room_names.reject(_position__anonymous_64);
				activity_names.reject(_position__anonymous_64);
				siding_names.reject(_position__anonymous_64);
				item_names.reject(_position__anonymous_64);
				aspect_names.reject(_position__anonymous_64);
				affinity_names.reject(_position__anonymous_64);
				activity_type_names.reject(_position__anonymous_64);
				trail_names.reject(_position__anonymous_64);
				attack_names.reject(_position__anonymous_64);
				reason_names.reject(_position__anonymous_64);
				trait_names.reject(_position__anonymous_64);
				condition_names.reject(_position__anonymous_64);
				payment_short_type_names.reject(_position__anonymous_64);
				skill_names.reject(_position__anonymous_64);
				map_names.reject(_position__anonymous_64);
				event_names.reject(_position__anonymous_64);
				image_names.reject(_position__anonymous_64);
				tile_symbols.reject(_position__anonymous_64);
				payment_long_type_names.reject(_position__anonymous_64);
				area_names.reject(_position__anonymous_64);
				structure_names.reject(_position__anonymous_64);
				tile_names.reject(_position__anonymous_64);
				hero_stat.reject(_position__anonymous_64);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_64);
				association_names.accept(_position__anonymous_64);
				room_names.accept(_position__anonymous_64);
				activity_names.accept(_position__anonymous_64);
				siding_names.accept(_position__anonymous_64);
				item_names.accept(_position__anonymous_64);
				aspect_names.accept(_position__anonymous_64);
				affinity_names.accept(_position__anonymous_64);
				activity_type_names.accept(_position__anonymous_64);
				trail_names.accept(_position__anonymous_64);
				attack_names.accept(_position__anonymous_64);
				reason_names.accept(_position__anonymous_64);
				trait_names.accept(_position__anonymous_64);
				condition_names.accept(_position__anonymous_64);
				payment_short_type_names.accept(_position__anonymous_64);
				skill_names.accept(_position__anonymous_64);
				map_names.accept(_position__anonymous_64);
				event_names.accept(_position__anonymous_64);
				image_names.accept(_position__anonymous_64);
				tile_symbols.accept(_position__anonymous_64);
				payment_long_type_names.accept(_position__anonymous_64);
				area_names.accept(_position__anonymous_64);
				structure_names.accept(_position__anonymous_64);
				tile_names.accept(_position__anonymous_64);
				hero_stat.accept(_position__anonymous_64);
			}
		}
	}
	public void parse__anonymous_124() {
		int _position__anonymous_124 = -1;
		Token.Parsed _token__anonymous_124 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_124=_position;
		_token__anonymous_124=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"std_body(_anonymous_124)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_124;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_124.addAll(_token);
			_token__anonymous_124.setValue(_token.getValue());
		}
		_token=_token__anonymous_124;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_124);
			association_names.reject(_position__anonymous_124);
			room_names.reject(_position__anonymous_124);
			activity_names.reject(_position__anonymous_124);
			siding_names.reject(_position__anonymous_124);
			item_names.reject(_position__anonymous_124);
			aspect_names.reject(_position__anonymous_124);
			affinity_names.reject(_position__anonymous_124);
			activity_type_names.reject(_position__anonymous_124);
			trail_names.reject(_position__anonymous_124);
			attack_names.reject(_position__anonymous_124);
			reason_names.reject(_position__anonymous_124);
			trait_names.reject(_position__anonymous_124);
			condition_names.reject(_position__anonymous_124);
			payment_short_type_names.reject(_position__anonymous_124);
			skill_names.reject(_position__anonymous_124);
			map_names.reject(_position__anonymous_124);
			event_names.reject(_position__anonymous_124);
			image_names.reject(_position__anonymous_124);
			tile_symbols.reject(_position__anonymous_124);
			payment_long_type_names.reject(_position__anonymous_124);
			area_names.reject(_position__anonymous_124);
			structure_names.reject(_position__anonymous_124);
			tile_names.reject(_position__anonymous_124);
			hero_stat.reject(_position__anonymous_124);
			_state=SUCCESS;
			_position__anonymous_124=_position;
			_token__anonymous_124=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			parse_comments();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"std_body(_anonymous_124)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_124;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_124.addAll(_token);
				_token__anonymous_124.setValue(_token.getValue());
			}
			_token=_token__anonymous_124;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_124);
				association_names.reject(_position__anonymous_124);
				room_names.reject(_position__anonymous_124);
				activity_names.reject(_position__anonymous_124);
				siding_names.reject(_position__anonymous_124);
				item_names.reject(_position__anonymous_124);
				aspect_names.reject(_position__anonymous_124);
				affinity_names.reject(_position__anonymous_124);
				activity_type_names.reject(_position__anonymous_124);
				trail_names.reject(_position__anonymous_124);
				attack_names.reject(_position__anonymous_124);
				reason_names.reject(_position__anonymous_124);
				trait_names.reject(_position__anonymous_124);
				condition_names.reject(_position__anonymous_124);
				payment_short_type_names.reject(_position__anonymous_124);
				skill_names.reject(_position__anonymous_124);
				map_names.reject(_position__anonymous_124);
				event_names.reject(_position__anonymous_124);
				image_names.reject(_position__anonymous_124);
				tile_symbols.reject(_position__anonymous_124);
				payment_long_type_names.reject(_position__anonymous_124);
				area_names.reject(_position__anonymous_124);
				structure_names.reject(_position__anonymous_124);
				tile_names.reject(_position__anonymous_124);
				hero_stat.reject(_position__anonymous_124);
				_state=SUCCESS;
				_position__anonymous_124=_position;
				_token__anonymous_124=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				parse_body_element();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"std_body(_anonymous_124)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_124;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_124.addAll(_token);
					_token__anonymous_124.setValue(_token.getValue());
				}
				_token=_token__anonymous_124;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_124);
					association_names.reject(_position__anonymous_124);
					room_names.reject(_position__anonymous_124);
					activity_names.reject(_position__anonymous_124);
					siding_names.reject(_position__anonymous_124);
					item_names.reject(_position__anonymous_124);
					aspect_names.reject(_position__anonymous_124);
					affinity_names.reject(_position__anonymous_124);
					activity_type_names.reject(_position__anonymous_124);
					trail_names.reject(_position__anonymous_124);
					attack_names.reject(_position__anonymous_124);
					reason_names.reject(_position__anonymous_124);
					trait_names.reject(_position__anonymous_124);
					condition_names.reject(_position__anonymous_124);
					payment_short_type_names.reject(_position__anonymous_124);
					skill_names.reject(_position__anonymous_124);
					map_names.reject(_position__anonymous_124);
					event_names.reject(_position__anonymous_124);
					image_names.reject(_position__anonymous_124);
					tile_symbols.reject(_position__anonymous_124);
					payment_long_type_names.reject(_position__anonymous_124);
					area_names.reject(_position__anonymous_124);
					structure_names.reject(_position__anonymous_124);
					tile_names.reject(_position__anonymous_124);
					hero_stat.reject(_position__anonymous_124);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_124);
					association_names.accept(_position__anonymous_124);
					room_names.accept(_position__anonymous_124);
					activity_names.accept(_position__anonymous_124);
					siding_names.accept(_position__anonymous_124);
					item_names.accept(_position__anonymous_124);
					aspect_names.accept(_position__anonymous_124);
					affinity_names.accept(_position__anonymous_124);
					activity_type_names.accept(_position__anonymous_124);
					trail_names.accept(_position__anonymous_124);
					attack_names.accept(_position__anonymous_124);
					reason_names.accept(_position__anonymous_124);
					trait_names.accept(_position__anonymous_124);
					condition_names.accept(_position__anonymous_124);
					payment_short_type_names.accept(_position__anonymous_124);
					skill_names.accept(_position__anonymous_124);
					map_names.accept(_position__anonymous_124);
					event_names.accept(_position__anonymous_124);
					image_names.accept(_position__anonymous_124);
					tile_symbols.accept(_position__anonymous_124);
					payment_long_type_names.accept(_position__anonymous_124);
					area_names.accept(_position__anonymous_124);
					structure_names.accept(_position__anonymous_124);
					tile_names.accept(_position__anonymous_124);
					hero_stat.accept(_position__anonymous_124);
				}
			}
		}
	}
	public void parse__anonymous_245() {
		int _position__anonymous_245 = -1;
		Token.Parsed _token__anonymous_245 = null;
		int _position_comments = -1;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_245=_position;
		_token__anonymous_245=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_layer(_anonymous_245)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_245;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_245.addAll(_token);
			_token__anonymous_245.setValue(_token.getValue());
		}
		_token=_token__anonymous_245;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_245);
			association_names.reject(_position__anonymous_245);
			room_names.reject(_position__anonymous_245);
			activity_names.reject(_position__anonymous_245);
			siding_names.reject(_position__anonymous_245);
			item_names.reject(_position__anonymous_245);
			aspect_names.reject(_position__anonymous_245);
			affinity_names.reject(_position__anonymous_245);
			activity_type_names.reject(_position__anonymous_245);
			trail_names.reject(_position__anonymous_245);
			attack_names.reject(_position__anonymous_245);
			reason_names.reject(_position__anonymous_245);
			trait_names.reject(_position__anonymous_245);
			condition_names.reject(_position__anonymous_245);
			payment_short_type_names.reject(_position__anonymous_245);
			skill_names.reject(_position__anonymous_245);
			map_names.reject(_position__anonymous_245);
			event_names.reject(_position__anonymous_245);
			image_names.reject(_position__anonymous_245);
			tile_symbols.reject(_position__anonymous_245);
			payment_long_type_names.reject(_position__anonymous_245);
			area_names.reject(_position__anonymous_245);
			structure_names.reject(_position__anonymous_245);
			tile_names.reject(_position__anonymous_245);
			hero_stat.reject(_position__anonymous_245);
			_state=SUCCESS;
			_position__anonymous_245=_position;
			_token__anonymous_245=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			_position_comments=_position;
			if(_state==SUCCESS&&!_recursion_protection_comments_54.contains(_position)) {
				_recursion_protection_comments_54.add(_position);
				parse_comments();
				_recursion_protection_comments_54.remove(_position_comments);
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_layer(_anonymous_245)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_245;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_245.addAll(_token);
				_token__anonymous_245.setValue(_token.getValue());
			}
			_token=_token__anonymous_245;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_245);
				association_names.reject(_position__anonymous_245);
				room_names.reject(_position__anonymous_245);
				activity_names.reject(_position__anonymous_245);
				siding_names.reject(_position__anonymous_245);
				item_names.reject(_position__anonymous_245);
				aspect_names.reject(_position__anonymous_245);
				affinity_names.reject(_position__anonymous_245);
				activity_type_names.reject(_position__anonymous_245);
				trail_names.reject(_position__anonymous_245);
				attack_names.reject(_position__anonymous_245);
				reason_names.reject(_position__anonymous_245);
				trait_names.reject(_position__anonymous_245);
				condition_names.reject(_position__anonymous_245);
				payment_short_type_names.reject(_position__anonymous_245);
				skill_names.reject(_position__anonymous_245);
				map_names.reject(_position__anonymous_245);
				event_names.reject(_position__anonymous_245);
				image_names.reject(_position__anonymous_245);
				tile_symbols.reject(_position__anonymous_245);
				payment_long_type_names.reject(_position__anonymous_245);
				area_names.reject(_position__anonymous_245);
				structure_names.reject(_position__anonymous_245);
				tile_names.reject(_position__anonymous_245);
				hero_stat.reject(_position__anonymous_245);
				_state=SUCCESS;
				_position__anonymous_245=_position;
				_token__anonymous_245=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				parse__anonymous_246();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_layer(_anonymous_245)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_245;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_245.addAll(_token);
					_token__anonymous_245.setValue(_token.getValue());
				}
				_token=_token__anonymous_245;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_245);
					association_names.reject(_position__anonymous_245);
					room_names.reject(_position__anonymous_245);
					activity_names.reject(_position__anonymous_245);
					siding_names.reject(_position__anonymous_245);
					item_names.reject(_position__anonymous_245);
					aspect_names.reject(_position__anonymous_245);
					affinity_names.reject(_position__anonymous_245);
					activity_type_names.reject(_position__anonymous_245);
					trail_names.reject(_position__anonymous_245);
					attack_names.reject(_position__anonymous_245);
					reason_names.reject(_position__anonymous_245);
					trait_names.reject(_position__anonymous_245);
					condition_names.reject(_position__anonymous_245);
					payment_short_type_names.reject(_position__anonymous_245);
					skill_names.reject(_position__anonymous_245);
					map_names.reject(_position__anonymous_245);
					event_names.reject(_position__anonymous_245);
					image_names.reject(_position__anonymous_245);
					tile_symbols.reject(_position__anonymous_245);
					payment_long_type_names.reject(_position__anonymous_245);
					area_names.reject(_position__anonymous_245);
					structure_names.reject(_position__anonymous_245);
					tile_names.reject(_position__anonymous_245);
					hero_stat.reject(_position__anonymous_245);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_245);
					association_names.accept(_position__anonymous_245);
					room_names.accept(_position__anonymous_245);
					activity_names.accept(_position__anonymous_245);
					siding_names.accept(_position__anonymous_245);
					item_names.accept(_position__anonymous_245);
					aspect_names.accept(_position__anonymous_245);
					affinity_names.accept(_position__anonymous_245);
					activity_type_names.accept(_position__anonymous_245);
					trail_names.accept(_position__anonymous_245);
					attack_names.accept(_position__anonymous_245);
					reason_names.accept(_position__anonymous_245);
					trait_names.accept(_position__anonymous_245);
					condition_names.accept(_position__anonymous_245);
					payment_short_type_names.accept(_position__anonymous_245);
					skill_names.accept(_position__anonymous_245);
					map_names.accept(_position__anonymous_245);
					event_names.accept(_position__anonymous_245);
					image_names.accept(_position__anonymous_245);
					tile_symbols.accept(_position__anonymous_245);
					payment_long_type_names.accept(_position__anonymous_245);
					area_names.accept(_position__anonymous_245);
					structure_names.accept(_position__anonymous_245);
					tile_names.accept(_position__anonymous_245);
					hero_stat.accept(_position__anonymous_245);
				}
			}
		}
	}
	public void parse__anonymous_63() {
		int _position__anonymous_63 = -1;
		Token.Parsed _token__anonymous_63 = null;
		int _position_number = -1;
		Token.Parsed _token_number = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_63=_position;
		_token__anonymous_63=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse__anonymous_64();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"state_range_element(_anonymous_63)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_63;
		}
		else {
			_token_number=_token;
			_token=new Tokens.Name.RightToken();
			_position_number=_position;
			parse_number();
			if(_state==SUCCESS) {
				_token_number.add(_position_number,_token);
			}
			_token=_token_number;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"state_range_element(_anonymous_63)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_63;
			}
			else {
				int _state_80 = _state;
				if(_position+1-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!='d') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_54.right_DAYS);
					_position=_position+1;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain d");
						_furthestPosition=_position;
					}
				}
				if(_state_80==SUCCESS&&_state==FAILED) {
					_state=SUCCESS;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"state_range_element(_anonymous_63)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_63;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_63.addAll(_token);
			_token__anonymous_63.setValue(_token.getValue());
		}
		_token=_token__anonymous_63;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_63);
			association_names.reject(_position__anonymous_63);
			room_names.reject(_position__anonymous_63);
			activity_names.reject(_position__anonymous_63);
			siding_names.reject(_position__anonymous_63);
			item_names.reject(_position__anonymous_63);
			aspect_names.reject(_position__anonymous_63);
			affinity_names.reject(_position__anonymous_63);
			activity_type_names.reject(_position__anonymous_63);
			trail_names.reject(_position__anonymous_63);
			attack_names.reject(_position__anonymous_63);
			reason_names.reject(_position__anonymous_63);
			trait_names.reject(_position__anonymous_63);
			condition_names.reject(_position__anonymous_63);
			payment_short_type_names.reject(_position__anonymous_63);
			skill_names.reject(_position__anonymous_63);
			map_names.reject(_position__anonymous_63);
			event_names.reject(_position__anonymous_63);
			image_names.reject(_position__anonymous_63);
			tile_symbols.reject(_position__anonymous_63);
			payment_long_type_names.reject(_position__anonymous_63);
			area_names.reject(_position__anonymous_63);
			structure_names.reject(_position__anonymous_63);
			tile_names.reject(_position__anonymous_63);
			hero_stat.reject(_position__anonymous_63);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_63);
			association_names.accept(_position__anonymous_63);
			room_names.accept(_position__anonymous_63);
			activity_names.accept(_position__anonymous_63);
			siding_names.accept(_position__anonymous_63);
			item_names.accept(_position__anonymous_63);
			aspect_names.accept(_position__anonymous_63);
			affinity_names.accept(_position__anonymous_63);
			activity_type_names.accept(_position__anonymous_63);
			trail_names.accept(_position__anonymous_63);
			attack_names.accept(_position__anonymous_63);
			reason_names.accept(_position__anonymous_63);
			trait_names.accept(_position__anonymous_63);
			condition_names.accept(_position__anonymous_63);
			payment_short_type_names.accept(_position__anonymous_63);
			skill_names.accept(_position__anonymous_63);
			map_names.accept(_position__anonymous_63);
			event_names.accept(_position__anonymous_63);
			image_names.accept(_position__anonymous_63);
			tile_symbols.accept(_position__anonymous_63);
			payment_long_type_names.accept(_position__anonymous_63);
			area_names.accept(_position__anonymous_63);
			structure_names.accept(_position__anonymous_63);
			tile_names.accept(_position__anonymous_63);
			hero_stat.accept(_position__anonymous_63);
		}
	}
	public void parse__anonymous_125() {
		int _position__anonymous_125 = -1;
		Token.Parsed _token__anonymous_125 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_125=_position;
		_token__anonymous_125=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!=',') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_23.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ,");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"method_arguments(_anonymous_125)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_125;
		}
		else {
			int _state_160 = _state;
			while(_position<_inputLength) {
				if(_position+1-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
					_position=_position+1;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
						_furthestPosition=_position;
					}
				}
				if(_state==FAILED) {
					break;
				}
			}
			if(_state_160==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"method_arguments(_anonymous_125)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_125;
			}
			else {
				parse_statement();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"method_arguments(_anonymous_125)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_125;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_125.addAll(_token);
			_token__anonymous_125.setValue(_token.getValue());
		}
		_token=_token__anonymous_125;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_125);
			association_names.reject(_position__anonymous_125);
			room_names.reject(_position__anonymous_125);
			activity_names.reject(_position__anonymous_125);
			siding_names.reject(_position__anonymous_125);
			item_names.reject(_position__anonymous_125);
			aspect_names.reject(_position__anonymous_125);
			affinity_names.reject(_position__anonymous_125);
			activity_type_names.reject(_position__anonymous_125);
			trail_names.reject(_position__anonymous_125);
			attack_names.reject(_position__anonymous_125);
			reason_names.reject(_position__anonymous_125);
			trait_names.reject(_position__anonymous_125);
			condition_names.reject(_position__anonymous_125);
			payment_short_type_names.reject(_position__anonymous_125);
			skill_names.reject(_position__anonymous_125);
			map_names.reject(_position__anonymous_125);
			event_names.reject(_position__anonymous_125);
			image_names.reject(_position__anonymous_125);
			tile_symbols.reject(_position__anonymous_125);
			payment_long_type_names.reject(_position__anonymous_125);
			area_names.reject(_position__anonymous_125);
			structure_names.reject(_position__anonymous_125);
			tile_names.reject(_position__anonymous_125);
			hero_stat.reject(_position__anonymous_125);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_125);
			association_names.accept(_position__anonymous_125);
			room_names.accept(_position__anonymous_125);
			activity_names.accept(_position__anonymous_125);
			siding_names.accept(_position__anonymous_125);
			item_names.accept(_position__anonymous_125);
			aspect_names.accept(_position__anonymous_125);
			affinity_names.accept(_position__anonymous_125);
			activity_type_names.accept(_position__anonymous_125);
			trail_names.accept(_position__anonymous_125);
			attack_names.accept(_position__anonymous_125);
			reason_names.accept(_position__anonymous_125);
			trait_names.accept(_position__anonymous_125);
			condition_names.accept(_position__anonymous_125);
			payment_short_type_names.accept(_position__anonymous_125);
			skill_names.accept(_position__anonymous_125);
			map_names.accept(_position__anonymous_125);
			event_names.accept(_position__anonymous_125);
			image_names.accept(_position__anonymous_125);
			tile_symbols.accept(_position__anonymous_125);
			payment_long_type_names.accept(_position__anonymous_125);
			area_names.accept(_position__anonymous_125);
			structure_names.accept(_position__anonymous_125);
			tile_names.accept(_position__anonymous_125);
			hero_stat.accept(_position__anonymous_125);
		}
	}
	public void parse__anonymous_246() {
		int _position__anonymous_246 = -1;
		Token.Parsed _token__anonymous_246 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_246=_position;
		_token__anonymous_246=_token;
		_token=new Tokens.Name.LayerDeclarationToken();
		_token_NAME=_token;
		_token=new Tokens.Name.LayerNameToken();
		_position_NAME=_position;
		if(_state==SUCCESS&&!_recursion_protection_NAME_55.contains(_position)) {
			_recursion_protection_NAME_55.add(_position);
			parse_NAME();
			_recursion_protection_NAME_55.remove(_position_NAME);
		}
		else {
			_state=FAILED;
		}
		if(_state==SUCCESS) {
			_token_NAME.add(_position_NAME,_token);
		}
		_token=_token_NAME;
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_layer(_anonymous_246)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_246;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_246.add(_position__anonymous_246,_token);
		}
		_token=_token__anonymous_246;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_246);
			association_names.reject(_position__anonymous_246);
			room_names.reject(_position__anonymous_246);
			activity_names.reject(_position__anonymous_246);
			siding_names.reject(_position__anonymous_246);
			item_names.reject(_position__anonymous_246);
			aspect_names.reject(_position__anonymous_246);
			affinity_names.reject(_position__anonymous_246);
			activity_type_names.reject(_position__anonymous_246);
			trail_names.reject(_position__anonymous_246);
			attack_names.reject(_position__anonymous_246);
			reason_names.reject(_position__anonymous_246);
			trait_names.reject(_position__anonymous_246);
			condition_names.reject(_position__anonymous_246);
			payment_short_type_names.reject(_position__anonymous_246);
			skill_names.reject(_position__anonymous_246);
			map_names.reject(_position__anonymous_246);
			event_names.reject(_position__anonymous_246);
			image_names.reject(_position__anonymous_246);
			tile_symbols.reject(_position__anonymous_246);
			payment_long_type_names.reject(_position__anonymous_246);
			area_names.reject(_position__anonymous_246);
			structure_names.reject(_position__anonymous_246);
			tile_names.reject(_position__anonymous_246);
			hero_stat.reject(_position__anonymous_246);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_246);
			association_names.accept(_position__anonymous_246);
			room_names.accept(_position__anonymous_246);
			activity_names.accept(_position__anonymous_246);
			siding_names.accept(_position__anonymous_246);
			item_names.accept(_position__anonymous_246);
			aspect_names.accept(_position__anonymous_246);
			affinity_names.accept(_position__anonymous_246);
			activity_type_names.accept(_position__anonymous_246);
			trail_names.accept(_position__anonymous_246);
			attack_names.accept(_position__anonymous_246);
			reason_names.accept(_position__anonymous_246);
			trait_names.accept(_position__anonymous_246);
			condition_names.accept(_position__anonymous_246);
			payment_short_type_names.accept(_position__anonymous_246);
			skill_names.accept(_position__anonymous_246);
			map_names.accept(_position__anonymous_246);
			event_names.accept(_position__anonymous_246);
			image_names.accept(_position__anonymous_246);
			tile_symbols.accept(_position__anonymous_246);
			payment_long_type_names.accept(_position__anonymous_246);
			area_names.accept(_position__anonymous_246);
			structure_names.accept(_position__anonymous_246);
			tile_names.accept(_position__anonymous_246);
			hero_stat.accept(_position__anonymous_246);
		}
	}
	public void parse__anonymous_55() {
		int _position__anonymous_55 = -1;
		Token.Parsed _token__anonymous_55 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_55=_position;
		_token__anonymous_55=_token;
		_token=new Tokens.Name.MissToken();
		if(_position+4-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='m') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='i') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='s') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='s') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_44.SYNTAX);
			_position=_position+4;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain miss");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"skill_element(_anonymous_55)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_55;
		}
		else {
			int _state_67 = _state;
			while(_position<_inputLength) {
				parse__anonymous_56();
				if(_state==FAILED) {
					break;
				}
			}
			if(_state_67==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"skill_element(_anonymous_55)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_55;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_55.add(_position__anonymous_55,_token);
		}
		_token=_token__anonymous_55;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_55);
			association_names.reject(_position__anonymous_55);
			room_names.reject(_position__anonymous_55);
			activity_names.reject(_position__anonymous_55);
			siding_names.reject(_position__anonymous_55);
			item_names.reject(_position__anonymous_55);
			aspect_names.reject(_position__anonymous_55);
			affinity_names.reject(_position__anonymous_55);
			activity_type_names.reject(_position__anonymous_55);
			trail_names.reject(_position__anonymous_55);
			attack_names.reject(_position__anonymous_55);
			reason_names.reject(_position__anonymous_55);
			trait_names.reject(_position__anonymous_55);
			condition_names.reject(_position__anonymous_55);
			payment_short_type_names.reject(_position__anonymous_55);
			skill_names.reject(_position__anonymous_55);
			map_names.reject(_position__anonymous_55);
			event_names.reject(_position__anonymous_55);
			image_names.reject(_position__anonymous_55);
			tile_symbols.reject(_position__anonymous_55);
			payment_long_type_names.reject(_position__anonymous_55);
			area_names.reject(_position__anonymous_55);
			structure_names.reject(_position__anonymous_55);
			tile_names.reject(_position__anonymous_55);
			hero_stat.reject(_position__anonymous_55);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_55);
			association_names.accept(_position__anonymous_55);
			room_names.accept(_position__anonymous_55);
			activity_names.accept(_position__anonymous_55);
			siding_names.accept(_position__anonymous_55);
			item_names.accept(_position__anonymous_55);
			aspect_names.accept(_position__anonymous_55);
			affinity_names.accept(_position__anonymous_55);
			activity_type_names.accept(_position__anonymous_55);
			trail_names.accept(_position__anonymous_55);
			attack_names.accept(_position__anonymous_55);
			reason_names.accept(_position__anonymous_55);
			trait_names.accept(_position__anonymous_55);
			condition_names.accept(_position__anonymous_55);
			payment_short_type_names.accept(_position__anonymous_55);
			skill_names.accept(_position__anonymous_55);
			map_names.accept(_position__anonymous_55);
			event_names.accept(_position__anonymous_55);
			image_names.accept(_position__anonymous_55);
			tile_symbols.accept(_position__anonymous_55);
			payment_long_type_names.accept(_position__anonymous_55);
			area_names.accept(_position__anonymous_55);
			structure_names.accept(_position__anonymous_55);
			tile_names.accept(_position__anonymous_55);
			hero_stat.accept(_position__anonymous_55);
		}
	}
	public void parse__anonymous_54() {
		int _position__anonymous_54 = -1;
		Token.Parsed _token__anonymous_54 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_54=_position;
		_token__anonymous_54=_token;
		_token=new Tokens.Name.CooldownToken();
		if(_position+2-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='c') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='d') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_40.SYNTAX);
			_position=_position+2;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain cd");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"skill_element(_anonymous_54)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_54;
		}
		else {
			parse_stat_range();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"skill_element(_anonymous_54)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_54;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_54.add(_position__anonymous_54,_token);
		}
		_token=_token__anonymous_54;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_54);
			association_names.reject(_position__anonymous_54);
			room_names.reject(_position__anonymous_54);
			activity_names.reject(_position__anonymous_54);
			siding_names.reject(_position__anonymous_54);
			item_names.reject(_position__anonymous_54);
			aspect_names.reject(_position__anonymous_54);
			affinity_names.reject(_position__anonymous_54);
			activity_type_names.reject(_position__anonymous_54);
			trail_names.reject(_position__anonymous_54);
			attack_names.reject(_position__anonymous_54);
			reason_names.reject(_position__anonymous_54);
			trait_names.reject(_position__anonymous_54);
			condition_names.reject(_position__anonymous_54);
			payment_short_type_names.reject(_position__anonymous_54);
			skill_names.reject(_position__anonymous_54);
			map_names.reject(_position__anonymous_54);
			event_names.reject(_position__anonymous_54);
			image_names.reject(_position__anonymous_54);
			tile_symbols.reject(_position__anonymous_54);
			payment_long_type_names.reject(_position__anonymous_54);
			area_names.reject(_position__anonymous_54);
			structure_names.reject(_position__anonymous_54);
			tile_names.reject(_position__anonymous_54);
			hero_stat.reject(_position__anonymous_54);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_54);
			association_names.accept(_position__anonymous_54);
			room_names.accept(_position__anonymous_54);
			activity_names.accept(_position__anonymous_54);
			siding_names.accept(_position__anonymous_54);
			item_names.accept(_position__anonymous_54);
			aspect_names.accept(_position__anonymous_54);
			affinity_names.accept(_position__anonymous_54);
			activity_type_names.accept(_position__anonymous_54);
			trail_names.accept(_position__anonymous_54);
			attack_names.accept(_position__anonymous_54);
			reason_names.accept(_position__anonymous_54);
			trait_names.accept(_position__anonymous_54);
			condition_names.accept(_position__anonymous_54);
			payment_short_type_names.accept(_position__anonymous_54);
			skill_names.accept(_position__anonymous_54);
			map_names.accept(_position__anonymous_54);
			event_names.accept(_position__anonymous_54);
			image_names.accept(_position__anonymous_54);
			tile_symbols.accept(_position__anonymous_54);
			payment_long_type_names.accept(_position__anonymous_54);
			area_names.accept(_position__anonymous_54);
			structure_names.accept(_position__anonymous_54);
			tile_names.accept(_position__anonymous_54);
			hero_stat.accept(_position__anonymous_54);
		}
	}
	public void parse__anonymous_240() {
		int _position__anonymous_240 = -1;
		Token.Parsed _token__anonymous_240 = null;
		int _position_INTEGER = -1;
		Token.Parsed _token_INTEGER = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_240=_position;
		_token__anonymous_240=_token;
		_token=new Tokens.Name.AsIntToken();
		_token_INTEGER=_token;
		_token=new Tokens.Name.RedToken();
		_position_INTEGER=_position;
		parse_INTEGER();
		if(_state==SUCCESS) {
			_token_INTEGER.add(_position_INTEGER,_token);
		}
		_token=_token_INTEGER;
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"colour_declaration(_anonymous_240)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_240;
		}
		else {
			_token_INTEGER=_token;
			_token=new Tokens.Name.BlueToken();
			_position_INTEGER=_position;
			parse_INTEGER();
			if(_state==SUCCESS) {
				_token_INTEGER.add(_position_INTEGER,_token);
			}
			_token=_token_INTEGER;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"colour_declaration(_anonymous_240)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_240;
			}
			else {
				_token_INTEGER=_token;
				_token=new Tokens.Name.GreenToken();
				_position_INTEGER=_position;
				parse_INTEGER();
				if(_state==SUCCESS) {
					_token_INTEGER.add(_position_INTEGER,_token);
				}
				_token=_token_INTEGER;
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"colour_declaration(_anonymous_240)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_240;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_240.add(_position__anonymous_240,_token);
		}
		_token=_token__anonymous_240;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_240);
			association_names.reject(_position__anonymous_240);
			room_names.reject(_position__anonymous_240);
			activity_names.reject(_position__anonymous_240);
			siding_names.reject(_position__anonymous_240);
			item_names.reject(_position__anonymous_240);
			aspect_names.reject(_position__anonymous_240);
			affinity_names.reject(_position__anonymous_240);
			activity_type_names.reject(_position__anonymous_240);
			trail_names.reject(_position__anonymous_240);
			attack_names.reject(_position__anonymous_240);
			reason_names.reject(_position__anonymous_240);
			trait_names.reject(_position__anonymous_240);
			condition_names.reject(_position__anonymous_240);
			payment_short_type_names.reject(_position__anonymous_240);
			skill_names.reject(_position__anonymous_240);
			map_names.reject(_position__anonymous_240);
			event_names.reject(_position__anonymous_240);
			image_names.reject(_position__anonymous_240);
			tile_symbols.reject(_position__anonymous_240);
			payment_long_type_names.reject(_position__anonymous_240);
			area_names.reject(_position__anonymous_240);
			structure_names.reject(_position__anonymous_240);
			tile_names.reject(_position__anonymous_240);
			hero_stat.reject(_position__anonymous_240);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_240);
			association_names.accept(_position__anonymous_240);
			room_names.accept(_position__anonymous_240);
			activity_names.accept(_position__anonymous_240);
			siding_names.accept(_position__anonymous_240);
			item_names.accept(_position__anonymous_240);
			aspect_names.accept(_position__anonymous_240);
			affinity_names.accept(_position__anonymous_240);
			activity_type_names.accept(_position__anonymous_240);
			trail_names.accept(_position__anonymous_240);
			attack_names.accept(_position__anonymous_240);
			reason_names.accept(_position__anonymous_240);
			trait_names.accept(_position__anonymous_240);
			condition_names.accept(_position__anonymous_240);
			payment_short_type_names.accept(_position__anonymous_240);
			skill_names.accept(_position__anonymous_240);
			map_names.accept(_position__anonymous_240);
			event_names.accept(_position__anonymous_240);
			image_names.accept(_position__anonymous_240);
			tile_symbols.accept(_position__anonymous_240);
			payment_long_type_names.accept(_position__anonymous_240);
			area_names.accept(_position__anonymous_240);
			structure_names.accept(_position__anonymous_240);
			tile_names.accept(_position__anonymous_240);
			hero_stat.accept(_position__anonymous_240);
		}
	}
	public void parse__anonymous_57() {
		int _position__anonymous_57 = -1;
		Token.Parsed _token__anonymous_57 = null;
		int _position_comments = -1;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_57=_position;
		_token__anonymous_57=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		_position_comments=_position;
		if(_state==SUCCESS&&!_recursion_protection_comments_21.contains(_position)) {
			_recursion_protection_comments_21.add(_position);
			parse_comments();
			_recursion_protection_comments_21.remove(_position_comments);
		}
		else {
			_state=FAILED;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_association(_anonymous_57)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_57;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_57.addAll(_token);
			_token__anonymous_57.setValue(_token.getValue());
		}
		_token=_token__anonymous_57;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_57);
			association_names.reject(_position__anonymous_57);
			room_names.reject(_position__anonymous_57);
			activity_names.reject(_position__anonymous_57);
			siding_names.reject(_position__anonymous_57);
			item_names.reject(_position__anonymous_57);
			aspect_names.reject(_position__anonymous_57);
			affinity_names.reject(_position__anonymous_57);
			activity_type_names.reject(_position__anonymous_57);
			trail_names.reject(_position__anonymous_57);
			attack_names.reject(_position__anonymous_57);
			reason_names.reject(_position__anonymous_57);
			trait_names.reject(_position__anonymous_57);
			condition_names.reject(_position__anonymous_57);
			payment_short_type_names.reject(_position__anonymous_57);
			skill_names.reject(_position__anonymous_57);
			map_names.reject(_position__anonymous_57);
			event_names.reject(_position__anonymous_57);
			image_names.reject(_position__anonymous_57);
			tile_symbols.reject(_position__anonymous_57);
			payment_long_type_names.reject(_position__anonymous_57);
			area_names.reject(_position__anonymous_57);
			structure_names.reject(_position__anonymous_57);
			tile_names.reject(_position__anonymous_57);
			hero_stat.reject(_position__anonymous_57);
			_state=SUCCESS;
			_position__anonymous_57=_position;
			_token__anonymous_57=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			parse_association_declaration();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_association(_anonymous_57)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_57;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_57.addAll(_token);
				_token__anonymous_57.setValue(_token.getValue());
			}
			_token=_token__anonymous_57;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_57);
				association_names.reject(_position__anonymous_57);
				room_names.reject(_position__anonymous_57);
				activity_names.reject(_position__anonymous_57);
				siding_names.reject(_position__anonymous_57);
				item_names.reject(_position__anonymous_57);
				aspect_names.reject(_position__anonymous_57);
				affinity_names.reject(_position__anonymous_57);
				activity_type_names.reject(_position__anonymous_57);
				trail_names.reject(_position__anonymous_57);
				attack_names.reject(_position__anonymous_57);
				reason_names.reject(_position__anonymous_57);
				trait_names.reject(_position__anonymous_57);
				condition_names.reject(_position__anonymous_57);
				payment_short_type_names.reject(_position__anonymous_57);
				skill_names.reject(_position__anonymous_57);
				map_names.reject(_position__anonymous_57);
				event_names.reject(_position__anonymous_57);
				image_names.reject(_position__anonymous_57);
				tile_symbols.reject(_position__anonymous_57);
				payment_long_type_names.reject(_position__anonymous_57);
				area_names.reject(_position__anonymous_57);
				structure_names.reject(_position__anonymous_57);
				tile_names.reject(_position__anonymous_57);
				hero_stat.reject(_position__anonymous_57);
				_state=SUCCESS;
				_position__anonymous_57=_position;
				_token__anonymous_57=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				if(_position+1-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
					_position=_position+1;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
						_furthestPosition=_position;
					}
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_association(_anonymous_57)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_57;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_57.addAll(_token);
					_token__anonymous_57.setValue(_token.getValue());
				}
				_token=_token__anonymous_57;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_57);
					association_names.reject(_position__anonymous_57);
					room_names.reject(_position__anonymous_57);
					activity_names.reject(_position__anonymous_57);
					siding_names.reject(_position__anonymous_57);
					item_names.reject(_position__anonymous_57);
					aspect_names.reject(_position__anonymous_57);
					affinity_names.reject(_position__anonymous_57);
					activity_type_names.reject(_position__anonymous_57);
					trail_names.reject(_position__anonymous_57);
					attack_names.reject(_position__anonymous_57);
					reason_names.reject(_position__anonymous_57);
					trait_names.reject(_position__anonymous_57);
					condition_names.reject(_position__anonymous_57);
					payment_short_type_names.reject(_position__anonymous_57);
					skill_names.reject(_position__anonymous_57);
					map_names.reject(_position__anonymous_57);
					event_names.reject(_position__anonymous_57);
					image_names.reject(_position__anonymous_57);
					tile_symbols.reject(_position__anonymous_57);
					payment_long_type_names.reject(_position__anonymous_57);
					area_names.reject(_position__anonymous_57);
					structure_names.reject(_position__anonymous_57);
					tile_names.reject(_position__anonymous_57);
					hero_stat.reject(_position__anonymous_57);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_57);
					association_names.accept(_position__anonymous_57);
					room_names.accept(_position__anonymous_57);
					activity_names.accept(_position__anonymous_57);
					siding_names.accept(_position__anonymous_57);
					item_names.accept(_position__anonymous_57);
					aspect_names.accept(_position__anonymous_57);
					affinity_names.accept(_position__anonymous_57);
					activity_type_names.accept(_position__anonymous_57);
					trail_names.accept(_position__anonymous_57);
					attack_names.accept(_position__anonymous_57);
					reason_names.accept(_position__anonymous_57);
					trait_names.accept(_position__anonymous_57);
					condition_names.accept(_position__anonymous_57);
					payment_short_type_names.accept(_position__anonymous_57);
					skill_names.accept(_position__anonymous_57);
					map_names.accept(_position__anonymous_57);
					event_names.accept(_position__anonymous_57);
					image_names.accept(_position__anonymous_57);
					tile_symbols.accept(_position__anonymous_57);
					payment_long_type_names.accept(_position__anonymous_57);
					area_names.accept(_position__anonymous_57);
					structure_names.accept(_position__anonymous_57);
					tile_names.accept(_position__anonymous_57);
					hero_stat.accept(_position__anonymous_57);
				}
			}
		}
	}
	public void parse__anonymous_120() {
		int _position__anonymous_120 = -1;
		Token.Parsed _token__anonymous_120 = null;
		int _position_comments = -1;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_120=_position;
		_token__anonymous_120=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_event(_anonymous_120)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_120;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_120.addAll(_token);
			_token__anonymous_120.setValue(_token.getValue());
		}
		_token=_token__anonymous_120;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_120);
			association_names.reject(_position__anonymous_120);
			room_names.reject(_position__anonymous_120);
			activity_names.reject(_position__anonymous_120);
			siding_names.reject(_position__anonymous_120);
			item_names.reject(_position__anonymous_120);
			aspect_names.reject(_position__anonymous_120);
			affinity_names.reject(_position__anonymous_120);
			activity_type_names.reject(_position__anonymous_120);
			trail_names.reject(_position__anonymous_120);
			attack_names.reject(_position__anonymous_120);
			reason_names.reject(_position__anonymous_120);
			trait_names.reject(_position__anonymous_120);
			condition_names.reject(_position__anonymous_120);
			payment_short_type_names.reject(_position__anonymous_120);
			skill_names.reject(_position__anonymous_120);
			map_names.reject(_position__anonymous_120);
			event_names.reject(_position__anonymous_120);
			image_names.reject(_position__anonymous_120);
			tile_symbols.reject(_position__anonymous_120);
			payment_long_type_names.reject(_position__anonymous_120);
			area_names.reject(_position__anonymous_120);
			structure_names.reject(_position__anonymous_120);
			tile_names.reject(_position__anonymous_120);
			hero_stat.reject(_position__anonymous_120);
			_state=SUCCESS;
			_position__anonymous_120=_position;
			_token__anonymous_120=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			_position_comments=_position;
			if(_state==SUCCESS&&!_recursion_protection_comments_33.contains(_position)) {
				_recursion_protection_comments_33.add(_position);
				parse_comments();
				_recursion_protection_comments_33.remove(_position_comments);
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_event(_anonymous_120)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_120;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_120.addAll(_token);
				_token__anonymous_120.setValue(_token.getValue());
			}
			_token=_token__anonymous_120;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_120);
				association_names.reject(_position__anonymous_120);
				room_names.reject(_position__anonymous_120);
				activity_names.reject(_position__anonymous_120);
				siding_names.reject(_position__anonymous_120);
				item_names.reject(_position__anonymous_120);
				aspect_names.reject(_position__anonymous_120);
				affinity_names.reject(_position__anonymous_120);
				activity_type_names.reject(_position__anonymous_120);
				trail_names.reject(_position__anonymous_120);
				attack_names.reject(_position__anonymous_120);
				reason_names.reject(_position__anonymous_120);
				trait_names.reject(_position__anonymous_120);
				condition_names.reject(_position__anonymous_120);
				payment_short_type_names.reject(_position__anonymous_120);
				skill_names.reject(_position__anonymous_120);
				map_names.reject(_position__anonymous_120);
				event_names.reject(_position__anonymous_120);
				image_names.reject(_position__anonymous_120);
				tile_symbols.reject(_position__anonymous_120);
				payment_long_type_names.reject(_position__anonymous_120);
				area_names.reject(_position__anonymous_120);
				structure_names.reject(_position__anonymous_120);
				tile_names.reject(_position__anonymous_120);
				hero_stat.reject(_position__anonymous_120);
				_state=SUCCESS;
				_position__anonymous_120=_position;
				_token__anonymous_120=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				parse_event_declaration();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_event(_anonymous_120)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_120;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_120.addAll(_token);
					_token__anonymous_120.setValue(_token.getValue());
				}
				_token=_token__anonymous_120;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_120);
					association_names.reject(_position__anonymous_120);
					room_names.reject(_position__anonymous_120);
					activity_names.reject(_position__anonymous_120);
					siding_names.reject(_position__anonymous_120);
					item_names.reject(_position__anonymous_120);
					aspect_names.reject(_position__anonymous_120);
					affinity_names.reject(_position__anonymous_120);
					activity_type_names.reject(_position__anonymous_120);
					trail_names.reject(_position__anonymous_120);
					attack_names.reject(_position__anonymous_120);
					reason_names.reject(_position__anonymous_120);
					trait_names.reject(_position__anonymous_120);
					condition_names.reject(_position__anonymous_120);
					payment_short_type_names.reject(_position__anonymous_120);
					skill_names.reject(_position__anonymous_120);
					map_names.reject(_position__anonymous_120);
					event_names.reject(_position__anonymous_120);
					image_names.reject(_position__anonymous_120);
					tile_symbols.reject(_position__anonymous_120);
					payment_long_type_names.reject(_position__anonymous_120);
					area_names.reject(_position__anonymous_120);
					structure_names.reject(_position__anonymous_120);
					tile_names.reject(_position__anonymous_120);
					hero_stat.reject(_position__anonymous_120);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_120);
					association_names.accept(_position__anonymous_120);
					room_names.accept(_position__anonymous_120);
					activity_names.accept(_position__anonymous_120);
					siding_names.accept(_position__anonymous_120);
					item_names.accept(_position__anonymous_120);
					aspect_names.accept(_position__anonymous_120);
					affinity_names.accept(_position__anonymous_120);
					activity_type_names.accept(_position__anonymous_120);
					trail_names.accept(_position__anonymous_120);
					attack_names.accept(_position__anonymous_120);
					reason_names.accept(_position__anonymous_120);
					trait_names.accept(_position__anonymous_120);
					condition_names.accept(_position__anonymous_120);
					payment_short_type_names.accept(_position__anonymous_120);
					skill_names.accept(_position__anonymous_120);
					map_names.accept(_position__anonymous_120);
					event_names.accept(_position__anonymous_120);
					image_names.accept(_position__anonymous_120);
					tile_symbols.accept(_position__anonymous_120);
					payment_long_type_names.accept(_position__anonymous_120);
					area_names.accept(_position__anonymous_120);
					structure_names.accept(_position__anonymous_120);
					tile_names.accept(_position__anonymous_120);
					hero_stat.accept(_position__anonymous_120);
				}
			}
		}
	}
	public void parse__anonymous_241() {
		int _position__anonymous_241 = -1;
		Token.Parsed _token__anonymous_241 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_241=_position;
		_token__anonymous_241=_token;
		_token=new Tokens.Name.AsFloatToken();
		parse__anonymous_242();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"colour_declaration(_anonymous_241)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_241;
		}
		else {
			parse__anonymous_243();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"colour_declaration(_anonymous_241)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_241;
			}
			else {
				parse__anonymous_244();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"colour_declaration(_anonymous_241)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_241;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_241.add(_position__anonymous_241,_token);
		}
		_token=_token__anonymous_241;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_241);
			association_names.reject(_position__anonymous_241);
			room_names.reject(_position__anonymous_241);
			activity_names.reject(_position__anonymous_241);
			siding_names.reject(_position__anonymous_241);
			item_names.reject(_position__anonymous_241);
			aspect_names.reject(_position__anonymous_241);
			affinity_names.reject(_position__anonymous_241);
			activity_type_names.reject(_position__anonymous_241);
			trail_names.reject(_position__anonymous_241);
			attack_names.reject(_position__anonymous_241);
			reason_names.reject(_position__anonymous_241);
			trait_names.reject(_position__anonymous_241);
			condition_names.reject(_position__anonymous_241);
			payment_short_type_names.reject(_position__anonymous_241);
			skill_names.reject(_position__anonymous_241);
			map_names.reject(_position__anonymous_241);
			event_names.reject(_position__anonymous_241);
			image_names.reject(_position__anonymous_241);
			tile_symbols.reject(_position__anonymous_241);
			payment_long_type_names.reject(_position__anonymous_241);
			area_names.reject(_position__anonymous_241);
			structure_names.reject(_position__anonymous_241);
			tile_names.reject(_position__anonymous_241);
			hero_stat.reject(_position__anonymous_241);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_241);
			association_names.accept(_position__anonymous_241);
			room_names.accept(_position__anonymous_241);
			activity_names.accept(_position__anonymous_241);
			siding_names.accept(_position__anonymous_241);
			item_names.accept(_position__anonymous_241);
			aspect_names.accept(_position__anonymous_241);
			affinity_names.accept(_position__anonymous_241);
			activity_type_names.accept(_position__anonymous_241);
			trail_names.accept(_position__anonymous_241);
			attack_names.accept(_position__anonymous_241);
			reason_names.accept(_position__anonymous_241);
			trait_names.accept(_position__anonymous_241);
			condition_names.accept(_position__anonymous_241);
			payment_short_type_names.accept(_position__anonymous_241);
			skill_names.accept(_position__anonymous_241);
			map_names.accept(_position__anonymous_241);
			event_names.accept(_position__anonymous_241);
			image_names.accept(_position__anonymous_241);
			tile_symbols.accept(_position__anonymous_241);
			payment_long_type_names.accept(_position__anonymous_241);
			area_names.accept(_position__anonymous_241);
			structure_names.accept(_position__anonymous_241);
			tile_names.accept(_position__anonymous_241);
			hero_stat.accept(_position__anonymous_241);
		}
	}
	public void parse__anonymous_56() {
		int _position__anonymous_56 = -1;
		Token.Parsed _token__anonymous_56 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_56=_position;
		_token__anonymous_56=_token;
		_token=new Tokens.Name.OptionToken();
		int _state_68 = _state;
		while(_position<_inputLength) {
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				break;
			}
		}
		if(_state_68==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"skill_element(_anonymous_56)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_56;
		}
		else {
			parse_conditional_chance();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"skill_element(_anonymous_56)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_56;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_56.add(_position__anonymous_56,_token);
		}
		_token=_token__anonymous_56;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_56);
			association_names.reject(_position__anonymous_56);
			room_names.reject(_position__anonymous_56);
			activity_names.reject(_position__anonymous_56);
			siding_names.reject(_position__anonymous_56);
			item_names.reject(_position__anonymous_56);
			aspect_names.reject(_position__anonymous_56);
			affinity_names.reject(_position__anonymous_56);
			activity_type_names.reject(_position__anonymous_56);
			trail_names.reject(_position__anonymous_56);
			attack_names.reject(_position__anonymous_56);
			reason_names.reject(_position__anonymous_56);
			trait_names.reject(_position__anonymous_56);
			condition_names.reject(_position__anonymous_56);
			payment_short_type_names.reject(_position__anonymous_56);
			skill_names.reject(_position__anonymous_56);
			map_names.reject(_position__anonymous_56);
			event_names.reject(_position__anonymous_56);
			image_names.reject(_position__anonymous_56);
			tile_symbols.reject(_position__anonymous_56);
			payment_long_type_names.reject(_position__anonymous_56);
			area_names.reject(_position__anonymous_56);
			structure_names.reject(_position__anonymous_56);
			tile_names.reject(_position__anonymous_56);
			hero_stat.reject(_position__anonymous_56);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_56);
			association_names.accept(_position__anonymous_56);
			room_names.accept(_position__anonymous_56);
			activity_names.accept(_position__anonymous_56);
			siding_names.accept(_position__anonymous_56);
			item_names.accept(_position__anonymous_56);
			aspect_names.accept(_position__anonymous_56);
			affinity_names.accept(_position__anonymous_56);
			activity_type_names.accept(_position__anonymous_56);
			trail_names.accept(_position__anonymous_56);
			attack_names.accept(_position__anonymous_56);
			reason_names.accept(_position__anonymous_56);
			trait_names.accept(_position__anonymous_56);
			condition_names.accept(_position__anonymous_56);
			payment_short_type_names.accept(_position__anonymous_56);
			skill_names.accept(_position__anonymous_56);
			map_names.accept(_position__anonymous_56);
			event_names.accept(_position__anonymous_56);
			image_names.accept(_position__anonymous_56);
			tile_symbols.accept(_position__anonymous_56);
			payment_long_type_names.accept(_position__anonymous_56);
			area_names.accept(_position__anonymous_56);
			structure_names.accept(_position__anonymous_56);
			tile_names.accept(_position__anonymous_56);
			hero_stat.accept(_position__anonymous_56);
		}
	}
	public void parse__anonymous_121() {
		int _position__anonymous_121 = -1;
		Token.Parsed _token__anonymous_121 = null;
		int _position_comments = -1;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_121=_position;
		_token__anonymous_121=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		_position_comments=_position;
		if(_state==SUCCESS&&!_recursion_protection_comments_35.contains(_position)) {
			_recursion_protection_comments_35.add(_position);
			parse_comments();
			_recursion_protection_comments_35.remove(_position_comments);
		}
		else {
			_state=FAILED;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"event_declaration(_anonymous_121)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_121;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_121.addAll(_token);
			_token__anonymous_121.setValue(_token.getValue());
		}
		_token=_token__anonymous_121;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_121);
			association_names.reject(_position__anonymous_121);
			room_names.reject(_position__anonymous_121);
			activity_names.reject(_position__anonymous_121);
			siding_names.reject(_position__anonymous_121);
			item_names.reject(_position__anonymous_121);
			aspect_names.reject(_position__anonymous_121);
			affinity_names.reject(_position__anonymous_121);
			activity_type_names.reject(_position__anonymous_121);
			trail_names.reject(_position__anonymous_121);
			attack_names.reject(_position__anonymous_121);
			reason_names.reject(_position__anonymous_121);
			trait_names.reject(_position__anonymous_121);
			condition_names.reject(_position__anonymous_121);
			payment_short_type_names.reject(_position__anonymous_121);
			skill_names.reject(_position__anonymous_121);
			map_names.reject(_position__anonymous_121);
			event_names.reject(_position__anonymous_121);
			image_names.reject(_position__anonymous_121);
			tile_symbols.reject(_position__anonymous_121);
			payment_long_type_names.reject(_position__anonymous_121);
			area_names.reject(_position__anonymous_121);
			structure_names.reject(_position__anonymous_121);
			tile_names.reject(_position__anonymous_121);
			hero_stat.reject(_position__anonymous_121);
			_state=SUCCESS;
			_position__anonymous_121=_position;
			_token__anonymous_121=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			parse__anonymous_122();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"event_declaration(_anonymous_121)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_121;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_121.addAll(_token);
				_token__anonymous_121.setValue(_token.getValue());
			}
			_token=_token__anonymous_121;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_121);
				association_names.reject(_position__anonymous_121);
				room_names.reject(_position__anonymous_121);
				activity_names.reject(_position__anonymous_121);
				siding_names.reject(_position__anonymous_121);
				item_names.reject(_position__anonymous_121);
				aspect_names.reject(_position__anonymous_121);
				affinity_names.reject(_position__anonymous_121);
				activity_type_names.reject(_position__anonymous_121);
				trail_names.reject(_position__anonymous_121);
				attack_names.reject(_position__anonymous_121);
				reason_names.reject(_position__anonymous_121);
				trait_names.reject(_position__anonymous_121);
				condition_names.reject(_position__anonymous_121);
				payment_short_type_names.reject(_position__anonymous_121);
				skill_names.reject(_position__anonymous_121);
				map_names.reject(_position__anonymous_121);
				event_names.reject(_position__anonymous_121);
				image_names.reject(_position__anonymous_121);
				tile_symbols.reject(_position__anonymous_121);
				payment_long_type_names.reject(_position__anonymous_121);
				area_names.reject(_position__anonymous_121);
				structure_names.reject(_position__anonymous_121);
				tile_names.reject(_position__anonymous_121);
				hero_stat.reject(_position__anonymous_121);
				_state=SUCCESS;
				_position__anonymous_121=_position;
				_token__anonymous_121=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				if(_position+1-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
					_position=_position+1;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
						_furthestPosition=_position;
					}
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"event_declaration(_anonymous_121)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_121;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_121.addAll(_token);
					_token__anonymous_121.setValue(_token.getValue());
				}
				_token=_token__anonymous_121;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_121);
					association_names.reject(_position__anonymous_121);
					room_names.reject(_position__anonymous_121);
					activity_names.reject(_position__anonymous_121);
					siding_names.reject(_position__anonymous_121);
					item_names.reject(_position__anonymous_121);
					aspect_names.reject(_position__anonymous_121);
					affinity_names.reject(_position__anonymous_121);
					activity_type_names.reject(_position__anonymous_121);
					trail_names.reject(_position__anonymous_121);
					attack_names.reject(_position__anonymous_121);
					reason_names.reject(_position__anonymous_121);
					trait_names.reject(_position__anonymous_121);
					condition_names.reject(_position__anonymous_121);
					payment_short_type_names.reject(_position__anonymous_121);
					skill_names.reject(_position__anonymous_121);
					map_names.reject(_position__anonymous_121);
					event_names.reject(_position__anonymous_121);
					image_names.reject(_position__anonymous_121);
					tile_symbols.reject(_position__anonymous_121);
					payment_long_type_names.reject(_position__anonymous_121);
					area_names.reject(_position__anonymous_121);
					structure_names.reject(_position__anonymous_121);
					tile_names.reject(_position__anonymous_121);
					hero_stat.reject(_position__anonymous_121);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_121);
					association_names.accept(_position__anonymous_121);
					room_names.accept(_position__anonymous_121);
					activity_names.accept(_position__anonymous_121);
					siding_names.accept(_position__anonymous_121);
					item_names.accept(_position__anonymous_121);
					aspect_names.accept(_position__anonymous_121);
					affinity_names.accept(_position__anonymous_121);
					activity_type_names.accept(_position__anonymous_121);
					trail_names.accept(_position__anonymous_121);
					attack_names.accept(_position__anonymous_121);
					reason_names.accept(_position__anonymous_121);
					trait_names.accept(_position__anonymous_121);
					condition_names.accept(_position__anonymous_121);
					payment_short_type_names.accept(_position__anonymous_121);
					skill_names.accept(_position__anonymous_121);
					map_names.accept(_position__anonymous_121);
					event_names.accept(_position__anonymous_121);
					image_names.accept(_position__anonymous_121);
					tile_symbols.accept(_position__anonymous_121);
					payment_long_type_names.accept(_position__anonymous_121);
					area_names.accept(_position__anonymous_121);
					structure_names.accept(_position__anonymous_121);
					tile_names.accept(_position__anonymous_121);
					hero_stat.accept(_position__anonymous_121);
				}
			}
		}
	}
	public void parse__anonymous_242() {
		int _position__anonymous_242 = -1;
		Token.Parsed _token__anonymous_242 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_242=_position;
		_token__anonymous_242=_token;
		_token=new Tokens.Name.RedToken();
		parse_FLOAT();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"colour_declaration(_anonymous_242)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_242;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_242.add(_position__anonymous_242,_token);
		}
		_token=_token__anonymous_242;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_242);
			association_names.reject(_position__anonymous_242);
			room_names.reject(_position__anonymous_242);
			activity_names.reject(_position__anonymous_242);
			siding_names.reject(_position__anonymous_242);
			item_names.reject(_position__anonymous_242);
			aspect_names.reject(_position__anonymous_242);
			affinity_names.reject(_position__anonymous_242);
			activity_type_names.reject(_position__anonymous_242);
			trail_names.reject(_position__anonymous_242);
			attack_names.reject(_position__anonymous_242);
			reason_names.reject(_position__anonymous_242);
			trait_names.reject(_position__anonymous_242);
			condition_names.reject(_position__anonymous_242);
			payment_short_type_names.reject(_position__anonymous_242);
			skill_names.reject(_position__anonymous_242);
			map_names.reject(_position__anonymous_242);
			event_names.reject(_position__anonymous_242);
			image_names.reject(_position__anonymous_242);
			tile_symbols.reject(_position__anonymous_242);
			payment_long_type_names.reject(_position__anonymous_242);
			area_names.reject(_position__anonymous_242);
			structure_names.reject(_position__anonymous_242);
			tile_names.reject(_position__anonymous_242);
			hero_stat.reject(_position__anonymous_242);
			_state=SUCCESS;
			_position__anonymous_242=_position;
			_token__anonymous_242=_token;
			_token=new Tokens.Name.RedToken();
			parse_INTEGER();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"colour_declaration(_anonymous_242)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_242;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_242.add(_position__anonymous_242,_token);
			}
			_token=_token__anonymous_242;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_242);
				association_names.reject(_position__anonymous_242);
				room_names.reject(_position__anonymous_242);
				activity_names.reject(_position__anonymous_242);
				siding_names.reject(_position__anonymous_242);
				item_names.reject(_position__anonymous_242);
				aspect_names.reject(_position__anonymous_242);
				affinity_names.reject(_position__anonymous_242);
				activity_type_names.reject(_position__anonymous_242);
				trail_names.reject(_position__anonymous_242);
				attack_names.reject(_position__anonymous_242);
				reason_names.reject(_position__anonymous_242);
				trait_names.reject(_position__anonymous_242);
				condition_names.reject(_position__anonymous_242);
				payment_short_type_names.reject(_position__anonymous_242);
				skill_names.reject(_position__anonymous_242);
				map_names.reject(_position__anonymous_242);
				event_names.reject(_position__anonymous_242);
				image_names.reject(_position__anonymous_242);
				tile_symbols.reject(_position__anonymous_242);
				payment_long_type_names.reject(_position__anonymous_242);
				area_names.reject(_position__anonymous_242);
				structure_names.reject(_position__anonymous_242);
				tile_names.reject(_position__anonymous_242);
				hero_stat.reject(_position__anonymous_242);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_242);
				association_names.accept(_position__anonymous_242);
				room_names.accept(_position__anonymous_242);
				activity_names.accept(_position__anonymous_242);
				siding_names.accept(_position__anonymous_242);
				item_names.accept(_position__anonymous_242);
				aspect_names.accept(_position__anonymous_242);
				affinity_names.accept(_position__anonymous_242);
				activity_type_names.accept(_position__anonymous_242);
				trail_names.accept(_position__anonymous_242);
				attack_names.accept(_position__anonymous_242);
				reason_names.accept(_position__anonymous_242);
				trait_names.accept(_position__anonymous_242);
				condition_names.accept(_position__anonymous_242);
				payment_short_type_names.accept(_position__anonymous_242);
				skill_names.accept(_position__anonymous_242);
				map_names.accept(_position__anonymous_242);
				event_names.accept(_position__anonymous_242);
				image_names.accept(_position__anonymous_242);
				tile_symbols.accept(_position__anonymous_242);
				payment_long_type_names.accept(_position__anonymous_242);
				area_names.accept(_position__anonymous_242);
				structure_names.accept(_position__anonymous_242);
				tile_names.accept(_position__anonymous_242);
				hero_stat.accept(_position__anonymous_242);
			}
		}
	}
	public void parse__anonymous_59() {
		int _position__anonymous_59 = -1;
		Token.Parsed _token__anonymous_59 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_59=_position;
		_token__anonymous_59=_token;
		_token=new Tokens.Name.OnEventToken();
		if(_position+2-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='o') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='n') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_49.SYNTAX);
			_position=_position+2;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain on");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"association_start(_anonymous_59)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_59;
		}
		else {
			if(_pass==FIRST_PASS) {
				String _result = _preparsed_NAME.get(_position);
				if(_result==null) {
					_state=FAILED;
				}
				else {
					Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
					_token.add(_position,_first_pass_token);
					_position+=_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else if(_pass==SECOND_PASS) {
				_list_name_result=_preparsed_NAME.get(_position);
				if(_list_name_result!=null&&event_names.contains(_list_name_result)) {
					if(_position+_list_name_result.length()<_inputLength) {
						int _next_char = _inputArray[_position+_list_name_result.length()];
						if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,new Tokens.Name.EventNamesToken(_list_name_result));
						_position+=_list_name_result.length();
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
				}
				else {
					_state=FAILED;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"event_names");
						_furthestPosition=_position;
					}
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"association_start(_anonymous_59)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_59;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_59.add(_position__anonymous_59,_token);
		}
		_token=_token__anonymous_59;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_59);
			association_names.reject(_position__anonymous_59);
			room_names.reject(_position__anonymous_59);
			activity_names.reject(_position__anonymous_59);
			siding_names.reject(_position__anonymous_59);
			item_names.reject(_position__anonymous_59);
			aspect_names.reject(_position__anonymous_59);
			affinity_names.reject(_position__anonymous_59);
			activity_type_names.reject(_position__anonymous_59);
			trail_names.reject(_position__anonymous_59);
			attack_names.reject(_position__anonymous_59);
			reason_names.reject(_position__anonymous_59);
			trait_names.reject(_position__anonymous_59);
			condition_names.reject(_position__anonymous_59);
			payment_short_type_names.reject(_position__anonymous_59);
			skill_names.reject(_position__anonymous_59);
			map_names.reject(_position__anonymous_59);
			event_names.reject(_position__anonymous_59);
			image_names.reject(_position__anonymous_59);
			tile_symbols.reject(_position__anonymous_59);
			payment_long_type_names.reject(_position__anonymous_59);
			area_names.reject(_position__anonymous_59);
			structure_names.reject(_position__anonymous_59);
			tile_names.reject(_position__anonymous_59);
			hero_stat.reject(_position__anonymous_59);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_59);
			association_names.accept(_position__anonymous_59);
			room_names.accept(_position__anonymous_59);
			activity_names.accept(_position__anonymous_59);
			siding_names.accept(_position__anonymous_59);
			item_names.accept(_position__anonymous_59);
			aspect_names.accept(_position__anonymous_59);
			affinity_names.accept(_position__anonymous_59);
			activity_type_names.accept(_position__anonymous_59);
			trail_names.accept(_position__anonymous_59);
			attack_names.accept(_position__anonymous_59);
			reason_names.accept(_position__anonymous_59);
			trait_names.accept(_position__anonymous_59);
			condition_names.accept(_position__anonymous_59);
			payment_short_type_names.accept(_position__anonymous_59);
			skill_names.accept(_position__anonymous_59);
			map_names.accept(_position__anonymous_59);
			event_names.accept(_position__anonymous_59);
			image_names.accept(_position__anonymous_59);
			tile_symbols.accept(_position__anonymous_59);
			payment_long_type_names.accept(_position__anonymous_59);
			area_names.accept(_position__anonymous_59);
			structure_names.accept(_position__anonymous_59);
			tile_names.accept(_position__anonymous_59);
			hero_stat.accept(_position__anonymous_59);
		}
	}
	public void parse__anonymous_58() {
		int _position__anonymous_58 = -1;
		Token.Parsed _token__anonymous_58 = null;
		int _position_comments = -1;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_58=_position;
		_token__anonymous_58=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		_position_comments=_position;
		if(_state==SUCCESS&&!_recursion_protection_comments_23.contains(_position)) {
			_recursion_protection_comments_23.add(_position);
			parse_comments();
			_recursion_protection_comments_23.remove(_position_comments);
		}
		else {
			_state=FAILED;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"association_declaration(_anonymous_58)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_58;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_58.addAll(_token);
			_token__anonymous_58.setValue(_token.getValue());
		}
		_token=_token__anonymous_58;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_58);
			association_names.reject(_position__anonymous_58);
			room_names.reject(_position__anonymous_58);
			activity_names.reject(_position__anonymous_58);
			siding_names.reject(_position__anonymous_58);
			item_names.reject(_position__anonymous_58);
			aspect_names.reject(_position__anonymous_58);
			affinity_names.reject(_position__anonymous_58);
			activity_type_names.reject(_position__anonymous_58);
			trail_names.reject(_position__anonymous_58);
			attack_names.reject(_position__anonymous_58);
			reason_names.reject(_position__anonymous_58);
			trait_names.reject(_position__anonymous_58);
			condition_names.reject(_position__anonymous_58);
			payment_short_type_names.reject(_position__anonymous_58);
			skill_names.reject(_position__anonymous_58);
			map_names.reject(_position__anonymous_58);
			event_names.reject(_position__anonymous_58);
			image_names.reject(_position__anonymous_58);
			tile_symbols.reject(_position__anonymous_58);
			payment_long_type_names.reject(_position__anonymous_58);
			area_names.reject(_position__anonymous_58);
			structure_names.reject(_position__anonymous_58);
			tile_names.reject(_position__anonymous_58);
			hero_stat.reject(_position__anonymous_58);
			_state=SUCCESS;
			_position__anonymous_58=_position;
			_token__anonymous_58=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			if(_position+2-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='\t') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_5.SYNTAX);
				_position=_position+2;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n\t");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"association_declaration(_anonymous_58)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_58;
			}
			else {
				parse_association_element();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"association_declaration(_anonymous_58)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_58;
				}
				else {
				}
			}
			if(_state==SUCCESS) {
				_token__anonymous_58.addAll(_token);
				_token__anonymous_58.setValue(_token.getValue());
			}
			_token=_token__anonymous_58;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_58);
				association_names.reject(_position__anonymous_58);
				room_names.reject(_position__anonymous_58);
				activity_names.reject(_position__anonymous_58);
				siding_names.reject(_position__anonymous_58);
				item_names.reject(_position__anonymous_58);
				aspect_names.reject(_position__anonymous_58);
				affinity_names.reject(_position__anonymous_58);
				activity_type_names.reject(_position__anonymous_58);
				trail_names.reject(_position__anonymous_58);
				attack_names.reject(_position__anonymous_58);
				reason_names.reject(_position__anonymous_58);
				trait_names.reject(_position__anonymous_58);
				condition_names.reject(_position__anonymous_58);
				payment_short_type_names.reject(_position__anonymous_58);
				skill_names.reject(_position__anonymous_58);
				map_names.reject(_position__anonymous_58);
				event_names.reject(_position__anonymous_58);
				image_names.reject(_position__anonymous_58);
				tile_symbols.reject(_position__anonymous_58);
				payment_long_type_names.reject(_position__anonymous_58);
				area_names.reject(_position__anonymous_58);
				structure_names.reject(_position__anonymous_58);
				tile_names.reject(_position__anonymous_58);
				hero_stat.reject(_position__anonymous_58);
				_state=SUCCESS;
				_position__anonymous_58=_position;
				_token__anonymous_58=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				if(_position+1-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
					_position=_position+1;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
						_furthestPosition=_position;
					}
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"association_declaration(_anonymous_58)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_58;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_58.addAll(_token);
					_token__anonymous_58.setValue(_token.getValue());
				}
				_token=_token__anonymous_58;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_58);
					association_names.reject(_position__anonymous_58);
					room_names.reject(_position__anonymous_58);
					activity_names.reject(_position__anonymous_58);
					siding_names.reject(_position__anonymous_58);
					item_names.reject(_position__anonymous_58);
					aspect_names.reject(_position__anonymous_58);
					affinity_names.reject(_position__anonymous_58);
					activity_type_names.reject(_position__anonymous_58);
					trail_names.reject(_position__anonymous_58);
					attack_names.reject(_position__anonymous_58);
					reason_names.reject(_position__anonymous_58);
					trait_names.reject(_position__anonymous_58);
					condition_names.reject(_position__anonymous_58);
					payment_short_type_names.reject(_position__anonymous_58);
					skill_names.reject(_position__anonymous_58);
					map_names.reject(_position__anonymous_58);
					event_names.reject(_position__anonymous_58);
					image_names.reject(_position__anonymous_58);
					tile_symbols.reject(_position__anonymous_58);
					payment_long_type_names.reject(_position__anonymous_58);
					area_names.reject(_position__anonymous_58);
					structure_names.reject(_position__anonymous_58);
					tile_names.reject(_position__anonymous_58);
					hero_stat.reject(_position__anonymous_58);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_58);
					association_names.accept(_position__anonymous_58);
					room_names.accept(_position__anonymous_58);
					activity_names.accept(_position__anonymous_58);
					siding_names.accept(_position__anonymous_58);
					item_names.accept(_position__anonymous_58);
					aspect_names.accept(_position__anonymous_58);
					affinity_names.accept(_position__anonymous_58);
					activity_type_names.accept(_position__anonymous_58);
					trail_names.accept(_position__anonymous_58);
					attack_names.accept(_position__anonymous_58);
					reason_names.accept(_position__anonymous_58);
					trait_names.accept(_position__anonymous_58);
					condition_names.accept(_position__anonymous_58);
					payment_short_type_names.accept(_position__anonymous_58);
					skill_names.accept(_position__anonymous_58);
					map_names.accept(_position__anonymous_58);
					event_names.accept(_position__anonymous_58);
					image_names.accept(_position__anonymous_58);
					tile_symbols.accept(_position__anonymous_58);
					payment_long_type_names.accept(_position__anonymous_58);
					area_names.accept(_position__anonymous_58);
					structure_names.accept(_position__anonymous_58);
					tile_names.accept(_position__anonymous_58);
					hero_stat.accept(_position__anonymous_58);
				}
			}
		}
	}
	public void parse__anonymous_115() {
		int _position__anonymous_115 = -1;
		Token.Parsed _token__anonymous_115 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_115=_position;
		_token__anonymous_115=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+2-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='-') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='>') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_57.SYNTAX);
			_position=_position+2;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ->");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_definition_element(_anonymous_115)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_115;
		}
		else {
			_token_NAME=_token;
			_token=new Tokens.Name.ImageIdToken();
			_position_NAME=_position;
			parse_NAME();
			if(_state==SUCCESS) {
				_token_NAME.add(_position_NAME,_token);
			}
			_token=_token_NAME;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_definition_element(_anonymous_115)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_115;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_115.addAll(_token);
			_token__anonymous_115.setValue(_token.getValue());
		}
		_token=_token__anonymous_115;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_115);
			association_names.reject(_position__anonymous_115);
			room_names.reject(_position__anonymous_115);
			activity_names.reject(_position__anonymous_115);
			siding_names.reject(_position__anonymous_115);
			item_names.reject(_position__anonymous_115);
			aspect_names.reject(_position__anonymous_115);
			affinity_names.reject(_position__anonymous_115);
			activity_type_names.reject(_position__anonymous_115);
			trail_names.reject(_position__anonymous_115);
			attack_names.reject(_position__anonymous_115);
			reason_names.reject(_position__anonymous_115);
			trait_names.reject(_position__anonymous_115);
			condition_names.reject(_position__anonymous_115);
			payment_short_type_names.reject(_position__anonymous_115);
			skill_names.reject(_position__anonymous_115);
			map_names.reject(_position__anonymous_115);
			event_names.reject(_position__anonymous_115);
			image_names.reject(_position__anonymous_115);
			tile_symbols.reject(_position__anonymous_115);
			payment_long_type_names.reject(_position__anonymous_115);
			area_names.reject(_position__anonymous_115);
			structure_names.reject(_position__anonymous_115);
			tile_names.reject(_position__anonymous_115);
			hero_stat.reject(_position__anonymous_115);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_115);
			association_names.accept(_position__anonymous_115);
			room_names.accept(_position__anonymous_115);
			activity_names.accept(_position__anonymous_115);
			siding_names.accept(_position__anonymous_115);
			item_names.accept(_position__anonymous_115);
			aspect_names.accept(_position__anonymous_115);
			affinity_names.accept(_position__anonymous_115);
			activity_type_names.accept(_position__anonymous_115);
			trail_names.accept(_position__anonymous_115);
			attack_names.accept(_position__anonymous_115);
			reason_names.accept(_position__anonymous_115);
			trait_names.accept(_position__anonymous_115);
			condition_names.accept(_position__anonymous_115);
			payment_short_type_names.accept(_position__anonymous_115);
			skill_names.accept(_position__anonymous_115);
			map_names.accept(_position__anonymous_115);
			event_names.accept(_position__anonymous_115);
			image_names.accept(_position__anonymous_115);
			tile_symbols.accept(_position__anonymous_115);
			payment_long_type_names.accept(_position__anonymous_115);
			area_names.accept(_position__anonymous_115);
			structure_names.accept(_position__anonymous_115);
			tile_names.accept(_position__anonymous_115);
			hero_stat.accept(_position__anonymous_115);
		}
	}
	public void parse__anonymous_236() {
		int _position__anonymous_236 = -1;
		Token.Parsed _token__anonymous_236 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_236=_position;
		_token__anonymous_236=_token;
		_token=new Tokens.Name.AngleToken();
		parse_drawable_multiple_value();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_multiple_element(_anonymous_236)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_236;
		}
		else {
			int _state_256 = _state;
			while(_position<_inputLength) {
				parse__anonymous_237();
				if(_state==FAILED) {
					break;
				}
			}
			if(_state_256==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_multiple_element(_anonymous_236)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_236;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_236.add(_position__anonymous_236,_token);
		}
		_token=_token__anonymous_236;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_236);
			association_names.reject(_position__anonymous_236);
			room_names.reject(_position__anonymous_236);
			activity_names.reject(_position__anonymous_236);
			siding_names.reject(_position__anonymous_236);
			item_names.reject(_position__anonymous_236);
			aspect_names.reject(_position__anonymous_236);
			affinity_names.reject(_position__anonymous_236);
			activity_type_names.reject(_position__anonymous_236);
			trail_names.reject(_position__anonymous_236);
			attack_names.reject(_position__anonymous_236);
			reason_names.reject(_position__anonymous_236);
			trait_names.reject(_position__anonymous_236);
			condition_names.reject(_position__anonymous_236);
			payment_short_type_names.reject(_position__anonymous_236);
			skill_names.reject(_position__anonymous_236);
			map_names.reject(_position__anonymous_236);
			event_names.reject(_position__anonymous_236);
			image_names.reject(_position__anonymous_236);
			tile_symbols.reject(_position__anonymous_236);
			payment_long_type_names.reject(_position__anonymous_236);
			area_names.reject(_position__anonymous_236);
			structure_names.reject(_position__anonymous_236);
			tile_names.reject(_position__anonymous_236);
			hero_stat.reject(_position__anonymous_236);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_236);
			association_names.accept(_position__anonymous_236);
			room_names.accept(_position__anonymous_236);
			activity_names.accept(_position__anonymous_236);
			siding_names.accept(_position__anonymous_236);
			item_names.accept(_position__anonymous_236);
			aspect_names.accept(_position__anonymous_236);
			affinity_names.accept(_position__anonymous_236);
			activity_type_names.accept(_position__anonymous_236);
			trail_names.accept(_position__anonymous_236);
			attack_names.accept(_position__anonymous_236);
			reason_names.accept(_position__anonymous_236);
			trait_names.accept(_position__anonymous_236);
			condition_names.accept(_position__anonymous_236);
			payment_short_type_names.accept(_position__anonymous_236);
			skill_names.accept(_position__anonymous_236);
			map_names.accept(_position__anonymous_236);
			event_names.accept(_position__anonymous_236);
			image_names.accept(_position__anonymous_236);
			tile_symbols.accept(_position__anonymous_236);
			payment_long_type_names.accept(_position__anonymous_236);
			area_names.accept(_position__anonymous_236);
			structure_names.accept(_position__anonymous_236);
			tile_names.accept(_position__anonymous_236);
			hero_stat.accept(_position__anonymous_236);
		}
	}
	public void parse__anonymous_116() {
		int _position__anonymous_116 = -1;
		Token.Parsed _token__anonymous_116 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_116=_position;
		_token__anonymous_116=_token;
		_token=new Tokens.Name.EntityToken();
		int _state_148 = _state;
		boolean _iteration_achieved_148 = false;
		while(_position<_inputLength) {
			parse__anonymous_117();
			if(_state==FAILED) {
				break;
			}
			else {
				_iteration_achieved_148=true;
			}
		}
		if(_iteration_achieved_148==false) {
			_state=FAILED;
		}
		else if(_state_148==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_element(_anonymous_116)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_116;
		}
		else {
			parse_entity_declaration();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_element(_anonymous_116)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_116;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_116.add(_position__anonymous_116,_token);
		}
		_token=_token__anonymous_116;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_116);
			association_names.reject(_position__anonymous_116);
			room_names.reject(_position__anonymous_116);
			activity_names.reject(_position__anonymous_116);
			siding_names.reject(_position__anonymous_116);
			item_names.reject(_position__anonymous_116);
			aspect_names.reject(_position__anonymous_116);
			affinity_names.reject(_position__anonymous_116);
			activity_type_names.reject(_position__anonymous_116);
			trail_names.reject(_position__anonymous_116);
			attack_names.reject(_position__anonymous_116);
			reason_names.reject(_position__anonymous_116);
			trait_names.reject(_position__anonymous_116);
			condition_names.reject(_position__anonymous_116);
			payment_short_type_names.reject(_position__anonymous_116);
			skill_names.reject(_position__anonymous_116);
			map_names.reject(_position__anonymous_116);
			event_names.reject(_position__anonymous_116);
			image_names.reject(_position__anonymous_116);
			tile_symbols.reject(_position__anonymous_116);
			payment_long_type_names.reject(_position__anonymous_116);
			area_names.reject(_position__anonymous_116);
			structure_names.reject(_position__anonymous_116);
			tile_names.reject(_position__anonymous_116);
			hero_stat.reject(_position__anonymous_116);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_116);
			association_names.accept(_position__anonymous_116);
			room_names.accept(_position__anonymous_116);
			activity_names.accept(_position__anonymous_116);
			siding_names.accept(_position__anonymous_116);
			item_names.accept(_position__anonymous_116);
			aspect_names.accept(_position__anonymous_116);
			affinity_names.accept(_position__anonymous_116);
			activity_type_names.accept(_position__anonymous_116);
			trail_names.accept(_position__anonymous_116);
			attack_names.accept(_position__anonymous_116);
			reason_names.accept(_position__anonymous_116);
			trait_names.accept(_position__anonymous_116);
			condition_names.accept(_position__anonymous_116);
			payment_short_type_names.accept(_position__anonymous_116);
			skill_names.accept(_position__anonymous_116);
			map_names.accept(_position__anonymous_116);
			event_names.accept(_position__anonymous_116);
			image_names.accept(_position__anonymous_116);
			tile_symbols.accept(_position__anonymous_116);
			payment_long_type_names.accept(_position__anonymous_116);
			area_names.accept(_position__anonymous_116);
			structure_names.accept(_position__anonymous_116);
			tile_names.accept(_position__anonymous_116);
			hero_stat.accept(_position__anonymous_116);
		}
	}
	public void parse__anonymous_237() {
		int _position__anonymous_237 = -1;
		Token.Parsed _token__anonymous_237 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_237=_position;
		_token__anonymous_237=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse_drawable_arthmetic_operator();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_multiple_element(_anonymous_237)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_237;
		}
		else {
			parse_drawable_multiple_value();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_multiple_element(_anonymous_237)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_237;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_237.addAll(_token);
			_token__anonymous_237.setValue(_token.getValue());
		}
		_token=_token__anonymous_237;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_237);
			association_names.reject(_position__anonymous_237);
			room_names.reject(_position__anonymous_237);
			activity_names.reject(_position__anonymous_237);
			siding_names.reject(_position__anonymous_237);
			item_names.reject(_position__anonymous_237);
			aspect_names.reject(_position__anonymous_237);
			affinity_names.reject(_position__anonymous_237);
			activity_type_names.reject(_position__anonymous_237);
			trail_names.reject(_position__anonymous_237);
			attack_names.reject(_position__anonymous_237);
			reason_names.reject(_position__anonymous_237);
			trait_names.reject(_position__anonymous_237);
			condition_names.reject(_position__anonymous_237);
			payment_short_type_names.reject(_position__anonymous_237);
			skill_names.reject(_position__anonymous_237);
			map_names.reject(_position__anonymous_237);
			event_names.reject(_position__anonymous_237);
			image_names.reject(_position__anonymous_237);
			tile_symbols.reject(_position__anonymous_237);
			payment_long_type_names.reject(_position__anonymous_237);
			area_names.reject(_position__anonymous_237);
			structure_names.reject(_position__anonymous_237);
			tile_names.reject(_position__anonymous_237);
			hero_stat.reject(_position__anonymous_237);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_237);
			association_names.accept(_position__anonymous_237);
			room_names.accept(_position__anonymous_237);
			activity_names.accept(_position__anonymous_237);
			siding_names.accept(_position__anonymous_237);
			item_names.accept(_position__anonymous_237);
			aspect_names.accept(_position__anonymous_237);
			affinity_names.accept(_position__anonymous_237);
			activity_type_names.accept(_position__anonymous_237);
			trail_names.accept(_position__anonymous_237);
			attack_names.accept(_position__anonymous_237);
			reason_names.accept(_position__anonymous_237);
			trait_names.accept(_position__anonymous_237);
			condition_names.accept(_position__anonymous_237);
			payment_short_type_names.accept(_position__anonymous_237);
			skill_names.accept(_position__anonymous_237);
			map_names.accept(_position__anonymous_237);
			event_names.accept(_position__anonymous_237);
			image_names.accept(_position__anonymous_237);
			tile_symbols.accept(_position__anonymous_237);
			payment_long_type_names.accept(_position__anonymous_237);
			area_names.accept(_position__anonymous_237);
			structure_names.accept(_position__anonymous_237);
			tile_names.accept(_position__anonymous_237);
			hero_stat.accept(_position__anonymous_237);
		}
	}
	public void parse__anonymous_117() {
		int _position__anonymous_117 = -1;
		Token.Parsed _token__anonymous_117 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_117=_position;
		_token__anonymous_117=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='+') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_14.PLUS);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain +");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_element(_anonymous_117)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_117;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_117.addAll(_token);
			_token__anonymous_117.setValue(_token.getValue());
		}
		_token=_token__anonymous_117;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_117);
			association_names.reject(_position__anonymous_117);
			room_names.reject(_position__anonymous_117);
			activity_names.reject(_position__anonymous_117);
			siding_names.reject(_position__anonymous_117);
			item_names.reject(_position__anonymous_117);
			aspect_names.reject(_position__anonymous_117);
			affinity_names.reject(_position__anonymous_117);
			activity_type_names.reject(_position__anonymous_117);
			trail_names.reject(_position__anonymous_117);
			attack_names.reject(_position__anonymous_117);
			reason_names.reject(_position__anonymous_117);
			trait_names.reject(_position__anonymous_117);
			condition_names.reject(_position__anonymous_117);
			payment_short_type_names.reject(_position__anonymous_117);
			skill_names.reject(_position__anonymous_117);
			map_names.reject(_position__anonymous_117);
			event_names.reject(_position__anonymous_117);
			image_names.reject(_position__anonymous_117);
			tile_symbols.reject(_position__anonymous_117);
			payment_long_type_names.reject(_position__anonymous_117);
			area_names.reject(_position__anonymous_117);
			structure_names.reject(_position__anonymous_117);
			tile_names.reject(_position__anonymous_117);
			hero_stat.reject(_position__anonymous_117);
			_state=SUCCESS;
			_position__anonymous_117=_position;
			_token__anonymous_117=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='-') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_15.MINUS);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain -");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_element(_anonymous_117)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_117;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_117.addAll(_token);
				_token__anonymous_117.setValue(_token.getValue());
			}
			_token=_token__anonymous_117;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_117);
				association_names.reject(_position__anonymous_117);
				room_names.reject(_position__anonymous_117);
				activity_names.reject(_position__anonymous_117);
				siding_names.reject(_position__anonymous_117);
				item_names.reject(_position__anonymous_117);
				aspect_names.reject(_position__anonymous_117);
				affinity_names.reject(_position__anonymous_117);
				activity_type_names.reject(_position__anonymous_117);
				trail_names.reject(_position__anonymous_117);
				attack_names.reject(_position__anonymous_117);
				reason_names.reject(_position__anonymous_117);
				trait_names.reject(_position__anonymous_117);
				condition_names.reject(_position__anonymous_117);
				payment_short_type_names.reject(_position__anonymous_117);
				skill_names.reject(_position__anonymous_117);
				map_names.reject(_position__anonymous_117);
				event_names.reject(_position__anonymous_117);
				image_names.reject(_position__anonymous_117);
				tile_symbols.reject(_position__anonymous_117);
				payment_long_type_names.reject(_position__anonymous_117);
				area_names.reject(_position__anonymous_117);
				structure_names.reject(_position__anonymous_117);
				tile_names.reject(_position__anonymous_117);
				hero_stat.reject(_position__anonymous_117);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_117);
				association_names.accept(_position__anonymous_117);
				room_names.accept(_position__anonymous_117);
				activity_names.accept(_position__anonymous_117);
				siding_names.accept(_position__anonymous_117);
				item_names.accept(_position__anonymous_117);
				aspect_names.accept(_position__anonymous_117);
				affinity_names.accept(_position__anonymous_117);
				activity_type_names.accept(_position__anonymous_117);
				trail_names.accept(_position__anonymous_117);
				attack_names.accept(_position__anonymous_117);
				reason_names.accept(_position__anonymous_117);
				trait_names.accept(_position__anonymous_117);
				condition_names.accept(_position__anonymous_117);
				payment_short_type_names.accept(_position__anonymous_117);
				skill_names.accept(_position__anonymous_117);
				map_names.accept(_position__anonymous_117);
				event_names.accept(_position__anonymous_117);
				image_names.accept(_position__anonymous_117);
				tile_symbols.accept(_position__anonymous_117);
				payment_long_type_names.accept(_position__anonymous_117);
				area_names.accept(_position__anonymous_117);
				structure_names.accept(_position__anonymous_117);
				tile_names.accept(_position__anonymous_117);
				hero_stat.accept(_position__anonymous_117);
			}
		}
	}
	public void parse__anonymous_238() {
		int _position__anonymous_238 = -1;
		Token.Parsed _token__anonymous_238 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_238=_position;
		_token__anonymous_238=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_colour(_anonymous_238)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_238;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_238.addAll(_token);
			_token__anonymous_238.setValue(_token.getValue());
		}
		_token=_token__anonymous_238;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_238);
			association_names.reject(_position__anonymous_238);
			room_names.reject(_position__anonymous_238);
			activity_names.reject(_position__anonymous_238);
			siding_names.reject(_position__anonymous_238);
			item_names.reject(_position__anonymous_238);
			aspect_names.reject(_position__anonymous_238);
			affinity_names.reject(_position__anonymous_238);
			activity_type_names.reject(_position__anonymous_238);
			trail_names.reject(_position__anonymous_238);
			attack_names.reject(_position__anonymous_238);
			reason_names.reject(_position__anonymous_238);
			trait_names.reject(_position__anonymous_238);
			condition_names.reject(_position__anonymous_238);
			payment_short_type_names.reject(_position__anonymous_238);
			skill_names.reject(_position__anonymous_238);
			map_names.reject(_position__anonymous_238);
			event_names.reject(_position__anonymous_238);
			image_names.reject(_position__anonymous_238);
			tile_symbols.reject(_position__anonymous_238);
			payment_long_type_names.reject(_position__anonymous_238);
			area_names.reject(_position__anonymous_238);
			structure_names.reject(_position__anonymous_238);
			tile_names.reject(_position__anonymous_238);
			hero_stat.reject(_position__anonymous_238);
			_state=SUCCESS;
			_position__anonymous_238=_position;
			_token__anonymous_238=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			if(_position+8-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='c') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='o') {
					_state=FAILED;
				}
				if(_inputArray[_position+2]!='m') {
					_state=FAILED;
				}
				if(_inputArray[_position+3]!='m') {
					_state=FAILED;
				}
				if(_inputArray[_position+4]!='e') {
					_state=FAILED;
				}
				if(_inputArray[_position+5]!='n') {
					_state=FAILED;
				}
				if(_inputArray[_position+6]!='t') {
					_state=FAILED;
				}
				if(_inputArray[_position+7]!='s') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_38.SYNTAX);
				_position=_position+8;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain comments");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_colour(_anonymous_238)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_238;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_238.addAll(_token);
				_token__anonymous_238.setValue(_token.getValue());
			}
			_token=_token__anonymous_238;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_238);
				association_names.reject(_position__anonymous_238);
				room_names.reject(_position__anonymous_238);
				activity_names.reject(_position__anonymous_238);
				siding_names.reject(_position__anonymous_238);
				item_names.reject(_position__anonymous_238);
				aspect_names.reject(_position__anonymous_238);
				affinity_names.reject(_position__anonymous_238);
				activity_type_names.reject(_position__anonymous_238);
				trail_names.reject(_position__anonymous_238);
				attack_names.reject(_position__anonymous_238);
				reason_names.reject(_position__anonymous_238);
				trait_names.reject(_position__anonymous_238);
				condition_names.reject(_position__anonymous_238);
				payment_short_type_names.reject(_position__anonymous_238);
				skill_names.reject(_position__anonymous_238);
				map_names.reject(_position__anonymous_238);
				event_names.reject(_position__anonymous_238);
				image_names.reject(_position__anonymous_238);
				tile_symbols.reject(_position__anonymous_238);
				payment_long_type_names.reject(_position__anonymous_238);
				area_names.reject(_position__anonymous_238);
				structure_names.reject(_position__anonymous_238);
				tile_names.reject(_position__anonymous_238);
				hero_stat.reject(_position__anonymous_238);
				_state=SUCCESS;
				_position__anonymous_238=_position;
				_token__anonymous_238=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				parse_colour_declaration();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_colour(_anonymous_238)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_238;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_238.addAll(_token);
					_token__anonymous_238.setValue(_token.getValue());
				}
				_token=_token__anonymous_238;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_238);
					association_names.reject(_position__anonymous_238);
					room_names.reject(_position__anonymous_238);
					activity_names.reject(_position__anonymous_238);
					siding_names.reject(_position__anonymous_238);
					item_names.reject(_position__anonymous_238);
					aspect_names.reject(_position__anonymous_238);
					affinity_names.reject(_position__anonymous_238);
					activity_type_names.reject(_position__anonymous_238);
					trail_names.reject(_position__anonymous_238);
					attack_names.reject(_position__anonymous_238);
					reason_names.reject(_position__anonymous_238);
					trait_names.reject(_position__anonymous_238);
					condition_names.reject(_position__anonymous_238);
					payment_short_type_names.reject(_position__anonymous_238);
					skill_names.reject(_position__anonymous_238);
					map_names.reject(_position__anonymous_238);
					event_names.reject(_position__anonymous_238);
					image_names.reject(_position__anonymous_238);
					tile_symbols.reject(_position__anonymous_238);
					payment_long_type_names.reject(_position__anonymous_238);
					area_names.reject(_position__anonymous_238);
					structure_names.reject(_position__anonymous_238);
					tile_names.reject(_position__anonymous_238);
					hero_stat.reject(_position__anonymous_238);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_238);
					association_names.accept(_position__anonymous_238);
					room_names.accept(_position__anonymous_238);
					activity_names.accept(_position__anonymous_238);
					siding_names.accept(_position__anonymous_238);
					item_names.accept(_position__anonymous_238);
					aspect_names.accept(_position__anonymous_238);
					affinity_names.accept(_position__anonymous_238);
					activity_type_names.accept(_position__anonymous_238);
					trail_names.accept(_position__anonymous_238);
					attack_names.accept(_position__anonymous_238);
					reason_names.accept(_position__anonymous_238);
					trait_names.accept(_position__anonymous_238);
					condition_names.accept(_position__anonymous_238);
					payment_short_type_names.accept(_position__anonymous_238);
					skill_names.accept(_position__anonymous_238);
					map_names.accept(_position__anonymous_238);
					event_names.accept(_position__anonymous_238);
					image_names.accept(_position__anonymous_238);
					tile_symbols.accept(_position__anonymous_238);
					payment_long_type_names.accept(_position__anonymous_238);
					area_names.accept(_position__anonymous_238);
					structure_names.accept(_position__anonymous_238);
					tile_names.accept(_position__anonymous_238);
					hero_stat.accept(_position__anonymous_238);
				}
			}
		}
	}
	public void parse__anonymous_118() {
		int _position__anonymous_118 = -1;
		Token.Parsed _token__anonymous_118 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_118=_position;
		_token__anonymous_118=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='&') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_68.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain &");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_cost(_anonymous_118)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_118;
		}
		else {
			parse_tile_cost();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_cost(_anonymous_118)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_118;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_118.addAll(_token);
			_token__anonymous_118.setValue(_token.getValue());
		}
		_token=_token__anonymous_118;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_118);
			association_names.reject(_position__anonymous_118);
			room_names.reject(_position__anonymous_118);
			activity_names.reject(_position__anonymous_118);
			siding_names.reject(_position__anonymous_118);
			item_names.reject(_position__anonymous_118);
			aspect_names.reject(_position__anonymous_118);
			affinity_names.reject(_position__anonymous_118);
			activity_type_names.reject(_position__anonymous_118);
			trail_names.reject(_position__anonymous_118);
			attack_names.reject(_position__anonymous_118);
			reason_names.reject(_position__anonymous_118);
			trait_names.reject(_position__anonymous_118);
			condition_names.reject(_position__anonymous_118);
			payment_short_type_names.reject(_position__anonymous_118);
			skill_names.reject(_position__anonymous_118);
			map_names.reject(_position__anonymous_118);
			event_names.reject(_position__anonymous_118);
			image_names.reject(_position__anonymous_118);
			tile_symbols.reject(_position__anonymous_118);
			payment_long_type_names.reject(_position__anonymous_118);
			area_names.reject(_position__anonymous_118);
			structure_names.reject(_position__anonymous_118);
			tile_names.reject(_position__anonymous_118);
			hero_stat.reject(_position__anonymous_118);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_118);
			association_names.accept(_position__anonymous_118);
			room_names.accept(_position__anonymous_118);
			activity_names.accept(_position__anonymous_118);
			siding_names.accept(_position__anonymous_118);
			item_names.accept(_position__anonymous_118);
			aspect_names.accept(_position__anonymous_118);
			affinity_names.accept(_position__anonymous_118);
			activity_type_names.accept(_position__anonymous_118);
			trail_names.accept(_position__anonymous_118);
			attack_names.accept(_position__anonymous_118);
			reason_names.accept(_position__anonymous_118);
			trait_names.accept(_position__anonymous_118);
			condition_names.accept(_position__anonymous_118);
			payment_short_type_names.accept(_position__anonymous_118);
			skill_names.accept(_position__anonymous_118);
			map_names.accept(_position__anonymous_118);
			event_names.accept(_position__anonymous_118);
			image_names.accept(_position__anonymous_118);
			tile_symbols.accept(_position__anonymous_118);
			payment_long_type_names.accept(_position__anonymous_118);
			area_names.accept(_position__anonymous_118);
			structure_names.accept(_position__anonymous_118);
			tile_names.accept(_position__anonymous_118);
			hero_stat.accept(_position__anonymous_118);
		}
	}
	public void parse__anonymous_239() {
		int _position__anonymous_239 = -1;
		Token.Parsed _token__anonymous_239 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_239=_position;
		_token__anonymous_239=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse__anonymous_240();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"colour_declaration(_anonymous_239)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_239;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_239.addAll(_token);
			_token__anonymous_239.setValue(_token.getValue());
		}
		_token=_token__anonymous_239;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_239);
			association_names.reject(_position__anonymous_239);
			room_names.reject(_position__anonymous_239);
			activity_names.reject(_position__anonymous_239);
			siding_names.reject(_position__anonymous_239);
			item_names.reject(_position__anonymous_239);
			aspect_names.reject(_position__anonymous_239);
			affinity_names.reject(_position__anonymous_239);
			activity_type_names.reject(_position__anonymous_239);
			trail_names.reject(_position__anonymous_239);
			attack_names.reject(_position__anonymous_239);
			reason_names.reject(_position__anonymous_239);
			trait_names.reject(_position__anonymous_239);
			condition_names.reject(_position__anonymous_239);
			payment_short_type_names.reject(_position__anonymous_239);
			skill_names.reject(_position__anonymous_239);
			map_names.reject(_position__anonymous_239);
			event_names.reject(_position__anonymous_239);
			image_names.reject(_position__anonymous_239);
			tile_symbols.reject(_position__anonymous_239);
			payment_long_type_names.reject(_position__anonymous_239);
			area_names.reject(_position__anonymous_239);
			structure_names.reject(_position__anonymous_239);
			tile_names.reject(_position__anonymous_239);
			hero_stat.reject(_position__anonymous_239);
			_state=SUCCESS;
			_position__anonymous_239=_position;
			_token__anonymous_239=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			parse__anonymous_241();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"colour_declaration(_anonymous_239)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_239;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_239.addAll(_token);
				_token__anonymous_239.setValue(_token.getValue());
			}
			_token=_token__anonymous_239;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_239);
				association_names.reject(_position__anonymous_239);
				room_names.reject(_position__anonymous_239);
				activity_names.reject(_position__anonymous_239);
				siding_names.reject(_position__anonymous_239);
				item_names.reject(_position__anonymous_239);
				aspect_names.reject(_position__anonymous_239);
				affinity_names.reject(_position__anonymous_239);
				activity_type_names.reject(_position__anonymous_239);
				trail_names.reject(_position__anonymous_239);
				attack_names.reject(_position__anonymous_239);
				reason_names.reject(_position__anonymous_239);
				trait_names.reject(_position__anonymous_239);
				condition_names.reject(_position__anonymous_239);
				payment_short_type_names.reject(_position__anonymous_239);
				skill_names.reject(_position__anonymous_239);
				map_names.reject(_position__anonymous_239);
				event_names.reject(_position__anonymous_239);
				image_names.reject(_position__anonymous_239);
				tile_symbols.reject(_position__anonymous_239);
				payment_long_type_names.reject(_position__anonymous_239);
				area_names.reject(_position__anonymous_239);
				structure_names.reject(_position__anonymous_239);
				tile_names.reject(_position__anonymous_239);
				hero_stat.reject(_position__anonymous_239);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_239);
				association_names.accept(_position__anonymous_239);
				room_names.accept(_position__anonymous_239);
				activity_names.accept(_position__anonymous_239);
				siding_names.accept(_position__anonymous_239);
				item_names.accept(_position__anonymous_239);
				aspect_names.accept(_position__anonymous_239);
				affinity_names.accept(_position__anonymous_239);
				activity_type_names.accept(_position__anonymous_239);
				trail_names.accept(_position__anonymous_239);
				attack_names.accept(_position__anonymous_239);
				reason_names.accept(_position__anonymous_239);
				trait_names.accept(_position__anonymous_239);
				condition_names.accept(_position__anonymous_239);
				payment_short_type_names.accept(_position__anonymous_239);
				skill_names.accept(_position__anonymous_239);
				map_names.accept(_position__anonymous_239);
				event_names.accept(_position__anonymous_239);
				image_names.accept(_position__anonymous_239);
				tile_symbols.accept(_position__anonymous_239);
				payment_long_type_names.accept(_position__anonymous_239);
				area_names.accept(_position__anonymous_239);
				structure_names.accept(_position__anonymous_239);
				tile_names.accept(_position__anonymous_239);
				hero_stat.accept(_position__anonymous_239);
			}
		}
	}
	public void parse__anonymous_51() {
		int _position__anonymous_51 = -1;
		Token.Parsed _token__anonymous_51 = null;
		int _position_comments = -1;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_51=_position;
		_token__anonymous_51=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_skill(_anonymous_51)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_51;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_51.addAll(_token);
			_token__anonymous_51.setValue(_token.getValue());
		}
		_token=_token__anonymous_51;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_51);
			association_names.reject(_position__anonymous_51);
			room_names.reject(_position__anonymous_51);
			activity_names.reject(_position__anonymous_51);
			siding_names.reject(_position__anonymous_51);
			item_names.reject(_position__anonymous_51);
			aspect_names.reject(_position__anonymous_51);
			affinity_names.reject(_position__anonymous_51);
			activity_type_names.reject(_position__anonymous_51);
			trail_names.reject(_position__anonymous_51);
			attack_names.reject(_position__anonymous_51);
			reason_names.reject(_position__anonymous_51);
			trait_names.reject(_position__anonymous_51);
			condition_names.reject(_position__anonymous_51);
			payment_short_type_names.reject(_position__anonymous_51);
			skill_names.reject(_position__anonymous_51);
			map_names.reject(_position__anonymous_51);
			event_names.reject(_position__anonymous_51);
			image_names.reject(_position__anonymous_51);
			tile_symbols.reject(_position__anonymous_51);
			payment_long_type_names.reject(_position__anonymous_51);
			area_names.reject(_position__anonymous_51);
			structure_names.reject(_position__anonymous_51);
			tile_names.reject(_position__anonymous_51);
			hero_stat.reject(_position__anonymous_51);
			_state=SUCCESS;
			_position__anonymous_51=_position;
			_token__anonymous_51=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			_position_comments=_position;
			if(_state==SUCCESS&&!_recursion_protection_comments_19.contains(_position)) {
				_recursion_protection_comments_19.add(_position);
				parse_comments();
				_recursion_protection_comments_19.remove(_position_comments);
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_skill(_anonymous_51)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_51;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_51.addAll(_token);
				_token__anonymous_51.setValue(_token.getValue());
			}
			_token=_token__anonymous_51;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_51);
				association_names.reject(_position__anonymous_51);
				room_names.reject(_position__anonymous_51);
				activity_names.reject(_position__anonymous_51);
				siding_names.reject(_position__anonymous_51);
				item_names.reject(_position__anonymous_51);
				aspect_names.reject(_position__anonymous_51);
				affinity_names.reject(_position__anonymous_51);
				activity_type_names.reject(_position__anonymous_51);
				trail_names.reject(_position__anonymous_51);
				attack_names.reject(_position__anonymous_51);
				reason_names.reject(_position__anonymous_51);
				trait_names.reject(_position__anonymous_51);
				condition_names.reject(_position__anonymous_51);
				payment_short_type_names.reject(_position__anonymous_51);
				skill_names.reject(_position__anonymous_51);
				map_names.reject(_position__anonymous_51);
				event_names.reject(_position__anonymous_51);
				image_names.reject(_position__anonymous_51);
				tile_symbols.reject(_position__anonymous_51);
				payment_long_type_names.reject(_position__anonymous_51);
				area_names.reject(_position__anonymous_51);
				structure_names.reject(_position__anonymous_51);
				tile_names.reject(_position__anonymous_51);
				hero_stat.reject(_position__anonymous_51);
				_state=SUCCESS;
				_position__anonymous_51=_position;
				_token__anonymous_51=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				parse_skill_declaration();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_skill(_anonymous_51)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_51;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_51.addAll(_token);
					_token__anonymous_51.setValue(_token.getValue());
				}
				_token=_token__anonymous_51;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_51);
					association_names.reject(_position__anonymous_51);
					room_names.reject(_position__anonymous_51);
					activity_names.reject(_position__anonymous_51);
					siding_names.reject(_position__anonymous_51);
					item_names.reject(_position__anonymous_51);
					aspect_names.reject(_position__anonymous_51);
					affinity_names.reject(_position__anonymous_51);
					activity_type_names.reject(_position__anonymous_51);
					trail_names.reject(_position__anonymous_51);
					attack_names.reject(_position__anonymous_51);
					reason_names.reject(_position__anonymous_51);
					trait_names.reject(_position__anonymous_51);
					condition_names.reject(_position__anonymous_51);
					payment_short_type_names.reject(_position__anonymous_51);
					skill_names.reject(_position__anonymous_51);
					map_names.reject(_position__anonymous_51);
					event_names.reject(_position__anonymous_51);
					image_names.reject(_position__anonymous_51);
					tile_symbols.reject(_position__anonymous_51);
					payment_long_type_names.reject(_position__anonymous_51);
					area_names.reject(_position__anonymous_51);
					structure_names.reject(_position__anonymous_51);
					tile_names.reject(_position__anonymous_51);
					hero_stat.reject(_position__anonymous_51);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_51);
					association_names.accept(_position__anonymous_51);
					room_names.accept(_position__anonymous_51);
					activity_names.accept(_position__anonymous_51);
					siding_names.accept(_position__anonymous_51);
					item_names.accept(_position__anonymous_51);
					aspect_names.accept(_position__anonymous_51);
					affinity_names.accept(_position__anonymous_51);
					activity_type_names.accept(_position__anonymous_51);
					trail_names.accept(_position__anonymous_51);
					attack_names.accept(_position__anonymous_51);
					reason_names.accept(_position__anonymous_51);
					trait_names.accept(_position__anonymous_51);
					condition_names.accept(_position__anonymous_51);
					payment_short_type_names.accept(_position__anonymous_51);
					skill_names.accept(_position__anonymous_51);
					map_names.accept(_position__anonymous_51);
					event_names.accept(_position__anonymous_51);
					image_names.accept(_position__anonymous_51);
					tile_symbols.accept(_position__anonymous_51);
					payment_long_type_names.accept(_position__anonymous_51);
					area_names.accept(_position__anonymous_51);
					structure_names.accept(_position__anonymous_51);
					tile_names.accept(_position__anonymous_51);
					hero_stat.accept(_position__anonymous_51);
				}
			}
		}
	}
	public void parse__anonymous_111() {
		int _position__anonymous_111 = -1;
		Token.Parsed _token__anonymous_111 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_111=_position;
		_token__anonymous_111=_token;
		_token=new Tokens.Name.FloorParentNameToken();
		if(_pass==FIRST_PASS) {
			String _result = _preparsed_NAME.get(_position);
			if(_result==null) {
				_state=FAILED;
			}
			else {
				Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
				_token.add(_position,_first_pass_token);
				_position+=_result.length();
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
		}
		else if(_pass==SECOND_PASS) {
			_list_name_result=_preparsed_NAME.get(_position);
			if(_list_name_result!=null&&tile_names.contains(_list_name_result)) {
				if(_position+_list_name_result.length()<_inputLength) {
					int _next_char = _inputArray[_position+_list_name_result.length()];
					if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,new Tokens.Name.TileNamesToken(_list_name_result));
					_position+=_list_name_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_names");
					_furthestPosition=_position;
				}
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_definition(_anonymous_111)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_111;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_111.add(_position__anonymous_111,_token);
		}
		_token=_token__anonymous_111;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_111);
			association_names.reject(_position__anonymous_111);
			room_names.reject(_position__anonymous_111);
			activity_names.reject(_position__anonymous_111);
			siding_names.reject(_position__anonymous_111);
			item_names.reject(_position__anonymous_111);
			aspect_names.reject(_position__anonymous_111);
			affinity_names.reject(_position__anonymous_111);
			activity_type_names.reject(_position__anonymous_111);
			trail_names.reject(_position__anonymous_111);
			attack_names.reject(_position__anonymous_111);
			reason_names.reject(_position__anonymous_111);
			trait_names.reject(_position__anonymous_111);
			condition_names.reject(_position__anonymous_111);
			payment_short_type_names.reject(_position__anonymous_111);
			skill_names.reject(_position__anonymous_111);
			map_names.reject(_position__anonymous_111);
			event_names.reject(_position__anonymous_111);
			image_names.reject(_position__anonymous_111);
			tile_symbols.reject(_position__anonymous_111);
			payment_long_type_names.reject(_position__anonymous_111);
			area_names.reject(_position__anonymous_111);
			structure_names.reject(_position__anonymous_111);
			tile_names.reject(_position__anonymous_111);
			hero_stat.reject(_position__anonymous_111);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_111);
			association_names.accept(_position__anonymous_111);
			room_names.accept(_position__anonymous_111);
			activity_names.accept(_position__anonymous_111);
			siding_names.accept(_position__anonymous_111);
			item_names.accept(_position__anonymous_111);
			aspect_names.accept(_position__anonymous_111);
			affinity_names.accept(_position__anonymous_111);
			activity_type_names.accept(_position__anonymous_111);
			trail_names.accept(_position__anonymous_111);
			attack_names.accept(_position__anonymous_111);
			reason_names.accept(_position__anonymous_111);
			trait_names.accept(_position__anonymous_111);
			condition_names.accept(_position__anonymous_111);
			payment_short_type_names.accept(_position__anonymous_111);
			skill_names.accept(_position__anonymous_111);
			map_names.accept(_position__anonymous_111);
			event_names.accept(_position__anonymous_111);
			image_names.accept(_position__anonymous_111);
			tile_symbols.accept(_position__anonymous_111);
			payment_long_type_names.accept(_position__anonymous_111);
			area_names.accept(_position__anonymous_111);
			structure_names.accept(_position__anonymous_111);
			tile_names.accept(_position__anonymous_111);
			hero_stat.accept(_position__anonymous_111);
		}
	}
	public void parse__anonymous_232() {
		int _position__anonymous_232 = -1;
		Token.Parsed _token__anonymous_232 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_232=_position;
		_token__anonymous_232=_token;
		_token=new Tokens.Name.DimensionsToken();
		parse_drawable_dimensions();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_multiple_element(_anonymous_232)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_232;
		}
		else {
			int _state_253 = _state;
			while(_position<_inputLength) {
				parse__anonymous_233();
				if(_state==FAILED) {
					break;
				}
			}
			if(_state_253==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_multiple_element(_anonymous_232)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_232;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_232.add(_position__anonymous_232,_token);
		}
		_token=_token__anonymous_232;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_232);
			association_names.reject(_position__anonymous_232);
			room_names.reject(_position__anonymous_232);
			activity_names.reject(_position__anonymous_232);
			siding_names.reject(_position__anonymous_232);
			item_names.reject(_position__anonymous_232);
			aspect_names.reject(_position__anonymous_232);
			affinity_names.reject(_position__anonymous_232);
			activity_type_names.reject(_position__anonymous_232);
			trail_names.reject(_position__anonymous_232);
			attack_names.reject(_position__anonymous_232);
			reason_names.reject(_position__anonymous_232);
			trait_names.reject(_position__anonymous_232);
			condition_names.reject(_position__anonymous_232);
			payment_short_type_names.reject(_position__anonymous_232);
			skill_names.reject(_position__anonymous_232);
			map_names.reject(_position__anonymous_232);
			event_names.reject(_position__anonymous_232);
			image_names.reject(_position__anonymous_232);
			tile_symbols.reject(_position__anonymous_232);
			payment_long_type_names.reject(_position__anonymous_232);
			area_names.reject(_position__anonymous_232);
			structure_names.reject(_position__anonymous_232);
			tile_names.reject(_position__anonymous_232);
			hero_stat.reject(_position__anonymous_232);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_232);
			association_names.accept(_position__anonymous_232);
			room_names.accept(_position__anonymous_232);
			activity_names.accept(_position__anonymous_232);
			siding_names.accept(_position__anonymous_232);
			item_names.accept(_position__anonymous_232);
			aspect_names.accept(_position__anonymous_232);
			affinity_names.accept(_position__anonymous_232);
			activity_type_names.accept(_position__anonymous_232);
			trail_names.accept(_position__anonymous_232);
			attack_names.accept(_position__anonymous_232);
			reason_names.accept(_position__anonymous_232);
			trait_names.accept(_position__anonymous_232);
			condition_names.accept(_position__anonymous_232);
			payment_short_type_names.accept(_position__anonymous_232);
			skill_names.accept(_position__anonymous_232);
			map_names.accept(_position__anonymous_232);
			event_names.accept(_position__anonymous_232);
			image_names.accept(_position__anonymous_232);
			tile_symbols.accept(_position__anonymous_232);
			payment_long_type_names.accept(_position__anonymous_232);
			area_names.accept(_position__anonymous_232);
			structure_names.accept(_position__anonymous_232);
			tile_names.accept(_position__anonymous_232);
			hero_stat.accept(_position__anonymous_232);
		}
	}
	public void parse__anonymous_50() {
		int _position__anonymous_50 = -1;
		Token.Parsed _token__anonymous_50 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_50=_position;
		_token__anonymous_50=_token;
		_token=new Tokens.Name.OptionToken();
		int _state_62 = _state;
		while(_position<_inputLength) {
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				break;
			}
		}
		if(_state_62==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"support_element(_anonymous_50)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_50;
		}
		else {
			parse_conditional_chance();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"support_element(_anonymous_50)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_50;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_50.add(_position__anonymous_50,_token);
		}
		_token=_token__anonymous_50;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_50);
			association_names.reject(_position__anonymous_50);
			room_names.reject(_position__anonymous_50);
			activity_names.reject(_position__anonymous_50);
			siding_names.reject(_position__anonymous_50);
			item_names.reject(_position__anonymous_50);
			aspect_names.reject(_position__anonymous_50);
			affinity_names.reject(_position__anonymous_50);
			activity_type_names.reject(_position__anonymous_50);
			trail_names.reject(_position__anonymous_50);
			attack_names.reject(_position__anonymous_50);
			reason_names.reject(_position__anonymous_50);
			trait_names.reject(_position__anonymous_50);
			condition_names.reject(_position__anonymous_50);
			payment_short_type_names.reject(_position__anonymous_50);
			skill_names.reject(_position__anonymous_50);
			map_names.reject(_position__anonymous_50);
			event_names.reject(_position__anonymous_50);
			image_names.reject(_position__anonymous_50);
			tile_symbols.reject(_position__anonymous_50);
			payment_long_type_names.reject(_position__anonymous_50);
			area_names.reject(_position__anonymous_50);
			structure_names.reject(_position__anonymous_50);
			tile_names.reject(_position__anonymous_50);
			hero_stat.reject(_position__anonymous_50);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_50);
			association_names.accept(_position__anonymous_50);
			room_names.accept(_position__anonymous_50);
			activity_names.accept(_position__anonymous_50);
			siding_names.accept(_position__anonymous_50);
			item_names.accept(_position__anonymous_50);
			aspect_names.accept(_position__anonymous_50);
			affinity_names.accept(_position__anonymous_50);
			activity_type_names.accept(_position__anonymous_50);
			trail_names.accept(_position__anonymous_50);
			attack_names.accept(_position__anonymous_50);
			reason_names.accept(_position__anonymous_50);
			trait_names.accept(_position__anonymous_50);
			condition_names.accept(_position__anonymous_50);
			payment_short_type_names.accept(_position__anonymous_50);
			skill_names.accept(_position__anonymous_50);
			map_names.accept(_position__anonymous_50);
			event_names.accept(_position__anonymous_50);
			image_names.accept(_position__anonymous_50);
			tile_symbols.accept(_position__anonymous_50);
			payment_long_type_names.accept(_position__anonymous_50);
			area_names.accept(_position__anonymous_50);
			structure_names.accept(_position__anonymous_50);
			tile_names.accept(_position__anonymous_50);
			hero_stat.accept(_position__anonymous_50);
		}
	}
	public void parse__anonymous_112() {
		int _position__anonymous_112 = -1;
		Token.Parsed _token__anonymous_112 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_112=_position;
		_token__anonymous_112=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+10-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='I') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='m') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='p') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+4]!='s') {
				_state=FAILED;
			}
			if(_inputArray[_position+5]!='s') {
				_state=FAILED;
			}
			if(_inputArray[_position+6]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+7]!='b') {
				_state=FAILED;
			}
			if(_inputArray[_position+8]!='l') {
				_state=FAILED;
			}
			if(_inputArray[_position+9]!='e') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_94.IMPASSABLE);
			_position=_position+10;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain Impassable");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_definition_element(_anonymous_112)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_112;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_112.addAll(_token);
			_token__anonymous_112.setValue(_token.getValue());
		}
		_token=_token__anonymous_112;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_112);
			association_names.reject(_position__anonymous_112);
			room_names.reject(_position__anonymous_112);
			activity_names.reject(_position__anonymous_112);
			siding_names.reject(_position__anonymous_112);
			item_names.reject(_position__anonymous_112);
			aspect_names.reject(_position__anonymous_112);
			affinity_names.reject(_position__anonymous_112);
			activity_type_names.reject(_position__anonymous_112);
			trail_names.reject(_position__anonymous_112);
			attack_names.reject(_position__anonymous_112);
			reason_names.reject(_position__anonymous_112);
			trait_names.reject(_position__anonymous_112);
			condition_names.reject(_position__anonymous_112);
			payment_short_type_names.reject(_position__anonymous_112);
			skill_names.reject(_position__anonymous_112);
			map_names.reject(_position__anonymous_112);
			event_names.reject(_position__anonymous_112);
			image_names.reject(_position__anonymous_112);
			tile_symbols.reject(_position__anonymous_112);
			payment_long_type_names.reject(_position__anonymous_112);
			area_names.reject(_position__anonymous_112);
			structure_names.reject(_position__anonymous_112);
			tile_names.reject(_position__anonymous_112);
			hero_stat.reject(_position__anonymous_112);
			_state=SUCCESS;
			_position__anonymous_112=_position;
			_token__anonymous_112=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			if(_position+8-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='P') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='a') {
					_state=FAILED;
				}
				if(_inputArray[_position+2]!='s') {
					_state=FAILED;
				}
				if(_inputArray[_position+3]!='s') {
					_state=FAILED;
				}
				if(_inputArray[_position+4]!='a') {
					_state=FAILED;
				}
				if(_inputArray[_position+5]!='b') {
					_state=FAILED;
				}
				if(_inputArray[_position+6]!='l') {
					_state=FAILED;
				}
				if(_inputArray[_position+7]!='e') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_95.PASSABLE);
				_position=_position+8;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain Passable");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_definition_element(_anonymous_112)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_112;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_112.addAll(_token);
				_token__anonymous_112.setValue(_token.getValue());
			}
			_token=_token__anonymous_112;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_112);
				association_names.reject(_position__anonymous_112);
				room_names.reject(_position__anonymous_112);
				activity_names.reject(_position__anonymous_112);
				siding_names.reject(_position__anonymous_112);
				item_names.reject(_position__anonymous_112);
				aspect_names.reject(_position__anonymous_112);
				affinity_names.reject(_position__anonymous_112);
				activity_type_names.reject(_position__anonymous_112);
				trail_names.reject(_position__anonymous_112);
				attack_names.reject(_position__anonymous_112);
				reason_names.reject(_position__anonymous_112);
				trait_names.reject(_position__anonymous_112);
				condition_names.reject(_position__anonymous_112);
				payment_short_type_names.reject(_position__anonymous_112);
				skill_names.reject(_position__anonymous_112);
				map_names.reject(_position__anonymous_112);
				event_names.reject(_position__anonymous_112);
				image_names.reject(_position__anonymous_112);
				tile_symbols.reject(_position__anonymous_112);
				payment_long_type_names.reject(_position__anonymous_112);
				area_names.reject(_position__anonymous_112);
				structure_names.reject(_position__anonymous_112);
				tile_names.reject(_position__anonymous_112);
				hero_stat.reject(_position__anonymous_112);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_112);
				association_names.accept(_position__anonymous_112);
				room_names.accept(_position__anonymous_112);
				activity_names.accept(_position__anonymous_112);
				siding_names.accept(_position__anonymous_112);
				item_names.accept(_position__anonymous_112);
				aspect_names.accept(_position__anonymous_112);
				affinity_names.accept(_position__anonymous_112);
				activity_type_names.accept(_position__anonymous_112);
				trail_names.accept(_position__anonymous_112);
				attack_names.accept(_position__anonymous_112);
				reason_names.accept(_position__anonymous_112);
				trait_names.accept(_position__anonymous_112);
				condition_names.accept(_position__anonymous_112);
				payment_short_type_names.accept(_position__anonymous_112);
				skill_names.accept(_position__anonymous_112);
				map_names.accept(_position__anonymous_112);
				event_names.accept(_position__anonymous_112);
				image_names.accept(_position__anonymous_112);
				tile_symbols.accept(_position__anonymous_112);
				payment_long_type_names.accept(_position__anonymous_112);
				area_names.accept(_position__anonymous_112);
				structure_names.accept(_position__anonymous_112);
				tile_names.accept(_position__anonymous_112);
				hero_stat.accept(_position__anonymous_112);
			}
		}
	}
	public void parse__anonymous_233() {
		int _position__anonymous_233 = -1;
		Token.Parsed _token__anonymous_233 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_233=_position;
		_token__anonymous_233=_token;
		_token=new Tokens.Name.SupplementaryToken();
		parse_drawable_arthmetic_operator();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_multiple_element(_anonymous_233)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_233;
		}
		else {
			parse_drawable_multiple_value();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_multiple_element(_anonymous_233)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_233;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_233.add(_position__anonymous_233,_token);
		}
		_token=_token__anonymous_233;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_233);
			association_names.reject(_position__anonymous_233);
			room_names.reject(_position__anonymous_233);
			activity_names.reject(_position__anonymous_233);
			siding_names.reject(_position__anonymous_233);
			item_names.reject(_position__anonymous_233);
			aspect_names.reject(_position__anonymous_233);
			affinity_names.reject(_position__anonymous_233);
			activity_type_names.reject(_position__anonymous_233);
			trail_names.reject(_position__anonymous_233);
			attack_names.reject(_position__anonymous_233);
			reason_names.reject(_position__anonymous_233);
			trait_names.reject(_position__anonymous_233);
			condition_names.reject(_position__anonymous_233);
			payment_short_type_names.reject(_position__anonymous_233);
			skill_names.reject(_position__anonymous_233);
			map_names.reject(_position__anonymous_233);
			event_names.reject(_position__anonymous_233);
			image_names.reject(_position__anonymous_233);
			tile_symbols.reject(_position__anonymous_233);
			payment_long_type_names.reject(_position__anonymous_233);
			area_names.reject(_position__anonymous_233);
			structure_names.reject(_position__anonymous_233);
			tile_names.reject(_position__anonymous_233);
			hero_stat.reject(_position__anonymous_233);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_233);
			association_names.accept(_position__anonymous_233);
			room_names.accept(_position__anonymous_233);
			activity_names.accept(_position__anonymous_233);
			siding_names.accept(_position__anonymous_233);
			item_names.accept(_position__anonymous_233);
			aspect_names.accept(_position__anonymous_233);
			affinity_names.accept(_position__anonymous_233);
			activity_type_names.accept(_position__anonymous_233);
			trail_names.accept(_position__anonymous_233);
			attack_names.accept(_position__anonymous_233);
			reason_names.accept(_position__anonymous_233);
			trait_names.accept(_position__anonymous_233);
			condition_names.accept(_position__anonymous_233);
			payment_short_type_names.accept(_position__anonymous_233);
			skill_names.accept(_position__anonymous_233);
			map_names.accept(_position__anonymous_233);
			event_names.accept(_position__anonymous_233);
			image_names.accept(_position__anonymous_233);
			tile_symbols.accept(_position__anonymous_233);
			payment_long_type_names.accept(_position__anonymous_233);
			area_names.accept(_position__anonymous_233);
			structure_names.accept(_position__anonymous_233);
			tile_names.accept(_position__anonymous_233);
			hero_stat.accept(_position__anonymous_233);
		}
	}
	public void parse__anonymous_53() {
		int _position__anonymous_53 = -1;
		Token.Parsed _token__anonymous_53 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_53=_position;
		_token__anonymous_53=_token;
		_token=new Tokens.Name.RangeToken();
		if(_position+5-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='r') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='n') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='g') {
				_state=FAILED;
			}
			if(_inputArray[_position+4]!='e') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_39.SYNTAX);
			_position=_position+5;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain range");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"skill_element(_anonymous_53)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_53;
		}
		else {
			parse_stat_range();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"skill_element(_anonymous_53)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_53;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_53.add(_position__anonymous_53,_token);
		}
		_token=_token__anonymous_53;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_53);
			association_names.reject(_position__anonymous_53);
			room_names.reject(_position__anonymous_53);
			activity_names.reject(_position__anonymous_53);
			siding_names.reject(_position__anonymous_53);
			item_names.reject(_position__anonymous_53);
			aspect_names.reject(_position__anonymous_53);
			affinity_names.reject(_position__anonymous_53);
			activity_type_names.reject(_position__anonymous_53);
			trail_names.reject(_position__anonymous_53);
			attack_names.reject(_position__anonymous_53);
			reason_names.reject(_position__anonymous_53);
			trait_names.reject(_position__anonymous_53);
			condition_names.reject(_position__anonymous_53);
			payment_short_type_names.reject(_position__anonymous_53);
			skill_names.reject(_position__anonymous_53);
			map_names.reject(_position__anonymous_53);
			event_names.reject(_position__anonymous_53);
			image_names.reject(_position__anonymous_53);
			tile_symbols.reject(_position__anonymous_53);
			payment_long_type_names.reject(_position__anonymous_53);
			area_names.reject(_position__anonymous_53);
			structure_names.reject(_position__anonymous_53);
			tile_names.reject(_position__anonymous_53);
			hero_stat.reject(_position__anonymous_53);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_53);
			association_names.accept(_position__anonymous_53);
			room_names.accept(_position__anonymous_53);
			activity_names.accept(_position__anonymous_53);
			siding_names.accept(_position__anonymous_53);
			item_names.accept(_position__anonymous_53);
			aspect_names.accept(_position__anonymous_53);
			affinity_names.accept(_position__anonymous_53);
			activity_type_names.accept(_position__anonymous_53);
			trail_names.accept(_position__anonymous_53);
			attack_names.accept(_position__anonymous_53);
			reason_names.accept(_position__anonymous_53);
			trait_names.accept(_position__anonymous_53);
			condition_names.accept(_position__anonymous_53);
			payment_short_type_names.accept(_position__anonymous_53);
			skill_names.accept(_position__anonymous_53);
			map_names.accept(_position__anonymous_53);
			event_names.accept(_position__anonymous_53);
			image_names.accept(_position__anonymous_53);
			tile_symbols.accept(_position__anonymous_53);
			payment_long_type_names.accept(_position__anonymous_53);
			area_names.accept(_position__anonymous_53);
			structure_names.accept(_position__anonymous_53);
			tile_names.accept(_position__anonymous_53);
			hero_stat.accept(_position__anonymous_53);
		}
	}
	public void parse__anonymous_113() {
		int _position__anonymous_113 = -1;
		Token.Parsed _token__anonymous_113 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_113=_position;
		_token__anonymous_113=_token;
		_token=new Tokens.Name.TileRateToken();
		parse_tile_cost();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_definition_element(_anonymous_113)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_113;
		}
		else {
			int _state_146 = _state;
			while(_position<_inputLength) {
				parse__anonymous_114();
				if(_state==FAILED) {
					break;
				}
			}
			if(_state_146==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_definition_element(_anonymous_113)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_113;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_113.add(_position__anonymous_113,_token);
		}
		_token=_token__anonymous_113;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_113);
			association_names.reject(_position__anonymous_113);
			room_names.reject(_position__anonymous_113);
			activity_names.reject(_position__anonymous_113);
			siding_names.reject(_position__anonymous_113);
			item_names.reject(_position__anonymous_113);
			aspect_names.reject(_position__anonymous_113);
			affinity_names.reject(_position__anonymous_113);
			activity_type_names.reject(_position__anonymous_113);
			trail_names.reject(_position__anonymous_113);
			attack_names.reject(_position__anonymous_113);
			reason_names.reject(_position__anonymous_113);
			trait_names.reject(_position__anonymous_113);
			condition_names.reject(_position__anonymous_113);
			payment_short_type_names.reject(_position__anonymous_113);
			skill_names.reject(_position__anonymous_113);
			map_names.reject(_position__anonymous_113);
			event_names.reject(_position__anonymous_113);
			image_names.reject(_position__anonymous_113);
			tile_symbols.reject(_position__anonymous_113);
			payment_long_type_names.reject(_position__anonymous_113);
			area_names.reject(_position__anonymous_113);
			structure_names.reject(_position__anonymous_113);
			tile_names.reject(_position__anonymous_113);
			hero_stat.reject(_position__anonymous_113);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_113);
			association_names.accept(_position__anonymous_113);
			room_names.accept(_position__anonymous_113);
			activity_names.accept(_position__anonymous_113);
			siding_names.accept(_position__anonymous_113);
			item_names.accept(_position__anonymous_113);
			aspect_names.accept(_position__anonymous_113);
			affinity_names.accept(_position__anonymous_113);
			activity_type_names.accept(_position__anonymous_113);
			trail_names.accept(_position__anonymous_113);
			attack_names.accept(_position__anonymous_113);
			reason_names.accept(_position__anonymous_113);
			trait_names.accept(_position__anonymous_113);
			condition_names.accept(_position__anonymous_113);
			payment_short_type_names.accept(_position__anonymous_113);
			skill_names.accept(_position__anonymous_113);
			map_names.accept(_position__anonymous_113);
			event_names.accept(_position__anonymous_113);
			image_names.accept(_position__anonymous_113);
			tile_symbols.accept(_position__anonymous_113);
			payment_long_type_names.accept(_position__anonymous_113);
			area_names.accept(_position__anonymous_113);
			structure_names.accept(_position__anonymous_113);
			tile_names.accept(_position__anonymous_113);
			hero_stat.accept(_position__anonymous_113);
		}
	}
	public void parse__anonymous_234() {
		int _position__anonymous_234 = -1;
		Token.Parsed _token__anonymous_234 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_234=_position;
		_token__anonymous_234=_token;
		_token=new Tokens.Name.RotationToken();
		parse_drawable_dimensions();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_multiple_element(_anonymous_234)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_234;
		}
		else {
			int _state_255 = _state;
			while(_position<_inputLength) {
				parse__anonymous_235();
				if(_state==FAILED) {
					break;
				}
			}
			if(_state_255==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_multiple_element(_anonymous_234)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_234;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_234.add(_position__anonymous_234,_token);
		}
		_token=_token__anonymous_234;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_234);
			association_names.reject(_position__anonymous_234);
			room_names.reject(_position__anonymous_234);
			activity_names.reject(_position__anonymous_234);
			siding_names.reject(_position__anonymous_234);
			item_names.reject(_position__anonymous_234);
			aspect_names.reject(_position__anonymous_234);
			affinity_names.reject(_position__anonymous_234);
			activity_type_names.reject(_position__anonymous_234);
			trail_names.reject(_position__anonymous_234);
			attack_names.reject(_position__anonymous_234);
			reason_names.reject(_position__anonymous_234);
			trait_names.reject(_position__anonymous_234);
			condition_names.reject(_position__anonymous_234);
			payment_short_type_names.reject(_position__anonymous_234);
			skill_names.reject(_position__anonymous_234);
			map_names.reject(_position__anonymous_234);
			event_names.reject(_position__anonymous_234);
			image_names.reject(_position__anonymous_234);
			tile_symbols.reject(_position__anonymous_234);
			payment_long_type_names.reject(_position__anonymous_234);
			area_names.reject(_position__anonymous_234);
			structure_names.reject(_position__anonymous_234);
			tile_names.reject(_position__anonymous_234);
			hero_stat.reject(_position__anonymous_234);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_234);
			association_names.accept(_position__anonymous_234);
			room_names.accept(_position__anonymous_234);
			activity_names.accept(_position__anonymous_234);
			siding_names.accept(_position__anonymous_234);
			item_names.accept(_position__anonymous_234);
			aspect_names.accept(_position__anonymous_234);
			affinity_names.accept(_position__anonymous_234);
			activity_type_names.accept(_position__anonymous_234);
			trail_names.accept(_position__anonymous_234);
			attack_names.accept(_position__anonymous_234);
			reason_names.accept(_position__anonymous_234);
			trait_names.accept(_position__anonymous_234);
			condition_names.accept(_position__anonymous_234);
			payment_short_type_names.accept(_position__anonymous_234);
			skill_names.accept(_position__anonymous_234);
			map_names.accept(_position__anonymous_234);
			event_names.accept(_position__anonymous_234);
			image_names.accept(_position__anonymous_234);
			tile_symbols.accept(_position__anonymous_234);
			payment_long_type_names.accept(_position__anonymous_234);
			area_names.accept(_position__anonymous_234);
			structure_names.accept(_position__anonymous_234);
			tile_names.accept(_position__anonymous_234);
			hero_stat.accept(_position__anonymous_234);
		}
	}
	public void parse__anonymous_52() {
		int _position__anonymous_52 = -1;
		Token.Parsed _token__anonymous_52 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_52=_position;
		_token__anonymous_52=_token;
		_token=new Tokens.Name.RequireToken();
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='?') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_17.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ?");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"skill_element(_anonymous_52)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_52;
		}
		else {
			parse_boolean_statement();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"skill_element(_anonymous_52)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_52;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_52.add(_position__anonymous_52,_token);
		}
		_token=_token__anonymous_52;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_52);
			association_names.reject(_position__anonymous_52);
			room_names.reject(_position__anonymous_52);
			activity_names.reject(_position__anonymous_52);
			siding_names.reject(_position__anonymous_52);
			item_names.reject(_position__anonymous_52);
			aspect_names.reject(_position__anonymous_52);
			affinity_names.reject(_position__anonymous_52);
			activity_type_names.reject(_position__anonymous_52);
			trail_names.reject(_position__anonymous_52);
			attack_names.reject(_position__anonymous_52);
			reason_names.reject(_position__anonymous_52);
			trait_names.reject(_position__anonymous_52);
			condition_names.reject(_position__anonymous_52);
			payment_short_type_names.reject(_position__anonymous_52);
			skill_names.reject(_position__anonymous_52);
			map_names.reject(_position__anonymous_52);
			event_names.reject(_position__anonymous_52);
			image_names.reject(_position__anonymous_52);
			tile_symbols.reject(_position__anonymous_52);
			payment_long_type_names.reject(_position__anonymous_52);
			area_names.reject(_position__anonymous_52);
			structure_names.reject(_position__anonymous_52);
			tile_names.reject(_position__anonymous_52);
			hero_stat.reject(_position__anonymous_52);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_52);
			association_names.accept(_position__anonymous_52);
			room_names.accept(_position__anonymous_52);
			activity_names.accept(_position__anonymous_52);
			siding_names.accept(_position__anonymous_52);
			item_names.accept(_position__anonymous_52);
			aspect_names.accept(_position__anonymous_52);
			affinity_names.accept(_position__anonymous_52);
			activity_type_names.accept(_position__anonymous_52);
			trail_names.accept(_position__anonymous_52);
			attack_names.accept(_position__anonymous_52);
			reason_names.accept(_position__anonymous_52);
			trait_names.accept(_position__anonymous_52);
			condition_names.accept(_position__anonymous_52);
			payment_short_type_names.accept(_position__anonymous_52);
			skill_names.accept(_position__anonymous_52);
			map_names.accept(_position__anonymous_52);
			event_names.accept(_position__anonymous_52);
			image_names.accept(_position__anonymous_52);
			tile_symbols.accept(_position__anonymous_52);
			payment_long_type_names.accept(_position__anonymous_52);
			area_names.accept(_position__anonymous_52);
			structure_names.accept(_position__anonymous_52);
			tile_names.accept(_position__anonymous_52);
			hero_stat.accept(_position__anonymous_52);
		}
	}
	public void parse__anonymous_114() {
		int _position__anonymous_114 = -1;
		Token.Parsed _token__anonymous_114 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_114=_position;
		_token__anonymous_114=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='|') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_35.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain |");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_definition_element(_anonymous_114)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_114;
		}
		else {
			parse_tile_cost();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_definition_element(_anonymous_114)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_114;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_114.addAll(_token);
			_token__anonymous_114.setValue(_token.getValue());
		}
		_token=_token__anonymous_114;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_114);
			association_names.reject(_position__anonymous_114);
			room_names.reject(_position__anonymous_114);
			activity_names.reject(_position__anonymous_114);
			siding_names.reject(_position__anonymous_114);
			item_names.reject(_position__anonymous_114);
			aspect_names.reject(_position__anonymous_114);
			affinity_names.reject(_position__anonymous_114);
			activity_type_names.reject(_position__anonymous_114);
			trail_names.reject(_position__anonymous_114);
			attack_names.reject(_position__anonymous_114);
			reason_names.reject(_position__anonymous_114);
			trait_names.reject(_position__anonymous_114);
			condition_names.reject(_position__anonymous_114);
			payment_short_type_names.reject(_position__anonymous_114);
			skill_names.reject(_position__anonymous_114);
			map_names.reject(_position__anonymous_114);
			event_names.reject(_position__anonymous_114);
			image_names.reject(_position__anonymous_114);
			tile_symbols.reject(_position__anonymous_114);
			payment_long_type_names.reject(_position__anonymous_114);
			area_names.reject(_position__anonymous_114);
			structure_names.reject(_position__anonymous_114);
			tile_names.reject(_position__anonymous_114);
			hero_stat.reject(_position__anonymous_114);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_114);
			association_names.accept(_position__anonymous_114);
			room_names.accept(_position__anonymous_114);
			activity_names.accept(_position__anonymous_114);
			siding_names.accept(_position__anonymous_114);
			item_names.accept(_position__anonymous_114);
			aspect_names.accept(_position__anonymous_114);
			affinity_names.accept(_position__anonymous_114);
			activity_type_names.accept(_position__anonymous_114);
			trail_names.accept(_position__anonymous_114);
			attack_names.accept(_position__anonymous_114);
			reason_names.accept(_position__anonymous_114);
			trait_names.accept(_position__anonymous_114);
			condition_names.accept(_position__anonymous_114);
			payment_short_type_names.accept(_position__anonymous_114);
			skill_names.accept(_position__anonymous_114);
			map_names.accept(_position__anonymous_114);
			event_names.accept(_position__anonymous_114);
			image_names.accept(_position__anonymous_114);
			tile_symbols.accept(_position__anonymous_114);
			payment_long_type_names.accept(_position__anonymous_114);
			area_names.accept(_position__anonymous_114);
			structure_names.accept(_position__anonymous_114);
			tile_names.accept(_position__anonymous_114);
			hero_stat.accept(_position__anonymous_114);
		}
	}
	public void parse__anonymous_235() {
		int _position__anonymous_235 = -1;
		Token.Parsed _token__anonymous_235 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_235=_position;
		_token__anonymous_235=_token;
		_token=new Tokens.Name.SupplementaryToken();
		parse_drawable_arthmetic_operator();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_multiple_element(_anonymous_235)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_235;
		}
		else {
			parse_drawable_multiple_value();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"drawable_multiple_element(_anonymous_235)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_235;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_235.add(_position__anonymous_235,_token);
		}
		_token=_token__anonymous_235;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_235);
			association_names.reject(_position__anonymous_235);
			room_names.reject(_position__anonymous_235);
			activity_names.reject(_position__anonymous_235);
			siding_names.reject(_position__anonymous_235);
			item_names.reject(_position__anonymous_235);
			aspect_names.reject(_position__anonymous_235);
			affinity_names.reject(_position__anonymous_235);
			activity_type_names.reject(_position__anonymous_235);
			trail_names.reject(_position__anonymous_235);
			attack_names.reject(_position__anonymous_235);
			reason_names.reject(_position__anonymous_235);
			trait_names.reject(_position__anonymous_235);
			condition_names.reject(_position__anonymous_235);
			payment_short_type_names.reject(_position__anonymous_235);
			skill_names.reject(_position__anonymous_235);
			map_names.reject(_position__anonymous_235);
			event_names.reject(_position__anonymous_235);
			image_names.reject(_position__anonymous_235);
			tile_symbols.reject(_position__anonymous_235);
			payment_long_type_names.reject(_position__anonymous_235);
			area_names.reject(_position__anonymous_235);
			structure_names.reject(_position__anonymous_235);
			tile_names.reject(_position__anonymous_235);
			hero_stat.reject(_position__anonymous_235);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_235);
			association_names.accept(_position__anonymous_235);
			room_names.accept(_position__anonymous_235);
			activity_names.accept(_position__anonymous_235);
			siding_names.accept(_position__anonymous_235);
			item_names.accept(_position__anonymous_235);
			aspect_names.accept(_position__anonymous_235);
			affinity_names.accept(_position__anonymous_235);
			activity_type_names.accept(_position__anonymous_235);
			trail_names.accept(_position__anonymous_235);
			attack_names.accept(_position__anonymous_235);
			reason_names.accept(_position__anonymous_235);
			trait_names.accept(_position__anonymous_235);
			condition_names.accept(_position__anonymous_235);
			payment_short_type_names.accept(_position__anonymous_235);
			skill_names.accept(_position__anonymous_235);
			map_names.accept(_position__anonymous_235);
			event_names.accept(_position__anonymous_235);
			image_names.accept(_position__anonymous_235);
			tile_symbols.accept(_position__anonymous_235);
			payment_long_type_names.accept(_position__anonymous_235);
			area_names.accept(_position__anonymous_235);
			structure_names.accept(_position__anonymous_235);
			tile_names.accept(_position__anonymous_235);
			hero_stat.accept(_position__anonymous_235);
		}
	}
	public void parse__anonymous_119() {
		int _position__anonymous_119 = -1;
		Token.Parsed _token__anonymous_119 = null;
		int _position_comments = -1;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_119=_position;
		_token__anonymous_119=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_payment_type(_anonymous_119)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_119;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_119.addAll(_token);
			_token__anonymous_119.setValue(_token.getValue());
		}
		_token=_token__anonymous_119;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_119);
			association_names.reject(_position__anonymous_119);
			room_names.reject(_position__anonymous_119);
			activity_names.reject(_position__anonymous_119);
			siding_names.reject(_position__anonymous_119);
			item_names.reject(_position__anonymous_119);
			aspect_names.reject(_position__anonymous_119);
			affinity_names.reject(_position__anonymous_119);
			activity_type_names.reject(_position__anonymous_119);
			trail_names.reject(_position__anonymous_119);
			attack_names.reject(_position__anonymous_119);
			reason_names.reject(_position__anonymous_119);
			trait_names.reject(_position__anonymous_119);
			condition_names.reject(_position__anonymous_119);
			payment_short_type_names.reject(_position__anonymous_119);
			skill_names.reject(_position__anonymous_119);
			map_names.reject(_position__anonymous_119);
			event_names.reject(_position__anonymous_119);
			image_names.reject(_position__anonymous_119);
			tile_symbols.reject(_position__anonymous_119);
			payment_long_type_names.reject(_position__anonymous_119);
			area_names.reject(_position__anonymous_119);
			structure_names.reject(_position__anonymous_119);
			tile_names.reject(_position__anonymous_119);
			hero_stat.reject(_position__anonymous_119);
			_state=SUCCESS;
			_position__anonymous_119=_position;
			_token__anonymous_119=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			_position_comments=_position;
			if(_state==SUCCESS&&!_recursion_protection_comments_30.contains(_position)) {
				_recursion_protection_comments_30.add(_position);
				parse_comments();
				_recursion_protection_comments_30.remove(_position_comments);
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_payment_type(_anonymous_119)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_119;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_119.addAll(_token);
				_token__anonymous_119.setValue(_token.getValue());
			}
			_token=_token__anonymous_119;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_119);
				association_names.reject(_position__anonymous_119);
				room_names.reject(_position__anonymous_119);
				activity_names.reject(_position__anonymous_119);
				siding_names.reject(_position__anonymous_119);
				item_names.reject(_position__anonymous_119);
				aspect_names.reject(_position__anonymous_119);
				affinity_names.reject(_position__anonymous_119);
				activity_type_names.reject(_position__anonymous_119);
				trail_names.reject(_position__anonymous_119);
				attack_names.reject(_position__anonymous_119);
				reason_names.reject(_position__anonymous_119);
				trait_names.reject(_position__anonymous_119);
				condition_names.reject(_position__anonymous_119);
				payment_short_type_names.reject(_position__anonymous_119);
				skill_names.reject(_position__anonymous_119);
				map_names.reject(_position__anonymous_119);
				event_names.reject(_position__anonymous_119);
				image_names.reject(_position__anonymous_119);
				tile_symbols.reject(_position__anonymous_119);
				payment_long_type_names.reject(_position__anonymous_119);
				area_names.reject(_position__anonymous_119);
				structure_names.reject(_position__anonymous_119);
				tile_names.reject(_position__anonymous_119);
				hero_stat.reject(_position__anonymous_119);
				_state=SUCCESS;
				_position__anonymous_119=_position;
				_token__anonymous_119=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				parse_payment_type_declaration();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_payment_type(_anonymous_119)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_119;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_119.addAll(_token);
					_token__anonymous_119.setValue(_token.getValue());
				}
				_token=_token__anonymous_119;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_119);
					association_names.reject(_position__anonymous_119);
					room_names.reject(_position__anonymous_119);
					activity_names.reject(_position__anonymous_119);
					siding_names.reject(_position__anonymous_119);
					item_names.reject(_position__anonymous_119);
					aspect_names.reject(_position__anonymous_119);
					affinity_names.reject(_position__anonymous_119);
					activity_type_names.reject(_position__anonymous_119);
					trail_names.reject(_position__anonymous_119);
					attack_names.reject(_position__anonymous_119);
					reason_names.reject(_position__anonymous_119);
					trait_names.reject(_position__anonymous_119);
					condition_names.reject(_position__anonymous_119);
					payment_short_type_names.reject(_position__anonymous_119);
					skill_names.reject(_position__anonymous_119);
					map_names.reject(_position__anonymous_119);
					event_names.reject(_position__anonymous_119);
					image_names.reject(_position__anonymous_119);
					tile_symbols.reject(_position__anonymous_119);
					payment_long_type_names.reject(_position__anonymous_119);
					area_names.reject(_position__anonymous_119);
					structure_names.reject(_position__anonymous_119);
					tile_names.reject(_position__anonymous_119);
					hero_stat.reject(_position__anonymous_119);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_119);
					association_names.accept(_position__anonymous_119);
					room_names.accept(_position__anonymous_119);
					activity_names.accept(_position__anonymous_119);
					siding_names.accept(_position__anonymous_119);
					item_names.accept(_position__anonymous_119);
					aspect_names.accept(_position__anonymous_119);
					affinity_names.accept(_position__anonymous_119);
					activity_type_names.accept(_position__anonymous_119);
					trail_names.accept(_position__anonymous_119);
					attack_names.accept(_position__anonymous_119);
					reason_names.accept(_position__anonymous_119);
					trait_names.accept(_position__anonymous_119);
					condition_names.accept(_position__anonymous_119);
					payment_short_type_names.accept(_position__anonymous_119);
					skill_names.accept(_position__anonymous_119);
					map_names.accept(_position__anonymous_119);
					event_names.accept(_position__anonymous_119);
					image_names.accept(_position__anonymous_119);
					tile_symbols.accept(_position__anonymous_119);
					payment_long_type_names.accept(_position__anonymous_119);
					area_names.accept(_position__anonymous_119);
					structure_names.accept(_position__anonymous_119);
					tile_names.accept(_position__anonymous_119);
					hero_stat.accept(_position__anonymous_119);
				}
			}
		}
	}
	public void parse__anonymous_44() {
		int _position__anonymous_44 = -1;
		Token.Parsed _token__anonymous_44 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_44=_position;
		_token__anonymous_44=_token;
		_token=new Tokens.Name.MissToken();
		if(_position+4-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='m') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='i') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='s') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='s') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_44.SYNTAX);
			_position=_position+4;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain miss");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"attack_element(_anonymous_44)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_44;
		}
		else {
			int _state_57 = _state;
			while(_position<_inputLength) {
				parse__anonymous_45();
				if(_state==FAILED) {
					break;
				}
			}
			if(_state_57==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"attack_element(_anonymous_44)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_44;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_44.add(_position__anonymous_44,_token);
		}
		_token=_token__anonymous_44;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_44);
			association_names.reject(_position__anonymous_44);
			room_names.reject(_position__anonymous_44);
			activity_names.reject(_position__anonymous_44);
			siding_names.reject(_position__anonymous_44);
			item_names.reject(_position__anonymous_44);
			aspect_names.reject(_position__anonymous_44);
			affinity_names.reject(_position__anonymous_44);
			activity_type_names.reject(_position__anonymous_44);
			trail_names.reject(_position__anonymous_44);
			attack_names.reject(_position__anonymous_44);
			reason_names.reject(_position__anonymous_44);
			trait_names.reject(_position__anonymous_44);
			condition_names.reject(_position__anonymous_44);
			payment_short_type_names.reject(_position__anonymous_44);
			skill_names.reject(_position__anonymous_44);
			map_names.reject(_position__anonymous_44);
			event_names.reject(_position__anonymous_44);
			image_names.reject(_position__anonymous_44);
			tile_symbols.reject(_position__anonymous_44);
			payment_long_type_names.reject(_position__anonymous_44);
			area_names.reject(_position__anonymous_44);
			structure_names.reject(_position__anonymous_44);
			tile_names.reject(_position__anonymous_44);
			hero_stat.reject(_position__anonymous_44);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_44);
			association_names.accept(_position__anonymous_44);
			room_names.accept(_position__anonymous_44);
			activity_names.accept(_position__anonymous_44);
			siding_names.accept(_position__anonymous_44);
			item_names.accept(_position__anonymous_44);
			aspect_names.accept(_position__anonymous_44);
			affinity_names.accept(_position__anonymous_44);
			activity_type_names.accept(_position__anonymous_44);
			trail_names.accept(_position__anonymous_44);
			attack_names.accept(_position__anonymous_44);
			reason_names.accept(_position__anonymous_44);
			trait_names.accept(_position__anonymous_44);
			condition_names.accept(_position__anonymous_44);
			payment_short_type_names.accept(_position__anonymous_44);
			skill_names.accept(_position__anonymous_44);
			map_names.accept(_position__anonymous_44);
			event_names.accept(_position__anonymous_44);
			image_names.accept(_position__anonymous_44);
			tile_symbols.accept(_position__anonymous_44);
			payment_long_type_names.accept(_position__anonymous_44);
			area_names.accept(_position__anonymous_44);
			structure_names.accept(_position__anonymous_44);
			tile_names.accept(_position__anonymous_44);
			hero_stat.accept(_position__anonymous_44);
		}
	}
	public void parse__anonymous_151() {
		int _position__anonymous_151 = -1;
		Token.Parsed _token__anonymous_151 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_151=_position;
		_token__anonymous_151=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+7-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='b') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='e') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='c') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+4]!='u') {
				_state=FAILED;
			}
			if(_inputArray[_position+5]!='s') {
				_state=FAILED;
			}
			if(_inputArray[_position+6]!='e') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_112.SYNTAX);
			_position=_position+7;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain because");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"influence(_anonymous_151)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_151;
		}
		else {
			if(_pass==FIRST_PASS) {
				String _result = _preparsed_NAME.get(_position);
				if(_result==null) {
					_state=FAILED;
				}
				else {
					Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
					_token.add(_position,_first_pass_token);
					_position+=_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else if(_pass==SECOND_PASS) {
				_list_name_result=_preparsed_NAME.get(_position);
				if(_list_name_result!=null&&reason_names.contains(_list_name_result)) {
					if(_position+_list_name_result.length()<_inputLength) {
						int _next_char = _inputArray[_position+_list_name_result.length()];
						if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,new Tokens.Name.ReasonNamesToken(_list_name_result));
						_position+=_list_name_result.length();
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
				}
				else {
					_state=FAILED;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"reason_names");
						_furthestPosition=_position;
					}
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"influence(_anonymous_151)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_151;
			}
			else {
				parse_method_arguments();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"influence(_anonymous_151)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_151;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_151.addAll(_token);
			_token__anonymous_151.setValue(_token.getValue());
		}
		_token=_token__anonymous_151;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_151);
			association_names.reject(_position__anonymous_151);
			room_names.reject(_position__anonymous_151);
			activity_names.reject(_position__anonymous_151);
			siding_names.reject(_position__anonymous_151);
			item_names.reject(_position__anonymous_151);
			aspect_names.reject(_position__anonymous_151);
			affinity_names.reject(_position__anonymous_151);
			activity_type_names.reject(_position__anonymous_151);
			trail_names.reject(_position__anonymous_151);
			attack_names.reject(_position__anonymous_151);
			reason_names.reject(_position__anonymous_151);
			trait_names.reject(_position__anonymous_151);
			condition_names.reject(_position__anonymous_151);
			payment_short_type_names.reject(_position__anonymous_151);
			skill_names.reject(_position__anonymous_151);
			map_names.reject(_position__anonymous_151);
			event_names.reject(_position__anonymous_151);
			image_names.reject(_position__anonymous_151);
			tile_symbols.reject(_position__anonymous_151);
			payment_long_type_names.reject(_position__anonymous_151);
			area_names.reject(_position__anonymous_151);
			structure_names.reject(_position__anonymous_151);
			tile_names.reject(_position__anonymous_151);
			hero_stat.reject(_position__anonymous_151);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_151);
			association_names.accept(_position__anonymous_151);
			room_names.accept(_position__anonymous_151);
			activity_names.accept(_position__anonymous_151);
			siding_names.accept(_position__anonymous_151);
			item_names.accept(_position__anonymous_151);
			aspect_names.accept(_position__anonymous_151);
			affinity_names.accept(_position__anonymous_151);
			activity_type_names.accept(_position__anonymous_151);
			trail_names.accept(_position__anonymous_151);
			attack_names.accept(_position__anonymous_151);
			reason_names.accept(_position__anonymous_151);
			trait_names.accept(_position__anonymous_151);
			condition_names.accept(_position__anonymous_151);
			payment_short_type_names.accept(_position__anonymous_151);
			skill_names.accept(_position__anonymous_151);
			map_names.accept(_position__anonymous_151);
			event_names.accept(_position__anonymous_151);
			image_names.accept(_position__anonymous_151);
			tile_symbols.accept(_position__anonymous_151);
			payment_long_type_names.accept(_position__anonymous_151);
			area_names.accept(_position__anonymous_151);
			structure_names.accept(_position__anonymous_151);
			tile_names.accept(_position__anonymous_151);
			hero_stat.accept(_position__anonymous_151);
		}
	}
	public void parse__anonymous_43() {
		int _position__anonymous_43 = -1;
		Token.Parsed _token__anonymous_43 = null;
		int _position_stat_range = -1;
		Token.Parsed _token_stat_range = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_43=_position;
		_token__anonymous_43=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		_token_stat_range=_token;
		_token=new Tokens.Name.ByStatToken();
		_position_stat_range=_position;
		parse_stat_range();
		if(_state==SUCCESS) {
			_token_stat_range.add(_position_stat_range,_token);
		}
		_token=_token_stat_range;
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"attack_element(_anonymous_43)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_43;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_43.addAll(_token);
			_token__anonymous_43.setValue(_token.getValue());
		}
		_token=_token__anonymous_43;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_43);
			association_names.reject(_position__anonymous_43);
			room_names.reject(_position__anonymous_43);
			activity_names.reject(_position__anonymous_43);
			siding_names.reject(_position__anonymous_43);
			item_names.reject(_position__anonymous_43);
			aspect_names.reject(_position__anonymous_43);
			affinity_names.reject(_position__anonymous_43);
			activity_type_names.reject(_position__anonymous_43);
			trail_names.reject(_position__anonymous_43);
			attack_names.reject(_position__anonymous_43);
			reason_names.reject(_position__anonymous_43);
			trait_names.reject(_position__anonymous_43);
			condition_names.reject(_position__anonymous_43);
			payment_short_type_names.reject(_position__anonymous_43);
			skill_names.reject(_position__anonymous_43);
			map_names.reject(_position__anonymous_43);
			event_names.reject(_position__anonymous_43);
			image_names.reject(_position__anonymous_43);
			tile_symbols.reject(_position__anonymous_43);
			payment_long_type_names.reject(_position__anonymous_43);
			area_names.reject(_position__anonymous_43);
			structure_names.reject(_position__anonymous_43);
			tile_names.reject(_position__anonymous_43);
			hero_stat.reject(_position__anonymous_43);
			_state=SUCCESS;
			_position__anonymous_43=_position;
			_token__anonymous_43=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			parse_std_body();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"attack_element(_anonymous_43)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_43;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_43.addAll(_token);
				_token__anonymous_43.setValue(_token.getValue());
			}
			_token=_token__anonymous_43;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_43);
				association_names.reject(_position__anonymous_43);
				room_names.reject(_position__anonymous_43);
				activity_names.reject(_position__anonymous_43);
				siding_names.reject(_position__anonymous_43);
				item_names.reject(_position__anonymous_43);
				aspect_names.reject(_position__anonymous_43);
				affinity_names.reject(_position__anonymous_43);
				activity_type_names.reject(_position__anonymous_43);
				trail_names.reject(_position__anonymous_43);
				attack_names.reject(_position__anonymous_43);
				reason_names.reject(_position__anonymous_43);
				trait_names.reject(_position__anonymous_43);
				condition_names.reject(_position__anonymous_43);
				payment_short_type_names.reject(_position__anonymous_43);
				skill_names.reject(_position__anonymous_43);
				map_names.reject(_position__anonymous_43);
				event_names.reject(_position__anonymous_43);
				image_names.reject(_position__anonymous_43);
				tile_symbols.reject(_position__anonymous_43);
				payment_long_type_names.reject(_position__anonymous_43);
				area_names.reject(_position__anonymous_43);
				structure_names.reject(_position__anonymous_43);
				tile_names.reject(_position__anonymous_43);
				hero_stat.reject(_position__anonymous_43);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_43);
				association_names.accept(_position__anonymous_43);
				room_names.accept(_position__anonymous_43);
				activity_names.accept(_position__anonymous_43);
				siding_names.accept(_position__anonymous_43);
				item_names.accept(_position__anonymous_43);
				aspect_names.accept(_position__anonymous_43);
				affinity_names.accept(_position__anonymous_43);
				activity_type_names.accept(_position__anonymous_43);
				trail_names.accept(_position__anonymous_43);
				attack_names.accept(_position__anonymous_43);
				reason_names.accept(_position__anonymous_43);
				trait_names.accept(_position__anonymous_43);
				condition_names.accept(_position__anonymous_43);
				payment_short_type_names.accept(_position__anonymous_43);
				skill_names.accept(_position__anonymous_43);
				map_names.accept(_position__anonymous_43);
				event_names.accept(_position__anonymous_43);
				image_names.accept(_position__anonymous_43);
				tile_symbols.accept(_position__anonymous_43);
				payment_long_type_names.accept(_position__anonymous_43);
				area_names.accept(_position__anonymous_43);
				structure_names.accept(_position__anonymous_43);
				tile_names.accept(_position__anonymous_43);
				hero_stat.accept(_position__anonymous_43);
			}
		}
	}
	public void parse__anonymous_152() {
		int _position__anonymous_152 = -1;
		Token.Parsed _token__anonymous_152 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_152=_position;
		_token__anonymous_152=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse_statement();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"quest_addition(_anonymous_152)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_152;
		}
		else {
			int _state_175 = _state;
			while(_position<_inputLength) {
				parse__anonymous_153();
				if(_state==FAILED) {
					break;
				}
			}
			if(_state_175==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"quest_addition(_anonymous_152)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_152;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_152.addAll(_token);
			_token__anonymous_152.setValue(_token.getValue());
		}
		_token=_token__anonymous_152;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_152);
			association_names.reject(_position__anonymous_152);
			room_names.reject(_position__anonymous_152);
			activity_names.reject(_position__anonymous_152);
			siding_names.reject(_position__anonymous_152);
			item_names.reject(_position__anonymous_152);
			aspect_names.reject(_position__anonymous_152);
			affinity_names.reject(_position__anonymous_152);
			activity_type_names.reject(_position__anonymous_152);
			trail_names.reject(_position__anonymous_152);
			attack_names.reject(_position__anonymous_152);
			reason_names.reject(_position__anonymous_152);
			trait_names.reject(_position__anonymous_152);
			condition_names.reject(_position__anonymous_152);
			payment_short_type_names.reject(_position__anonymous_152);
			skill_names.reject(_position__anonymous_152);
			map_names.reject(_position__anonymous_152);
			event_names.reject(_position__anonymous_152);
			image_names.reject(_position__anonymous_152);
			tile_symbols.reject(_position__anonymous_152);
			payment_long_type_names.reject(_position__anonymous_152);
			area_names.reject(_position__anonymous_152);
			structure_names.reject(_position__anonymous_152);
			tile_names.reject(_position__anonymous_152);
			hero_stat.reject(_position__anonymous_152);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_152);
			association_names.accept(_position__anonymous_152);
			room_names.accept(_position__anonymous_152);
			activity_names.accept(_position__anonymous_152);
			siding_names.accept(_position__anonymous_152);
			item_names.accept(_position__anonymous_152);
			aspect_names.accept(_position__anonymous_152);
			affinity_names.accept(_position__anonymous_152);
			activity_type_names.accept(_position__anonymous_152);
			trail_names.accept(_position__anonymous_152);
			attack_names.accept(_position__anonymous_152);
			reason_names.accept(_position__anonymous_152);
			trait_names.accept(_position__anonymous_152);
			condition_names.accept(_position__anonymous_152);
			payment_short_type_names.accept(_position__anonymous_152);
			skill_names.accept(_position__anonymous_152);
			map_names.accept(_position__anonymous_152);
			event_names.accept(_position__anonymous_152);
			image_names.accept(_position__anonymous_152);
			tile_symbols.accept(_position__anonymous_152);
			payment_long_type_names.accept(_position__anonymous_152);
			area_names.accept(_position__anonymous_152);
			structure_names.accept(_position__anonymous_152);
			tile_names.accept(_position__anonymous_152);
			hero_stat.accept(_position__anonymous_152);
		}
	}
	public void parse__anonymous_46() {
		int _position__anonymous_46 = -1;
		Token.Parsed _token__anonymous_46 = null;
		int _position_comments = -1;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_46=_position;
		_token__anonymous_46=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_support(_anonymous_46)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_46;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_46.addAll(_token);
			_token__anonymous_46.setValue(_token.getValue());
		}
		_token=_token__anonymous_46;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_46);
			association_names.reject(_position__anonymous_46);
			room_names.reject(_position__anonymous_46);
			activity_names.reject(_position__anonymous_46);
			siding_names.reject(_position__anonymous_46);
			item_names.reject(_position__anonymous_46);
			aspect_names.reject(_position__anonymous_46);
			affinity_names.reject(_position__anonymous_46);
			activity_type_names.reject(_position__anonymous_46);
			trail_names.reject(_position__anonymous_46);
			attack_names.reject(_position__anonymous_46);
			reason_names.reject(_position__anonymous_46);
			trait_names.reject(_position__anonymous_46);
			condition_names.reject(_position__anonymous_46);
			payment_short_type_names.reject(_position__anonymous_46);
			skill_names.reject(_position__anonymous_46);
			map_names.reject(_position__anonymous_46);
			event_names.reject(_position__anonymous_46);
			image_names.reject(_position__anonymous_46);
			tile_symbols.reject(_position__anonymous_46);
			payment_long_type_names.reject(_position__anonymous_46);
			area_names.reject(_position__anonymous_46);
			structure_names.reject(_position__anonymous_46);
			tile_names.reject(_position__anonymous_46);
			hero_stat.reject(_position__anonymous_46);
			_state=SUCCESS;
			_position__anonymous_46=_position;
			_token__anonymous_46=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			_position_comments=_position;
			if(_state==SUCCESS&&!_recursion_protection_comments_16.contains(_position)) {
				_recursion_protection_comments_16.add(_position);
				parse_comments();
				_recursion_protection_comments_16.remove(_position_comments);
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_support(_anonymous_46)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_46;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_46.addAll(_token);
				_token__anonymous_46.setValue(_token.getValue());
			}
			_token=_token__anonymous_46;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_46);
				association_names.reject(_position__anonymous_46);
				room_names.reject(_position__anonymous_46);
				activity_names.reject(_position__anonymous_46);
				siding_names.reject(_position__anonymous_46);
				item_names.reject(_position__anonymous_46);
				aspect_names.reject(_position__anonymous_46);
				affinity_names.reject(_position__anonymous_46);
				activity_type_names.reject(_position__anonymous_46);
				trail_names.reject(_position__anonymous_46);
				attack_names.reject(_position__anonymous_46);
				reason_names.reject(_position__anonymous_46);
				trait_names.reject(_position__anonymous_46);
				condition_names.reject(_position__anonymous_46);
				payment_short_type_names.reject(_position__anonymous_46);
				skill_names.reject(_position__anonymous_46);
				map_names.reject(_position__anonymous_46);
				event_names.reject(_position__anonymous_46);
				image_names.reject(_position__anonymous_46);
				tile_symbols.reject(_position__anonymous_46);
				payment_long_type_names.reject(_position__anonymous_46);
				area_names.reject(_position__anonymous_46);
				structure_names.reject(_position__anonymous_46);
				tile_names.reject(_position__anonymous_46);
				hero_stat.reject(_position__anonymous_46);
				_state=SUCCESS;
				_position__anonymous_46=_position;
				_token__anonymous_46=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				parse_support_declaration();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_support(_anonymous_46)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_46;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_46.addAll(_token);
					_token__anonymous_46.setValue(_token.getValue());
				}
				_token=_token__anonymous_46;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_46);
					association_names.reject(_position__anonymous_46);
					room_names.reject(_position__anonymous_46);
					activity_names.reject(_position__anonymous_46);
					siding_names.reject(_position__anonymous_46);
					item_names.reject(_position__anonymous_46);
					aspect_names.reject(_position__anonymous_46);
					affinity_names.reject(_position__anonymous_46);
					activity_type_names.reject(_position__anonymous_46);
					trail_names.reject(_position__anonymous_46);
					attack_names.reject(_position__anonymous_46);
					reason_names.reject(_position__anonymous_46);
					trait_names.reject(_position__anonymous_46);
					condition_names.reject(_position__anonymous_46);
					payment_short_type_names.reject(_position__anonymous_46);
					skill_names.reject(_position__anonymous_46);
					map_names.reject(_position__anonymous_46);
					event_names.reject(_position__anonymous_46);
					image_names.reject(_position__anonymous_46);
					tile_symbols.reject(_position__anonymous_46);
					payment_long_type_names.reject(_position__anonymous_46);
					area_names.reject(_position__anonymous_46);
					structure_names.reject(_position__anonymous_46);
					tile_names.reject(_position__anonymous_46);
					hero_stat.reject(_position__anonymous_46);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_46);
					association_names.accept(_position__anonymous_46);
					room_names.accept(_position__anonymous_46);
					activity_names.accept(_position__anonymous_46);
					siding_names.accept(_position__anonymous_46);
					item_names.accept(_position__anonymous_46);
					aspect_names.accept(_position__anonymous_46);
					affinity_names.accept(_position__anonymous_46);
					activity_type_names.accept(_position__anonymous_46);
					trail_names.accept(_position__anonymous_46);
					attack_names.accept(_position__anonymous_46);
					reason_names.accept(_position__anonymous_46);
					trait_names.accept(_position__anonymous_46);
					condition_names.accept(_position__anonymous_46);
					payment_short_type_names.accept(_position__anonymous_46);
					skill_names.accept(_position__anonymous_46);
					map_names.accept(_position__anonymous_46);
					event_names.accept(_position__anonymous_46);
					image_names.accept(_position__anonymous_46);
					tile_symbols.accept(_position__anonymous_46);
					payment_long_type_names.accept(_position__anonymous_46);
					area_names.accept(_position__anonymous_46);
					structure_names.accept(_position__anonymous_46);
					tile_names.accept(_position__anonymous_46);
					hero_stat.accept(_position__anonymous_46);
				}
			}
		}
	}
	public void parse__anonymous_153() {
		int _position__anonymous_153 = -1;
		Token.Parsed _token__anonymous_153 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_153=_position;
		_token__anonymous_153=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!=',') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_23.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ,");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"quest_addition(_anonymous_153)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_153;
		}
		else {
			parse_statement();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"quest_addition(_anonymous_153)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_153;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_153.addAll(_token);
			_token__anonymous_153.setValue(_token.getValue());
		}
		_token=_token__anonymous_153;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_153);
			association_names.reject(_position__anonymous_153);
			room_names.reject(_position__anonymous_153);
			activity_names.reject(_position__anonymous_153);
			siding_names.reject(_position__anonymous_153);
			item_names.reject(_position__anonymous_153);
			aspect_names.reject(_position__anonymous_153);
			affinity_names.reject(_position__anonymous_153);
			activity_type_names.reject(_position__anonymous_153);
			trail_names.reject(_position__anonymous_153);
			attack_names.reject(_position__anonymous_153);
			reason_names.reject(_position__anonymous_153);
			trait_names.reject(_position__anonymous_153);
			condition_names.reject(_position__anonymous_153);
			payment_short_type_names.reject(_position__anonymous_153);
			skill_names.reject(_position__anonymous_153);
			map_names.reject(_position__anonymous_153);
			event_names.reject(_position__anonymous_153);
			image_names.reject(_position__anonymous_153);
			tile_symbols.reject(_position__anonymous_153);
			payment_long_type_names.reject(_position__anonymous_153);
			area_names.reject(_position__anonymous_153);
			structure_names.reject(_position__anonymous_153);
			tile_names.reject(_position__anonymous_153);
			hero_stat.reject(_position__anonymous_153);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_153);
			association_names.accept(_position__anonymous_153);
			room_names.accept(_position__anonymous_153);
			activity_names.accept(_position__anonymous_153);
			siding_names.accept(_position__anonymous_153);
			item_names.accept(_position__anonymous_153);
			aspect_names.accept(_position__anonymous_153);
			affinity_names.accept(_position__anonymous_153);
			activity_type_names.accept(_position__anonymous_153);
			trail_names.accept(_position__anonymous_153);
			attack_names.accept(_position__anonymous_153);
			reason_names.accept(_position__anonymous_153);
			trait_names.accept(_position__anonymous_153);
			condition_names.accept(_position__anonymous_153);
			payment_short_type_names.accept(_position__anonymous_153);
			skill_names.accept(_position__anonymous_153);
			map_names.accept(_position__anonymous_153);
			event_names.accept(_position__anonymous_153);
			image_names.accept(_position__anonymous_153);
			tile_symbols.accept(_position__anonymous_153);
			payment_long_type_names.accept(_position__anonymous_153);
			area_names.accept(_position__anonymous_153);
			structure_names.accept(_position__anonymous_153);
			tile_names.accept(_position__anonymous_153);
			hero_stat.accept(_position__anonymous_153);
		}
	}
	public void parse__anonymous_45() {
		int _position__anonymous_45 = -1;
		Token.Parsed _token__anonymous_45 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_45=_position;
		_token__anonymous_45=_token;
		_token=new Tokens.Name.OptionToken();
		int _state_58 = _state;
		while(_position<_inputLength) {
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				break;
			}
		}
		if(_state_58==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"attack_element(_anonymous_45)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_45;
		}
		else {
			parse_conditional_chance();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"attack_element(_anonymous_45)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_45;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_45.add(_position__anonymous_45,_token);
		}
		_token=_token__anonymous_45;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_45);
			association_names.reject(_position__anonymous_45);
			room_names.reject(_position__anonymous_45);
			activity_names.reject(_position__anonymous_45);
			siding_names.reject(_position__anonymous_45);
			item_names.reject(_position__anonymous_45);
			aspect_names.reject(_position__anonymous_45);
			affinity_names.reject(_position__anonymous_45);
			activity_type_names.reject(_position__anonymous_45);
			trail_names.reject(_position__anonymous_45);
			attack_names.reject(_position__anonymous_45);
			reason_names.reject(_position__anonymous_45);
			trait_names.reject(_position__anonymous_45);
			condition_names.reject(_position__anonymous_45);
			payment_short_type_names.reject(_position__anonymous_45);
			skill_names.reject(_position__anonymous_45);
			map_names.reject(_position__anonymous_45);
			event_names.reject(_position__anonymous_45);
			image_names.reject(_position__anonymous_45);
			tile_symbols.reject(_position__anonymous_45);
			payment_long_type_names.reject(_position__anonymous_45);
			area_names.reject(_position__anonymous_45);
			structure_names.reject(_position__anonymous_45);
			tile_names.reject(_position__anonymous_45);
			hero_stat.reject(_position__anonymous_45);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_45);
			association_names.accept(_position__anonymous_45);
			room_names.accept(_position__anonymous_45);
			activity_names.accept(_position__anonymous_45);
			siding_names.accept(_position__anonymous_45);
			item_names.accept(_position__anonymous_45);
			aspect_names.accept(_position__anonymous_45);
			affinity_names.accept(_position__anonymous_45);
			activity_type_names.accept(_position__anonymous_45);
			trail_names.accept(_position__anonymous_45);
			attack_names.accept(_position__anonymous_45);
			reason_names.accept(_position__anonymous_45);
			trait_names.accept(_position__anonymous_45);
			condition_names.accept(_position__anonymous_45);
			payment_short_type_names.accept(_position__anonymous_45);
			skill_names.accept(_position__anonymous_45);
			map_names.accept(_position__anonymous_45);
			event_names.accept(_position__anonymous_45);
			image_names.accept(_position__anonymous_45);
			tile_symbols.accept(_position__anonymous_45);
			payment_long_type_names.accept(_position__anonymous_45);
			area_names.accept(_position__anonymous_45);
			structure_names.accept(_position__anonymous_45);
			tile_names.accept(_position__anonymous_45);
			hero_stat.accept(_position__anonymous_45);
		}
	}
	public void parse__anonymous_154() {
		int _position__anonymous_154 = -1;
		Token.Parsed _token__anonymous_154 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_154=_position;
		_token__anonymous_154=_token;
		_token=new Tokens.Name.MethodToken();
		if(_position+5-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='s') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='t') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='r') {
				_state=FAILED;
			}
			if(_inputArray[_position+4]!='t') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_33.SYNTAX);
			_position=_position+5;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain start");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_statement(_anonymous_154)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_154;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_154.add(_position__anonymous_154,_token);
		}
		_token=_token__anonymous_154;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_154);
			association_names.reject(_position__anonymous_154);
			room_names.reject(_position__anonymous_154);
			activity_names.reject(_position__anonymous_154);
			siding_names.reject(_position__anonymous_154);
			item_names.reject(_position__anonymous_154);
			aspect_names.reject(_position__anonymous_154);
			affinity_names.reject(_position__anonymous_154);
			activity_type_names.reject(_position__anonymous_154);
			trail_names.reject(_position__anonymous_154);
			attack_names.reject(_position__anonymous_154);
			reason_names.reject(_position__anonymous_154);
			trait_names.reject(_position__anonymous_154);
			condition_names.reject(_position__anonymous_154);
			payment_short_type_names.reject(_position__anonymous_154);
			skill_names.reject(_position__anonymous_154);
			map_names.reject(_position__anonymous_154);
			event_names.reject(_position__anonymous_154);
			image_names.reject(_position__anonymous_154);
			tile_symbols.reject(_position__anonymous_154);
			payment_long_type_names.reject(_position__anonymous_154);
			area_names.reject(_position__anonymous_154);
			structure_names.reject(_position__anonymous_154);
			tile_names.reject(_position__anonymous_154);
			hero_stat.reject(_position__anonymous_154);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_154);
			association_names.accept(_position__anonymous_154);
			room_names.accept(_position__anonymous_154);
			activity_names.accept(_position__anonymous_154);
			siding_names.accept(_position__anonymous_154);
			item_names.accept(_position__anonymous_154);
			aspect_names.accept(_position__anonymous_154);
			affinity_names.accept(_position__anonymous_154);
			activity_type_names.accept(_position__anonymous_154);
			trail_names.accept(_position__anonymous_154);
			attack_names.accept(_position__anonymous_154);
			reason_names.accept(_position__anonymous_154);
			trait_names.accept(_position__anonymous_154);
			condition_names.accept(_position__anonymous_154);
			payment_short_type_names.accept(_position__anonymous_154);
			skill_names.accept(_position__anonymous_154);
			map_names.accept(_position__anonymous_154);
			event_names.accept(_position__anonymous_154);
			image_names.accept(_position__anonymous_154);
			tile_symbols.accept(_position__anonymous_154);
			payment_long_type_names.accept(_position__anonymous_154);
			area_names.accept(_position__anonymous_154);
			structure_names.accept(_position__anonymous_154);
			tile_names.accept(_position__anonymous_154);
			hero_stat.accept(_position__anonymous_154);
		}
	}
	public void parse__anonymous_48() {
		int _position__anonymous_48 = -1;
		Token.Parsed _token__anonymous_48 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_48=_position;
		_token__anonymous_48=_token;
		_token=new Tokens.Name.CooldownToken();
		if(_position+2-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='c') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='d') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_40.SYNTAX);
			_position=_position+2;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain cd");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"support_element(_anonymous_48)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_48;
		}
		else {
			parse_stat_range();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"support_element(_anonymous_48)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_48;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_48.add(_position__anonymous_48,_token);
		}
		_token=_token__anonymous_48;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_48);
			association_names.reject(_position__anonymous_48);
			room_names.reject(_position__anonymous_48);
			activity_names.reject(_position__anonymous_48);
			siding_names.reject(_position__anonymous_48);
			item_names.reject(_position__anonymous_48);
			aspect_names.reject(_position__anonymous_48);
			affinity_names.reject(_position__anonymous_48);
			activity_type_names.reject(_position__anonymous_48);
			trail_names.reject(_position__anonymous_48);
			attack_names.reject(_position__anonymous_48);
			reason_names.reject(_position__anonymous_48);
			trait_names.reject(_position__anonymous_48);
			condition_names.reject(_position__anonymous_48);
			payment_short_type_names.reject(_position__anonymous_48);
			skill_names.reject(_position__anonymous_48);
			map_names.reject(_position__anonymous_48);
			event_names.reject(_position__anonymous_48);
			image_names.reject(_position__anonymous_48);
			tile_symbols.reject(_position__anonymous_48);
			payment_long_type_names.reject(_position__anonymous_48);
			area_names.reject(_position__anonymous_48);
			structure_names.reject(_position__anonymous_48);
			tile_names.reject(_position__anonymous_48);
			hero_stat.reject(_position__anonymous_48);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_48);
			association_names.accept(_position__anonymous_48);
			room_names.accept(_position__anonymous_48);
			activity_names.accept(_position__anonymous_48);
			siding_names.accept(_position__anonymous_48);
			item_names.accept(_position__anonymous_48);
			aspect_names.accept(_position__anonymous_48);
			affinity_names.accept(_position__anonymous_48);
			activity_type_names.accept(_position__anonymous_48);
			trail_names.accept(_position__anonymous_48);
			attack_names.accept(_position__anonymous_48);
			reason_names.accept(_position__anonymous_48);
			trait_names.accept(_position__anonymous_48);
			condition_names.accept(_position__anonymous_48);
			payment_short_type_names.accept(_position__anonymous_48);
			skill_names.accept(_position__anonymous_48);
			map_names.accept(_position__anonymous_48);
			event_names.accept(_position__anonymous_48);
			image_names.accept(_position__anonymous_48);
			tile_symbols.accept(_position__anonymous_48);
			payment_long_type_names.accept(_position__anonymous_48);
			area_names.accept(_position__anonymous_48);
			structure_names.accept(_position__anonymous_48);
			tile_names.accept(_position__anonymous_48);
			hero_stat.accept(_position__anonymous_48);
		}
	}
	public void parse__anonymous_47() {
		int _position__anonymous_47 = -1;
		Token.Parsed _token__anonymous_47 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_47=_position;
		_token__anonymous_47=_token;
		_token=new Tokens.Name.RangeToken();
		if(_position+5-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='r') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='n') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='g') {
				_state=FAILED;
			}
			if(_inputArray[_position+4]!='e') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_39.SYNTAX);
			_position=_position+5;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain range");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"support_element(_anonymous_47)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_47;
		}
		else {
			parse_stat_range();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"support_element(_anonymous_47)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_47;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_47.add(_position__anonymous_47,_token);
		}
		_token=_token__anonymous_47;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_47);
			association_names.reject(_position__anonymous_47);
			room_names.reject(_position__anonymous_47);
			activity_names.reject(_position__anonymous_47);
			siding_names.reject(_position__anonymous_47);
			item_names.reject(_position__anonymous_47);
			aspect_names.reject(_position__anonymous_47);
			affinity_names.reject(_position__anonymous_47);
			activity_type_names.reject(_position__anonymous_47);
			trail_names.reject(_position__anonymous_47);
			attack_names.reject(_position__anonymous_47);
			reason_names.reject(_position__anonymous_47);
			trait_names.reject(_position__anonymous_47);
			condition_names.reject(_position__anonymous_47);
			payment_short_type_names.reject(_position__anonymous_47);
			skill_names.reject(_position__anonymous_47);
			map_names.reject(_position__anonymous_47);
			event_names.reject(_position__anonymous_47);
			image_names.reject(_position__anonymous_47);
			tile_symbols.reject(_position__anonymous_47);
			payment_long_type_names.reject(_position__anonymous_47);
			area_names.reject(_position__anonymous_47);
			structure_names.reject(_position__anonymous_47);
			tile_names.reject(_position__anonymous_47);
			hero_stat.reject(_position__anonymous_47);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_47);
			association_names.accept(_position__anonymous_47);
			room_names.accept(_position__anonymous_47);
			activity_names.accept(_position__anonymous_47);
			siding_names.accept(_position__anonymous_47);
			item_names.accept(_position__anonymous_47);
			aspect_names.accept(_position__anonymous_47);
			affinity_names.accept(_position__anonymous_47);
			activity_type_names.accept(_position__anonymous_47);
			trail_names.accept(_position__anonymous_47);
			attack_names.accept(_position__anonymous_47);
			reason_names.accept(_position__anonymous_47);
			trait_names.accept(_position__anonymous_47);
			condition_names.accept(_position__anonymous_47);
			payment_short_type_names.accept(_position__anonymous_47);
			skill_names.accept(_position__anonymous_47);
			map_names.accept(_position__anonymous_47);
			event_names.accept(_position__anonymous_47);
			image_names.accept(_position__anonymous_47);
			tile_symbols.accept(_position__anonymous_47);
			payment_long_type_names.accept(_position__anonymous_47);
			area_names.accept(_position__anonymous_47);
			structure_names.accept(_position__anonymous_47);
			tile_names.accept(_position__anonymous_47);
			hero_stat.accept(_position__anonymous_47);
		}
	}
	public void parse__anonymous_49() {
		int _position__anonymous_49 = -1;
		Token.Parsed _token__anonymous_49 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_49=_position;
		_token__anonymous_49=_token;
		_token=new Tokens.Name.MissToken();
		if(_position+4-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='m') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='i') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='s') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='s') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_44.SYNTAX);
			_position=_position+4;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain miss");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"support_element(_anonymous_49)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_49;
		}
		else {
			int _state_61 = _state;
			while(_position<_inputLength) {
				parse__anonymous_50();
				if(_state==FAILED) {
					break;
				}
			}
			if(_state_61==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"support_element(_anonymous_49)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_49;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_49.add(_position__anonymous_49,_token);
		}
		_token=_token__anonymous_49;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_49);
			association_names.reject(_position__anonymous_49);
			room_names.reject(_position__anonymous_49);
			activity_names.reject(_position__anonymous_49);
			siding_names.reject(_position__anonymous_49);
			item_names.reject(_position__anonymous_49);
			aspect_names.reject(_position__anonymous_49);
			affinity_names.reject(_position__anonymous_49);
			activity_type_names.reject(_position__anonymous_49);
			trail_names.reject(_position__anonymous_49);
			attack_names.reject(_position__anonymous_49);
			reason_names.reject(_position__anonymous_49);
			trait_names.reject(_position__anonymous_49);
			condition_names.reject(_position__anonymous_49);
			payment_short_type_names.reject(_position__anonymous_49);
			skill_names.reject(_position__anonymous_49);
			map_names.reject(_position__anonymous_49);
			event_names.reject(_position__anonymous_49);
			image_names.reject(_position__anonymous_49);
			tile_symbols.reject(_position__anonymous_49);
			payment_long_type_names.reject(_position__anonymous_49);
			area_names.reject(_position__anonymous_49);
			structure_names.reject(_position__anonymous_49);
			tile_names.reject(_position__anonymous_49);
			hero_stat.reject(_position__anonymous_49);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_49);
			association_names.accept(_position__anonymous_49);
			room_names.accept(_position__anonymous_49);
			activity_names.accept(_position__anonymous_49);
			siding_names.accept(_position__anonymous_49);
			item_names.accept(_position__anonymous_49);
			aspect_names.accept(_position__anonymous_49);
			affinity_names.accept(_position__anonymous_49);
			activity_type_names.accept(_position__anonymous_49);
			trail_names.accept(_position__anonymous_49);
			attack_names.accept(_position__anonymous_49);
			reason_names.accept(_position__anonymous_49);
			trait_names.accept(_position__anonymous_49);
			condition_names.accept(_position__anonymous_49);
			payment_short_type_names.accept(_position__anonymous_49);
			skill_names.accept(_position__anonymous_49);
			map_names.accept(_position__anonymous_49);
			event_names.accept(_position__anonymous_49);
			image_names.accept(_position__anonymous_49);
			tile_symbols.accept(_position__anonymous_49);
			payment_long_type_names.accept(_position__anonymous_49);
			area_names.accept(_position__anonymous_49);
			structure_names.accept(_position__anonymous_49);
			tile_names.accept(_position__anonymous_49);
			hero_stat.accept(_position__anonymous_49);
		}
	}
	public void parse__anonymous_150() {
		int _position__anonymous_150 = -1;
		Token.Parsed _token__anonymous_150 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_150=_position;
		_token__anonymous_150=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='+') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_14.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain +");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"imposition(_anonymous_150)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_150;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_150.addAll(_token);
			_token__anonymous_150.setValue(_token.getValue());
		}
		_token=_token__anonymous_150;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_150);
			association_names.reject(_position__anonymous_150);
			room_names.reject(_position__anonymous_150);
			activity_names.reject(_position__anonymous_150);
			siding_names.reject(_position__anonymous_150);
			item_names.reject(_position__anonymous_150);
			aspect_names.reject(_position__anonymous_150);
			affinity_names.reject(_position__anonymous_150);
			activity_type_names.reject(_position__anonymous_150);
			trail_names.reject(_position__anonymous_150);
			attack_names.reject(_position__anonymous_150);
			reason_names.reject(_position__anonymous_150);
			trait_names.reject(_position__anonymous_150);
			condition_names.reject(_position__anonymous_150);
			payment_short_type_names.reject(_position__anonymous_150);
			skill_names.reject(_position__anonymous_150);
			map_names.reject(_position__anonymous_150);
			event_names.reject(_position__anonymous_150);
			image_names.reject(_position__anonymous_150);
			tile_symbols.reject(_position__anonymous_150);
			payment_long_type_names.reject(_position__anonymous_150);
			area_names.reject(_position__anonymous_150);
			structure_names.reject(_position__anonymous_150);
			tile_names.reject(_position__anonymous_150);
			hero_stat.reject(_position__anonymous_150);
			_state=SUCCESS;
			_position__anonymous_150=_position;
			_token__anonymous_150=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='-') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_15.SYNTAX);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain -");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"imposition(_anonymous_150)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_150;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_150.addAll(_token);
				_token__anonymous_150.setValue(_token.getValue());
			}
			_token=_token__anonymous_150;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_150);
				association_names.reject(_position__anonymous_150);
				room_names.reject(_position__anonymous_150);
				activity_names.reject(_position__anonymous_150);
				siding_names.reject(_position__anonymous_150);
				item_names.reject(_position__anonymous_150);
				aspect_names.reject(_position__anonymous_150);
				affinity_names.reject(_position__anonymous_150);
				activity_type_names.reject(_position__anonymous_150);
				trail_names.reject(_position__anonymous_150);
				attack_names.reject(_position__anonymous_150);
				reason_names.reject(_position__anonymous_150);
				trait_names.reject(_position__anonymous_150);
				condition_names.reject(_position__anonymous_150);
				payment_short_type_names.reject(_position__anonymous_150);
				skill_names.reject(_position__anonymous_150);
				map_names.reject(_position__anonymous_150);
				event_names.reject(_position__anonymous_150);
				image_names.reject(_position__anonymous_150);
				tile_symbols.reject(_position__anonymous_150);
				payment_long_type_names.reject(_position__anonymous_150);
				area_names.reject(_position__anonymous_150);
				structure_names.reject(_position__anonymous_150);
				tile_names.reject(_position__anonymous_150);
				hero_stat.reject(_position__anonymous_150);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_150);
				association_names.accept(_position__anonymous_150);
				room_names.accept(_position__anonymous_150);
				activity_names.accept(_position__anonymous_150);
				siding_names.accept(_position__anonymous_150);
				item_names.accept(_position__anonymous_150);
				aspect_names.accept(_position__anonymous_150);
				affinity_names.accept(_position__anonymous_150);
				activity_type_names.accept(_position__anonymous_150);
				trail_names.accept(_position__anonymous_150);
				attack_names.accept(_position__anonymous_150);
				reason_names.accept(_position__anonymous_150);
				trait_names.accept(_position__anonymous_150);
				condition_names.accept(_position__anonymous_150);
				payment_short_type_names.accept(_position__anonymous_150);
				skill_names.accept(_position__anonymous_150);
				map_names.accept(_position__anonymous_150);
				event_names.accept(_position__anonymous_150);
				image_names.accept(_position__anonymous_150);
				tile_symbols.accept(_position__anonymous_150);
				payment_long_type_names.accept(_position__anonymous_150);
				area_names.accept(_position__anonymous_150);
				structure_names.accept(_position__anonymous_150);
				tile_names.accept(_position__anonymous_150);
				hero_stat.accept(_position__anonymous_150);
			}
		}
	}
	public void parse__anonymous_148() {
		int _position__anonymous_148 = -1;
		Token.Parsed _token__anonymous_148 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_148=_position;
		_token__anonymous_148=_token;
		_token=new Tokens.Name.OperatorToken();
		if(_position+7-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='r') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='e') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='l') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='e') {
				_state=FAILED;
			}
			if(_inputArray[_position+4]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+5]!='s') {
				_state=FAILED;
			}
			if(_inputArray[_position+6]!='e') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_110.release);
			_position=_position+7;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain release");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"imposition(_anonymous_148)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_148;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_148.add(_position__anonymous_148,_token);
		}
		_token=_token__anonymous_148;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_148);
			association_names.reject(_position__anonymous_148);
			room_names.reject(_position__anonymous_148);
			activity_names.reject(_position__anonymous_148);
			siding_names.reject(_position__anonymous_148);
			item_names.reject(_position__anonymous_148);
			aspect_names.reject(_position__anonymous_148);
			affinity_names.reject(_position__anonymous_148);
			activity_type_names.reject(_position__anonymous_148);
			trail_names.reject(_position__anonymous_148);
			attack_names.reject(_position__anonymous_148);
			reason_names.reject(_position__anonymous_148);
			trait_names.reject(_position__anonymous_148);
			condition_names.reject(_position__anonymous_148);
			payment_short_type_names.reject(_position__anonymous_148);
			skill_names.reject(_position__anonymous_148);
			map_names.reject(_position__anonymous_148);
			event_names.reject(_position__anonymous_148);
			image_names.reject(_position__anonymous_148);
			tile_symbols.reject(_position__anonymous_148);
			payment_long_type_names.reject(_position__anonymous_148);
			area_names.reject(_position__anonymous_148);
			structure_names.reject(_position__anonymous_148);
			tile_names.reject(_position__anonymous_148);
			hero_stat.reject(_position__anonymous_148);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_148);
			association_names.accept(_position__anonymous_148);
			room_names.accept(_position__anonymous_148);
			activity_names.accept(_position__anonymous_148);
			siding_names.accept(_position__anonymous_148);
			item_names.accept(_position__anonymous_148);
			aspect_names.accept(_position__anonymous_148);
			affinity_names.accept(_position__anonymous_148);
			activity_type_names.accept(_position__anonymous_148);
			trail_names.accept(_position__anonymous_148);
			attack_names.accept(_position__anonymous_148);
			reason_names.accept(_position__anonymous_148);
			trait_names.accept(_position__anonymous_148);
			condition_names.accept(_position__anonymous_148);
			payment_short_type_names.accept(_position__anonymous_148);
			skill_names.accept(_position__anonymous_148);
			map_names.accept(_position__anonymous_148);
			event_names.accept(_position__anonymous_148);
			image_names.accept(_position__anonymous_148);
			tile_symbols.accept(_position__anonymous_148);
			payment_long_type_names.accept(_position__anonymous_148);
			area_names.accept(_position__anonymous_148);
			structure_names.accept(_position__anonymous_148);
			tile_names.accept(_position__anonymous_148);
			hero_stat.accept(_position__anonymous_148);
		}
	}
	public void parse__anonymous_149() {
		int _position__anonymous_149 = -1;
		Token.Parsed _token__anonymous_149 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_149=_position;
		_token__anonymous_149=_token;
		_token=new Tokens.Name.OperatorToken();
		int _state_172 = _state;
		boolean _iteration_achieved_172 = false;
		while(_position<_inputLength) {
			parse__anonymous_150();
			if(_state==FAILED) {
				break;
			}
			else {
				_iteration_achieved_172=true;
			}
		}
		if(_iteration_achieved_172==false) {
			_state=FAILED;
		}
		else if(_state_172==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"imposition(_anonymous_149)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_149;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_149.add(_position__anonymous_149,_token);
		}
		_token=_token__anonymous_149;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_149);
			association_names.reject(_position__anonymous_149);
			room_names.reject(_position__anonymous_149);
			activity_names.reject(_position__anonymous_149);
			siding_names.reject(_position__anonymous_149);
			item_names.reject(_position__anonymous_149);
			aspect_names.reject(_position__anonymous_149);
			affinity_names.reject(_position__anonymous_149);
			activity_type_names.reject(_position__anonymous_149);
			trail_names.reject(_position__anonymous_149);
			attack_names.reject(_position__anonymous_149);
			reason_names.reject(_position__anonymous_149);
			trait_names.reject(_position__anonymous_149);
			condition_names.reject(_position__anonymous_149);
			payment_short_type_names.reject(_position__anonymous_149);
			skill_names.reject(_position__anonymous_149);
			map_names.reject(_position__anonymous_149);
			event_names.reject(_position__anonymous_149);
			image_names.reject(_position__anonymous_149);
			tile_symbols.reject(_position__anonymous_149);
			payment_long_type_names.reject(_position__anonymous_149);
			area_names.reject(_position__anonymous_149);
			structure_names.reject(_position__anonymous_149);
			tile_names.reject(_position__anonymous_149);
			hero_stat.reject(_position__anonymous_149);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_149);
			association_names.accept(_position__anonymous_149);
			room_names.accept(_position__anonymous_149);
			activity_names.accept(_position__anonymous_149);
			siding_names.accept(_position__anonymous_149);
			item_names.accept(_position__anonymous_149);
			aspect_names.accept(_position__anonymous_149);
			affinity_names.accept(_position__anonymous_149);
			activity_type_names.accept(_position__anonymous_149);
			trail_names.accept(_position__anonymous_149);
			attack_names.accept(_position__anonymous_149);
			reason_names.accept(_position__anonymous_149);
			trait_names.accept(_position__anonymous_149);
			condition_names.accept(_position__anonymous_149);
			payment_short_type_names.accept(_position__anonymous_149);
			skill_names.accept(_position__anonymous_149);
			map_names.accept(_position__anonymous_149);
			event_names.accept(_position__anonymous_149);
			image_names.accept(_position__anonymous_149);
			tile_symbols.accept(_position__anonymous_149);
			payment_long_type_names.accept(_position__anonymous_149);
			area_names.accept(_position__anonymous_149);
			structure_names.accept(_position__anonymous_149);
			tile_names.accept(_position__anonymous_149);
			hero_stat.accept(_position__anonymous_149);
		}
	}
	public void parse__anonymous_40() {
		int _position__anonymous_40 = -1;
		Token.Parsed _token__anonymous_40 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_40=_position;
		_token__anonymous_40=_token;
		_token=new Tokens.Name.CooldownToken();
		if(_position+2-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='c') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='d') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_40.SYNTAX);
			_position=_position+2;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain cd");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"attack_element(_anonymous_40)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_40;
		}
		else {
			parse_stat_range();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"attack_element(_anonymous_40)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_40;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_40.add(_position__anonymous_40,_token);
		}
		_token=_token__anonymous_40;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_40);
			association_names.reject(_position__anonymous_40);
			room_names.reject(_position__anonymous_40);
			activity_names.reject(_position__anonymous_40);
			siding_names.reject(_position__anonymous_40);
			item_names.reject(_position__anonymous_40);
			aspect_names.reject(_position__anonymous_40);
			affinity_names.reject(_position__anonymous_40);
			activity_type_names.reject(_position__anonymous_40);
			trail_names.reject(_position__anonymous_40);
			attack_names.reject(_position__anonymous_40);
			reason_names.reject(_position__anonymous_40);
			trait_names.reject(_position__anonymous_40);
			condition_names.reject(_position__anonymous_40);
			payment_short_type_names.reject(_position__anonymous_40);
			skill_names.reject(_position__anonymous_40);
			map_names.reject(_position__anonymous_40);
			event_names.reject(_position__anonymous_40);
			image_names.reject(_position__anonymous_40);
			tile_symbols.reject(_position__anonymous_40);
			payment_long_type_names.reject(_position__anonymous_40);
			area_names.reject(_position__anonymous_40);
			structure_names.reject(_position__anonymous_40);
			tile_names.reject(_position__anonymous_40);
			hero_stat.reject(_position__anonymous_40);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_40);
			association_names.accept(_position__anonymous_40);
			room_names.accept(_position__anonymous_40);
			activity_names.accept(_position__anonymous_40);
			siding_names.accept(_position__anonymous_40);
			item_names.accept(_position__anonymous_40);
			aspect_names.accept(_position__anonymous_40);
			affinity_names.accept(_position__anonymous_40);
			activity_type_names.accept(_position__anonymous_40);
			trail_names.accept(_position__anonymous_40);
			attack_names.accept(_position__anonymous_40);
			reason_names.accept(_position__anonymous_40);
			trait_names.accept(_position__anonymous_40);
			condition_names.accept(_position__anonymous_40);
			payment_short_type_names.accept(_position__anonymous_40);
			skill_names.accept(_position__anonymous_40);
			map_names.accept(_position__anonymous_40);
			event_names.accept(_position__anonymous_40);
			image_names.accept(_position__anonymous_40);
			tile_symbols.accept(_position__anonymous_40);
			payment_long_type_names.accept(_position__anonymous_40);
			area_names.accept(_position__anonymous_40);
			structure_names.accept(_position__anonymous_40);
			tile_names.accept(_position__anonymous_40);
			hero_stat.accept(_position__anonymous_40);
		}
	}
	public void parse__anonymous_144() {
		int _position__anonymous_144 = -1;
		Token.Parsed _token__anonymous_144 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_144=_position;
		_token__anonymous_144=_token;
		_token=new Tokens.Name.LOSESToken();
		if(_position+5-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='l') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='o') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='s') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='e') {
				_state=FAILED;
			}
			if(_inputArray[_position+4]!='s') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_106.SYNTAX);
			_position=_position+5;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain loses");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"acquisition(_anonymous_144)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_144;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_144.add(_position__anonymous_144,_token);
		}
		_token=_token__anonymous_144;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_144);
			association_names.reject(_position__anonymous_144);
			room_names.reject(_position__anonymous_144);
			activity_names.reject(_position__anonymous_144);
			siding_names.reject(_position__anonymous_144);
			item_names.reject(_position__anonymous_144);
			aspect_names.reject(_position__anonymous_144);
			affinity_names.reject(_position__anonymous_144);
			activity_type_names.reject(_position__anonymous_144);
			trail_names.reject(_position__anonymous_144);
			attack_names.reject(_position__anonymous_144);
			reason_names.reject(_position__anonymous_144);
			trait_names.reject(_position__anonymous_144);
			condition_names.reject(_position__anonymous_144);
			payment_short_type_names.reject(_position__anonymous_144);
			skill_names.reject(_position__anonymous_144);
			map_names.reject(_position__anonymous_144);
			event_names.reject(_position__anonymous_144);
			image_names.reject(_position__anonymous_144);
			tile_symbols.reject(_position__anonymous_144);
			payment_long_type_names.reject(_position__anonymous_144);
			area_names.reject(_position__anonymous_144);
			structure_names.reject(_position__anonymous_144);
			tile_names.reject(_position__anonymous_144);
			hero_stat.reject(_position__anonymous_144);
			_state=SUCCESS;
			_position__anonymous_144=_position;
			_token__anonymous_144=_token;
			_token=new Tokens.Name.LOSESToken();
			if(_position+7-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='u') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='n') {
					_state=FAILED;
				}
				if(_inputArray[_position+2]!='e') {
					_state=FAILED;
				}
				if(_inputArray[_position+3]!='q') {
					_state=FAILED;
				}
				if(_inputArray[_position+4]!='u') {
					_state=FAILED;
				}
				if(_inputArray[_position+5]!='i') {
					_state=FAILED;
				}
				if(_inputArray[_position+6]!='p') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_107.SYNTAX);
				_position=_position+7;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain unequip");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"acquisition(_anonymous_144)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_144;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_144.add(_position__anonymous_144,_token);
			}
			_token=_token__anonymous_144;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_144);
				association_names.reject(_position__anonymous_144);
				room_names.reject(_position__anonymous_144);
				activity_names.reject(_position__anonymous_144);
				siding_names.reject(_position__anonymous_144);
				item_names.reject(_position__anonymous_144);
				aspect_names.reject(_position__anonymous_144);
				affinity_names.reject(_position__anonymous_144);
				activity_type_names.reject(_position__anonymous_144);
				trail_names.reject(_position__anonymous_144);
				attack_names.reject(_position__anonymous_144);
				reason_names.reject(_position__anonymous_144);
				trait_names.reject(_position__anonymous_144);
				condition_names.reject(_position__anonymous_144);
				payment_short_type_names.reject(_position__anonymous_144);
				skill_names.reject(_position__anonymous_144);
				map_names.reject(_position__anonymous_144);
				event_names.reject(_position__anonymous_144);
				image_names.reject(_position__anonymous_144);
				tile_symbols.reject(_position__anonymous_144);
				payment_long_type_names.reject(_position__anonymous_144);
				area_names.reject(_position__anonymous_144);
				structure_names.reject(_position__anonymous_144);
				tile_names.reject(_position__anonymous_144);
				hero_stat.reject(_position__anonymous_144);
				_state=SUCCESS;
				_position__anonymous_144=_position;
				_token__anonymous_144=_token;
				_token=new Tokens.Name.LOSESToken();
				if(_position+1-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!='-') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_15.SYNTAX);
					_position=_position+1;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain -");
						_furthestPosition=_position;
					}
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"acquisition(_anonymous_144)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_144;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_144.add(_position__anonymous_144,_token);
				}
				_token=_token__anonymous_144;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_144);
					association_names.reject(_position__anonymous_144);
					room_names.reject(_position__anonymous_144);
					activity_names.reject(_position__anonymous_144);
					siding_names.reject(_position__anonymous_144);
					item_names.reject(_position__anonymous_144);
					aspect_names.reject(_position__anonymous_144);
					affinity_names.reject(_position__anonymous_144);
					activity_type_names.reject(_position__anonymous_144);
					trail_names.reject(_position__anonymous_144);
					attack_names.reject(_position__anonymous_144);
					reason_names.reject(_position__anonymous_144);
					trait_names.reject(_position__anonymous_144);
					condition_names.reject(_position__anonymous_144);
					payment_short_type_names.reject(_position__anonymous_144);
					skill_names.reject(_position__anonymous_144);
					map_names.reject(_position__anonymous_144);
					event_names.reject(_position__anonymous_144);
					image_names.reject(_position__anonymous_144);
					tile_symbols.reject(_position__anonymous_144);
					payment_long_type_names.reject(_position__anonymous_144);
					area_names.reject(_position__anonymous_144);
					structure_names.reject(_position__anonymous_144);
					tile_names.reject(_position__anonymous_144);
					hero_stat.reject(_position__anonymous_144);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_144);
					association_names.accept(_position__anonymous_144);
					room_names.accept(_position__anonymous_144);
					activity_names.accept(_position__anonymous_144);
					siding_names.accept(_position__anonymous_144);
					item_names.accept(_position__anonymous_144);
					aspect_names.accept(_position__anonymous_144);
					affinity_names.accept(_position__anonymous_144);
					activity_type_names.accept(_position__anonymous_144);
					trail_names.accept(_position__anonymous_144);
					attack_names.accept(_position__anonymous_144);
					reason_names.accept(_position__anonymous_144);
					trait_names.accept(_position__anonymous_144);
					condition_names.accept(_position__anonymous_144);
					payment_short_type_names.accept(_position__anonymous_144);
					skill_names.accept(_position__anonymous_144);
					map_names.accept(_position__anonymous_144);
					event_names.accept(_position__anonymous_144);
					image_names.accept(_position__anonymous_144);
					tile_symbols.accept(_position__anonymous_144);
					payment_long_type_names.accept(_position__anonymous_144);
					area_names.accept(_position__anonymous_144);
					structure_names.accept(_position__anonymous_144);
					tile_names.accept(_position__anonymous_144);
					hero_stat.accept(_position__anonymous_144);
				}
			}
		}
	}
	public void parse__anonymous_145() {
		int _position__anonymous_145 = -1;
		Token.Parsed _token__anonymous_145 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_145=_position;
		_token__anonymous_145=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+4-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='t') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='h') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='i') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='s') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_108.THIS);
			_position=_position+4;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain this");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"acquisition(_anonymous_145)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_145;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_145.addAll(_token);
			_token__anonymous_145.setValue(_token.getValue());
		}
		_token=_token__anonymous_145;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_145);
			association_names.reject(_position__anonymous_145);
			room_names.reject(_position__anonymous_145);
			activity_names.reject(_position__anonymous_145);
			siding_names.reject(_position__anonymous_145);
			item_names.reject(_position__anonymous_145);
			aspect_names.reject(_position__anonymous_145);
			affinity_names.reject(_position__anonymous_145);
			activity_type_names.reject(_position__anonymous_145);
			trail_names.reject(_position__anonymous_145);
			attack_names.reject(_position__anonymous_145);
			reason_names.reject(_position__anonymous_145);
			trait_names.reject(_position__anonymous_145);
			condition_names.reject(_position__anonymous_145);
			payment_short_type_names.reject(_position__anonymous_145);
			skill_names.reject(_position__anonymous_145);
			map_names.reject(_position__anonymous_145);
			event_names.reject(_position__anonymous_145);
			image_names.reject(_position__anonymous_145);
			tile_symbols.reject(_position__anonymous_145);
			payment_long_type_names.reject(_position__anonymous_145);
			area_names.reject(_position__anonymous_145);
			structure_names.reject(_position__anonymous_145);
			tile_names.reject(_position__anonymous_145);
			hero_stat.reject(_position__anonymous_145);
			_state=SUCCESS;
			_position__anonymous_145=_position;
			_token__anonymous_145=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			if(_pass==FIRST_PASS) {
				String _result = _preparsed_NAME.get(_position);
				if(_result==null) {
					_state=FAILED;
				}
				else {
					Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
					_token.add(_position,_first_pass_token);
					_position+=_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else if(_pass==SECOND_PASS) {
				_list_name_result=_preparsed_NAME.get(_position);
				if(_list_name_result!=null&&aspect_names.contains(_list_name_result)) {
					if(_position+_list_name_result.length()<_inputLength) {
						int _next_char = _inputArray[_position+_list_name_result.length()];
						if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,new Tokens.Name.AspectNamesToken(_list_name_result));
						_position+=_list_name_result.length();
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
				}
				else {
					_state=FAILED;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"aspect_names");
						_furthestPosition=_position;
					}
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"acquisition(_anonymous_145)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_145;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_145.addAll(_token);
				_token__anonymous_145.setValue(_token.getValue());
			}
			_token=_token__anonymous_145;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_145);
				association_names.reject(_position__anonymous_145);
				room_names.reject(_position__anonymous_145);
				activity_names.reject(_position__anonymous_145);
				siding_names.reject(_position__anonymous_145);
				item_names.reject(_position__anonymous_145);
				aspect_names.reject(_position__anonymous_145);
				affinity_names.reject(_position__anonymous_145);
				activity_type_names.reject(_position__anonymous_145);
				trail_names.reject(_position__anonymous_145);
				attack_names.reject(_position__anonymous_145);
				reason_names.reject(_position__anonymous_145);
				trait_names.reject(_position__anonymous_145);
				condition_names.reject(_position__anonymous_145);
				payment_short_type_names.reject(_position__anonymous_145);
				skill_names.reject(_position__anonymous_145);
				map_names.reject(_position__anonymous_145);
				event_names.reject(_position__anonymous_145);
				image_names.reject(_position__anonymous_145);
				tile_symbols.reject(_position__anonymous_145);
				payment_long_type_names.reject(_position__anonymous_145);
				area_names.reject(_position__anonymous_145);
				structure_names.reject(_position__anonymous_145);
				tile_names.reject(_position__anonymous_145);
				hero_stat.reject(_position__anonymous_145);
				_state=SUCCESS;
				_position__anonymous_145=_position;
				_token__anonymous_145=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				if(_pass==FIRST_PASS) {
					String _result = _preparsed_NAME.get(_position);
					if(_result==null) {
						_state=FAILED;
					}
					else {
						Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
						_token.add(_position,_first_pass_token);
						_position+=_result.length();
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
				}
				else if(_pass==SECOND_PASS) {
					_list_name_result=_preparsed_NAME.get(_position);
					if(_list_name_result!=null&&condition_names.contains(_list_name_result)) {
						if(_position+_list_name_result.length()<_inputLength) {
							int _next_char = _inputArray[_position+_list_name_result.length()];
							if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
								_state=FAILED;
							}
						}
						if(_state==SUCCESS) {
							_token.add(_position,new Tokens.Name.ConditionNamesToken(_list_name_result));
							_position+=_list_name_result.length();
							while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
								++_position;
							}
						}
					}
					else {
						_state=FAILED;
					}
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"condition_names");
							_furthestPosition=_position;
						}
					}
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"acquisition(_anonymous_145)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_145;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_145.addAll(_token);
					_token__anonymous_145.setValue(_token.getValue());
				}
				_token=_token__anonymous_145;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_145);
					association_names.reject(_position__anonymous_145);
					room_names.reject(_position__anonymous_145);
					activity_names.reject(_position__anonymous_145);
					siding_names.reject(_position__anonymous_145);
					item_names.reject(_position__anonymous_145);
					aspect_names.reject(_position__anonymous_145);
					affinity_names.reject(_position__anonymous_145);
					activity_type_names.reject(_position__anonymous_145);
					trail_names.reject(_position__anonymous_145);
					attack_names.reject(_position__anonymous_145);
					reason_names.reject(_position__anonymous_145);
					trait_names.reject(_position__anonymous_145);
					condition_names.reject(_position__anonymous_145);
					payment_short_type_names.reject(_position__anonymous_145);
					skill_names.reject(_position__anonymous_145);
					map_names.reject(_position__anonymous_145);
					event_names.reject(_position__anonymous_145);
					image_names.reject(_position__anonymous_145);
					tile_symbols.reject(_position__anonymous_145);
					payment_long_type_names.reject(_position__anonymous_145);
					area_names.reject(_position__anonymous_145);
					structure_names.reject(_position__anonymous_145);
					tile_names.reject(_position__anonymous_145);
					hero_stat.reject(_position__anonymous_145);
					_state=SUCCESS;
					_position__anonymous_145=_position;
					_token__anonymous_145=_token;
					_token=new Token.Parsed(Token.Id.ANON);
					if(_pass==FIRST_PASS) {
						String _result = _preparsed_NAME.get(_position);
						if(_result==null) {
							_state=FAILED;
						}
						else {
							Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
							_token.add(_position,_first_pass_token);
							_position+=_result.length();
							while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
								++_position;
							}
						}
					}
					else if(_pass==SECOND_PASS) {
						_list_name_result=_preparsed_NAME.get(_position);
						if(_list_name_result!=null&&trait_names.contains(_list_name_result)) {
							if(_position+_list_name_result.length()<_inputLength) {
								int _next_char = _inputArray[_position+_list_name_result.length()];
								if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
									_state=FAILED;
								}
							}
							if(_state==SUCCESS) {
								_token.add(_position,new Tokens.Name.TraitNamesToken(_list_name_result));
								_position+=_list_name_result.length();
								while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
									++_position;
								}
							}
						}
						else {
							_state=FAILED;
						}
						if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"trait_names");
								_furthestPosition=_position;
							}
						}
					}
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"acquisition(_anonymous_145)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_145;
					}
					else {
					}
					if(_state==SUCCESS) {
						_token__anonymous_145.addAll(_token);
						_token__anonymous_145.setValue(_token.getValue());
					}
					_token=_token__anonymous_145;
					if(_state==FAILED) {
						support_names.reject(_position__anonymous_145);
						association_names.reject(_position__anonymous_145);
						room_names.reject(_position__anonymous_145);
						activity_names.reject(_position__anonymous_145);
						siding_names.reject(_position__anonymous_145);
						item_names.reject(_position__anonymous_145);
						aspect_names.reject(_position__anonymous_145);
						affinity_names.reject(_position__anonymous_145);
						activity_type_names.reject(_position__anonymous_145);
						trail_names.reject(_position__anonymous_145);
						attack_names.reject(_position__anonymous_145);
						reason_names.reject(_position__anonymous_145);
						trait_names.reject(_position__anonymous_145);
						condition_names.reject(_position__anonymous_145);
						payment_short_type_names.reject(_position__anonymous_145);
						skill_names.reject(_position__anonymous_145);
						map_names.reject(_position__anonymous_145);
						event_names.reject(_position__anonymous_145);
						image_names.reject(_position__anonymous_145);
						tile_symbols.reject(_position__anonymous_145);
						payment_long_type_names.reject(_position__anonymous_145);
						area_names.reject(_position__anonymous_145);
						structure_names.reject(_position__anonymous_145);
						tile_names.reject(_position__anonymous_145);
						hero_stat.reject(_position__anonymous_145);
						_state=SUCCESS;
						_position__anonymous_145=_position;
						_token__anonymous_145=_token;
						_token=new Token.Parsed(Token.Id.ANON);
						if(_pass==FIRST_PASS) {
							String _result = _preparsed_NAME.get(_position);
							if(_result==null) {
								_state=FAILED;
							}
							else {
								Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
								_token.add(_position,_first_pass_token);
								_position+=_result.length();
								while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
									++_position;
								}
							}
						}
						else if(_pass==SECOND_PASS) {
							_list_name_result=_preparsed_NAME.get(_position);
							if(_list_name_result!=null&&attack_names.contains(_list_name_result)) {
								if(_position+_list_name_result.length()<_inputLength) {
									int _next_char = _inputArray[_position+_list_name_result.length()];
									if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
										_state=FAILED;
									}
								}
								if(_state==SUCCESS) {
									_token.add(_position,new Tokens.Name.AttackNamesToken(_list_name_result));
									_position+=_list_name_result.length();
									while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
										++_position;
									}
								}
							}
							else {
								_state=FAILED;
							}
							if(_state==FAILED) {
								if(_position>=_furthestPosition) {
									_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"attack_names");
									_furthestPosition=_position;
								}
							}
						}
						if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"acquisition(_anonymous_145)");
								_furthestPosition=_position;
							}
							_position=_position__anonymous_145;
						}
						else {
						}
						if(_state==SUCCESS) {
							_token__anonymous_145.addAll(_token);
							_token__anonymous_145.setValue(_token.getValue());
						}
						_token=_token__anonymous_145;
						if(_state==FAILED) {
							support_names.reject(_position__anonymous_145);
							association_names.reject(_position__anonymous_145);
							room_names.reject(_position__anonymous_145);
							activity_names.reject(_position__anonymous_145);
							siding_names.reject(_position__anonymous_145);
							item_names.reject(_position__anonymous_145);
							aspect_names.reject(_position__anonymous_145);
							affinity_names.reject(_position__anonymous_145);
							activity_type_names.reject(_position__anonymous_145);
							trail_names.reject(_position__anonymous_145);
							attack_names.reject(_position__anonymous_145);
							reason_names.reject(_position__anonymous_145);
							trait_names.reject(_position__anonymous_145);
							condition_names.reject(_position__anonymous_145);
							payment_short_type_names.reject(_position__anonymous_145);
							skill_names.reject(_position__anonymous_145);
							map_names.reject(_position__anonymous_145);
							event_names.reject(_position__anonymous_145);
							image_names.reject(_position__anonymous_145);
							tile_symbols.reject(_position__anonymous_145);
							payment_long_type_names.reject(_position__anonymous_145);
							area_names.reject(_position__anonymous_145);
							structure_names.reject(_position__anonymous_145);
							tile_names.reject(_position__anonymous_145);
							hero_stat.reject(_position__anonymous_145);
							_state=SUCCESS;
							_position__anonymous_145=_position;
							_token__anonymous_145=_token;
							_token=new Token.Parsed(Token.Id.ANON);
							if(_pass==FIRST_PASS) {
								String _result = _preparsed_NAME.get(_position);
								if(_result==null) {
									_state=FAILED;
								}
								else {
									Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
									_token.add(_position,_first_pass_token);
									_position+=_result.length();
									while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
										++_position;
									}
								}
							}
							else if(_pass==SECOND_PASS) {
								_list_name_result=_preparsed_NAME.get(_position);
								if(_list_name_result!=null&&item_names.contains(_list_name_result)) {
									if(_position+_list_name_result.length()<_inputLength) {
										int _next_char = _inputArray[_position+_list_name_result.length()];
										if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
											_state=FAILED;
										}
									}
									if(_state==SUCCESS) {
										_token.add(_position,new Tokens.Name.ItemNamesToken(_list_name_result));
										_position+=_list_name_result.length();
										while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
											++_position;
										}
									}
								}
								else {
									_state=FAILED;
								}
								if(_state==FAILED) {
									if(_position>=_furthestPosition) {
										_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"item_names");
										_furthestPosition=_position;
									}
								}
							}
							if(_state==FAILED) {
								if(_position>=_furthestPosition) {
									_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"acquisition(_anonymous_145)");
									_furthestPosition=_position;
								}
								_position=_position__anonymous_145;
							}
							else {
							}
							if(_state==SUCCESS) {
								_token__anonymous_145.addAll(_token);
								_token__anonymous_145.setValue(_token.getValue());
							}
							_token=_token__anonymous_145;
							if(_state==FAILED) {
								support_names.reject(_position__anonymous_145);
								association_names.reject(_position__anonymous_145);
								room_names.reject(_position__anonymous_145);
								activity_names.reject(_position__anonymous_145);
								siding_names.reject(_position__anonymous_145);
								item_names.reject(_position__anonymous_145);
								aspect_names.reject(_position__anonymous_145);
								affinity_names.reject(_position__anonymous_145);
								activity_type_names.reject(_position__anonymous_145);
								trail_names.reject(_position__anonymous_145);
								attack_names.reject(_position__anonymous_145);
								reason_names.reject(_position__anonymous_145);
								trait_names.reject(_position__anonymous_145);
								condition_names.reject(_position__anonymous_145);
								payment_short_type_names.reject(_position__anonymous_145);
								skill_names.reject(_position__anonymous_145);
								map_names.reject(_position__anonymous_145);
								event_names.reject(_position__anonymous_145);
								image_names.reject(_position__anonymous_145);
								tile_symbols.reject(_position__anonymous_145);
								payment_long_type_names.reject(_position__anonymous_145);
								area_names.reject(_position__anonymous_145);
								structure_names.reject(_position__anonymous_145);
								tile_names.reject(_position__anonymous_145);
								hero_stat.reject(_position__anonymous_145);
							}
							else if(_state==SUCCESS) {
								support_names.accept(_position__anonymous_145);
								association_names.accept(_position__anonymous_145);
								room_names.accept(_position__anonymous_145);
								activity_names.accept(_position__anonymous_145);
								siding_names.accept(_position__anonymous_145);
								item_names.accept(_position__anonymous_145);
								aspect_names.accept(_position__anonymous_145);
								affinity_names.accept(_position__anonymous_145);
								activity_type_names.accept(_position__anonymous_145);
								trail_names.accept(_position__anonymous_145);
								attack_names.accept(_position__anonymous_145);
								reason_names.accept(_position__anonymous_145);
								trait_names.accept(_position__anonymous_145);
								condition_names.accept(_position__anonymous_145);
								payment_short_type_names.accept(_position__anonymous_145);
								skill_names.accept(_position__anonymous_145);
								map_names.accept(_position__anonymous_145);
								event_names.accept(_position__anonymous_145);
								image_names.accept(_position__anonymous_145);
								tile_symbols.accept(_position__anonymous_145);
								payment_long_type_names.accept(_position__anonymous_145);
								area_names.accept(_position__anonymous_145);
								structure_names.accept(_position__anonymous_145);
								tile_names.accept(_position__anonymous_145);
								hero_stat.accept(_position__anonymous_145);
							}
						}
					}
				}
			}
		}
	}
	public void parse__anonymous_42() {
		int _position__anonymous_42 = -1;
		Token.Parsed _token__anonymous_42 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_42=_position;
		_token__anonymous_42=_token;
		_token=new Tokens.Name.DmgTypeToken();
		if(_position+4-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='b') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='o') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='d') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='y') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_41.SYNTAX);
			_position=_position+4;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain body");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"attack_element(_anonymous_42)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_42;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_42.add(_position__anonymous_42,_token);
		}
		_token=_token__anonymous_42;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_42);
			association_names.reject(_position__anonymous_42);
			room_names.reject(_position__anonymous_42);
			activity_names.reject(_position__anonymous_42);
			siding_names.reject(_position__anonymous_42);
			item_names.reject(_position__anonymous_42);
			aspect_names.reject(_position__anonymous_42);
			affinity_names.reject(_position__anonymous_42);
			activity_type_names.reject(_position__anonymous_42);
			trail_names.reject(_position__anonymous_42);
			attack_names.reject(_position__anonymous_42);
			reason_names.reject(_position__anonymous_42);
			trait_names.reject(_position__anonymous_42);
			condition_names.reject(_position__anonymous_42);
			payment_short_type_names.reject(_position__anonymous_42);
			skill_names.reject(_position__anonymous_42);
			map_names.reject(_position__anonymous_42);
			event_names.reject(_position__anonymous_42);
			image_names.reject(_position__anonymous_42);
			tile_symbols.reject(_position__anonymous_42);
			payment_long_type_names.reject(_position__anonymous_42);
			area_names.reject(_position__anonymous_42);
			structure_names.reject(_position__anonymous_42);
			tile_names.reject(_position__anonymous_42);
			hero_stat.reject(_position__anonymous_42);
			_state=SUCCESS;
			_position__anonymous_42=_position;
			_token__anonymous_42=_token;
			_token=new Tokens.Name.DmgTypeToken();
			if(_position+4-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='m') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='i') {
					_state=FAILED;
				}
				if(_inputArray[_position+2]!='n') {
					_state=FAILED;
				}
				if(_inputArray[_position+3]!='d') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_42.SYNTAX);
				_position=_position+4;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain mind");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"attack_element(_anonymous_42)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_42;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_42.add(_position__anonymous_42,_token);
			}
			_token=_token__anonymous_42;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_42);
				association_names.reject(_position__anonymous_42);
				room_names.reject(_position__anonymous_42);
				activity_names.reject(_position__anonymous_42);
				siding_names.reject(_position__anonymous_42);
				item_names.reject(_position__anonymous_42);
				aspect_names.reject(_position__anonymous_42);
				affinity_names.reject(_position__anonymous_42);
				activity_type_names.reject(_position__anonymous_42);
				trail_names.reject(_position__anonymous_42);
				attack_names.reject(_position__anonymous_42);
				reason_names.reject(_position__anonymous_42);
				trait_names.reject(_position__anonymous_42);
				condition_names.reject(_position__anonymous_42);
				payment_short_type_names.reject(_position__anonymous_42);
				skill_names.reject(_position__anonymous_42);
				map_names.reject(_position__anonymous_42);
				event_names.reject(_position__anonymous_42);
				image_names.reject(_position__anonymous_42);
				tile_symbols.reject(_position__anonymous_42);
				payment_long_type_names.reject(_position__anonymous_42);
				area_names.reject(_position__anonymous_42);
				structure_names.reject(_position__anonymous_42);
				tile_names.reject(_position__anonymous_42);
				hero_stat.reject(_position__anonymous_42);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_42);
				association_names.accept(_position__anonymous_42);
				room_names.accept(_position__anonymous_42);
				activity_names.accept(_position__anonymous_42);
				siding_names.accept(_position__anonymous_42);
				item_names.accept(_position__anonymous_42);
				aspect_names.accept(_position__anonymous_42);
				affinity_names.accept(_position__anonymous_42);
				activity_type_names.accept(_position__anonymous_42);
				trail_names.accept(_position__anonymous_42);
				attack_names.accept(_position__anonymous_42);
				reason_names.accept(_position__anonymous_42);
				trait_names.accept(_position__anonymous_42);
				condition_names.accept(_position__anonymous_42);
				payment_short_type_names.accept(_position__anonymous_42);
				skill_names.accept(_position__anonymous_42);
				map_names.accept(_position__anonymous_42);
				event_names.accept(_position__anonymous_42);
				image_names.accept(_position__anonymous_42);
				tile_symbols.accept(_position__anonymous_42);
				payment_long_type_names.accept(_position__anonymous_42);
				area_names.accept(_position__anonymous_42);
				structure_names.accept(_position__anonymous_42);
				tile_names.accept(_position__anonymous_42);
				hero_stat.accept(_position__anonymous_42);
			}
		}
	}
	public void parse__anonymous_146() {
		int _position__anonymous_146 = -1;
		Token.Parsed _token__anonymous_146 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_146=_position;
		_token__anonymous_146=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+4-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='f') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='r') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='o') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='m') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_62.SYNTAX);
			_position=_position+4;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain from");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"acquisition(_anonymous_146)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_146;
		}
		else {
			_token_NAME=_token;
			_token=new Tokens.Name.SourceNameToken();
			_position_NAME=_position;
			parse_NAME();
			if(_state==SUCCESS) {
				_token_NAME.add(_position_NAME,_token);
			}
			_token=_token_NAME;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"acquisition(_anonymous_146)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_146;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_146.addAll(_token);
			_token__anonymous_146.setValue(_token.getValue());
		}
		_token=_token__anonymous_146;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_146);
			association_names.reject(_position__anonymous_146);
			room_names.reject(_position__anonymous_146);
			activity_names.reject(_position__anonymous_146);
			siding_names.reject(_position__anonymous_146);
			item_names.reject(_position__anonymous_146);
			aspect_names.reject(_position__anonymous_146);
			affinity_names.reject(_position__anonymous_146);
			activity_type_names.reject(_position__anonymous_146);
			trail_names.reject(_position__anonymous_146);
			attack_names.reject(_position__anonymous_146);
			reason_names.reject(_position__anonymous_146);
			trait_names.reject(_position__anonymous_146);
			condition_names.reject(_position__anonymous_146);
			payment_short_type_names.reject(_position__anonymous_146);
			skill_names.reject(_position__anonymous_146);
			map_names.reject(_position__anonymous_146);
			event_names.reject(_position__anonymous_146);
			image_names.reject(_position__anonymous_146);
			tile_symbols.reject(_position__anonymous_146);
			payment_long_type_names.reject(_position__anonymous_146);
			area_names.reject(_position__anonymous_146);
			structure_names.reject(_position__anonymous_146);
			tile_names.reject(_position__anonymous_146);
			hero_stat.reject(_position__anonymous_146);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_146);
			association_names.accept(_position__anonymous_146);
			room_names.accept(_position__anonymous_146);
			activity_names.accept(_position__anonymous_146);
			siding_names.accept(_position__anonymous_146);
			item_names.accept(_position__anonymous_146);
			aspect_names.accept(_position__anonymous_146);
			affinity_names.accept(_position__anonymous_146);
			activity_type_names.accept(_position__anonymous_146);
			trail_names.accept(_position__anonymous_146);
			attack_names.accept(_position__anonymous_146);
			reason_names.accept(_position__anonymous_146);
			trait_names.accept(_position__anonymous_146);
			condition_names.accept(_position__anonymous_146);
			payment_short_type_names.accept(_position__anonymous_146);
			skill_names.accept(_position__anonymous_146);
			map_names.accept(_position__anonymous_146);
			event_names.accept(_position__anonymous_146);
			image_names.accept(_position__anonymous_146);
			tile_symbols.accept(_position__anonymous_146);
			payment_long_type_names.accept(_position__anonymous_146);
			area_names.accept(_position__anonymous_146);
			structure_names.accept(_position__anonymous_146);
			tile_names.accept(_position__anonymous_146);
			hero_stat.accept(_position__anonymous_146);
		}
	}
	public void parse__anonymous_41() {
		int _position__anonymous_41 = -1;
		Token.Parsed _token__anonymous_41 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_41=_position;
		_token__anonymous_41=_token;
		_token=new Tokens.Name.DamageToken();
		int _state_56 = _state;
		parse__anonymous_42();
		if(_state_56==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"attack_element(_anonymous_41)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_41;
		}
		else {
			if(_position+6-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='d') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='a') {
					_state=FAILED;
				}
				if(_inputArray[_position+2]!='m') {
					_state=FAILED;
				}
				if(_inputArray[_position+3]!='a') {
					_state=FAILED;
				}
				if(_inputArray[_position+4]!='g') {
					_state=FAILED;
				}
				if(_inputArray[_position+5]!='e') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_43.SYNTAX);
				_position=_position+6;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain damage");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"attack_element(_anonymous_41)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_41;
			}
			else {
				parse__anonymous_43();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"attack_element(_anonymous_41)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_41;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_41.add(_position__anonymous_41,_token);
		}
		_token=_token__anonymous_41;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_41);
			association_names.reject(_position__anonymous_41);
			room_names.reject(_position__anonymous_41);
			activity_names.reject(_position__anonymous_41);
			siding_names.reject(_position__anonymous_41);
			item_names.reject(_position__anonymous_41);
			aspect_names.reject(_position__anonymous_41);
			affinity_names.reject(_position__anonymous_41);
			activity_type_names.reject(_position__anonymous_41);
			trail_names.reject(_position__anonymous_41);
			attack_names.reject(_position__anonymous_41);
			reason_names.reject(_position__anonymous_41);
			trait_names.reject(_position__anonymous_41);
			condition_names.reject(_position__anonymous_41);
			payment_short_type_names.reject(_position__anonymous_41);
			skill_names.reject(_position__anonymous_41);
			map_names.reject(_position__anonymous_41);
			event_names.reject(_position__anonymous_41);
			image_names.reject(_position__anonymous_41);
			tile_symbols.reject(_position__anonymous_41);
			payment_long_type_names.reject(_position__anonymous_41);
			area_names.reject(_position__anonymous_41);
			structure_names.reject(_position__anonymous_41);
			tile_names.reject(_position__anonymous_41);
			hero_stat.reject(_position__anonymous_41);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_41);
			association_names.accept(_position__anonymous_41);
			room_names.accept(_position__anonymous_41);
			activity_names.accept(_position__anonymous_41);
			siding_names.accept(_position__anonymous_41);
			item_names.accept(_position__anonymous_41);
			aspect_names.accept(_position__anonymous_41);
			affinity_names.accept(_position__anonymous_41);
			activity_type_names.accept(_position__anonymous_41);
			trail_names.accept(_position__anonymous_41);
			attack_names.accept(_position__anonymous_41);
			reason_names.accept(_position__anonymous_41);
			trait_names.accept(_position__anonymous_41);
			condition_names.accept(_position__anonymous_41);
			payment_short_type_names.accept(_position__anonymous_41);
			skill_names.accept(_position__anonymous_41);
			map_names.accept(_position__anonymous_41);
			event_names.accept(_position__anonymous_41);
			image_names.accept(_position__anonymous_41);
			tile_symbols.accept(_position__anonymous_41);
			payment_long_type_names.accept(_position__anonymous_41);
			area_names.accept(_position__anonymous_41);
			structure_names.accept(_position__anonymous_41);
			tile_names.accept(_position__anonymous_41);
			hero_stat.accept(_position__anonymous_41);
		}
	}
	public void parse__anonymous_147() {
		int _position__anonymous_147 = -1;
		Token.Parsed _token__anonymous_147 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_147=_position;
		_token__anonymous_147=_token;
		_token=new Tokens.Name.OperatorToken();
		if(_position+6-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='i') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='m') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='p') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='o') {
				_state=FAILED;
			}
			if(_inputArray[_position+4]!='s') {
				_state=FAILED;
			}
			if(_inputArray[_position+5]!='e') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_109.impose);
			_position=_position+6;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain impose");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"imposition(_anonymous_147)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_147;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_147.add(_position__anonymous_147,_token);
		}
		_token=_token__anonymous_147;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_147);
			association_names.reject(_position__anonymous_147);
			room_names.reject(_position__anonymous_147);
			activity_names.reject(_position__anonymous_147);
			siding_names.reject(_position__anonymous_147);
			item_names.reject(_position__anonymous_147);
			aspect_names.reject(_position__anonymous_147);
			affinity_names.reject(_position__anonymous_147);
			activity_type_names.reject(_position__anonymous_147);
			trail_names.reject(_position__anonymous_147);
			attack_names.reject(_position__anonymous_147);
			reason_names.reject(_position__anonymous_147);
			trait_names.reject(_position__anonymous_147);
			condition_names.reject(_position__anonymous_147);
			payment_short_type_names.reject(_position__anonymous_147);
			skill_names.reject(_position__anonymous_147);
			map_names.reject(_position__anonymous_147);
			event_names.reject(_position__anonymous_147);
			image_names.reject(_position__anonymous_147);
			tile_symbols.reject(_position__anonymous_147);
			payment_long_type_names.reject(_position__anonymous_147);
			area_names.reject(_position__anonymous_147);
			structure_names.reject(_position__anonymous_147);
			tile_names.reject(_position__anonymous_147);
			hero_stat.reject(_position__anonymous_147);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_147);
			association_names.accept(_position__anonymous_147);
			room_names.accept(_position__anonymous_147);
			activity_names.accept(_position__anonymous_147);
			siding_names.accept(_position__anonymous_147);
			item_names.accept(_position__anonymous_147);
			aspect_names.accept(_position__anonymous_147);
			affinity_names.accept(_position__anonymous_147);
			activity_type_names.accept(_position__anonymous_147);
			trail_names.accept(_position__anonymous_147);
			attack_names.accept(_position__anonymous_147);
			reason_names.accept(_position__anonymous_147);
			trait_names.accept(_position__anonymous_147);
			condition_names.accept(_position__anonymous_147);
			payment_short_type_names.accept(_position__anonymous_147);
			skill_names.accept(_position__anonymous_147);
			map_names.accept(_position__anonymous_147);
			event_names.accept(_position__anonymous_147);
			image_names.accept(_position__anonymous_147);
			tile_symbols.accept(_position__anonymous_147);
			payment_long_type_names.accept(_position__anonymous_147);
			area_names.accept(_position__anonymous_147);
			structure_names.accept(_position__anonymous_147);
			tile_names.accept(_position__anonymous_147);
			hero_stat.accept(_position__anonymous_147);
		}
	}
	public void parse__anonymous_33() {
		int _position__anonymous_33 = -1;
		Token.Parsed _token__anonymous_33 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_33=_position;
		_token__anonymous_33=_token;
		_token=new Tokens.Name.ListenToken();
		if(_position+6-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='l') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='i') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='s') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='t') {
				_state=FAILED;
			}
			if(_inputArray[_position+4]!='e') {
				_state=FAILED;
			}
			if(_inputArray[_position+5]!='n') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_29.SYNTAX);
			_position=_position+6;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain listen");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"quest_type_element(_anonymous_33)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_33;
		}
		else {
			parse_std_body();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"quest_type_element(_anonymous_33)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_33;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_33.add(_position__anonymous_33,_token);
		}
		_token=_token__anonymous_33;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_33);
			association_names.reject(_position__anonymous_33);
			room_names.reject(_position__anonymous_33);
			activity_names.reject(_position__anonymous_33);
			siding_names.reject(_position__anonymous_33);
			item_names.reject(_position__anonymous_33);
			aspect_names.reject(_position__anonymous_33);
			affinity_names.reject(_position__anonymous_33);
			activity_type_names.reject(_position__anonymous_33);
			trail_names.reject(_position__anonymous_33);
			attack_names.reject(_position__anonymous_33);
			reason_names.reject(_position__anonymous_33);
			trait_names.reject(_position__anonymous_33);
			condition_names.reject(_position__anonymous_33);
			payment_short_type_names.reject(_position__anonymous_33);
			skill_names.reject(_position__anonymous_33);
			map_names.reject(_position__anonymous_33);
			event_names.reject(_position__anonymous_33);
			image_names.reject(_position__anonymous_33);
			tile_symbols.reject(_position__anonymous_33);
			payment_long_type_names.reject(_position__anonymous_33);
			area_names.reject(_position__anonymous_33);
			structure_names.reject(_position__anonymous_33);
			tile_names.reject(_position__anonymous_33);
			hero_stat.reject(_position__anonymous_33);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_33);
			association_names.accept(_position__anonymous_33);
			room_names.accept(_position__anonymous_33);
			activity_names.accept(_position__anonymous_33);
			siding_names.accept(_position__anonymous_33);
			item_names.accept(_position__anonymous_33);
			aspect_names.accept(_position__anonymous_33);
			affinity_names.accept(_position__anonymous_33);
			activity_type_names.accept(_position__anonymous_33);
			trail_names.accept(_position__anonymous_33);
			attack_names.accept(_position__anonymous_33);
			reason_names.accept(_position__anonymous_33);
			trait_names.accept(_position__anonymous_33);
			condition_names.accept(_position__anonymous_33);
			payment_short_type_names.accept(_position__anonymous_33);
			skill_names.accept(_position__anonymous_33);
			map_names.accept(_position__anonymous_33);
			event_names.accept(_position__anonymous_33);
			image_names.accept(_position__anonymous_33);
			tile_symbols.accept(_position__anonymous_33);
			payment_long_type_names.accept(_position__anonymous_33);
			area_names.accept(_position__anonymous_33);
			structure_names.accept(_position__anonymous_33);
			tile_names.accept(_position__anonymous_33);
			hero_stat.accept(_position__anonymous_33);
		}
	}
	public void parse__anonymous_140() {
		int _position__anonymous_140 = -1;
		Token.Parsed _token__anonymous_140 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_140=_position;
		_token__anonymous_140=_token;
		_token=new Tokens.Name.InfluenceToken();
		parse_variable_call();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"body_defined_statement(_anonymous_140)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_140;
		}
		else {
			parse_influence();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"body_defined_statement(_anonymous_140)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_140;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_140.add(_position__anonymous_140,_token);
		}
		_token=_token__anonymous_140;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_140);
			association_names.reject(_position__anonymous_140);
			room_names.reject(_position__anonymous_140);
			activity_names.reject(_position__anonymous_140);
			siding_names.reject(_position__anonymous_140);
			item_names.reject(_position__anonymous_140);
			aspect_names.reject(_position__anonymous_140);
			affinity_names.reject(_position__anonymous_140);
			activity_type_names.reject(_position__anonymous_140);
			trail_names.reject(_position__anonymous_140);
			attack_names.reject(_position__anonymous_140);
			reason_names.reject(_position__anonymous_140);
			trait_names.reject(_position__anonymous_140);
			condition_names.reject(_position__anonymous_140);
			payment_short_type_names.reject(_position__anonymous_140);
			skill_names.reject(_position__anonymous_140);
			map_names.reject(_position__anonymous_140);
			event_names.reject(_position__anonymous_140);
			image_names.reject(_position__anonymous_140);
			tile_symbols.reject(_position__anonymous_140);
			payment_long_type_names.reject(_position__anonymous_140);
			area_names.reject(_position__anonymous_140);
			structure_names.reject(_position__anonymous_140);
			tile_names.reject(_position__anonymous_140);
			hero_stat.reject(_position__anonymous_140);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_140);
			association_names.accept(_position__anonymous_140);
			room_names.accept(_position__anonymous_140);
			activity_names.accept(_position__anonymous_140);
			siding_names.accept(_position__anonymous_140);
			item_names.accept(_position__anonymous_140);
			aspect_names.accept(_position__anonymous_140);
			affinity_names.accept(_position__anonymous_140);
			activity_type_names.accept(_position__anonymous_140);
			trail_names.accept(_position__anonymous_140);
			attack_names.accept(_position__anonymous_140);
			reason_names.accept(_position__anonymous_140);
			trait_names.accept(_position__anonymous_140);
			condition_names.accept(_position__anonymous_140);
			payment_short_type_names.accept(_position__anonymous_140);
			skill_names.accept(_position__anonymous_140);
			map_names.accept(_position__anonymous_140);
			event_names.accept(_position__anonymous_140);
			image_names.accept(_position__anonymous_140);
			tile_symbols.accept(_position__anonymous_140);
			payment_long_type_names.accept(_position__anonymous_140);
			area_names.accept(_position__anonymous_140);
			structure_names.accept(_position__anonymous_140);
			tile_names.accept(_position__anonymous_140);
			hero_stat.accept(_position__anonymous_140);
		}
	}
	public void parse__anonymous_32() {
		int _position__anonymous_32 = -1;
		Token.Parsed _token__anonymous_32 = null;
		int _position_comments = -1;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_32=_position;
		_token__anonymous_32=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_quest(_anonymous_32)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_32;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_32.addAll(_token);
			_token__anonymous_32.setValue(_token.getValue());
		}
		_token=_token__anonymous_32;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_32);
			association_names.reject(_position__anonymous_32);
			room_names.reject(_position__anonymous_32);
			activity_names.reject(_position__anonymous_32);
			siding_names.reject(_position__anonymous_32);
			item_names.reject(_position__anonymous_32);
			aspect_names.reject(_position__anonymous_32);
			affinity_names.reject(_position__anonymous_32);
			activity_type_names.reject(_position__anonymous_32);
			trail_names.reject(_position__anonymous_32);
			attack_names.reject(_position__anonymous_32);
			reason_names.reject(_position__anonymous_32);
			trait_names.reject(_position__anonymous_32);
			condition_names.reject(_position__anonymous_32);
			payment_short_type_names.reject(_position__anonymous_32);
			skill_names.reject(_position__anonymous_32);
			map_names.reject(_position__anonymous_32);
			event_names.reject(_position__anonymous_32);
			image_names.reject(_position__anonymous_32);
			tile_symbols.reject(_position__anonymous_32);
			payment_long_type_names.reject(_position__anonymous_32);
			area_names.reject(_position__anonymous_32);
			structure_names.reject(_position__anonymous_32);
			tile_names.reject(_position__anonymous_32);
			hero_stat.reject(_position__anonymous_32);
			_state=SUCCESS;
			_position__anonymous_32=_position;
			_token__anonymous_32=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			_position_comments=_position;
			if(_state==SUCCESS&&!_recursion_protection_comments_14.contains(_position)) {
				_recursion_protection_comments_14.add(_position);
				parse_comments();
				_recursion_protection_comments_14.remove(_position_comments);
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_quest(_anonymous_32)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_32;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_32.addAll(_token);
				_token__anonymous_32.setValue(_token.getValue());
			}
			_token=_token__anonymous_32;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_32);
				association_names.reject(_position__anonymous_32);
				room_names.reject(_position__anonymous_32);
				activity_names.reject(_position__anonymous_32);
				siding_names.reject(_position__anonymous_32);
				item_names.reject(_position__anonymous_32);
				aspect_names.reject(_position__anonymous_32);
				affinity_names.reject(_position__anonymous_32);
				activity_type_names.reject(_position__anonymous_32);
				trail_names.reject(_position__anonymous_32);
				attack_names.reject(_position__anonymous_32);
				reason_names.reject(_position__anonymous_32);
				trait_names.reject(_position__anonymous_32);
				condition_names.reject(_position__anonymous_32);
				payment_short_type_names.reject(_position__anonymous_32);
				skill_names.reject(_position__anonymous_32);
				map_names.reject(_position__anonymous_32);
				event_names.reject(_position__anonymous_32);
				image_names.reject(_position__anonymous_32);
				tile_symbols.reject(_position__anonymous_32);
				payment_long_type_names.reject(_position__anonymous_32);
				area_names.reject(_position__anonymous_32);
				structure_names.reject(_position__anonymous_32);
				tile_names.reject(_position__anonymous_32);
				hero_stat.reject(_position__anonymous_32);
				_state=SUCCESS;
				_position__anonymous_32=_position;
				_token__anonymous_32=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				parse_quest_type_declaration();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_quest(_anonymous_32)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_32;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_32.addAll(_token);
					_token__anonymous_32.setValue(_token.getValue());
				}
				_token=_token__anonymous_32;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_32);
					association_names.reject(_position__anonymous_32);
					room_names.reject(_position__anonymous_32);
					activity_names.reject(_position__anonymous_32);
					siding_names.reject(_position__anonymous_32);
					item_names.reject(_position__anonymous_32);
					aspect_names.reject(_position__anonymous_32);
					affinity_names.reject(_position__anonymous_32);
					activity_type_names.reject(_position__anonymous_32);
					trail_names.reject(_position__anonymous_32);
					attack_names.reject(_position__anonymous_32);
					reason_names.reject(_position__anonymous_32);
					trait_names.reject(_position__anonymous_32);
					condition_names.reject(_position__anonymous_32);
					payment_short_type_names.reject(_position__anonymous_32);
					skill_names.reject(_position__anonymous_32);
					map_names.reject(_position__anonymous_32);
					event_names.reject(_position__anonymous_32);
					image_names.reject(_position__anonymous_32);
					tile_symbols.reject(_position__anonymous_32);
					payment_long_type_names.reject(_position__anonymous_32);
					area_names.reject(_position__anonymous_32);
					structure_names.reject(_position__anonymous_32);
					tile_names.reject(_position__anonymous_32);
					hero_stat.reject(_position__anonymous_32);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_32);
					association_names.accept(_position__anonymous_32);
					room_names.accept(_position__anonymous_32);
					activity_names.accept(_position__anonymous_32);
					siding_names.accept(_position__anonymous_32);
					item_names.accept(_position__anonymous_32);
					aspect_names.accept(_position__anonymous_32);
					affinity_names.accept(_position__anonymous_32);
					activity_type_names.accept(_position__anonymous_32);
					trail_names.accept(_position__anonymous_32);
					attack_names.accept(_position__anonymous_32);
					reason_names.accept(_position__anonymous_32);
					trait_names.accept(_position__anonymous_32);
					condition_names.accept(_position__anonymous_32);
					payment_short_type_names.accept(_position__anonymous_32);
					skill_names.accept(_position__anonymous_32);
					map_names.accept(_position__anonymous_32);
					event_names.accept(_position__anonymous_32);
					image_names.accept(_position__anonymous_32);
					tile_symbols.accept(_position__anonymous_32);
					payment_long_type_names.accept(_position__anonymous_32);
					area_names.accept(_position__anonymous_32);
					structure_names.accept(_position__anonymous_32);
					tile_names.accept(_position__anonymous_32);
					hero_stat.accept(_position__anonymous_32);
				}
			}
		}
	}
	public void parse__anonymous_141() {
		int _position__anonymous_141 = -1;
		Token.Parsed _token__anonymous_141 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_141=_position;
		_token__anonymous_141=_token;
		_token=new Tokens.Name.QuestAdditionToken();
		parse_variable_call();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"body_defined_statement(_anonymous_141)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_141;
		}
		else {
			parse_quest_addition();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"body_defined_statement(_anonymous_141)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_141;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_141.add(_position__anonymous_141,_token);
		}
		_token=_token__anonymous_141;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_141);
			association_names.reject(_position__anonymous_141);
			room_names.reject(_position__anonymous_141);
			activity_names.reject(_position__anonymous_141);
			siding_names.reject(_position__anonymous_141);
			item_names.reject(_position__anonymous_141);
			aspect_names.reject(_position__anonymous_141);
			affinity_names.reject(_position__anonymous_141);
			activity_type_names.reject(_position__anonymous_141);
			trail_names.reject(_position__anonymous_141);
			attack_names.reject(_position__anonymous_141);
			reason_names.reject(_position__anonymous_141);
			trait_names.reject(_position__anonymous_141);
			condition_names.reject(_position__anonymous_141);
			payment_short_type_names.reject(_position__anonymous_141);
			skill_names.reject(_position__anonymous_141);
			map_names.reject(_position__anonymous_141);
			event_names.reject(_position__anonymous_141);
			image_names.reject(_position__anonymous_141);
			tile_symbols.reject(_position__anonymous_141);
			payment_long_type_names.reject(_position__anonymous_141);
			area_names.reject(_position__anonymous_141);
			structure_names.reject(_position__anonymous_141);
			tile_names.reject(_position__anonymous_141);
			hero_stat.reject(_position__anonymous_141);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_141);
			association_names.accept(_position__anonymous_141);
			room_names.accept(_position__anonymous_141);
			activity_names.accept(_position__anonymous_141);
			siding_names.accept(_position__anonymous_141);
			item_names.accept(_position__anonymous_141);
			aspect_names.accept(_position__anonymous_141);
			affinity_names.accept(_position__anonymous_141);
			activity_type_names.accept(_position__anonymous_141);
			trail_names.accept(_position__anonymous_141);
			attack_names.accept(_position__anonymous_141);
			reason_names.accept(_position__anonymous_141);
			trait_names.accept(_position__anonymous_141);
			condition_names.accept(_position__anonymous_141);
			payment_short_type_names.accept(_position__anonymous_141);
			skill_names.accept(_position__anonymous_141);
			map_names.accept(_position__anonymous_141);
			event_names.accept(_position__anonymous_141);
			image_names.accept(_position__anonymous_141);
			tile_symbols.accept(_position__anonymous_141);
			payment_long_type_names.accept(_position__anonymous_141);
			area_names.accept(_position__anonymous_141);
			structure_names.accept(_position__anonymous_141);
			tile_names.accept(_position__anonymous_141);
			hero_stat.accept(_position__anonymous_141);
		}
	}
	public void parse__anonymous_35() {
		int _position__anonymous_35 = -1;
		Token.Parsed _token__anonymous_35 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_35=_position;
		_token__anonymous_35=_token;
		_token=new Tokens.Name.EventNamesToken();
		if(_position+5-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='s') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='t') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='r') {
				_state=FAILED;
			}
			if(_inputArray[_position+4]!='t') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_33.SYNTAX);
			_position=_position+5;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain start");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"quest_type_element(_anonymous_35)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_35;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_35.add(_position__anonymous_35,_token);
		}
		_token=_token__anonymous_35;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_35);
			association_names.reject(_position__anonymous_35);
			room_names.reject(_position__anonymous_35);
			activity_names.reject(_position__anonymous_35);
			siding_names.reject(_position__anonymous_35);
			item_names.reject(_position__anonymous_35);
			aspect_names.reject(_position__anonymous_35);
			affinity_names.reject(_position__anonymous_35);
			activity_type_names.reject(_position__anonymous_35);
			trail_names.reject(_position__anonymous_35);
			attack_names.reject(_position__anonymous_35);
			reason_names.reject(_position__anonymous_35);
			trait_names.reject(_position__anonymous_35);
			condition_names.reject(_position__anonymous_35);
			payment_short_type_names.reject(_position__anonymous_35);
			skill_names.reject(_position__anonymous_35);
			map_names.reject(_position__anonymous_35);
			event_names.reject(_position__anonymous_35);
			image_names.reject(_position__anonymous_35);
			tile_symbols.reject(_position__anonymous_35);
			payment_long_type_names.reject(_position__anonymous_35);
			area_names.reject(_position__anonymous_35);
			structure_names.reject(_position__anonymous_35);
			tile_names.reject(_position__anonymous_35);
			hero_stat.reject(_position__anonymous_35);
			_state=SUCCESS;
			_position__anonymous_35=_position;
			_token__anonymous_35=_token;
			_token=new Tokens.Name.EventNamesToken();
			if(_pass==FIRST_PASS) {
				String _result = _preparsed_NAME.get(_position);
				if(_result==null) {
					_state=FAILED;
				}
				else {
					Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
					_token.add(_position,_first_pass_token);
					_position+=_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else if(_pass==SECOND_PASS) {
				_list_name_result=_preparsed_NAME.get(_position);
				if(_list_name_result!=null&&event_names.contains(_list_name_result)) {
					if(_position+_list_name_result.length()<_inputLength) {
						int _next_char = _inputArray[_position+_list_name_result.length()];
						if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,new Tokens.Name.EventNamesToken(_list_name_result));
						_position+=_list_name_result.length();
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
				}
				else {
					_state=FAILED;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"event_names");
						_furthestPosition=_position;
					}
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"quest_type_element(_anonymous_35)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_35;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_35.add(_position__anonymous_35,_token);
			}
			_token=_token__anonymous_35;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_35);
				association_names.reject(_position__anonymous_35);
				room_names.reject(_position__anonymous_35);
				activity_names.reject(_position__anonymous_35);
				siding_names.reject(_position__anonymous_35);
				item_names.reject(_position__anonymous_35);
				aspect_names.reject(_position__anonymous_35);
				affinity_names.reject(_position__anonymous_35);
				activity_type_names.reject(_position__anonymous_35);
				trail_names.reject(_position__anonymous_35);
				attack_names.reject(_position__anonymous_35);
				reason_names.reject(_position__anonymous_35);
				trait_names.reject(_position__anonymous_35);
				condition_names.reject(_position__anonymous_35);
				payment_short_type_names.reject(_position__anonymous_35);
				skill_names.reject(_position__anonymous_35);
				map_names.reject(_position__anonymous_35);
				event_names.reject(_position__anonymous_35);
				image_names.reject(_position__anonymous_35);
				tile_symbols.reject(_position__anonymous_35);
				payment_long_type_names.reject(_position__anonymous_35);
				area_names.reject(_position__anonymous_35);
				structure_names.reject(_position__anonymous_35);
				tile_names.reject(_position__anonymous_35);
				hero_stat.reject(_position__anonymous_35);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_35);
				association_names.accept(_position__anonymous_35);
				room_names.accept(_position__anonymous_35);
				activity_names.accept(_position__anonymous_35);
				siding_names.accept(_position__anonymous_35);
				item_names.accept(_position__anonymous_35);
				aspect_names.accept(_position__anonymous_35);
				affinity_names.accept(_position__anonymous_35);
				activity_type_names.accept(_position__anonymous_35);
				trail_names.accept(_position__anonymous_35);
				attack_names.accept(_position__anonymous_35);
				reason_names.accept(_position__anonymous_35);
				trait_names.accept(_position__anonymous_35);
				condition_names.accept(_position__anonymous_35);
				payment_short_type_names.accept(_position__anonymous_35);
				skill_names.accept(_position__anonymous_35);
				map_names.accept(_position__anonymous_35);
				event_names.accept(_position__anonymous_35);
				image_names.accept(_position__anonymous_35);
				tile_symbols.accept(_position__anonymous_35);
				payment_long_type_names.accept(_position__anonymous_35);
				area_names.accept(_position__anonymous_35);
				structure_names.accept(_position__anonymous_35);
				tile_names.accept(_position__anonymous_35);
				hero_stat.accept(_position__anonymous_35);
			}
		}
	}
	public void parse__anonymous_142() {
		int _position__anonymous_142 = -1;
		Token.Parsed _token__anonymous_142 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_142=_position;
		_token__anonymous_142=_token;
		_token=new Tokens.Name.OperatorToken();
		parse__anonymous_143();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"acquisition(_anonymous_142)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_142;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_142.add(_position__anonymous_142,_token);
		}
		_token=_token__anonymous_142;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_142);
			association_names.reject(_position__anonymous_142);
			room_names.reject(_position__anonymous_142);
			activity_names.reject(_position__anonymous_142);
			siding_names.reject(_position__anonymous_142);
			item_names.reject(_position__anonymous_142);
			aspect_names.reject(_position__anonymous_142);
			affinity_names.reject(_position__anonymous_142);
			activity_type_names.reject(_position__anonymous_142);
			trail_names.reject(_position__anonymous_142);
			attack_names.reject(_position__anonymous_142);
			reason_names.reject(_position__anonymous_142);
			trait_names.reject(_position__anonymous_142);
			condition_names.reject(_position__anonymous_142);
			payment_short_type_names.reject(_position__anonymous_142);
			skill_names.reject(_position__anonymous_142);
			map_names.reject(_position__anonymous_142);
			event_names.reject(_position__anonymous_142);
			image_names.reject(_position__anonymous_142);
			tile_symbols.reject(_position__anonymous_142);
			payment_long_type_names.reject(_position__anonymous_142);
			area_names.reject(_position__anonymous_142);
			structure_names.reject(_position__anonymous_142);
			tile_names.reject(_position__anonymous_142);
			hero_stat.reject(_position__anonymous_142);
			_state=SUCCESS;
			_position__anonymous_142=_position;
			_token__anonymous_142=_token;
			_token=new Tokens.Name.OperatorToken();
			parse__anonymous_144();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"acquisition(_anonymous_142)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_142;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_142.add(_position__anonymous_142,_token);
			}
			_token=_token__anonymous_142;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_142);
				association_names.reject(_position__anonymous_142);
				room_names.reject(_position__anonymous_142);
				activity_names.reject(_position__anonymous_142);
				siding_names.reject(_position__anonymous_142);
				item_names.reject(_position__anonymous_142);
				aspect_names.reject(_position__anonymous_142);
				affinity_names.reject(_position__anonymous_142);
				activity_type_names.reject(_position__anonymous_142);
				trail_names.reject(_position__anonymous_142);
				attack_names.reject(_position__anonymous_142);
				reason_names.reject(_position__anonymous_142);
				trait_names.reject(_position__anonymous_142);
				condition_names.reject(_position__anonymous_142);
				payment_short_type_names.reject(_position__anonymous_142);
				skill_names.reject(_position__anonymous_142);
				map_names.reject(_position__anonymous_142);
				event_names.reject(_position__anonymous_142);
				image_names.reject(_position__anonymous_142);
				tile_symbols.reject(_position__anonymous_142);
				payment_long_type_names.reject(_position__anonymous_142);
				area_names.reject(_position__anonymous_142);
				structure_names.reject(_position__anonymous_142);
				tile_names.reject(_position__anonymous_142);
				hero_stat.reject(_position__anonymous_142);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_142);
				association_names.accept(_position__anonymous_142);
				room_names.accept(_position__anonymous_142);
				activity_names.accept(_position__anonymous_142);
				siding_names.accept(_position__anonymous_142);
				item_names.accept(_position__anonymous_142);
				aspect_names.accept(_position__anonymous_142);
				affinity_names.accept(_position__anonymous_142);
				activity_type_names.accept(_position__anonymous_142);
				trail_names.accept(_position__anonymous_142);
				attack_names.accept(_position__anonymous_142);
				reason_names.accept(_position__anonymous_142);
				trait_names.accept(_position__anonymous_142);
				condition_names.accept(_position__anonymous_142);
				payment_short_type_names.accept(_position__anonymous_142);
				skill_names.accept(_position__anonymous_142);
				map_names.accept(_position__anonymous_142);
				event_names.accept(_position__anonymous_142);
				image_names.accept(_position__anonymous_142);
				tile_symbols.accept(_position__anonymous_142);
				payment_long_type_names.accept(_position__anonymous_142);
				area_names.accept(_position__anonymous_142);
				structure_names.accept(_position__anonymous_142);
				tile_names.accept(_position__anonymous_142);
				hero_stat.accept(_position__anonymous_142);
			}
		}
	}
	public void parse__anonymous_34() {
		int _position__anonymous_34 = -1;
		Token.Parsed _token__anonymous_34 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_34=_position;
		_token__anonymous_34=_token;
		_token=new Tokens.Name.EventStatementToken();
		parse__anonymous_35();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"quest_type_element(_anonymous_34)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_34;
		}
		else {
			parse_std_body();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"quest_type_element(_anonymous_34)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_34;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_34.add(_position__anonymous_34,_token);
		}
		_token=_token__anonymous_34;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_34);
			association_names.reject(_position__anonymous_34);
			room_names.reject(_position__anonymous_34);
			activity_names.reject(_position__anonymous_34);
			siding_names.reject(_position__anonymous_34);
			item_names.reject(_position__anonymous_34);
			aspect_names.reject(_position__anonymous_34);
			affinity_names.reject(_position__anonymous_34);
			activity_type_names.reject(_position__anonymous_34);
			trail_names.reject(_position__anonymous_34);
			attack_names.reject(_position__anonymous_34);
			reason_names.reject(_position__anonymous_34);
			trait_names.reject(_position__anonymous_34);
			condition_names.reject(_position__anonymous_34);
			payment_short_type_names.reject(_position__anonymous_34);
			skill_names.reject(_position__anonymous_34);
			map_names.reject(_position__anonymous_34);
			event_names.reject(_position__anonymous_34);
			image_names.reject(_position__anonymous_34);
			tile_symbols.reject(_position__anonymous_34);
			payment_long_type_names.reject(_position__anonymous_34);
			area_names.reject(_position__anonymous_34);
			structure_names.reject(_position__anonymous_34);
			tile_names.reject(_position__anonymous_34);
			hero_stat.reject(_position__anonymous_34);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_34);
			association_names.accept(_position__anonymous_34);
			room_names.accept(_position__anonymous_34);
			activity_names.accept(_position__anonymous_34);
			siding_names.accept(_position__anonymous_34);
			item_names.accept(_position__anonymous_34);
			aspect_names.accept(_position__anonymous_34);
			affinity_names.accept(_position__anonymous_34);
			activity_type_names.accept(_position__anonymous_34);
			trail_names.accept(_position__anonymous_34);
			attack_names.accept(_position__anonymous_34);
			reason_names.accept(_position__anonymous_34);
			trait_names.accept(_position__anonymous_34);
			condition_names.accept(_position__anonymous_34);
			payment_short_type_names.accept(_position__anonymous_34);
			skill_names.accept(_position__anonymous_34);
			map_names.accept(_position__anonymous_34);
			event_names.accept(_position__anonymous_34);
			image_names.accept(_position__anonymous_34);
			tile_symbols.accept(_position__anonymous_34);
			payment_long_type_names.accept(_position__anonymous_34);
			area_names.accept(_position__anonymous_34);
			structure_names.accept(_position__anonymous_34);
			tile_names.accept(_position__anonymous_34);
			hero_stat.accept(_position__anonymous_34);
		}
	}
	public void parse__anonymous_143() {
		int _position__anonymous_143 = -1;
		Token.Parsed _token__anonymous_143 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_143=_position;
		_token__anonymous_143=_token;
		_token=new Tokens.Name.GAINSToken();
		if(_position+5-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='g') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='i') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='n') {
				_state=FAILED;
			}
			if(_inputArray[_position+4]!='s') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_104.SYNTAX);
			_position=_position+5;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain gains");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"acquisition(_anonymous_143)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_143;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_143.add(_position__anonymous_143,_token);
		}
		_token=_token__anonymous_143;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_143);
			association_names.reject(_position__anonymous_143);
			room_names.reject(_position__anonymous_143);
			activity_names.reject(_position__anonymous_143);
			siding_names.reject(_position__anonymous_143);
			item_names.reject(_position__anonymous_143);
			aspect_names.reject(_position__anonymous_143);
			affinity_names.reject(_position__anonymous_143);
			activity_type_names.reject(_position__anonymous_143);
			trail_names.reject(_position__anonymous_143);
			attack_names.reject(_position__anonymous_143);
			reason_names.reject(_position__anonymous_143);
			trait_names.reject(_position__anonymous_143);
			condition_names.reject(_position__anonymous_143);
			payment_short_type_names.reject(_position__anonymous_143);
			skill_names.reject(_position__anonymous_143);
			map_names.reject(_position__anonymous_143);
			event_names.reject(_position__anonymous_143);
			image_names.reject(_position__anonymous_143);
			tile_symbols.reject(_position__anonymous_143);
			payment_long_type_names.reject(_position__anonymous_143);
			area_names.reject(_position__anonymous_143);
			structure_names.reject(_position__anonymous_143);
			tile_names.reject(_position__anonymous_143);
			hero_stat.reject(_position__anonymous_143);
			_state=SUCCESS;
			_position__anonymous_143=_position;
			_token__anonymous_143=_token;
			_token=new Tokens.Name.GAINSToken();
			if(_position+5-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='e') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='q') {
					_state=FAILED;
				}
				if(_inputArray[_position+2]!='u') {
					_state=FAILED;
				}
				if(_inputArray[_position+3]!='i') {
					_state=FAILED;
				}
				if(_inputArray[_position+4]!='p') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_105.SYNTAX);
				_position=_position+5;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain equip");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"acquisition(_anonymous_143)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_143;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_143.add(_position__anonymous_143,_token);
			}
			_token=_token__anonymous_143;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_143);
				association_names.reject(_position__anonymous_143);
				room_names.reject(_position__anonymous_143);
				activity_names.reject(_position__anonymous_143);
				siding_names.reject(_position__anonymous_143);
				item_names.reject(_position__anonymous_143);
				aspect_names.reject(_position__anonymous_143);
				affinity_names.reject(_position__anonymous_143);
				activity_type_names.reject(_position__anonymous_143);
				trail_names.reject(_position__anonymous_143);
				attack_names.reject(_position__anonymous_143);
				reason_names.reject(_position__anonymous_143);
				trait_names.reject(_position__anonymous_143);
				condition_names.reject(_position__anonymous_143);
				payment_short_type_names.reject(_position__anonymous_143);
				skill_names.reject(_position__anonymous_143);
				map_names.reject(_position__anonymous_143);
				event_names.reject(_position__anonymous_143);
				image_names.reject(_position__anonymous_143);
				tile_symbols.reject(_position__anonymous_143);
				payment_long_type_names.reject(_position__anonymous_143);
				area_names.reject(_position__anonymous_143);
				structure_names.reject(_position__anonymous_143);
				tile_names.reject(_position__anonymous_143);
				hero_stat.reject(_position__anonymous_143);
				_state=SUCCESS;
				_position__anonymous_143=_position;
				_token__anonymous_143=_token;
				_token=new Tokens.Name.GAINSToken();
				if(_position+1-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!='+') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_14.SYNTAX);
					_position=_position+1;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain +");
						_furthestPosition=_position;
					}
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"acquisition(_anonymous_143)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_143;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_143.add(_position__anonymous_143,_token);
				}
				_token=_token__anonymous_143;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_143);
					association_names.reject(_position__anonymous_143);
					room_names.reject(_position__anonymous_143);
					activity_names.reject(_position__anonymous_143);
					siding_names.reject(_position__anonymous_143);
					item_names.reject(_position__anonymous_143);
					aspect_names.reject(_position__anonymous_143);
					affinity_names.reject(_position__anonymous_143);
					activity_type_names.reject(_position__anonymous_143);
					trail_names.reject(_position__anonymous_143);
					attack_names.reject(_position__anonymous_143);
					reason_names.reject(_position__anonymous_143);
					trait_names.reject(_position__anonymous_143);
					condition_names.reject(_position__anonymous_143);
					payment_short_type_names.reject(_position__anonymous_143);
					skill_names.reject(_position__anonymous_143);
					map_names.reject(_position__anonymous_143);
					event_names.reject(_position__anonymous_143);
					image_names.reject(_position__anonymous_143);
					tile_symbols.reject(_position__anonymous_143);
					payment_long_type_names.reject(_position__anonymous_143);
					area_names.reject(_position__anonymous_143);
					structure_names.reject(_position__anonymous_143);
					tile_names.reject(_position__anonymous_143);
					hero_stat.reject(_position__anonymous_143);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_143);
					association_names.accept(_position__anonymous_143);
					room_names.accept(_position__anonymous_143);
					activity_names.accept(_position__anonymous_143);
					siding_names.accept(_position__anonymous_143);
					item_names.accept(_position__anonymous_143);
					aspect_names.accept(_position__anonymous_143);
					affinity_names.accept(_position__anonymous_143);
					activity_type_names.accept(_position__anonymous_143);
					trail_names.accept(_position__anonymous_143);
					attack_names.accept(_position__anonymous_143);
					reason_names.accept(_position__anonymous_143);
					trait_names.accept(_position__anonymous_143);
					condition_names.accept(_position__anonymous_143);
					payment_short_type_names.accept(_position__anonymous_143);
					skill_names.accept(_position__anonymous_143);
					map_names.accept(_position__anonymous_143);
					event_names.accept(_position__anonymous_143);
					image_names.accept(_position__anonymous_143);
					tile_symbols.accept(_position__anonymous_143);
					payment_long_type_names.accept(_position__anonymous_143);
					area_names.accept(_position__anonymous_143);
					structure_names.accept(_position__anonymous_143);
					tile_names.accept(_position__anonymous_143);
					hero_stat.accept(_position__anonymous_143);
				}
			}
		}
	}
	public void parse__anonymous_37() {
		int _position__anonymous_37 = -1;
		Token.Parsed _token__anonymous_37 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_37=_position;
		_token__anonymous_37=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='|') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_35.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain |");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"quest_destination(_anonymous_37)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_37;
		}
		else {
			parse_quest_tile_description();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"quest_destination(_anonymous_37)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_37;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_37.addAll(_token);
			_token__anonymous_37.setValue(_token.getValue());
		}
		_token=_token__anonymous_37;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_37);
			association_names.reject(_position__anonymous_37);
			room_names.reject(_position__anonymous_37);
			activity_names.reject(_position__anonymous_37);
			siding_names.reject(_position__anonymous_37);
			item_names.reject(_position__anonymous_37);
			aspect_names.reject(_position__anonymous_37);
			affinity_names.reject(_position__anonymous_37);
			activity_type_names.reject(_position__anonymous_37);
			trail_names.reject(_position__anonymous_37);
			attack_names.reject(_position__anonymous_37);
			reason_names.reject(_position__anonymous_37);
			trait_names.reject(_position__anonymous_37);
			condition_names.reject(_position__anonymous_37);
			payment_short_type_names.reject(_position__anonymous_37);
			skill_names.reject(_position__anonymous_37);
			map_names.reject(_position__anonymous_37);
			event_names.reject(_position__anonymous_37);
			image_names.reject(_position__anonymous_37);
			tile_symbols.reject(_position__anonymous_37);
			payment_long_type_names.reject(_position__anonymous_37);
			area_names.reject(_position__anonymous_37);
			structure_names.reject(_position__anonymous_37);
			tile_names.reject(_position__anonymous_37);
			hero_stat.reject(_position__anonymous_37);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_37);
			association_names.accept(_position__anonymous_37);
			room_names.accept(_position__anonymous_37);
			activity_names.accept(_position__anonymous_37);
			siding_names.accept(_position__anonymous_37);
			item_names.accept(_position__anonymous_37);
			aspect_names.accept(_position__anonymous_37);
			affinity_names.accept(_position__anonymous_37);
			activity_type_names.accept(_position__anonymous_37);
			trail_names.accept(_position__anonymous_37);
			attack_names.accept(_position__anonymous_37);
			reason_names.accept(_position__anonymous_37);
			trait_names.accept(_position__anonymous_37);
			condition_names.accept(_position__anonymous_37);
			payment_short_type_names.accept(_position__anonymous_37);
			skill_names.accept(_position__anonymous_37);
			map_names.accept(_position__anonymous_37);
			event_names.accept(_position__anonymous_37);
			image_names.accept(_position__anonymous_37);
			tile_symbols.accept(_position__anonymous_37);
			payment_long_type_names.accept(_position__anonymous_37);
			area_names.accept(_position__anonymous_37);
			structure_names.accept(_position__anonymous_37);
			tile_names.accept(_position__anonymous_37);
			hero_stat.accept(_position__anonymous_37);
		}
	}
	public void parse__anonymous_36() {
		int _position__anonymous_36 = -1;
		Token.Parsed _token__anonymous_36 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_36=_position;
		_token__anonymous_36=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse_quest_tile_description();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"quest_destination(_anonymous_36)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_36;
		}
		else {
			int _state_51 = _state;
			while(_position<_inputLength) {
				parse__anonymous_37();
				if(_state==FAILED) {
					break;
				}
			}
			if(_state_51==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"quest_destination(_anonymous_36)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_36;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_36.addAll(_token);
			_token__anonymous_36.setValue(_token.getValue());
		}
		_token=_token__anonymous_36;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_36);
			association_names.reject(_position__anonymous_36);
			room_names.reject(_position__anonymous_36);
			activity_names.reject(_position__anonymous_36);
			siding_names.reject(_position__anonymous_36);
			item_names.reject(_position__anonymous_36);
			aspect_names.reject(_position__anonymous_36);
			affinity_names.reject(_position__anonymous_36);
			activity_type_names.reject(_position__anonymous_36);
			trail_names.reject(_position__anonymous_36);
			attack_names.reject(_position__anonymous_36);
			reason_names.reject(_position__anonymous_36);
			trait_names.reject(_position__anonymous_36);
			condition_names.reject(_position__anonymous_36);
			payment_short_type_names.reject(_position__anonymous_36);
			skill_names.reject(_position__anonymous_36);
			map_names.reject(_position__anonymous_36);
			event_names.reject(_position__anonymous_36);
			image_names.reject(_position__anonymous_36);
			tile_symbols.reject(_position__anonymous_36);
			payment_long_type_names.reject(_position__anonymous_36);
			area_names.reject(_position__anonymous_36);
			structure_names.reject(_position__anonymous_36);
			tile_names.reject(_position__anonymous_36);
			hero_stat.reject(_position__anonymous_36);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_36);
			association_names.accept(_position__anonymous_36);
			room_names.accept(_position__anonymous_36);
			activity_names.accept(_position__anonymous_36);
			siding_names.accept(_position__anonymous_36);
			item_names.accept(_position__anonymous_36);
			aspect_names.accept(_position__anonymous_36);
			affinity_names.accept(_position__anonymous_36);
			activity_type_names.accept(_position__anonymous_36);
			trail_names.accept(_position__anonymous_36);
			attack_names.accept(_position__anonymous_36);
			reason_names.accept(_position__anonymous_36);
			trait_names.accept(_position__anonymous_36);
			condition_names.accept(_position__anonymous_36);
			payment_short_type_names.accept(_position__anonymous_36);
			skill_names.accept(_position__anonymous_36);
			map_names.accept(_position__anonymous_36);
			event_names.accept(_position__anonymous_36);
			image_names.accept(_position__anonymous_36);
			tile_symbols.accept(_position__anonymous_36);
			payment_long_type_names.accept(_position__anonymous_36);
			area_names.accept(_position__anonymous_36);
			structure_names.accept(_position__anonymous_36);
			tile_names.accept(_position__anonymous_36);
			hero_stat.accept(_position__anonymous_36);
		}
	}
	public void parse__anonymous_39() {
		int _position__anonymous_39 = -1;
		Token.Parsed _token__anonymous_39 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_39=_position;
		_token__anonymous_39=_token;
		_token=new Tokens.Name.RangeToken();
		if(_position+5-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='r') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='n') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='g') {
				_state=FAILED;
			}
			if(_inputArray[_position+4]!='e') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_39.SYNTAX);
			_position=_position+5;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain range");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"attack_element(_anonymous_39)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_39;
		}
		else {
			parse_stat_range();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"attack_element(_anonymous_39)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_39;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_39.add(_position__anonymous_39,_token);
		}
		_token=_token__anonymous_39;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_39);
			association_names.reject(_position__anonymous_39);
			room_names.reject(_position__anonymous_39);
			activity_names.reject(_position__anonymous_39);
			siding_names.reject(_position__anonymous_39);
			item_names.reject(_position__anonymous_39);
			aspect_names.reject(_position__anonymous_39);
			affinity_names.reject(_position__anonymous_39);
			activity_type_names.reject(_position__anonymous_39);
			trail_names.reject(_position__anonymous_39);
			attack_names.reject(_position__anonymous_39);
			reason_names.reject(_position__anonymous_39);
			trait_names.reject(_position__anonymous_39);
			condition_names.reject(_position__anonymous_39);
			payment_short_type_names.reject(_position__anonymous_39);
			skill_names.reject(_position__anonymous_39);
			map_names.reject(_position__anonymous_39);
			event_names.reject(_position__anonymous_39);
			image_names.reject(_position__anonymous_39);
			tile_symbols.reject(_position__anonymous_39);
			payment_long_type_names.reject(_position__anonymous_39);
			area_names.reject(_position__anonymous_39);
			structure_names.reject(_position__anonymous_39);
			tile_names.reject(_position__anonymous_39);
			hero_stat.reject(_position__anonymous_39);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_39);
			association_names.accept(_position__anonymous_39);
			room_names.accept(_position__anonymous_39);
			activity_names.accept(_position__anonymous_39);
			siding_names.accept(_position__anonymous_39);
			item_names.accept(_position__anonymous_39);
			aspect_names.accept(_position__anonymous_39);
			affinity_names.accept(_position__anonymous_39);
			activity_type_names.accept(_position__anonymous_39);
			trail_names.accept(_position__anonymous_39);
			attack_names.accept(_position__anonymous_39);
			reason_names.accept(_position__anonymous_39);
			trait_names.accept(_position__anonymous_39);
			condition_names.accept(_position__anonymous_39);
			payment_short_type_names.accept(_position__anonymous_39);
			skill_names.accept(_position__anonymous_39);
			map_names.accept(_position__anonymous_39);
			event_names.accept(_position__anonymous_39);
			image_names.accept(_position__anonymous_39);
			tile_symbols.accept(_position__anonymous_39);
			payment_long_type_names.accept(_position__anonymous_39);
			area_names.accept(_position__anonymous_39);
			structure_names.accept(_position__anonymous_39);
			tile_names.accept(_position__anonymous_39);
			hero_stat.accept(_position__anonymous_39);
		}
	}
	public void parse__anonymous_38() {
		int _position__anonymous_38 = -1;
		Token.Parsed _token__anonymous_38 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_38=_position;
		_token__anonymous_38=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_attack(_anonymous_38)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_38;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_38.addAll(_token);
			_token__anonymous_38.setValue(_token.getValue());
		}
		_token=_token__anonymous_38;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_38);
			association_names.reject(_position__anonymous_38);
			room_names.reject(_position__anonymous_38);
			activity_names.reject(_position__anonymous_38);
			siding_names.reject(_position__anonymous_38);
			item_names.reject(_position__anonymous_38);
			aspect_names.reject(_position__anonymous_38);
			affinity_names.reject(_position__anonymous_38);
			activity_type_names.reject(_position__anonymous_38);
			trail_names.reject(_position__anonymous_38);
			attack_names.reject(_position__anonymous_38);
			reason_names.reject(_position__anonymous_38);
			trait_names.reject(_position__anonymous_38);
			condition_names.reject(_position__anonymous_38);
			payment_short_type_names.reject(_position__anonymous_38);
			skill_names.reject(_position__anonymous_38);
			map_names.reject(_position__anonymous_38);
			event_names.reject(_position__anonymous_38);
			image_names.reject(_position__anonymous_38);
			tile_symbols.reject(_position__anonymous_38);
			payment_long_type_names.reject(_position__anonymous_38);
			area_names.reject(_position__anonymous_38);
			structure_names.reject(_position__anonymous_38);
			tile_names.reject(_position__anonymous_38);
			hero_stat.reject(_position__anonymous_38);
			_state=SUCCESS;
			_position__anonymous_38=_position;
			_token__anonymous_38=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			if(_position+8-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='c') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='o') {
					_state=FAILED;
				}
				if(_inputArray[_position+2]!='m') {
					_state=FAILED;
				}
				if(_inputArray[_position+3]!='m') {
					_state=FAILED;
				}
				if(_inputArray[_position+4]!='e') {
					_state=FAILED;
				}
				if(_inputArray[_position+5]!='n') {
					_state=FAILED;
				}
				if(_inputArray[_position+6]!='t') {
					_state=FAILED;
				}
				if(_inputArray[_position+7]!='s') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_38.SYNTAX);
				_position=_position+8;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain comments");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_attack(_anonymous_38)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_38;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_38.addAll(_token);
				_token__anonymous_38.setValue(_token.getValue());
			}
			_token=_token__anonymous_38;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_38);
				association_names.reject(_position__anonymous_38);
				room_names.reject(_position__anonymous_38);
				activity_names.reject(_position__anonymous_38);
				siding_names.reject(_position__anonymous_38);
				item_names.reject(_position__anonymous_38);
				aspect_names.reject(_position__anonymous_38);
				affinity_names.reject(_position__anonymous_38);
				activity_type_names.reject(_position__anonymous_38);
				trail_names.reject(_position__anonymous_38);
				attack_names.reject(_position__anonymous_38);
				reason_names.reject(_position__anonymous_38);
				trait_names.reject(_position__anonymous_38);
				condition_names.reject(_position__anonymous_38);
				payment_short_type_names.reject(_position__anonymous_38);
				skill_names.reject(_position__anonymous_38);
				map_names.reject(_position__anonymous_38);
				event_names.reject(_position__anonymous_38);
				image_names.reject(_position__anonymous_38);
				tile_symbols.reject(_position__anonymous_38);
				payment_long_type_names.reject(_position__anonymous_38);
				area_names.reject(_position__anonymous_38);
				structure_names.reject(_position__anonymous_38);
				tile_names.reject(_position__anonymous_38);
				hero_stat.reject(_position__anonymous_38);
				_state=SUCCESS;
				_position__anonymous_38=_position;
				_token__anonymous_38=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				parse_attack_declaration();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_attack(_anonymous_38)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_38;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_38.addAll(_token);
					_token__anonymous_38.setValue(_token.getValue());
				}
				_token=_token__anonymous_38;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_38);
					association_names.reject(_position__anonymous_38);
					room_names.reject(_position__anonymous_38);
					activity_names.reject(_position__anonymous_38);
					siding_names.reject(_position__anonymous_38);
					item_names.reject(_position__anonymous_38);
					aspect_names.reject(_position__anonymous_38);
					affinity_names.reject(_position__anonymous_38);
					activity_type_names.reject(_position__anonymous_38);
					trail_names.reject(_position__anonymous_38);
					attack_names.reject(_position__anonymous_38);
					reason_names.reject(_position__anonymous_38);
					trait_names.reject(_position__anonymous_38);
					condition_names.reject(_position__anonymous_38);
					payment_short_type_names.reject(_position__anonymous_38);
					skill_names.reject(_position__anonymous_38);
					map_names.reject(_position__anonymous_38);
					event_names.reject(_position__anonymous_38);
					image_names.reject(_position__anonymous_38);
					tile_symbols.reject(_position__anonymous_38);
					payment_long_type_names.reject(_position__anonymous_38);
					area_names.reject(_position__anonymous_38);
					structure_names.reject(_position__anonymous_38);
					tile_names.reject(_position__anonymous_38);
					hero_stat.reject(_position__anonymous_38);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_38);
					association_names.accept(_position__anonymous_38);
					room_names.accept(_position__anonymous_38);
					activity_names.accept(_position__anonymous_38);
					siding_names.accept(_position__anonymous_38);
					item_names.accept(_position__anonymous_38);
					aspect_names.accept(_position__anonymous_38);
					affinity_names.accept(_position__anonymous_38);
					activity_type_names.accept(_position__anonymous_38);
					trail_names.accept(_position__anonymous_38);
					attack_names.accept(_position__anonymous_38);
					reason_names.accept(_position__anonymous_38);
					trait_names.accept(_position__anonymous_38);
					condition_names.accept(_position__anonymous_38);
					payment_short_type_names.accept(_position__anonymous_38);
					skill_names.accept(_position__anonymous_38);
					map_names.accept(_position__anonymous_38);
					event_names.accept(_position__anonymous_38);
					image_names.accept(_position__anonymous_38);
					tile_symbols.accept(_position__anonymous_38);
					payment_long_type_names.accept(_position__anonymous_38);
					area_names.accept(_position__anonymous_38);
					structure_names.accept(_position__anonymous_38);
					tile_names.accept(_position__anonymous_38);
					hero_stat.accept(_position__anonymous_38);
				}
			}
		}
	}
	public void parse__anonymous_137() {
		int _position__anonymous_137 = -1;
		Token.Parsed _token__anonymous_137 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_137=_position;
		_token__anonymous_137=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse_inline_if_statement();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"body_element(_anonymous_137)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_137;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_137.addAll(_token);
			_token__anonymous_137.setValue(_token.getValue());
		}
		_token=_token__anonymous_137;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_137);
			association_names.reject(_position__anonymous_137);
			room_names.reject(_position__anonymous_137);
			activity_names.reject(_position__anonymous_137);
			siding_names.reject(_position__anonymous_137);
			item_names.reject(_position__anonymous_137);
			aspect_names.reject(_position__anonymous_137);
			affinity_names.reject(_position__anonymous_137);
			activity_type_names.reject(_position__anonymous_137);
			trail_names.reject(_position__anonymous_137);
			attack_names.reject(_position__anonymous_137);
			reason_names.reject(_position__anonymous_137);
			trait_names.reject(_position__anonymous_137);
			condition_names.reject(_position__anonymous_137);
			payment_short_type_names.reject(_position__anonymous_137);
			skill_names.reject(_position__anonymous_137);
			map_names.reject(_position__anonymous_137);
			event_names.reject(_position__anonymous_137);
			image_names.reject(_position__anonymous_137);
			tile_symbols.reject(_position__anonymous_137);
			payment_long_type_names.reject(_position__anonymous_137);
			area_names.reject(_position__anonymous_137);
			structure_names.reject(_position__anonymous_137);
			tile_names.reject(_position__anonymous_137);
			hero_stat.reject(_position__anonymous_137);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_137);
			association_names.accept(_position__anonymous_137);
			room_names.accept(_position__anonymous_137);
			activity_names.accept(_position__anonymous_137);
			siding_names.accept(_position__anonymous_137);
			item_names.accept(_position__anonymous_137);
			aspect_names.accept(_position__anonymous_137);
			affinity_names.accept(_position__anonymous_137);
			activity_type_names.accept(_position__anonymous_137);
			trail_names.accept(_position__anonymous_137);
			attack_names.accept(_position__anonymous_137);
			reason_names.accept(_position__anonymous_137);
			trait_names.accept(_position__anonymous_137);
			condition_names.accept(_position__anonymous_137);
			payment_short_type_names.accept(_position__anonymous_137);
			skill_names.accept(_position__anonymous_137);
			map_names.accept(_position__anonymous_137);
			event_names.accept(_position__anonymous_137);
			image_names.accept(_position__anonymous_137);
			tile_symbols.accept(_position__anonymous_137);
			payment_long_type_names.accept(_position__anonymous_137);
			area_names.accept(_position__anonymous_137);
			structure_names.accept(_position__anonymous_137);
			tile_names.accept(_position__anonymous_137);
			hero_stat.accept(_position__anonymous_137);
		}
	}
	public void parse__anonymous_138() {
		int _position__anonymous_138 = -1;
		Token.Parsed _token__anonymous_138 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_138=_position;
		_token__anonymous_138=_token;
		_token=new Tokens.Name.AcquisitionToken();
		parse_variable_call();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"body_defined_statement(_anonymous_138)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_138;
		}
		else {
			parse_acquisition();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"body_defined_statement(_anonymous_138)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_138;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_138.add(_position__anonymous_138,_token);
		}
		_token=_token__anonymous_138;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_138);
			association_names.reject(_position__anonymous_138);
			room_names.reject(_position__anonymous_138);
			activity_names.reject(_position__anonymous_138);
			siding_names.reject(_position__anonymous_138);
			item_names.reject(_position__anonymous_138);
			aspect_names.reject(_position__anonymous_138);
			affinity_names.reject(_position__anonymous_138);
			activity_type_names.reject(_position__anonymous_138);
			trail_names.reject(_position__anonymous_138);
			attack_names.reject(_position__anonymous_138);
			reason_names.reject(_position__anonymous_138);
			trait_names.reject(_position__anonymous_138);
			condition_names.reject(_position__anonymous_138);
			payment_short_type_names.reject(_position__anonymous_138);
			skill_names.reject(_position__anonymous_138);
			map_names.reject(_position__anonymous_138);
			event_names.reject(_position__anonymous_138);
			image_names.reject(_position__anonymous_138);
			tile_symbols.reject(_position__anonymous_138);
			payment_long_type_names.reject(_position__anonymous_138);
			area_names.reject(_position__anonymous_138);
			structure_names.reject(_position__anonymous_138);
			tile_names.reject(_position__anonymous_138);
			hero_stat.reject(_position__anonymous_138);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_138);
			association_names.accept(_position__anonymous_138);
			room_names.accept(_position__anonymous_138);
			activity_names.accept(_position__anonymous_138);
			siding_names.accept(_position__anonymous_138);
			item_names.accept(_position__anonymous_138);
			aspect_names.accept(_position__anonymous_138);
			affinity_names.accept(_position__anonymous_138);
			activity_type_names.accept(_position__anonymous_138);
			trail_names.accept(_position__anonymous_138);
			attack_names.accept(_position__anonymous_138);
			reason_names.accept(_position__anonymous_138);
			trait_names.accept(_position__anonymous_138);
			condition_names.accept(_position__anonymous_138);
			payment_short_type_names.accept(_position__anonymous_138);
			skill_names.accept(_position__anonymous_138);
			map_names.accept(_position__anonymous_138);
			event_names.accept(_position__anonymous_138);
			image_names.accept(_position__anonymous_138);
			tile_symbols.accept(_position__anonymous_138);
			payment_long_type_names.accept(_position__anonymous_138);
			area_names.accept(_position__anonymous_138);
			structure_names.accept(_position__anonymous_138);
			tile_names.accept(_position__anonymous_138);
			hero_stat.accept(_position__anonymous_138);
		}
	}
	public void parse__anonymous_139() {
		int _position__anonymous_139 = -1;
		Token.Parsed _token__anonymous_139 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_139=_position;
		_token__anonymous_139=_token;
		_token=new Tokens.Name.ImpositionToken();
		parse_variable_call();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"body_defined_statement(_anonymous_139)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_139;
		}
		else {
			parse_imposition();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"body_defined_statement(_anonymous_139)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_139;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_139.add(_position__anonymous_139,_token);
		}
		_token=_token__anonymous_139;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_139);
			association_names.reject(_position__anonymous_139);
			room_names.reject(_position__anonymous_139);
			activity_names.reject(_position__anonymous_139);
			siding_names.reject(_position__anonymous_139);
			item_names.reject(_position__anonymous_139);
			aspect_names.reject(_position__anonymous_139);
			affinity_names.reject(_position__anonymous_139);
			activity_type_names.reject(_position__anonymous_139);
			trail_names.reject(_position__anonymous_139);
			attack_names.reject(_position__anonymous_139);
			reason_names.reject(_position__anonymous_139);
			trait_names.reject(_position__anonymous_139);
			condition_names.reject(_position__anonymous_139);
			payment_short_type_names.reject(_position__anonymous_139);
			skill_names.reject(_position__anonymous_139);
			map_names.reject(_position__anonymous_139);
			event_names.reject(_position__anonymous_139);
			image_names.reject(_position__anonymous_139);
			tile_symbols.reject(_position__anonymous_139);
			payment_long_type_names.reject(_position__anonymous_139);
			area_names.reject(_position__anonymous_139);
			structure_names.reject(_position__anonymous_139);
			tile_names.reject(_position__anonymous_139);
			hero_stat.reject(_position__anonymous_139);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_139);
			association_names.accept(_position__anonymous_139);
			room_names.accept(_position__anonymous_139);
			activity_names.accept(_position__anonymous_139);
			siding_names.accept(_position__anonymous_139);
			item_names.accept(_position__anonymous_139);
			aspect_names.accept(_position__anonymous_139);
			affinity_names.accept(_position__anonymous_139);
			activity_type_names.accept(_position__anonymous_139);
			trail_names.accept(_position__anonymous_139);
			attack_names.accept(_position__anonymous_139);
			reason_names.accept(_position__anonymous_139);
			trait_names.accept(_position__anonymous_139);
			condition_names.accept(_position__anonymous_139);
			payment_short_type_names.accept(_position__anonymous_139);
			skill_names.accept(_position__anonymous_139);
			map_names.accept(_position__anonymous_139);
			event_names.accept(_position__anonymous_139);
			image_names.accept(_position__anonymous_139);
			tile_symbols.accept(_position__anonymous_139);
			payment_long_type_names.accept(_position__anonymous_139);
			area_names.accept(_position__anonymous_139);
			structure_names.accept(_position__anonymous_139);
			tile_names.accept(_position__anonymous_139);
			hero_stat.accept(_position__anonymous_139);
		}
	}
	public void parse__anonymous_133() {
		int _position__anonymous_133 = -1;
		Token.Parsed _token__anonymous_133 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_133=_position;
		_token__anonymous_133=_token;
		_token=new Tokens.Name.EntityNameToken();
		int _state_168 = _state;
		boolean _iteration_achieved_168 = false;
		while(_position<_inputLength) {
			_token_NAME=_token;
			_token=new Tokens.Name.NamePartToken();
			_position_NAME=_position;
			parse_NAME();
			if(_state==SUCCESS) {
				_token_NAME.add(_position_NAME,_token);
			}
			_token=_token_NAME;
			if(_state==FAILED) {
				break;
			}
			else {
				_iteration_achieved_168=true;
			}
		}
		if(_iteration_achieved_168==false) {
			_state=FAILED;
		}
		else if(_state_168==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"entity_id_choice(_anonymous_133)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_133;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_133.add(_position__anonymous_133,_token);
		}
		_token=_token__anonymous_133;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_133);
			association_names.reject(_position__anonymous_133);
			room_names.reject(_position__anonymous_133);
			activity_names.reject(_position__anonymous_133);
			siding_names.reject(_position__anonymous_133);
			item_names.reject(_position__anonymous_133);
			aspect_names.reject(_position__anonymous_133);
			affinity_names.reject(_position__anonymous_133);
			activity_type_names.reject(_position__anonymous_133);
			trail_names.reject(_position__anonymous_133);
			attack_names.reject(_position__anonymous_133);
			reason_names.reject(_position__anonymous_133);
			trait_names.reject(_position__anonymous_133);
			condition_names.reject(_position__anonymous_133);
			payment_short_type_names.reject(_position__anonymous_133);
			skill_names.reject(_position__anonymous_133);
			map_names.reject(_position__anonymous_133);
			event_names.reject(_position__anonymous_133);
			image_names.reject(_position__anonymous_133);
			tile_symbols.reject(_position__anonymous_133);
			payment_long_type_names.reject(_position__anonymous_133);
			area_names.reject(_position__anonymous_133);
			structure_names.reject(_position__anonymous_133);
			tile_names.reject(_position__anonymous_133);
			hero_stat.reject(_position__anonymous_133);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_133);
			association_names.accept(_position__anonymous_133);
			room_names.accept(_position__anonymous_133);
			activity_names.accept(_position__anonymous_133);
			siding_names.accept(_position__anonymous_133);
			item_names.accept(_position__anonymous_133);
			aspect_names.accept(_position__anonymous_133);
			affinity_names.accept(_position__anonymous_133);
			activity_type_names.accept(_position__anonymous_133);
			trail_names.accept(_position__anonymous_133);
			attack_names.accept(_position__anonymous_133);
			reason_names.accept(_position__anonymous_133);
			trait_names.accept(_position__anonymous_133);
			condition_names.accept(_position__anonymous_133);
			payment_short_type_names.accept(_position__anonymous_133);
			skill_names.accept(_position__anonymous_133);
			map_names.accept(_position__anonymous_133);
			event_names.accept(_position__anonymous_133);
			image_names.accept(_position__anonymous_133);
			tile_symbols.accept(_position__anonymous_133);
			payment_long_type_names.accept(_position__anonymous_133);
			area_names.accept(_position__anonymous_133);
			structure_names.accept(_position__anonymous_133);
			tile_names.accept(_position__anonymous_133);
			hero_stat.accept(_position__anonymous_133);
		}
	}
	public void parse__anonymous_134() {
		int _position__anonymous_134 = -1;
		Token.Parsed _token__anonymous_134 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_134=_position;
		_token__anonymous_134=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse_FLOAT();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"number(_anonymous_134)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_134;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_134.addAll(_token);
			_token__anonymous_134.setValue(_token.getValue());
		}
		_token=_token__anonymous_134;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_134);
			association_names.reject(_position__anonymous_134);
			room_names.reject(_position__anonymous_134);
			activity_names.reject(_position__anonymous_134);
			siding_names.reject(_position__anonymous_134);
			item_names.reject(_position__anonymous_134);
			aspect_names.reject(_position__anonymous_134);
			affinity_names.reject(_position__anonymous_134);
			activity_type_names.reject(_position__anonymous_134);
			trail_names.reject(_position__anonymous_134);
			attack_names.reject(_position__anonymous_134);
			reason_names.reject(_position__anonymous_134);
			trait_names.reject(_position__anonymous_134);
			condition_names.reject(_position__anonymous_134);
			payment_short_type_names.reject(_position__anonymous_134);
			skill_names.reject(_position__anonymous_134);
			map_names.reject(_position__anonymous_134);
			event_names.reject(_position__anonymous_134);
			image_names.reject(_position__anonymous_134);
			tile_symbols.reject(_position__anonymous_134);
			payment_long_type_names.reject(_position__anonymous_134);
			area_names.reject(_position__anonymous_134);
			structure_names.reject(_position__anonymous_134);
			tile_names.reject(_position__anonymous_134);
			hero_stat.reject(_position__anonymous_134);
			_state=SUCCESS;
			_position__anonymous_134=_position;
			_token__anonymous_134=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			parse_INTEGER();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"number(_anonymous_134)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_134;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_134.addAll(_token);
				_token__anonymous_134.setValue(_token.getValue());
			}
			_token=_token__anonymous_134;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_134);
				association_names.reject(_position__anonymous_134);
				room_names.reject(_position__anonymous_134);
				activity_names.reject(_position__anonymous_134);
				siding_names.reject(_position__anonymous_134);
				item_names.reject(_position__anonymous_134);
				aspect_names.reject(_position__anonymous_134);
				affinity_names.reject(_position__anonymous_134);
				activity_type_names.reject(_position__anonymous_134);
				trail_names.reject(_position__anonymous_134);
				attack_names.reject(_position__anonymous_134);
				reason_names.reject(_position__anonymous_134);
				trait_names.reject(_position__anonymous_134);
				condition_names.reject(_position__anonymous_134);
				payment_short_type_names.reject(_position__anonymous_134);
				skill_names.reject(_position__anonymous_134);
				map_names.reject(_position__anonymous_134);
				event_names.reject(_position__anonymous_134);
				image_names.reject(_position__anonymous_134);
				tile_symbols.reject(_position__anonymous_134);
				payment_long_type_names.reject(_position__anonymous_134);
				area_names.reject(_position__anonymous_134);
				structure_names.reject(_position__anonymous_134);
				tile_names.reject(_position__anonymous_134);
				hero_stat.reject(_position__anonymous_134);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_134);
				association_names.accept(_position__anonymous_134);
				room_names.accept(_position__anonymous_134);
				activity_names.accept(_position__anonymous_134);
				siding_names.accept(_position__anonymous_134);
				item_names.accept(_position__anonymous_134);
				aspect_names.accept(_position__anonymous_134);
				affinity_names.accept(_position__anonymous_134);
				activity_type_names.accept(_position__anonymous_134);
				trail_names.accept(_position__anonymous_134);
				attack_names.accept(_position__anonymous_134);
				reason_names.accept(_position__anonymous_134);
				trait_names.accept(_position__anonymous_134);
				condition_names.accept(_position__anonymous_134);
				payment_short_type_names.accept(_position__anonymous_134);
				skill_names.accept(_position__anonymous_134);
				map_names.accept(_position__anonymous_134);
				event_names.accept(_position__anonymous_134);
				image_names.accept(_position__anonymous_134);
				tile_symbols.accept(_position__anonymous_134);
				payment_long_type_names.accept(_position__anonymous_134);
				area_names.accept(_position__anonymous_134);
				structure_names.accept(_position__anonymous_134);
				tile_names.accept(_position__anonymous_134);
				hero_stat.accept(_position__anonymous_134);
			}
		}
	}
	public void parse__anonymous_31() {
		int _position__anonymous_31 = -1;
		Token.Parsed _token__anonymous_31 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_31=_position;
		_token__anonymous_31=_token;
		_token=new Tokens.Name.ActivityTypeNameToken();
		if(_pass==FIRST_PASS) {
			String _result = _preparsed_NAME.get(_position);
			if(_result==null) {
				_state=FAILED;
			}
			else {
				Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
				_token.add(_position,_first_pass_token);
				_position+=_result.length();
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
		}
		else if(_pass==SECOND_PASS) {
			_list_name_result=_preparsed_NAME.get(_position);
			if(_list_name_result!=null&&activity_type_names.contains(_list_name_result)) {
				if(_position+_list_name_result.length()<_inputLength) {
					int _next_char = _inputArray[_position+_list_name_result.length()];
					if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,new Tokens.Name.ActivityTypeNamesToken(_list_name_result));
					_position+=_list_name_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_type_names");
					_furthestPosition=_position;
				}
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_type_declaration(_anonymous_31)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_31;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_31.add(_position__anonymous_31,_token);
		}
		_token=_token__anonymous_31;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_31);
			association_names.reject(_position__anonymous_31);
			room_names.reject(_position__anonymous_31);
			activity_names.reject(_position__anonymous_31);
			siding_names.reject(_position__anonymous_31);
			item_names.reject(_position__anonymous_31);
			aspect_names.reject(_position__anonymous_31);
			affinity_names.reject(_position__anonymous_31);
			activity_type_names.reject(_position__anonymous_31);
			trail_names.reject(_position__anonymous_31);
			attack_names.reject(_position__anonymous_31);
			reason_names.reject(_position__anonymous_31);
			trait_names.reject(_position__anonymous_31);
			condition_names.reject(_position__anonymous_31);
			payment_short_type_names.reject(_position__anonymous_31);
			skill_names.reject(_position__anonymous_31);
			map_names.reject(_position__anonymous_31);
			event_names.reject(_position__anonymous_31);
			image_names.reject(_position__anonymous_31);
			tile_symbols.reject(_position__anonymous_31);
			payment_long_type_names.reject(_position__anonymous_31);
			area_names.reject(_position__anonymous_31);
			structure_names.reject(_position__anonymous_31);
			tile_names.reject(_position__anonymous_31);
			hero_stat.reject(_position__anonymous_31);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_31);
			association_names.accept(_position__anonymous_31);
			room_names.accept(_position__anonymous_31);
			activity_names.accept(_position__anonymous_31);
			siding_names.accept(_position__anonymous_31);
			item_names.accept(_position__anonymous_31);
			aspect_names.accept(_position__anonymous_31);
			affinity_names.accept(_position__anonymous_31);
			activity_type_names.accept(_position__anonymous_31);
			trail_names.accept(_position__anonymous_31);
			attack_names.accept(_position__anonymous_31);
			reason_names.accept(_position__anonymous_31);
			trait_names.accept(_position__anonymous_31);
			condition_names.accept(_position__anonymous_31);
			payment_short_type_names.accept(_position__anonymous_31);
			skill_names.accept(_position__anonymous_31);
			map_names.accept(_position__anonymous_31);
			event_names.accept(_position__anonymous_31);
			image_names.accept(_position__anonymous_31);
			tile_symbols.accept(_position__anonymous_31);
			payment_long_type_names.accept(_position__anonymous_31);
			area_names.accept(_position__anonymous_31);
			structure_names.accept(_position__anonymous_31);
			tile_names.accept(_position__anonymous_31);
			hero_stat.accept(_position__anonymous_31);
		}
	}
	public void parse__anonymous_135() {
		int _position__anonymous_135 = -1;
		Token.Parsed _token__anonymous_135 = null;
		int _position_number = -1;
		Token.Parsed _token_number = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_135=_position;
		_token__anonymous_135=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse__anonymous_136();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"range(_anonymous_135)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_135;
		}
		else {
			_token_number=_token;
			_token=new Tokens.Name.RightToken();
			_position_number=_position;
			parse_number();
			if(_state==SUCCESS) {
				_token_number.add(_position_number,_token);
			}
			_token=_token_number;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"range(_anonymous_135)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_135;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_135.addAll(_token);
			_token__anonymous_135.setValue(_token.getValue());
		}
		_token=_token__anonymous_135;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_135);
			association_names.reject(_position__anonymous_135);
			room_names.reject(_position__anonymous_135);
			activity_names.reject(_position__anonymous_135);
			siding_names.reject(_position__anonymous_135);
			item_names.reject(_position__anonymous_135);
			aspect_names.reject(_position__anonymous_135);
			affinity_names.reject(_position__anonymous_135);
			activity_type_names.reject(_position__anonymous_135);
			trail_names.reject(_position__anonymous_135);
			attack_names.reject(_position__anonymous_135);
			reason_names.reject(_position__anonymous_135);
			trait_names.reject(_position__anonymous_135);
			condition_names.reject(_position__anonymous_135);
			payment_short_type_names.reject(_position__anonymous_135);
			skill_names.reject(_position__anonymous_135);
			map_names.reject(_position__anonymous_135);
			event_names.reject(_position__anonymous_135);
			image_names.reject(_position__anonymous_135);
			tile_symbols.reject(_position__anonymous_135);
			payment_long_type_names.reject(_position__anonymous_135);
			area_names.reject(_position__anonymous_135);
			structure_names.reject(_position__anonymous_135);
			tile_names.reject(_position__anonymous_135);
			hero_stat.reject(_position__anonymous_135);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_135);
			association_names.accept(_position__anonymous_135);
			room_names.accept(_position__anonymous_135);
			activity_names.accept(_position__anonymous_135);
			siding_names.accept(_position__anonymous_135);
			item_names.accept(_position__anonymous_135);
			aspect_names.accept(_position__anonymous_135);
			affinity_names.accept(_position__anonymous_135);
			activity_type_names.accept(_position__anonymous_135);
			trail_names.accept(_position__anonymous_135);
			attack_names.accept(_position__anonymous_135);
			reason_names.accept(_position__anonymous_135);
			trait_names.accept(_position__anonymous_135);
			condition_names.accept(_position__anonymous_135);
			payment_short_type_names.accept(_position__anonymous_135);
			skill_names.accept(_position__anonymous_135);
			map_names.accept(_position__anonymous_135);
			event_names.accept(_position__anonymous_135);
			image_names.accept(_position__anonymous_135);
			tile_symbols.accept(_position__anonymous_135);
			payment_long_type_names.accept(_position__anonymous_135);
			area_names.accept(_position__anonymous_135);
			structure_names.accept(_position__anonymous_135);
			tile_names.accept(_position__anonymous_135);
			hero_stat.accept(_position__anonymous_135);
		}
	}
	public void parse__anonymous_30() {
		int _position__anonymous_30 = -1;
		Token.Parsed _token__anonymous_30 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_30=_position;
		_token__anonymous_30=_token;
		_token=new Tokens.Name.StepToken();
		if(_position+4-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='s') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='t') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='e') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='p') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_30.SYNTAX);
			_position=_position+4;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain step");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_element(_anonymous_30)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_30;
		}
		else {
			parse_std_body();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_element(_anonymous_30)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_30;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_30.add(_position__anonymous_30,_token);
		}
		_token=_token__anonymous_30;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_30);
			association_names.reject(_position__anonymous_30);
			room_names.reject(_position__anonymous_30);
			activity_names.reject(_position__anonymous_30);
			siding_names.reject(_position__anonymous_30);
			item_names.reject(_position__anonymous_30);
			aspect_names.reject(_position__anonymous_30);
			affinity_names.reject(_position__anonymous_30);
			activity_type_names.reject(_position__anonymous_30);
			trail_names.reject(_position__anonymous_30);
			attack_names.reject(_position__anonymous_30);
			reason_names.reject(_position__anonymous_30);
			trait_names.reject(_position__anonymous_30);
			condition_names.reject(_position__anonymous_30);
			payment_short_type_names.reject(_position__anonymous_30);
			skill_names.reject(_position__anonymous_30);
			map_names.reject(_position__anonymous_30);
			event_names.reject(_position__anonymous_30);
			image_names.reject(_position__anonymous_30);
			tile_symbols.reject(_position__anonymous_30);
			payment_long_type_names.reject(_position__anonymous_30);
			area_names.reject(_position__anonymous_30);
			structure_names.reject(_position__anonymous_30);
			tile_names.reject(_position__anonymous_30);
			hero_stat.reject(_position__anonymous_30);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_30);
			association_names.accept(_position__anonymous_30);
			room_names.accept(_position__anonymous_30);
			activity_names.accept(_position__anonymous_30);
			siding_names.accept(_position__anonymous_30);
			item_names.accept(_position__anonymous_30);
			aspect_names.accept(_position__anonymous_30);
			affinity_names.accept(_position__anonymous_30);
			activity_type_names.accept(_position__anonymous_30);
			trail_names.accept(_position__anonymous_30);
			attack_names.accept(_position__anonymous_30);
			reason_names.accept(_position__anonymous_30);
			trait_names.accept(_position__anonymous_30);
			condition_names.accept(_position__anonymous_30);
			payment_short_type_names.accept(_position__anonymous_30);
			skill_names.accept(_position__anonymous_30);
			map_names.accept(_position__anonymous_30);
			event_names.accept(_position__anonymous_30);
			image_names.accept(_position__anonymous_30);
			tile_symbols.accept(_position__anonymous_30);
			payment_long_type_names.accept(_position__anonymous_30);
			area_names.accept(_position__anonymous_30);
			structure_names.accept(_position__anonymous_30);
			tile_names.accept(_position__anonymous_30);
			hero_stat.accept(_position__anonymous_30);
		}
	}
	public void parse__anonymous_136() {
		int _position__anonymous_136 = -1;
		Token.Parsed _token__anonymous_136 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_136=_position;
		_token__anonymous_136=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+2-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='.') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='.') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_55.SYNTAX);
			_position=_position+2;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ..");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"range(_anonymous_136)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_136;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_136.addAll(_token);
			_token__anonymous_136.setValue(_token.getValue());
		}
		_token=_token__anonymous_136;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_136);
			association_names.reject(_position__anonymous_136);
			room_names.reject(_position__anonymous_136);
			activity_names.reject(_position__anonymous_136);
			siding_names.reject(_position__anonymous_136);
			item_names.reject(_position__anonymous_136);
			aspect_names.reject(_position__anonymous_136);
			affinity_names.reject(_position__anonymous_136);
			activity_type_names.reject(_position__anonymous_136);
			trail_names.reject(_position__anonymous_136);
			attack_names.reject(_position__anonymous_136);
			reason_names.reject(_position__anonymous_136);
			trait_names.reject(_position__anonymous_136);
			condition_names.reject(_position__anonymous_136);
			payment_short_type_names.reject(_position__anonymous_136);
			skill_names.reject(_position__anonymous_136);
			map_names.reject(_position__anonymous_136);
			event_names.reject(_position__anonymous_136);
			image_names.reject(_position__anonymous_136);
			tile_symbols.reject(_position__anonymous_136);
			payment_long_type_names.reject(_position__anonymous_136);
			area_names.reject(_position__anonymous_136);
			structure_names.reject(_position__anonymous_136);
			tile_names.reject(_position__anonymous_136);
			hero_stat.reject(_position__anonymous_136);
			_state=SUCCESS;
			_position__anonymous_136=_position;
			_token__anonymous_136=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='-') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_15.SYNTAX);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain -");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"range(_anonymous_136)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_136;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_136.addAll(_token);
				_token__anonymous_136.setValue(_token.getValue());
			}
			_token=_token__anonymous_136;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_136);
				association_names.reject(_position__anonymous_136);
				room_names.reject(_position__anonymous_136);
				activity_names.reject(_position__anonymous_136);
				siding_names.reject(_position__anonymous_136);
				item_names.reject(_position__anonymous_136);
				aspect_names.reject(_position__anonymous_136);
				affinity_names.reject(_position__anonymous_136);
				activity_type_names.reject(_position__anonymous_136);
				trail_names.reject(_position__anonymous_136);
				attack_names.reject(_position__anonymous_136);
				reason_names.reject(_position__anonymous_136);
				trait_names.reject(_position__anonymous_136);
				condition_names.reject(_position__anonymous_136);
				payment_short_type_names.reject(_position__anonymous_136);
				skill_names.reject(_position__anonymous_136);
				map_names.reject(_position__anonymous_136);
				event_names.reject(_position__anonymous_136);
				image_names.reject(_position__anonymous_136);
				tile_symbols.reject(_position__anonymous_136);
				payment_long_type_names.reject(_position__anonymous_136);
				area_names.reject(_position__anonymous_136);
				structure_names.reject(_position__anonymous_136);
				tile_names.reject(_position__anonymous_136);
				hero_stat.reject(_position__anonymous_136);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_136);
				association_names.accept(_position__anonymous_136);
				room_names.accept(_position__anonymous_136);
				activity_names.accept(_position__anonymous_136);
				siding_names.accept(_position__anonymous_136);
				item_names.accept(_position__anonymous_136);
				aspect_names.accept(_position__anonymous_136);
				affinity_names.accept(_position__anonymous_136);
				activity_type_names.accept(_position__anonymous_136);
				trail_names.accept(_position__anonymous_136);
				attack_names.accept(_position__anonymous_136);
				reason_names.accept(_position__anonymous_136);
				trait_names.accept(_position__anonymous_136);
				condition_names.accept(_position__anonymous_136);
				payment_short_type_names.accept(_position__anonymous_136);
				skill_names.accept(_position__anonymous_136);
				map_names.accept(_position__anonymous_136);
				event_names.accept(_position__anonymous_136);
				image_names.accept(_position__anonymous_136);
				tile_symbols.accept(_position__anonymous_136);
				payment_long_type_names.accept(_position__anonymous_136);
				area_names.accept(_position__anonymous_136);
				structure_names.accept(_position__anonymous_136);
				tile_names.accept(_position__anonymous_136);
				hero_stat.accept(_position__anonymous_136);
			}
		}
	}
	public void parse__anonymous_29() {
		int _position__anonymous_29 = -1;
		Token.Parsed _token__anonymous_29 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_29=_position;
		_token__anonymous_29=_token;
		_token=new Tokens.Name.ListenToken();
		if(_position+6-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='l') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='i') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='s') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='t') {
				_state=FAILED;
			}
			if(_inputArray[_position+4]!='e') {
				_state=FAILED;
			}
			if(_inputArray[_position+5]!='n') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_29.SYNTAX);
			_position=_position+6;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain listen");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_element(_anonymous_29)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_29;
		}
		else {
			parse_std_body();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_element(_anonymous_29)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_29;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_29.add(_position__anonymous_29,_token);
		}
		_token=_token__anonymous_29;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_29);
			association_names.reject(_position__anonymous_29);
			room_names.reject(_position__anonymous_29);
			activity_names.reject(_position__anonymous_29);
			siding_names.reject(_position__anonymous_29);
			item_names.reject(_position__anonymous_29);
			aspect_names.reject(_position__anonymous_29);
			affinity_names.reject(_position__anonymous_29);
			activity_type_names.reject(_position__anonymous_29);
			trail_names.reject(_position__anonymous_29);
			attack_names.reject(_position__anonymous_29);
			reason_names.reject(_position__anonymous_29);
			trait_names.reject(_position__anonymous_29);
			condition_names.reject(_position__anonymous_29);
			payment_short_type_names.reject(_position__anonymous_29);
			skill_names.reject(_position__anonymous_29);
			map_names.reject(_position__anonymous_29);
			event_names.reject(_position__anonymous_29);
			image_names.reject(_position__anonymous_29);
			tile_symbols.reject(_position__anonymous_29);
			payment_long_type_names.reject(_position__anonymous_29);
			area_names.reject(_position__anonymous_29);
			structure_names.reject(_position__anonymous_29);
			tile_names.reject(_position__anonymous_29);
			hero_stat.reject(_position__anonymous_29);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_29);
			association_names.accept(_position__anonymous_29);
			room_names.accept(_position__anonymous_29);
			activity_names.accept(_position__anonymous_29);
			siding_names.accept(_position__anonymous_29);
			item_names.accept(_position__anonymous_29);
			aspect_names.accept(_position__anonymous_29);
			affinity_names.accept(_position__anonymous_29);
			activity_type_names.accept(_position__anonymous_29);
			trail_names.accept(_position__anonymous_29);
			attack_names.accept(_position__anonymous_29);
			reason_names.accept(_position__anonymous_29);
			trait_names.accept(_position__anonymous_29);
			condition_names.accept(_position__anonymous_29);
			payment_short_type_names.accept(_position__anonymous_29);
			skill_names.accept(_position__anonymous_29);
			map_names.accept(_position__anonymous_29);
			event_names.accept(_position__anonymous_29);
			image_names.accept(_position__anonymous_29);
			tile_symbols.accept(_position__anonymous_29);
			payment_long_type_names.accept(_position__anonymous_29);
			area_names.accept(_position__anonymous_29);
			structure_names.accept(_position__anonymous_29);
			tile_names.accept(_position__anonymous_29);
			hero_stat.accept(_position__anonymous_29);
		}
	}
	public void parse__anonymous_22() {
		int _position__anonymous_22 = -1;
		Token.Parsed _token__anonymous_22 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_22=_position;
		_token__anonymous_22=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		_token_NAME=_token;
		_token=new Tokens.Name.ClassNameToken();
		_position_NAME=_position;
		if(_state==SUCCESS&&!_recursion_protection_NAME_13.contains(_position)) {
			_recursion_protection_NAME_13.add(_position);
			parse_NAME();
			_recursion_protection_NAME_13.remove(_position_NAME);
		}
		else {
			_state=FAILED;
		}
		if(_state==SUCCESS) {
			_token_NAME.add(_position_NAME,_token);
		}
		_token=_token_NAME;
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_declaration(_anonymous_22)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_22;
		}
		else {
			int _state_41 = _state;
			while(_position<_inputLength) {
				parse__anonymous_23();
				if(_state==FAILED) {
					break;
				}
			}
			if(_state_41==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_declaration(_anonymous_22)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_22;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_22.addAll(_token);
			_token__anonymous_22.setValue(_token.getValue());
		}
		_token=_token__anonymous_22;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_22);
			association_names.reject(_position__anonymous_22);
			room_names.reject(_position__anonymous_22);
			activity_names.reject(_position__anonymous_22);
			siding_names.reject(_position__anonymous_22);
			item_names.reject(_position__anonymous_22);
			aspect_names.reject(_position__anonymous_22);
			affinity_names.reject(_position__anonymous_22);
			activity_type_names.reject(_position__anonymous_22);
			trail_names.reject(_position__anonymous_22);
			attack_names.reject(_position__anonymous_22);
			reason_names.reject(_position__anonymous_22);
			trait_names.reject(_position__anonymous_22);
			condition_names.reject(_position__anonymous_22);
			payment_short_type_names.reject(_position__anonymous_22);
			skill_names.reject(_position__anonymous_22);
			map_names.reject(_position__anonymous_22);
			event_names.reject(_position__anonymous_22);
			image_names.reject(_position__anonymous_22);
			tile_symbols.reject(_position__anonymous_22);
			payment_long_type_names.reject(_position__anonymous_22);
			area_names.reject(_position__anonymous_22);
			structure_names.reject(_position__anonymous_22);
			tile_names.reject(_position__anonymous_22);
			hero_stat.reject(_position__anonymous_22);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_22);
			association_names.accept(_position__anonymous_22);
			room_names.accept(_position__anonymous_22);
			activity_names.accept(_position__anonymous_22);
			siding_names.accept(_position__anonymous_22);
			item_names.accept(_position__anonymous_22);
			aspect_names.accept(_position__anonymous_22);
			affinity_names.accept(_position__anonymous_22);
			activity_type_names.accept(_position__anonymous_22);
			trail_names.accept(_position__anonymous_22);
			attack_names.accept(_position__anonymous_22);
			reason_names.accept(_position__anonymous_22);
			trait_names.accept(_position__anonymous_22);
			condition_names.accept(_position__anonymous_22);
			payment_short_type_names.accept(_position__anonymous_22);
			skill_names.accept(_position__anonymous_22);
			map_names.accept(_position__anonymous_22);
			event_names.accept(_position__anonymous_22);
			image_names.accept(_position__anonymous_22);
			tile_symbols.accept(_position__anonymous_22);
			payment_long_type_names.accept(_position__anonymous_22);
			area_names.accept(_position__anonymous_22);
			structure_names.accept(_position__anonymous_22);
			tile_names.accept(_position__anonymous_22);
			hero_stat.accept(_position__anonymous_22);
		}
	}
	public void parse__anonymous_173() {
		int _position__anonymous_173 = -1;
		Token.Parsed _token__anonymous_173 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_173=_position;
		_token__anonymous_173=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+4-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='s') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='t') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='t') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_126.SYNTAX);
			_position=_position+4;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain stat");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_173)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_173;
		}
		else {
			if(_position+2-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='i') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='n') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_71.SYNTAX);
				_position=_position+2;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain in");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_173)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_173;
			}
			else {
				_token_NAME=_token;
				_token=new Tokens.Name.VariableNameToken();
				_position_NAME=_position;
				parse_NAME();
				if(_state==SUCCESS) {
					_token_NAME.add(_position_NAME,_token);
				}
				_token=_token_NAME;
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_173)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_173;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_173.addAll(_token);
			_token__anonymous_173.setValue(_token.getValue());
		}
		_token=_token__anonymous_173;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_173);
			association_names.reject(_position__anonymous_173);
			room_names.reject(_position__anonymous_173);
			activity_names.reject(_position__anonymous_173);
			siding_names.reject(_position__anonymous_173);
			item_names.reject(_position__anonymous_173);
			aspect_names.reject(_position__anonymous_173);
			affinity_names.reject(_position__anonymous_173);
			activity_type_names.reject(_position__anonymous_173);
			trail_names.reject(_position__anonymous_173);
			attack_names.reject(_position__anonymous_173);
			reason_names.reject(_position__anonymous_173);
			trait_names.reject(_position__anonymous_173);
			condition_names.reject(_position__anonymous_173);
			payment_short_type_names.reject(_position__anonymous_173);
			skill_names.reject(_position__anonymous_173);
			map_names.reject(_position__anonymous_173);
			event_names.reject(_position__anonymous_173);
			image_names.reject(_position__anonymous_173);
			tile_symbols.reject(_position__anonymous_173);
			payment_long_type_names.reject(_position__anonymous_173);
			area_names.reject(_position__anonymous_173);
			structure_names.reject(_position__anonymous_173);
			tile_names.reject(_position__anonymous_173);
			hero_stat.reject(_position__anonymous_173);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_173);
			association_names.accept(_position__anonymous_173);
			room_names.accept(_position__anonymous_173);
			activity_names.accept(_position__anonymous_173);
			siding_names.accept(_position__anonymous_173);
			item_names.accept(_position__anonymous_173);
			aspect_names.accept(_position__anonymous_173);
			affinity_names.accept(_position__anonymous_173);
			activity_type_names.accept(_position__anonymous_173);
			trail_names.accept(_position__anonymous_173);
			attack_names.accept(_position__anonymous_173);
			reason_names.accept(_position__anonymous_173);
			trait_names.accept(_position__anonymous_173);
			condition_names.accept(_position__anonymous_173);
			payment_short_type_names.accept(_position__anonymous_173);
			skill_names.accept(_position__anonymous_173);
			map_names.accept(_position__anonymous_173);
			event_names.accept(_position__anonymous_173);
			image_names.accept(_position__anonymous_173);
			tile_symbols.accept(_position__anonymous_173);
			payment_long_type_names.accept(_position__anonymous_173);
			area_names.accept(_position__anonymous_173);
			structure_names.accept(_position__anonymous_173);
			tile_names.accept(_position__anonymous_173);
			hero_stat.accept(_position__anonymous_173);
		}
	}
	public void parse__anonymous_21() {
		int _position__anonymous_21 = -1;
		Token.Parsed _token__anonymous_21 = null;
		int _position_comments = -1;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_21=_position;
		_token__anonymous_21=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_activity(_anonymous_21)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_21;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_21.addAll(_token);
			_token__anonymous_21.setValue(_token.getValue());
		}
		_token=_token__anonymous_21;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_21);
			association_names.reject(_position__anonymous_21);
			room_names.reject(_position__anonymous_21);
			activity_names.reject(_position__anonymous_21);
			siding_names.reject(_position__anonymous_21);
			item_names.reject(_position__anonymous_21);
			aspect_names.reject(_position__anonymous_21);
			affinity_names.reject(_position__anonymous_21);
			activity_type_names.reject(_position__anonymous_21);
			trail_names.reject(_position__anonymous_21);
			attack_names.reject(_position__anonymous_21);
			reason_names.reject(_position__anonymous_21);
			trait_names.reject(_position__anonymous_21);
			condition_names.reject(_position__anonymous_21);
			payment_short_type_names.reject(_position__anonymous_21);
			skill_names.reject(_position__anonymous_21);
			map_names.reject(_position__anonymous_21);
			event_names.reject(_position__anonymous_21);
			image_names.reject(_position__anonymous_21);
			tile_symbols.reject(_position__anonymous_21);
			payment_long_type_names.reject(_position__anonymous_21);
			area_names.reject(_position__anonymous_21);
			structure_names.reject(_position__anonymous_21);
			tile_names.reject(_position__anonymous_21);
			hero_stat.reject(_position__anonymous_21);
			_state=SUCCESS;
			_position__anonymous_21=_position;
			_token__anonymous_21=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			_position_comments=_position;
			if(_state==SUCCESS&&!_recursion_protection_comments_11.contains(_position)) {
				_recursion_protection_comments_11.add(_position);
				parse_comments();
				_recursion_protection_comments_11.remove(_position_comments);
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_activity(_anonymous_21)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_21;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_21.addAll(_token);
				_token__anonymous_21.setValue(_token.getValue());
			}
			_token=_token__anonymous_21;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_21);
				association_names.reject(_position__anonymous_21);
				room_names.reject(_position__anonymous_21);
				activity_names.reject(_position__anonymous_21);
				siding_names.reject(_position__anonymous_21);
				item_names.reject(_position__anonymous_21);
				aspect_names.reject(_position__anonymous_21);
				affinity_names.reject(_position__anonymous_21);
				activity_type_names.reject(_position__anonymous_21);
				trail_names.reject(_position__anonymous_21);
				attack_names.reject(_position__anonymous_21);
				reason_names.reject(_position__anonymous_21);
				trait_names.reject(_position__anonymous_21);
				condition_names.reject(_position__anonymous_21);
				payment_short_type_names.reject(_position__anonymous_21);
				skill_names.reject(_position__anonymous_21);
				map_names.reject(_position__anonymous_21);
				event_names.reject(_position__anonymous_21);
				image_names.reject(_position__anonymous_21);
				tile_symbols.reject(_position__anonymous_21);
				payment_long_type_names.reject(_position__anonymous_21);
				area_names.reject(_position__anonymous_21);
				structure_names.reject(_position__anonymous_21);
				tile_names.reject(_position__anonymous_21);
				hero_stat.reject(_position__anonymous_21);
				_state=SUCCESS;
				_position__anonymous_21=_position;
				_token__anonymous_21=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				parse_activity_type_declaration();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_activity(_anonymous_21)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_21;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_21.addAll(_token);
					_token__anonymous_21.setValue(_token.getValue());
				}
				_token=_token__anonymous_21;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_21);
					association_names.reject(_position__anonymous_21);
					room_names.reject(_position__anonymous_21);
					activity_names.reject(_position__anonymous_21);
					siding_names.reject(_position__anonymous_21);
					item_names.reject(_position__anonymous_21);
					aspect_names.reject(_position__anonymous_21);
					affinity_names.reject(_position__anonymous_21);
					activity_type_names.reject(_position__anonymous_21);
					trail_names.reject(_position__anonymous_21);
					attack_names.reject(_position__anonymous_21);
					reason_names.reject(_position__anonymous_21);
					trait_names.reject(_position__anonymous_21);
					condition_names.reject(_position__anonymous_21);
					payment_short_type_names.reject(_position__anonymous_21);
					skill_names.reject(_position__anonymous_21);
					map_names.reject(_position__anonymous_21);
					event_names.reject(_position__anonymous_21);
					image_names.reject(_position__anonymous_21);
					tile_symbols.reject(_position__anonymous_21);
					payment_long_type_names.reject(_position__anonymous_21);
					area_names.reject(_position__anonymous_21);
					structure_names.reject(_position__anonymous_21);
					tile_names.reject(_position__anonymous_21);
					hero_stat.reject(_position__anonymous_21);
					_state=SUCCESS;
					_position__anonymous_21=_position;
					_token__anonymous_21=_token;
					_token=new Token.Parsed(Token.Id.ANON);
					parse_activity_declaration();
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_activity(_anonymous_21)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_21;
					}
					else {
					}
					if(_state==SUCCESS) {
						_token__anonymous_21.addAll(_token);
						_token__anonymous_21.setValue(_token.getValue());
					}
					_token=_token__anonymous_21;
					if(_state==FAILED) {
						support_names.reject(_position__anonymous_21);
						association_names.reject(_position__anonymous_21);
						room_names.reject(_position__anonymous_21);
						activity_names.reject(_position__anonymous_21);
						siding_names.reject(_position__anonymous_21);
						item_names.reject(_position__anonymous_21);
						aspect_names.reject(_position__anonymous_21);
						affinity_names.reject(_position__anonymous_21);
						activity_type_names.reject(_position__anonymous_21);
						trail_names.reject(_position__anonymous_21);
						attack_names.reject(_position__anonymous_21);
						reason_names.reject(_position__anonymous_21);
						trait_names.reject(_position__anonymous_21);
						condition_names.reject(_position__anonymous_21);
						payment_short_type_names.reject(_position__anonymous_21);
						skill_names.reject(_position__anonymous_21);
						map_names.reject(_position__anonymous_21);
						event_names.reject(_position__anonymous_21);
						image_names.reject(_position__anonymous_21);
						tile_symbols.reject(_position__anonymous_21);
						payment_long_type_names.reject(_position__anonymous_21);
						area_names.reject(_position__anonymous_21);
						structure_names.reject(_position__anonymous_21);
						tile_names.reject(_position__anonymous_21);
						hero_stat.reject(_position__anonymous_21);
					}
					else if(_state==SUCCESS) {
						support_names.accept(_position__anonymous_21);
						association_names.accept(_position__anonymous_21);
						room_names.accept(_position__anonymous_21);
						activity_names.accept(_position__anonymous_21);
						siding_names.accept(_position__anonymous_21);
						item_names.accept(_position__anonymous_21);
						aspect_names.accept(_position__anonymous_21);
						affinity_names.accept(_position__anonymous_21);
						activity_type_names.accept(_position__anonymous_21);
						trail_names.accept(_position__anonymous_21);
						attack_names.accept(_position__anonymous_21);
						reason_names.accept(_position__anonymous_21);
						trait_names.accept(_position__anonymous_21);
						condition_names.accept(_position__anonymous_21);
						payment_short_type_names.accept(_position__anonymous_21);
						skill_names.accept(_position__anonymous_21);
						map_names.accept(_position__anonymous_21);
						event_names.accept(_position__anonymous_21);
						image_names.accept(_position__anonymous_21);
						tile_symbols.accept(_position__anonymous_21);
						payment_long_type_names.accept(_position__anonymous_21);
						area_names.accept(_position__anonymous_21);
						structure_names.accept(_position__anonymous_21);
						tile_names.accept(_position__anonymous_21);
						hero_stat.accept(_position__anonymous_21);
					}
				}
			}
		}
	}
	public void parse__anonymous_174() {
		int _position__anonymous_174 = -1;
		Token.Parsed _token__anonymous_174 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_174=_position;
		_token__anonymous_174=_token;
		_token=new Tokens.Name.RequireExpToken();
		int _state_194 = _state;
		parse_NOT();
		if(_state_194==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_174)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_174;
		}
		else {
			parse__anonymous_175();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_174)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_174;
			}
			else {
				if(_position+3-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!='e') {
						_state=FAILED;
					}
					if(_inputArray[_position+1]!='x') {
						_state=FAILED;
					}
					if(_inputArray[_position+2]!='p') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_128.SYNTAX);
					_position=_position+3;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain exp");
						_furthestPosition=_position;
					}
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_174)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_174;
				}
				else {
					parse_ORDINAL();
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_174)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_174;
					}
					else {
						parse_INTEGER();
						if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_174)");
								_furthestPosition=_position;
							}
							_position=_position__anonymous_174;
						}
						else {
						}
					}
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_174.add(_position__anonymous_174,_token);
		}
		_token=_token__anonymous_174;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_174);
			association_names.reject(_position__anonymous_174);
			room_names.reject(_position__anonymous_174);
			activity_names.reject(_position__anonymous_174);
			siding_names.reject(_position__anonymous_174);
			item_names.reject(_position__anonymous_174);
			aspect_names.reject(_position__anonymous_174);
			affinity_names.reject(_position__anonymous_174);
			activity_type_names.reject(_position__anonymous_174);
			trail_names.reject(_position__anonymous_174);
			attack_names.reject(_position__anonymous_174);
			reason_names.reject(_position__anonymous_174);
			trait_names.reject(_position__anonymous_174);
			condition_names.reject(_position__anonymous_174);
			payment_short_type_names.reject(_position__anonymous_174);
			skill_names.reject(_position__anonymous_174);
			map_names.reject(_position__anonymous_174);
			event_names.reject(_position__anonymous_174);
			image_names.reject(_position__anonymous_174);
			tile_symbols.reject(_position__anonymous_174);
			payment_long_type_names.reject(_position__anonymous_174);
			area_names.reject(_position__anonymous_174);
			structure_names.reject(_position__anonymous_174);
			tile_names.reject(_position__anonymous_174);
			hero_stat.reject(_position__anonymous_174);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_174);
			association_names.accept(_position__anonymous_174);
			room_names.accept(_position__anonymous_174);
			activity_names.accept(_position__anonymous_174);
			siding_names.accept(_position__anonymous_174);
			item_names.accept(_position__anonymous_174);
			aspect_names.accept(_position__anonymous_174);
			affinity_names.accept(_position__anonymous_174);
			activity_type_names.accept(_position__anonymous_174);
			trail_names.accept(_position__anonymous_174);
			attack_names.accept(_position__anonymous_174);
			reason_names.accept(_position__anonymous_174);
			trait_names.accept(_position__anonymous_174);
			condition_names.accept(_position__anonymous_174);
			payment_short_type_names.accept(_position__anonymous_174);
			skill_names.accept(_position__anonymous_174);
			map_names.accept(_position__anonymous_174);
			event_names.accept(_position__anonymous_174);
			image_names.accept(_position__anonymous_174);
			tile_symbols.accept(_position__anonymous_174);
			payment_long_type_names.accept(_position__anonymous_174);
			area_names.accept(_position__anonymous_174);
			structure_names.accept(_position__anonymous_174);
			tile_names.accept(_position__anonymous_174);
			hero_stat.accept(_position__anonymous_174);
		}
	}
	public void parse__anonymous_24() {
		int _position__anonymous_24 = -1;
		Token.Parsed _token__anonymous_24 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_24=_position;
		_token__anonymous_24=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse__anonymous_25();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_element(_anonymous_24)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_24;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_24.addAll(_token);
			_token__anonymous_24.setValue(_token.getValue());
		}
		_token=_token__anonymous_24;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_24);
			association_names.reject(_position__anonymous_24);
			room_names.reject(_position__anonymous_24);
			activity_names.reject(_position__anonymous_24);
			siding_names.reject(_position__anonymous_24);
			item_names.reject(_position__anonymous_24);
			aspect_names.reject(_position__anonymous_24);
			affinity_names.reject(_position__anonymous_24);
			activity_type_names.reject(_position__anonymous_24);
			trail_names.reject(_position__anonymous_24);
			attack_names.reject(_position__anonymous_24);
			reason_names.reject(_position__anonymous_24);
			trait_names.reject(_position__anonymous_24);
			condition_names.reject(_position__anonymous_24);
			payment_short_type_names.reject(_position__anonymous_24);
			skill_names.reject(_position__anonymous_24);
			map_names.reject(_position__anonymous_24);
			event_names.reject(_position__anonymous_24);
			image_names.reject(_position__anonymous_24);
			tile_symbols.reject(_position__anonymous_24);
			payment_long_type_names.reject(_position__anonymous_24);
			area_names.reject(_position__anonymous_24);
			structure_names.reject(_position__anonymous_24);
			tile_names.reject(_position__anonymous_24);
			hero_stat.reject(_position__anonymous_24);
			_state=SUCCESS;
			_position__anonymous_24=_position;
			_token__anonymous_24=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			parse__anonymous_26();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_element(_anonymous_24)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_24;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_24.addAll(_token);
				_token__anonymous_24.setValue(_token.getValue());
			}
			_token=_token__anonymous_24;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_24);
				association_names.reject(_position__anonymous_24);
				room_names.reject(_position__anonymous_24);
				activity_names.reject(_position__anonymous_24);
				siding_names.reject(_position__anonymous_24);
				item_names.reject(_position__anonymous_24);
				aspect_names.reject(_position__anonymous_24);
				affinity_names.reject(_position__anonymous_24);
				activity_type_names.reject(_position__anonymous_24);
				trail_names.reject(_position__anonymous_24);
				attack_names.reject(_position__anonymous_24);
				reason_names.reject(_position__anonymous_24);
				trait_names.reject(_position__anonymous_24);
				condition_names.reject(_position__anonymous_24);
				payment_short_type_names.reject(_position__anonymous_24);
				skill_names.reject(_position__anonymous_24);
				map_names.reject(_position__anonymous_24);
				event_names.reject(_position__anonymous_24);
				image_names.reject(_position__anonymous_24);
				tile_symbols.reject(_position__anonymous_24);
				payment_long_type_names.reject(_position__anonymous_24);
				area_names.reject(_position__anonymous_24);
				structure_names.reject(_position__anonymous_24);
				tile_names.reject(_position__anonymous_24);
				hero_stat.reject(_position__anonymous_24);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_24);
				association_names.accept(_position__anonymous_24);
				room_names.accept(_position__anonymous_24);
				activity_names.accept(_position__anonymous_24);
				siding_names.accept(_position__anonymous_24);
				item_names.accept(_position__anonymous_24);
				aspect_names.accept(_position__anonymous_24);
				affinity_names.accept(_position__anonymous_24);
				activity_type_names.accept(_position__anonymous_24);
				trail_names.accept(_position__anonymous_24);
				attack_names.accept(_position__anonymous_24);
				reason_names.accept(_position__anonymous_24);
				trait_names.accept(_position__anonymous_24);
				condition_names.accept(_position__anonymous_24);
				payment_short_type_names.accept(_position__anonymous_24);
				skill_names.accept(_position__anonymous_24);
				map_names.accept(_position__anonymous_24);
				event_names.accept(_position__anonymous_24);
				image_names.accept(_position__anonymous_24);
				tile_symbols.accept(_position__anonymous_24);
				payment_long_type_names.accept(_position__anonymous_24);
				area_names.accept(_position__anonymous_24);
				structure_names.accept(_position__anonymous_24);
				tile_names.accept(_position__anonymous_24);
				hero_stat.accept(_position__anonymous_24);
			}
		}
	}
	public void parse__anonymous_175() {
		int _position__anonymous_175 = -1;
		Token.Parsed _token__anonymous_175 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_175=_position;
		_token__anonymous_175=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+6-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='t') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='t') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+4]!='c') {
				_state=FAILED;
			}
			if(_inputArray[_position+5]!='k') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_127.SYNTAX);
			_position=_position+6;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain attack");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_175)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_175;
		}
		else {
			_token_NAME=_token;
			_token=new Tokens.Name.VariableNameToken();
			_position_NAME=_position;
			parse_NAME();
			if(_state==SUCCESS) {
				_token_NAME.add(_position_NAME,_token);
			}
			_token=_token_NAME;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_175)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_175;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_175.addAll(_token);
			_token__anonymous_175.setValue(_token.getValue());
		}
		_token=_token__anonymous_175;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_175);
			association_names.reject(_position__anonymous_175);
			room_names.reject(_position__anonymous_175);
			activity_names.reject(_position__anonymous_175);
			siding_names.reject(_position__anonymous_175);
			item_names.reject(_position__anonymous_175);
			aspect_names.reject(_position__anonymous_175);
			affinity_names.reject(_position__anonymous_175);
			activity_type_names.reject(_position__anonymous_175);
			trail_names.reject(_position__anonymous_175);
			attack_names.reject(_position__anonymous_175);
			reason_names.reject(_position__anonymous_175);
			trait_names.reject(_position__anonymous_175);
			condition_names.reject(_position__anonymous_175);
			payment_short_type_names.reject(_position__anonymous_175);
			skill_names.reject(_position__anonymous_175);
			map_names.reject(_position__anonymous_175);
			event_names.reject(_position__anonymous_175);
			image_names.reject(_position__anonymous_175);
			tile_symbols.reject(_position__anonymous_175);
			payment_long_type_names.reject(_position__anonymous_175);
			area_names.reject(_position__anonymous_175);
			structure_names.reject(_position__anonymous_175);
			tile_names.reject(_position__anonymous_175);
			hero_stat.reject(_position__anonymous_175);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_175);
			association_names.accept(_position__anonymous_175);
			room_names.accept(_position__anonymous_175);
			activity_names.accept(_position__anonymous_175);
			siding_names.accept(_position__anonymous_175);
			item_names.accept(_position__anonymous_175);
			aspect_names.accept(_position__anonymous_175);
			affinity_names.accept(_position__anonymous_175);
			activity_type_names.accept(_position__anonymous_175);
			trail_names.accept(_position__anonymous_175);
			attack_names.accept(_position__anonymous_175);
			reason_names.accept(_position__anonymous_175);
			trait_names.accept(_position__anonymous_175);
			condition_names.accept(_position__anonymous_175);
			payment_short_type_names.accept(_position__anonymous_175);
			skill_names.accept(_position__anonymous_175);
			map_names.accept(_position__anonymous_175);
			event_names.accept(_position__anonymous_175);
			image_names.accept(_position__anonymous_175);
			tile_symbols.accept(_position__anonymous_175);
			payment_long_type_names.accept(_position__anonymous_175);
			area_names.accept(_position__anonymous_175);
			structure_names.accept(_position__anonymous_175);
			tile_names.accept(_position__anonymous_175);
			hero_stat.accept(_position__anonymous_175);
		}
	}
	public void parse__anonymous_23() {
		int _position__anonymous_23 = -1;
		Token.Parsed _token__anonymous_23 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_23=_position;
		_token__anonymous_23=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!=',') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_23.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ,");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_declaration(_anonymous_23)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_23;
		}
		else {
			_token_NAME=_token;
			_token=new Tokens.Name.ClassNameToken();
			_position_NAME=_position;
			parse_NAME();
			if(_state==SUCCESS) {
				_token_NAME.add(_position_NAME,_token);
			}
			_token=_token_NAME;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_declaration(_anonymous_23)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_23;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_23.addAll(_token);
			_token__anonymous_23.setValue(_token.getValue());
		}
		_token=_token__anonymous_23;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_23);
			association_names.reject(_position__anonymous_23);
			room_names.reject(_position__anonymous_23);
			activity_names.reject(_position__anonymous_23);
			siding_names.reject(_position__anonymous_23);
			item_names.reject(_position__anonymous_23);
			aspect_names.reject(_position__anonymous_23);
			affinity_names.reject(_position__anonymous_23);
			activity_type_names.reject(_position__anonymous_23);
			trail_names.reject(_position__anonymous_23);
			attack_names.reject(_position__anonymous_23);
			reason_names.reject(_position__anonymous_23);
			trait_names.reject(_position__anonymous_23);
			condition_names.reject(_position__anonymous_23);
			payment_short_type_names.reject(_position__anonymous_23);
			skill_names.reject(_position__anonymous_23);
			map_names.reject(_position__anonymous_23);
			event_names.reject(_position__anonymous_23);
			image_names.reject(_position__anonymous_23);
			tile_symbols.reject(_position__anonymous_23);
			payment_long_type_names.reject(_position__anonymous_23);
			area_names.reject(_position__anonymous_23);
			structure_names.reject(_position__anonymous_23);
			tile_names.reject(_position__anonymous_23);
			hero_stat.reject(_position__anonymous_23);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_23);
			association_names.accept(_position__anonymous_23);
			room_names.accept(_position__anonymous_23);
			activity_names.accept(_position__anonymous_23);
			siding_names.accept(_position__anonymous_23);
			item_names.accept(_position__anonymous_23);
			aspect_names.accept(_position__anonymous_23);
			affinity_names.accept(_position__anonymous_23);
			activity_type_names.accept(_position__anonymous_23);
			trail_names.accept(_position__anonymous_23);
			attack_names.accept(_position__anonymous_23);
			reason_names.accept(_position__anonymous_23);
			trait_names.accept(_position__anonymous_23);
			condition_names.accept(_position__anonymous_23);
			payment_short_type_names.accept(_position__anonymous_23);
			skill_names.accept(_position__anonymous_23);
			map_names.accept(_position__anonymous_23);
			event_names.accept(_position__anonymous_23);
			image_names.accept(_position__anonymous_23);
			tile_symbols.accept(_position__anonymous_23);
			payment_long_type_names.accept(_position__anonymous_23);
			area_names.accept(_position__anonymous_23);
			structure_names.accept(_position__anonymous_23);
			tile_names.accept(_position__anonymous_23);
			hero_stat.accept(_position__anonymous_23);
		}
	}
	public void parse__anonymous_176() {
		int _position__anonymous_176 = -1;
		Token.Parsed _token__anonymous_176 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_176=_position;
		_token__anonymous_176=_token;
		_token=new Tokens.Name.RequireAttackToken();
		int _state_195 = _state;
		parse_NOT();
		if(_state_195==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_176)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_176;
		}
		else {
			parse__anonymous_177();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_176)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_176;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_176.add(_position__anonymous_176,_token);
		}
		_token=_token__anonymous_176;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_176);
			association_names.reject(_position__anonymous_176);
			room_names.reject(_position__anonymous_176);
			activity_names.reject(_position__anonymous_176);
			siding_names.reject(_position__anonymous_176);
			item_names.reject(_position__anonymous_176);
			aspect_names.reject(_position__anonymous_176);
			affinity_names.reject(_position__anonymous_176);
			activity_type_names.reject(_position__anonymous_176);
			trail_names.reject(_position__anonymous_176);
			attack_names.reject(_position__anonymous_176);
			reason_names.reject(_position__anonymous_176);
			trait_names.reject(_position__anonymous_176);
			condition_names.reject(_position__anonymous_176);
			payment_short_type_names.reject(_position__anonymous_176);
			skill_names.reject(_position__anonymous_176);
			map_names.reject(_position__anonymous_176);
			event_names.reject(_position__anonymous_176);
			image_names.reject(_position__anonymous_176);
			tile_symbols.reject(_position__anonymous_176);
			payment_long_type_names.reject(_position__anonymous_176);
			area_names.reject(_position__anonymous_176);
			structure_names.reject(_position__anonymous_176);
			tile_names.reject(_position__anonymous_176);
			hero_stat.reject(_position__anonymous_176);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_176);
			association_names.accept(_position__anonymous_176);
			room_names.accept(_position__anonymous_176);
			activity_names.accept(_position__anonymous_176);
			siding_names.accept(_position__anonymous_176);
			item_names.accept(_position__anonymous_176);
			aspect_names.accept(_position__anonymous_176);
			affinity_names.accept(_position__anonymous_176);
			activity_type_names.accept(_position__anonymous_176);
			trail_names.accept(_position__anonymous_176);
			attack_names.accept(_position__anonymous_176);
			reason_names.accept(_position__anonymous_176);
			trait_names.accept(_position__anonymous_176);
			condition_names.accept(_position__anonymous_176);
			payment_short_type_names.accept(_position__anonymous_176);
			skill_names.accept(_position__anonymous_176);
			map_names.accept(_position__anonymous_176);
			event_names.accept(_position__anonymous_176);
			image_names.accept(_position__anonymous_176);
			tile_symbols.accept(_position__anonymous_176);
			payment_long_type_names.accept(_position__anonymous_176);
			area_names.accept(_position__anonymous_176);
			structure_names.accept(_position__anonymous_176);
			tile_names.accept(_position__anonymous_176);
			hero_stat.accept(_position__anonymous_176);
		}
	}
	public void parse__anonymous_26() {
		int _position__anonymous_26 = -1;
		Token.Parsed _token__anonymous_26 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_26=_position;
		_token__anonymous_26=_token;
		_token=new Tokens.Name.GetDestinationToken();
		if(_position+11-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='d') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='e') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='s') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='t') {
				_state=FAILED;
			}
			if(_inputArray[_position+4]!='i') {
				_state=FAILED;
			}
			if(_inputArray[_position+5]!='n') {
				_state=FAILED;
			}
			if(_inputArray[_position+6]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+7]!='t') {
				_state=FAILED;
			}
			if(_inputArray[_position+8]!='i') {
				_state=FAILED;
			}
			if(_inputArray[_position+9]!='o') {
				_state=FAILED;
			}
			if(_inputArray[_position+10]!='n') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_26.SYNTAX);
			_position=_position+11;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain destination");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_element(_anonymous_26)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_26;
		}
		else {
			parse_std_body();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_element(_anonymous_26)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_26;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_26.add(_position__anonymous_26,_token);
		}
		_token=_token__anonymous_26;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_26);
			association_names.reject(_position__anonymous_26);
			room_names.reject(_position__anonymous_26);
			activity_names.reject(_position__anonymous_26);
			siding_names.reject(_position__anonymous_26);
			item_names.reject(_position__anonymous_26);
			aspect_names.reject(_position__anonymous_26);
			affinity_names.reject(_position__anonymous_26);
			activity_type_names.reject(_position__anonymous_26);
			trail_names.reject(_position__anonymous_26);
			attack_names.reject(_position__anonymous_26);
			reason_names.reject(_position__anonymous_26);
			trait_names.reject(_position__anonymous_26);
			condition_names.reject(_position__anonymous_26);
			payment_short_type_names.reject(_position__anonymous_26);
			skill_names.reject(_position__anonymous_26);
			map_names.reject(_position__anonymous_26);
			event_names.reject(_position__anonymous_26);
			image_names.reject(_position__anonymous_26);
			tile_symbols.reject(_position__anonymous_26);
			payment_long_type_names.reject(_position__anonymous_26);
			area_names.reject(_position__anonymous_26);
			structure_names.reject(_position__anonymous_26);
			tile_names.reject(_position__anonymous_26);
			hero_stat.reject(_position__anonymous_26);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_26);
			association_names.accept(_position__anonymous_26);
			room_names.accept(_position__anonymous_26);
			activity_names.accept(_position__anonymous_26);
			siding_names.accept(_position__anonymous_26);
			item_names.accept(_position__anonymous_26);
			aspect_names.accept(_position__anonymous_26);
			affinity_names.accept(_position__anonymous_26);
			activity_type_names.accept(_position__anonymous_26);
			trail_names.accept(_position__anonymous_26);
			attack_names.accept(_position__anonymous_26);
			reason_names.accept(_position__anonymous_26);
			trait_names.accept(_position__anonymous_26);
			condition_names.accept(_position__anonymous_26);
			payment_short_type_names.accept(_position__anonymous_26);
			skill_names.accept(_position__anonymous_26);
			map_names.accept(_position__anonymous_26);
			event_names.accept(_position__anonymous_26);
			image_names.accept(_position__anonymous_26);
			tile_symbols.accept(_position__anonymous_26);
			payment_long_type_names.accept(_position__anonymous_26);
			area_names.accept(_position__anonymous_26);
			structure_names.accept(_position__anonymous_26);
			tile_names.accept(_position__anonymous_26);
			hero_stat.accept(_position__anonymous_26);
		}
	}
	public void parse__anonymous_25() {
		int _position__anonymous_25 = -1;
		Token.Parsed _token__anonymous_25 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_25=_position;
		_token__anonymous_25=_token;
		_token=new Tokens.Name.GetTargetToken();
		if(_position+6-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='t') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='r') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='g') {
				_state=FAILED;
			}
			if(_inputArray[_position+4]!='e') {
				_state=FAILED;
			}
			if(_inputArray[_position+5]!='t') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_25.SYNTAX);
			_position=_position+6;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain target");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_element(_anonymous_25)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_25;
		}
		else {
			parse_std_body();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_element(_anonymous_25)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_25;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_25.add(_position__anonymous_25,_token);
		}
		_token=_token__anonymous_25;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_25);
			association_names.reject(_position__anonymous_25);
			room_names.reject(_position__anonymous_25);
			activity_names.reject(_position__anonymous_25);
			siding_names.reject(_position__anonymous_25);
			item_names.reject(_position__anonymous_25);
			aspect_names.reject(_position__anonymous_25);
			affinity_names.reject(_position__anonymous_25);
			activity_type_names.reject(_position__anonymous_25);
			trail_names.reject(_position__anonymous_25);
			attack_names.reject(_position__anonymous_25);
			reason_names.reject(_position__anonymous_25);
			trait_names.reject(_position__anonymous_25);
			condition_names.reject(_position__anonymous_25);
			payment_short_type_names.reject(_position__anonymous_25);
			skill_names.reject(_position__anonymous_25);
			map_names.reject(_position__anonymous_25);
			event_names.reject(_position__anonymous_25);
			image_names.reject(_position__anonymous_25);
			tile_symbols.reject(_position__anonymous_25);
			payment_long_type_names.reject(_position__anonymous_25);
			area_names.reject(_position__anonymous_25);
			structure_names.reject(_position__anonymous_25);
			tile_names.reject(_position__anonymous_25);
			hero_stat.reject(_position__anonymous_25);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_25);
			association_names.accept(_position__anonymous_25);
			room_names.accept(_position__anonymous_25);
			activity_names.accept(_position__anonymous_25);
			siding_names.accept(_position__anonymous_25);
			item_names.accept(_position__anonymous_25);
			aspect_names.accept(_position__anonymous_25);
			affinity_names.accept(_position__anonymous_25);
			activity_type_names.accept(_position__anonymous_25);
			trail_names.accept(_position__anonymous_25);
			attack_names.accept(_position__anonymous_25);
			reason_names.accept(_position__anonymous_25);
			trait_names.accept(_position__anonymous_25);
			condition_names.accept(_position__anonymous_25);
			payment_short_type_names.accept(_position__anonymous_25);
			skill_names.accept(_position__anonymous_25);
			map_names.accept(_position__anonymous_25);
			event_names.accept(_position__anonymous_25);
			image_names.accept(_position__anonymous_25);
			tile_symbols.accept(_position__anonymous_25);
			payment_long_type_names.accept(_position__anonymous_25);
			area_names.accept(_position__anonymous_25);
			structure_names.accept(_position__anonymous_25);
			tile_names.accept(_position__anonymous_25);
			hero_stat.accept(_position__anonymous_25);
		}
	}
	public void parse__anonymous_170() {
		int _position__anonymous_170 = -1;
		Token.Parsed _token__anonymous_170 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_170=_position;
		_token__anonymous_170=_token;
		_token=new Tokens.Name.OperatorToken();
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='&') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_68.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain &");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"boolean_statement(_anonymous_170)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_170;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_170.add(_position__anonymous_170,_token);
		}
		_token=_token__anonymous_170;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_170);
			association_names.reject(_position__anonymous_170);
			room_names.reject(_position__anonymous_170);
			activity_names.reject(_position__anonymous_170);
			siding_names.reject(_position__anonymous_170);
			item_names.reject(_position__anonymous_170);
			aspect_names.reject(_position__anonymous_170);
			affinity_names.reject(_position__anonymous_170);
			activity_type_names.reject(_position__anonymous_170);
			trail_names.reject(_position__anonymous_170);
			attack_names.reject(_position__anonymous_170);
			reason_names.reject(_position__anonymous_170);
			trait_names.reject(_position__anonymous_170);
			condition_names.reject(_position__anonymous_170);
			payment_short_type_names.reject(_position__anonymous_170);
			skill_names.reject(_position__anonymous_170);
			map_names.reject(_position__anonymous_170);
			event_names.reject(_position__anonymous_170);
			image_names.reject(_position__anonymous_170);
			tile_symbols.reject(_position__anonymous_170);
			payment_long_type_names.reject(_position__anonymous_170);
			area_names.reject(_position__anonymous_170);
			structure_names.reject(_position__anonymous_170);
			tile_names.reject(_position__anonymous_170);
			hero_stat.reject(_position__anonymous_170);
			_state=SUCCESS;
			_position__anonymous_170=_position;
			_token__anonymous_170=_token;
			_token=new Tokens.Name.OperatorToken();
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='|') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_35.SYNTAX);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain |");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"boolean_statement(_anonymous_170)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_170;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_170.add(_position__anonymous_170,_token);
			}
			_token=_token__anonymous_170;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_170);
				association_names.reject(_position__anonymous_170);
				room_names.reject(_position__anonymous_170);
				activity_names.reject(_position__anonymous_170);
				siding_names.reject(_position__anonymous_170);
				item_names.reject(_position__anonymous_170);
				aspect_names.reject(_position__anonymous_170);
				affinity_names.reject(_position__anonymous_170);
				activity_type_names.reject(_position__anonymous_170);
				trail_names.reject(_position__anonymous_170);
				attack_names.reject(_position__anonymous_170);
				reason_names.reject(_position__anonymous_170);
				trait_names.reject(_position__anonymous_170);
				condition_names.reject(_position__anonymous_170);
				payment_short_type_names.reject(_position__anonymous_170);
				skill_names.reject(_position__anonymous_170);
				map_names.reject(_position__anonymous_170);
				event_names.reject(_position__anonymous_170);
				image_names.reject(_position__anonymous_170);
				tile_symbols.reject(_position__anonymous_170);
				payment_long_type_names.reject(_position__anonymous_170);
				area_names.reject(_position__anonymous_170);
				structure_names.reject(_position__anonymous_170);
				tile_names.reject(_position__anonymous_170);
				hero_stat.reject(_position__anonymous_170);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_170);
				association_names.accept(_position__anonymous_170);
				room_names.accept(_position__anonymous_170);
				activity_names.accept(_position__anonymous_170);
				siding_names.accept(_position__anonymous_170);
				item_names.accept(_position__anonymous_170);
				aspect_names.accept(_position__anonymous_170);
				affinity_names.accept(_position__anonymous_170);
				activity_type_names.accept(_position__anonymous_170);
				trail_names.accept(_position__anonymous_170);
				attack_names.accept(_position__anonymous_170);
				reason_names.accept(_position__anonymous_170);
				trait_names.accept(_position__anonymous_170);
				condition_names.accept(_position__anonymous_170);
				payment_short_type_names.accept(_position__anonymous_170);
				skill_names.accept(_position__anonymous_170);
				map_names.accept(_position__anonymous_170);
				event_names.accept(_position__anonymous_170);
				image_names.accept(_position__anonymous_170);
				tile_symbols.accept(_position__anonymous_170);
				payment_long_type_names.accept(_position__anonymous_170);
				area_names.accept(_position__anonymous_170);
				structure_names.accept(_position__anonymous_170);
				tile_names.accept(_position__anonymous_170);
				hero_stat.accept(_position__anonymous_170);
			}
		}
	}
	public void parse__anonymous_28() {
		int _position__anonymous_28 = -1;
		Token.Parsed _token__anonymous_28 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_28=_position;
		_token__anonymous_28=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+7-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='s') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='u') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='c') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='c') {
				_state=FAILED;
			}
			if(_inputArray[_position+4]!='e') {
				_state=FAILED;
			}
			if(_inputArray[_position+5]!='e') {
				_state=FAILED;
			}
			if(_inputArray[_position+6]!='d') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_27.SUCCEED);
			_position=_position+7;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain succeed");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_element(_anonymous_28)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_28;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_28.addAll(_token);
			_token__anonymous_28.setValue(_token.getValue());
		}
		_token=_token__anonymous_28;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_28);
			association_names.reject(_position__anonymous_28);
			room_names.reject(_position__anonymous_28);
			activity_names.reject(_position__anonymous_28);
			siding_names.reject(_position__anonymous_28);
			item_names.reject(_position__anonymous_28);
			aspect_names.reject(_position__anonymous_28);
			affinity_names.reject(_position__anonymous_28);
			activity_type_names.reject(_position__anonymous_28);
			trail_names.reject(_position__anonymous_28);
			attack_names.reject(_position__anonymous_28);
			reason_names.reject(_position__anonymous_28);
			trait_names.reject(_position__anonymous_28);
			condition_names.reject(_position__anonymous_28);
			payment_short_type_names.reject(_position__anonymous_28);
			skill_names.reject(_position__anonymous_28);
			map_names.reject(_position__anonymous_28);
			event_names.reject(_position__anonymous_28);
			image_names.reject(_position__anonymous_28);
			tile_symbols.reject(_position__anonymous_28);
			payment_long_type_names.reject(_position__anonymous_28);
			area_names.reject(_position__anonymous_28);
			structure_names.reject(_position__anonymous_28);
			tile_names.reject(_position__anonymous_28);
			hero_stat.reject(_position__anonymous_28);
			_state=SUCCESS;
			_position__anonymous_28=_position;
			_token__anonymous_28=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			if(_position+4-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='f') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='a') {
					_state=FAILED;
				}
				if(_inputArray[_position+2]!='i') {
					_state=FAILED;
				}
				if(_inputArray[_position+3]!='l') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_28.FAIL);
				_position=_position+4;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain fail");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_element(_anonymous_28)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_28;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_28.addAll(_token);
				_token__anonymous_28.setValue(_token.getValue());
			}
			_token=_token__anonymous_28;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_28);
				association_names.reject(_position__anonymous_28);
				room_names.reject(_position__anonymous_28);
				activity_names.reject(_position__anonymous_28);
				siding_names.reject(_position__anonymous_28);
				item_names.reject(_position__anonymous_28);
				aspect_names.reject(_position__anonymous_28);
				affinity_names.reject(_position__anonymous_28);
				activity_type_names.reject(_position__anonymous_28);
				trail_names.reject(_position__anonymous_28);
				attack_names.reject(_position__anonymous_28);
				reason_names.reject(_position__anonymous_28);
				trait_names.reject(_position__anonymous_28);
				condition_names.reject(_position__anonymous_28);
				payment_short_type_names.reject(_position__anonymous_28);
				skill_names.reject(_position__anonymous_28);
				map_names.reject(_position__anonymous_28);
				event_names.reject(_position__anonymous_28);
				image_names.reject(_position__anonymous_28);
				tile_symbols.reject(_position__anonymous_28);
				payment_long_type_names.reject(_position__anonymous_28);
				area_names.reject(_position__anonymous_28);
				structure_names.reject(_position__anonymous_28);
				tile_names.reject(_position__anonymous_28);
				hero_stat.reject(_position__anonymous_28);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_28);
				association_names.accept(_position__anonymous_28);
				room_names.accept(_position__anonymous_28);
				activity_names.accept(_position__anonymous_28);
				siding_names.accept(_position__anonymous_28);
				item_names.accept(_position__anonymous_28);
				aspect_names.accept(_position__anonymous_28);
				affinity_names.accept(_position__anonymous_28);
				activity_type_names.accept(_position__anonymous_28);
				trail_names.accept(_position__anonymous_28);
				attack_names.accept(_position__anonymous_28);
				reason_names.accept(_position__anonymous_28);
				trait_names.accept(_position__anonymous_28);
				condition_names.accept(_position__anonymous_28);
				payment_short_type_names.accept(_position__anonymous_28);
				skill_names.accept(_position__anonymous_28);
				map_names.accept(_position__anonymous_28);
				event_names.accept(_position__anonymous_28);
				image_names.accept(_position__anonymous_28);
				tile_symbols.accept(_position__anonymous_28);
				payment_long_type_names.accept(_position__anonymous_28);
				area_names.accept(_position__anonymous_28);
				structure_names.accept(_position__anonymous_28);
				tile_names.accept(_position__anonymous_28);
				hero_stat.accept(_position__anonymous_28);
			}
		}
	}
	public void parse__anonymous_171() {
		int _position__anonymous_171 = -1;
		Token.Parsed _token__anonymous_171 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_171=_position;
		_token__anonymous_171=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='|') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_35.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain |");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement(_anonymous_171)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_171;
		}
		else {
			parse_requirement_element();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement(_anonymous_171)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_171;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_171.addAll(_token);
			_token__anonymous_171.setValue(_token.getValue());
		}
		_token=_token__anonymous_171;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_171);
			association_names.reject(_position__anonymous_171);
			room_names.reject(_position__anonymous_171);
			activity_names.reject(_position__anonymous_171);
			siding_names.reject(_position__anonymous_171);
			item_names.reject(_position__anonymous_171);
			aspect_names.reject(_position__anonymous_171);
			affinity_names.reject(_position__anonymous_171);
			activity_type_names.reject(_position__anonymous_171);
			trail_names.reject(_position__anonymous_171);
			attack_names.reject(_position__anonymous_171);
			reason_names.reject(_position__anonymous_171);
			trait_names.reject(_position__anonymous_171);
			condition_names.reject(_position__anonymous_171);
			payment_short_type_names.reject(_position__anonymous_171);
			skill_names.reject(_position__anonymous_171);
			map_names.reject(_position__anonymous_171);
			event_names.reject(_position__anonymous_171);
			image_names.reject(_position__anonymous_171);
			tile_symbols.reject(_position__anonymous_171);
			payment_long_type_names.reject(_position__anonymous_171);
			area_names.reject(_position__anonymous_171);
			structure_names.reject(_position__anonymous_171);
			tile_names.reject(_position__anonymous_171);
			hero_stat.reject(_position__anonymous_171);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_171);
			association_names.accept(_position__anonymous_171);
			room_names.accept(_position__anonymous_171);
			activity_names.accept(_position__anonymous_171);
			siding_names.accept(_position__anonymous_171);
			item_names.accept(_position__anonymous_171);
			aspect_names.accept(_position__anonymous_171);
			affinity_names.accept(_position__anonymous_171);
			activity_type_names.accept(_position__anonymous_171);
			trail_names.accept(_position__anonymous_171);
			attack_names.accept(_position__anonymous_171);
			reason_names.accept(_position__anonymous_171);
			trait_names.accept(_position__anonymous_171);
			condition_names.accept(_position__anonymous_171);
			payment_short_type_names.accept(_position__anonymous_171);
			skill_names.accept(_position__anonymous_171);
			map_names.accept(_position__anonymous_171);
			event_names.accept(_position__anonymous_171);
			image_names.accept(_position__anonymous_171);
			tile_symbols.accept(_position__anonymous_171);
			payment_long_type_names.accept(_position__anonymous_171);
			area_names.accept(_position__anonymous_171);
			structure_names.accept(_position__anonymous_171);
			tile_names.accept(_position__anonymous_171);
			hero_stat.accept(_position__anonymous_171);
		}
	}
	public void parse__anonymous_27() {
		int _position__anonymous_27 = -1;
		Token.Parsed _token__anonymous_27 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_27=_position;
		_token__anonymous_27=_token;
		_token=new Tokens.Name.EndStateToken();
		parse__anonymous_28();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_element(_anonymous_27)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_27;
		}
		else {
			parse_if_header();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_element(_anonymous_27)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_27;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_27.add(_position__anonymous_27,_token);
		}
		_token=_token__anonymous_27;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_27);
			association_names.reject(_position__anonymous_27);
			room_names.reject(_position__anonymous_27);
			activity_names.reject(_position__anonymous_27);
			siding_names.reject(_position__anonymous_27);
			item_names.reject(_position__anonymous_27);
			aspect_names.reject(_position__anonymous_27);
			affinity_names.reject(_position__anonymous_27);
			activity_type_names.reject(_position__anonymous_27);
			trail_names.reject(_position__anonymous_27);
			attack_names.reject(_position__anonymous_27);
			reason_names.reject(_position__anonymous_27);
			trait_names.reject(_position__anonymous_27);
			condition_names.reject(_position__anonymous_27);
			payment_short_type_names.reject(_position__anonymous_27);
			skill_names.reject(_position__anonymous_27);
			map_names.reject(_position__anonymous_27);
			event_names.reject(_position__anonymous_27);
			image_names.reject(_position__anonymous_27);
			tile_symbols.reject(_position__anonymous_27);
			payment_long_type_names.reject(_position__anonymous_27);
			area_names.reject(_position__anonymous_27);
			structure_names.reject(_position__anonymous_27);
			tile_names.reject(_position__anonymous_27);
			hero_stat.reject(_position__anonymous_27);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_27);
			association_names.accept(_position__anonymous_27);
			room_names.accept(_position__anonymous_27);
			activity_names.accept(_position__anonymous_27);
			siding_names.accept(_position__anonymous_27);
			item_names.accept(_position__anonymous_27);
			aspect_names.accept(_position__anonymous_27);
			affinity_names.accept(_position__anonymous_27);
			activity_type_names.accept(_position__anonymous_27);
			trail_names.accept(_position__anonymous_27);
			attack_names.accept(_position__anonymous_27);
			reason_names.accept(_position__anonymous_27);
			trait_names.accept(_position__anonymous_27);
			condition_names.accept(_position__anonymous_27);
			payment_short_type_names.accept(_position__anonymous_27);
			skill_names.accept(_position__anonymous_27);
			map_names.accept(_position__anonymous_27);
			event_names.accept(_position__anonymous_27);
			image_names.accept(_position__anonymous_27);
			tile_symbols.accept(_position__anonymous_27);
			payment_long_type_names.accept(_position__anonymous_27);
			area_names.accept(_position__anonymous_27);
			structure_names.accept(_position__anonymous_27);
			tile_names.accept(_position__anonymous_27);
			hero_stat.accept(_position__anonymous_27);
		}
	}
	public void parse__anonymous_172() {
		int _position__anonymous_172 = -1;
		Token.Parsed _token__anonymous_172 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_172=_position;
		_token__anonymous_172=_token;
		_token=new Tokens.Name.RequireStatToken();
		int _state_193 = _state;
		parse_NOT();
		if(_state_193==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_172)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_172;
		}
		else {
			parse__anonymous_173();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_172)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_172;
			}
			else {
				parse_ORDINAL();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_172)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_172;
				}
				else {
					parse_INTEGER();
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"requirement_element(_anonymous_172)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_172;
					}
					else {
					}
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_172.add(_position__anonymous_172,_token);
		}
		_token=_token__anonymous_172;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_172);
			association_names.reject(_position__anonymous_172);
			room_names.reject(_position__anonymous_172);
			activity_names.reject(_position__anonymous_172);
			siding_names.reject(_position__anonymous_172);
			item_names.reject(_position__anonymous_172);
			aspect_names.reject(_position__anonymous_172);
			affinity_names.reject(_position__anonymous_172);
			activity_type_names.reject(_position__anonymous_172);
			trail_names.reject(_position__anonymous_172);
			attack_names.reject(_position__anonymous_172);
			reason_names.reject(_position__anonymous_172);
			trait_names.reject(_position__anonymous_172);
			condition_names.reject(_position__anonymous_172);
			payment_short_type_names.reject(_position__anonymous_172);
			skill_names.reject(_position__anonymous_172);
			map_names.reject(_position__anonymous_172);
			event_names.reject(_position__anonymous_172);
			image_names.reject(_position__anonymous_172);
			tile_symbols.reject(_position__anonymous_172);
			payment_long_type_names.reject(_position__anonymous_172);
			area_names.reject(_position__anonymous_172);
			structure_names.reject(_position__anonymous_172);
			tile_names.reject(_position__anonymous_172);
			hero_stat.reject(_position__anonymous_172);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_172);
			association_names.accept(_position__anonymous_172);
			room_names.accept(_position__anonymous_172);
			activity_names.accept(_position__anonymous_172);
			siding_names.accept(_position__anonymous_172);
			item_names.accept(_position__anonymous_172);
			aspect_names.accept(_position__anonymous_172);
			affinity_names.accept(_position__anonymous_172);
			activity_type_names.accept(_position__anonymous_172);
			trail_names.accept(_position__anonymous_172);
			attack_names.accept(_position__anonymous_172);
			reason_names.accept(_position__anonymous_172);
			trait_names.accept(_position__anonymous_172);
			condition_names.accept(_position__anonymous_172);
			payment_short_type_names.accept(_position__anonymous_172);
			skill_names.accept(_position__anonymous_172);
			map_names.accept(_position__anonymous_172);
			event_names.accept(_position__anonymous_172);
			image_names.accept(_position__anonymous_172);
			tile_symbols.accept(_position__anonymous_172);
			payment_long_type_names.accept(_position__anonymous_172);
			area_names.accept(_position__anonymous_172);
			structure_names.accept(_position__anonymous_172);
			tile_names.accept(_position__anonymous_172);
			hero_stat.accept(_position__anonymous_172);
		}
	}
	public void parse__anonymous_166() {
		int _position__anonymous_166 = -1;
		Token.Parsed _token__anonymous_166 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_166=_position;
		_token__anonymous_166=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+3-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='n') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='d') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_118.SYNTAX);
			_position=_position+3;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain and");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"inline_if_statement(_anonymous_166)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_166;
		}
		else {
			parse_boolean_statement();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"inline_if_statement(_anonymous_166)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_166;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_166.addAll(_token);
			_token__anonymous_166.setValue(_token.getValue());
		}
		_token=_token__anonymous_166;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_166);
			association_names.reject(_position__anonymous_166);
			room_names.reject(_position__anonymous_166);
			activity_names.reject(_position__anonymous_166);
			siding_names.reject(_position__anonymous_166);
			item_names.reject(_position__anonymous_166);
			aspect_names.reject(_position__anonymous_166);
			affinity_names.reject(_position__anonymous_166);
			activity_type_names.reject(_position__anonymous_166);
			trail_names.reject(_position__anonymous_166);
			attack_names.reject(_position__anonymous_166);
			reason_names.reject(_position__anonymous_166);
			trait_names.reject(_position__anonymous_166);
			condition_names.reject(_position__anonymous_166);
			payment_short_type_names.reject(_position__anonymous_166);
			skill_names.reject(_position__anonymous_166);
			map_names.reject(_position__anonymous_166);
			event_names.reject(_position__anonymous_166);
			image_names.reject(_position__anonymous_166);
			tile_symbols.reject(_position__anonymous_166);
			payment_long_type_names.reject(_position__anonymous_166);
			area_names.reject(_position__anonymous_166);
			structure_names.reject(_position__anonymous_166);
			tile_names.reject(_position__anonymous_166);
			hero_stat.reject(_position__anonymous_166);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_166);
			association_names.accept(_position__anonymous_166);
			room_names.accept(_position__anonymous_166);
			activity_names.accept(_position__anonymous_166);
			siding_names.accept(_position__anonymous_166);
			item_names.accept(_position__anonymous_166);
			aspect_names.accept(_position__anonymous_166);
			affinity_names.accept(_position__anonymous_166);
			activity_type_names.accept(_position__anonymous_166);
			trail_names.accept(_position__anonymous_166);
			attack_names.accept(_position__anonymous_166);
			reason_names.accept(_position__anonymous_166);
			trait_names.accept(_position__anonymous_166);
			condition_names.accept(_position__anonymous_166);
			payment_short_type_names.accept(_position__anonymous_166);
			skill_names.accept(_position__anonymous_166);
			map_names.accept(_position__anonymous_166);
			event_names.accept(_position__anonymous_166);
			image_names.accept(_position__anonymous_166);
			tile_symbols.accept(_position__anonymous_166);
			payment_long_type_names.accept(_position__anonymous_166);
			area_names.accept(_position__anonymous_166);
			structure_names.accept(_position__anonymous_166);
			tile_names.accept(_position__anonymous_166);
			hero_stat.accept(_position__anonymous_166);
		}
	}
	public void parse__anonymous_167() {
		int _position__anonymous_167 = -1;
		Token.Parsed _token__anonymous_167 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_167=_position;
		_token__anonymous_167=_token;
		_token=new Tokens.Name.FromListToken();
		if(_position+3-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='f') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='o') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='r') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_119.SYNTAX);
			_position=_position+3;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain for");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"for_statement(_anonymous_167)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_167;
		}
		else {
			parse_variable_header();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"for_statement(_anonymous_167)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_167;
			}
			else {
				if(_position+1-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!=':') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_59.SYNTAX);
					_position=_position+1;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain :");
						_furthestPosition=_position;
					}
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"for_statement(_anonymous_167)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_167;
				}
				else {
					parse_statement();
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"for_statement(_anonymous_167)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_167;
					}
					else {
						int _state_186 = _state;
						while(_position<_inputLength) {
							if(_position+1-1 >=_inputLength) {
								_state=FAILED;
							}
							else {
								if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
									_state=FAILED;
								}
							}
							if(_state==SUCCESS) {
								_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
								_position=_position+1;
								while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
									++_position;
								}
							}
							else if(_state==FAILED) {
								if(_position>=_furthestPosition) {
									_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
									_furthestPosition=_position;
								}
							}
							if(_state==FAILED) {
								break;
							}
						}
						if(_state_186==SUCCESS&&_state==FAILED) {
							_state=SUCCESS;
						}
						if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"for_statement(_anonymous_167)");
								_furthestPosition=_position;
							}
							_position=_position__anonymous_167;
						}
						else {
						}
					}
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_167.add(_position__anonymous_167,_token);
		}
		_token=_token__anonymous_167;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_167);
			association_names.reject(_position__anonymous_167);
			room_names.reject(_position__anonymous_167);
			activity_names.reject(_position__anonymous_167);
			siding_names.reject(_position__anonymous_167);
			item_names.reject(_position__anonymous_167);
			aspect_names.reject(_position__anonymous_167);
			affinity_names.reject(_position__anonymous_167);
			activity_type_names.reject(_position__anonymous_167);
			trail_names.reject(_position__anonymous_167);
			attack_names.reject(_position__anonymous_167);
			reason_names.reject(_position__anonymous_167);
			trait_names.reject(_position__anonymous_167);
			condition_names.reject(_position__anonymous_167);
			payment_short_type_names.reject(_position__anonymous_167);
			skill_names.reject(_position__anonymous_167);
			map_names.reject(_position__anonymous_167);
			event_names.reject(_position__anonymous_167);
			image_names.reject(_position__anonymous_167);
			tile_symbols.reject(_position__anonymous_167);
			payment_long_type_names.reject(_position__anonymous_167);
			area_names.reject(_position__anonymous_167);
			structure_names.reject(_position__anonymous_167);
			tile_names.reject(_position__anonymous_167);
			hero_stat.reject(_position__anonymous_167);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_167);
			association_names.accept(_position__anonymous_167);
			room_names.accept(_position__anonymous_167);
			activity_names.accept(_position__anonymous_167);
			siding_names.accept(_position__anonymous_167);
			item_names.accept(_position__anonymous_167);
			aspect_names.accept(_position__anonymous_167);
			affinity_names.accept(_position__anonymous_167);
			activity_type_names.accept(_position__anonymous_167);
			trail_names.accept(_position__anonymous_167);
			attack_names.accept(_position__anonymous_167);
			reason_names.accept(_position__anonymous_167);
			trait_names.accept(_position__anonymous_167);
			condition_names.accept(_position__anonymous_167);
			payment_short_type_names.accept(_position__anonymous_167);
			skill_names.accept(_position__anonymous_167);
			map_names.accept(_position__anonymous_167);
			event_names.accept(_position__anonymous_167);
			image_names.accept(_position__anonymous_167);
			tile_symbols.accept(_position__anonymous_167);
			payment_long_type_names.accept(_position__anonymous_167);
			area_names.accept(_position__anonymous_167);
			structure_names.accept(_position__anonymous_167);
			tile_names.accept(_position__anonymous_167);
			hero_stat.accept(_position__anonymous_167);
		}
	}
	public void parse__anonymous_20() {
		int _position__anonymous_20 = -1;
		Token.Parsed _token__anonymous_20 = null;
		int _position_comments = -1;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_20=_position;
		_token__anonymous_20=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_trait(_anonymous_20)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_20;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_20.addAll(_token);
			_token__anonymous_20.setValue(_token.getValue());
		}
		_token=_token__anonymous_20;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_20);
			association_names.reject(_position__anonymous_20);
			room_names.reject(_position__anonymous_20);
			activity_names.reject(_position__anonymous_20);
			siding_names.reject(_position__anonymous_20);
			item_names.reject(_position__anonymous_20);
			aspect_names.reject(_position__anonymous_20);
			affinity_names.reject(_position__anonymous_20);
			activity_type_names.reject(_position__anonymous_20);
			trail_names.reject(_position__anonymous_20);
			attack_names.reject(_position__anonymous_20);
			reason_names.reject(_position__anonymous_20);
			trait_names.reject(_position__anonymous_20);
			condition_names.reject(_position__anonymous_20);
			payment_short_type_names.reject(_position__anonymous_20);
			skill_names.reject(_position__anonymous_20);
			map_names.reject(_position__anonymous_20);
			event_names.reject(_position__anonymous_20);
			image_names.reject(_position__anonymous_20);
			tile_symbols.reject(_position__anonymous_20);
			payment_long_type_names.reject(_position__anonymous_20);
			area_names.reject(_position__anonymous_20);
			structure_names.reject(_position__anonymous_20);
			tile_names.reject(_position__anonymous_20);
			hero_stat.reject(_position__anonymous_20);
			_state=SUCCESS;
			_position__anonymous_20=_position;
			_token__anonymous_20=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			_position_comments=_position;
			if(_state==SUCCESS&&!_recursion_protection_comments_9.contains(_position)) {
				_recursion_protection_comments_9.add(_position);
				parse_comments();
				_recursion_protection_comments_9.remove(_position_comments);
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_trait(_anonymous_20)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_20;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_20.addAll(_token);
				_token__anonymous_20.setValue(_token.getValue());
			}
			_token=_token__anonymous_20;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_20);
				association_names.reject(_position__anonymous_20);
				room_names.reject(_position__anonymous_20);
				activity_names.reject(_position__anonymous_20);
				siding_names.reject(_position__anonymous_20);
				item_names.reject(_position__anonymous_20);
				aspect_names.reject(_position__anonymous_20);
				affinity_names.reject(_position__anonymous_20);
				activity_type_names.reject(_position__anonymous_20);
				trail_names.reject(_position__anonymous_20);
				attack_names.reject(_position__anonymous_20);
				reason_names.reject(_position__anonymous_20);
				trait_names.reject(_position__anonymous_20);
				condition_names.reject(_position__anonymous_20);
				payment_short_type_names.reject(_position__anonymous_20);
				skill_names.reject(_position__anonymous_20);
				map_names.reject(_position__anonymous_20);
				event_names.reject(_position__anonymous_20);
				image_names.reject(_position__anonymous_20);
				tile_symbols.reject(_position__anonymous_20);
				payment_long_type_names.reject(_position__anonymous_20);
				area_names.reject(_position__anonymous_20);
				structure_names.reject(_position__anonymous_20);
				tile_names.reject(_position__anonymous_20);
				hero_stat.reject(_position__anonymous_20);
				_state=SUCCESS;
				_position__anonymous_20=_position;
				_token__anonymous_20=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				parse_trait_declaration();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_trait(_anonymous_20)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_20;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_20.addAll(_token);
					_token__anonymous_20.setValue(_token.getValue());
				}
				_token=_token__anonymous_20;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_20);
					association_names.reject(_position__anonymous_20);
					room_names.reject(_position__anonymous_20);
					activity_names.reject(_position__anonymous_20);
					siding_names.reject(_position__anonymous_20);
					item_names.reject(_position__anonymous_20);
					aspect_names.reject(_position__anonymous_20);
					affinity_names.reject(_position__anonymous_20);
					activity_type_names.reject(_position__anonymous_20);
					trail_names.reject(_position__anonymous_20);
					attack_names.reject(_position__anonymous_20);
					reason_names.reject(_position__anonymous_20);
					trait_names.reject(_position__anonymous_20);
					condition_names.reject(_position__anonymous_20);
					payment_short_type_names.reject(_position__anonymous_20);
					skill_names.reject(_position__anonymous_20);
					map_names.reject(_position__anonymous_20);
					event_names.reject(_position__anonymous_20);
					image_names.reject(_position__anonymous_20);
					tile_symbols.reject(_position__anonymous_20);
					payment_long_type_names.reject(_position__anonymous_20);
					area_names.reject(_position__anonymous_20);
					structure_names.reject(_position__anonymous_20);
					tile_names.reject(_position__anonymous_20);
					hero_stat.reject(_position__anonymous_20);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_20);
					association_names.accept(_position__anonymous_20);
					room_names.accept(_position__anonymous_20);
					activity_names.accept(_position__anonymous_20);
					siding_names.accept(_position__anonymous_20);
					item_names.accept(_position__anonymous_20);
					aspect_names.accept(_position__anonymous_20);
					affinity_names.accept(_position__anonymous_20);
					activity_type_names.accept(_position__anonymous_20);
					trail_names.accept(_position__anonymous_20);
					attack_names.accept(_position__anonymous_20);
					reason_names.accept(_position__anonymous_20);
					trait_names.accept(_position__anonymous_20);
					condition_names.accept(_position__anonymous_20);
					payment_short_type_names.accept(_position__anonymous_20);
					skill_names.accept(_position__anonymous_20);
					map_names.accept(_position__anonymous_20);
					event_names.accept(_position__anonymous_20);
					image_names.accept(_position__anonymous_20);
					tile_symbols.accept(_position__anonymous_20);
					payment_long_type_names.accept(_position__anonymous_20);
					area_names.accept(_position__anonymous_20);
					structure_names.accept(_position__anonymous_20);
					tile_names.accept(_position__anonymous_20);
					hero_stat.accept(_position__anonymous_20);
				}
			}
		}
	}
	public void parse__anonymous_168() {
		int _position__anonymous_168 = -1;
		Token.Parsed _token__anonymous_168 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_168=_position;
		_token__anonymous_168=_token;
		_token=new Tokens.Name.FromVariableToken();
		if(_position+3-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='f') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='o') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='r') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_119.SYNTAX);
			_position=_position+3;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain for");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"for_statement(_anonymous_168)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_168;
		}
		else {
			parse_variable_header();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"for_statement(_anonymous_168)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_168;
			}
			else {
				parse_ORDINAL();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"for_statement(_anonymous_168)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_168;
				}
				else {
					parse_statement();
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"for_statement(_anonymous_168)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_168;
					}
					else {
						int _state_187 = _state;
						while(_position<_inputLength) {
							if(_position+1-1 >=_inputLength) {
								_state=FAILED;
							}
							else {
								if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
									_state=FAILED;
								}
							}
							if(_state==SUCCESS) {
								_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
								_position=_position+1;
								while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
									++_position;
								}
							}
							else if(_state==FAILED) {
								if(_position>=_furthestPosition) {
									_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
									_furthestPosition=_position;
								}
							}
							if(_state==FAILED) {
								break;
							}
						}
						if(_state_187==SUCCESS&&_state==FAILED) {
							_state=SUCCESS;
						}
						if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"for_statement(_anonymous_168)");
								_furthestPosition=_position;
							}
							_position=_position__anonymous_168;
						}
						else {
						}
					}
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_168.add(_position__anonymous_168,_token);
		}
		_token=_token__anonymous_168;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_168);
			association_names.reject(_position__anonymous_168);
			room_names.reject(_position__anonymous_168);
			activity_names.reject(_position__anonymous_168);
			siding_names.reject(_position__anonymous_168);
			item_names.reject(_position__anonymous_168);
			aspect_names.reject(_position__anonymous_168);
			affinity_names.reject(_position__anonymous_168);
			activity_type_names.reject(_position__anonymous_168);
			trail_names.reject(_position__anonymous_168);
			attack_names.reject(_position__anonymous_168);
			reason_names.reject(_position__anonymous_168);
			trait_names.reject(_position__anonymous_168);
			condition_names.reject(_position__anonymous_168);
			payment_short_type_names.reject(_position__anonymous_168);
			skill_names.reject(_position__anonymous_168);
			map_names.reject(_position__anonymous_168);
			event_names.reject(_position__anonymous_168);
			image_names.reject(_position__anonymous_168);
			tile_symbols.reject(_position__anonymous_168);
			payment_long_type_names.reject(_position__anonymous_168);
			area_names.reject(_position__anonymous_168);
			structure_names.reject(_position__anonymous_168);
			tile_names.reject(_position__anonymous_168);
			hero_stat.reject(_position__anonymous_168);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_168);
			association_names.accept(_position__anonymous_168);
			room_names.accept(_position__anonymous_168);
			activity_names.accept(_position__anonymous_168);
			siding_names.accept(_position__anonymous_168);
			item_names.accept(_position__anonymous_168);
			aspect_names.accept(_position__anonymous_168);
			affinity_names.accept(_position__anonymous_168);
			activity_type_names.accept(_position__anonymous_168);
			trail_names.accept(_position__anonymous_168);
			attack_names.accept(_position__anonymous_168);
			reason_names.accept(_position__anonymous_168);
			trait_names.accept(_position__anonymous_168);
			condition_names.accept(_position__anonymous_168);
			payment_short_type_names.accept(_position__anonymous_168);
			skill_names.accept(_position__anonymous_168);
			map_names.accept(_position__anonymous_168);
			event_names.accept(_position__anonymous_168);
			image_names.accept(_position__anonymous_168);
			tile_symbols.accept(_position__anonymous_168);
			payment_long_type_names.accept(_position__anonymous_168);
			area_names.accept(_position__anonymous_168);
			structure_names.accept(_position__anonymous_168);
			tile_names.accept(_position__anonymous_168);
			hero_stat.accept(_position__anonymous_168);
		}
	}
	public void parse__anonymous_169() {
		int _position__anonymous_169 = -1;
		Token.Parsed _token__anonymous_169 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_169=_position;
		_token__anonymous_169=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse__anonymous_170();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"boolean_statement(_anonymous_169)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_169;
		}
		else {
			parse_boolean_element();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"boolean_statement(_anonymous_169)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_169;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_169.addAll(_token);
			_token__anonymous_169.setValue(_token.getValue());
		}
		_token=_token__anonymous_169;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_169);
			association_names.reject(_position__anonymous_169);
			room_names.reject(_position__anonymous_169);
			activity_names.reject(_position__anonymous_169);
			siding_names.reject(_position__anonymous_169);
			item_names.reject(_position__anonymous_169);
			aspect_names.reject(_position__anonymous_169);
			affinity_names.reject(_position__anonymous_169);
			activity_type_names.reject(_position__anonymous_169);
			trail_names.reject(_position__anonymous_169);
			attack_names.reject(_position__anonymous_169);
			reason_names.reject(_position__anonymous_169);
			trait_names.reject(_position__anonymous_169);
			condition_names.reject(_position__anonymous_169);
			payment_short_type_names.reject(_position__anonymous_169);
			skill_names.reject(_position__anonymous_169);
			map_names.reject(_position__anonymous_169);
			event_names.reject(_position__anonymous_169);
			image_names.reject(_position__anonymous_169);
			tile_symbols.reject(_position__anonymous_169);
			payment_long_type_names.reject(_position__anonymous_169);
			area_names.reject(_position__anonymous_169);
			structure_names.reject(_position__anonymous_169);
			tile_names.reject(_position__anonymous_169);
			hero_stat.reject(_position__anonymous_169);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_169);
			association_names.accept(_position__anonymous_169);
			room_names.accept(_position__anonymous_169);
			activity_names.accept(_position__anonymous_169);
			siding_names.accept(_position__anonymous_169);
			item_names.accept(_position__anonymous_169);
			aspect_names.accept(_position__anonymous_169);
			affinity_names.accept(_position__anonymous_169);
			activity_type_names.accept(_position__anonymous_169);
			trail_names.accept(_position__anonymous_169);
			attack_names.accept(_position__anonymous_169);
			reason_names.accept(_position__anonymous_169);
			trait_names.accept(_position__anonymous_169);
			condition_names.accept(_position__anonymous_169);
			payment_short_type_names.accept(_position__anonymous_169);
			skill_names.accept(_position__anonymous_169);
			map_names.accept(_position__anonymous_169);
			event_names.accept(_position__anonymous_169);
			image_names.accept(_position__anonymous_169);
			tile_symbols.accept(_position__anonymous_169);
			payment_long_type_names.accept(_position__anonymous_169);
			area_names.accept(_position__anonymous_169);
			structure_names.accept(_position__anonymous_169);
			tile_names.accept(_position__anonymous_169);
			hero_stat.accept(_position__anonymous_169);
		}
	}
	public void parse__anonymous_19() {
		int _position__anonymous_19 = -1;
		Token.Parsed _token__anonymous_19 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_19=_position;
		_token__anonymous_19=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse_imposition();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"condition_element(_anonymous_19)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_19;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_19.addAll(_token);
			_token__anonymous_19.setValue(_token.getValue());
		}
		_token=_token__anonymous_19;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_19);
			association_names.reject(_position__anonymous_19);
			room_names.reject(_position__anonymous_19);
			activity_names.reject(_position__anonymous_19);
			siding_names.reject(_position__anonymous_19);
			item_names.reject(_position__anonymous_19);
			aspect_names.reject(_position__anonymous_19);
			affinity_names.reject(_position__anonymous_19);
			activity_type_names.reject(_position__anonymous_19);
			trail_names.reject(_position__anonymous_19);
			attack_names.reject(_position__anonymous_19);
			reason_names.reject(_position__anonymous_19);
			trait_names.reject(_position__anonymous_19);
			condition_names.reject(_position__anonymous_19);
			payment_short_type_names.reject(_position__anonymous_19);
			skill_names.reject(_position__anonymous_19);
			map_names.reject(_position__anonymous_19);
			event_names.reject(_position__anonymous_19);
			image_names.reject(_position__anonymous_19);
			tile_symbols.reject(_position__anonymous_19);
			payment_long_type_names.reject(_position__anonymous_19);
			area_names.reject(_position__anonymous_19);
			structure_names.reject(_position__anonymous_19);
			tile_names.reject(_position__anonymous_19);
			hero_stat.reject(_position__anonymous_19);
			_state=SUCCESS;
			_position__anonymous_19=_position;
			_token__anonymous_19=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			parse_acquisition();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"condition_element(_anonymous_19)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_19;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_19.addAll(_token);
				_token__anonymous_19.setValue(_token.getValue());
			}
			_token=_token__anonymous_19;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_19);
				association_names.reject(_position__anonymous_19);
				room_names.reject(_position__anonymous_19);
				activity_names.reject(_position__anonymous_19);
				siding_names.reject(_position__anonymous_19);
				item_names.reject(_position__anonymous_19);
				aspect_names.reject(_position__anonymous_19);
				affinity_names.reject(_position__anonymous_19);
				activity_type_names.reject(_position__anonymous_19);
				trail_names.reject(_position__anonymous_19);
				attack_names.reject(_position__anonymous_19);
				reason_names.reject(_position__anonymous_19);
				trait_names.reject(_position__anonymous_19);
				condition_names.reject(_position__anonymous_19);
				payment_short_type_names.reject(_position__anonymous_19);
				skill_names.reject(_position__anonymous_19);
				map_names.reject(_position__anonymous_19);
				event_names.reject(_position__anonymous_19);
				image_names.reject(_position__anonymous_19);
				tile_symbols.reject(_position__anonymous_19);
				payment_long_type_names.reject(_position__anonymous_19);
				area_names.reject(_position__anonymous_19);
				structure_names.reject(_position__anonymous_19);
				tile_names.reject(_position__anonymous_19);
				hero_stat.reject(_position__anonymous_19);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_19);
				association_names.accept(_position__anonymous_19);
				room_names.accept(_position__anonymous_19);
				activity_names.accept(_position__anonymous_19);
				siding_names.accept(_position__anonymous_19);
				item_names.accept(_position__anonymous_19);
				aspect_names.accept(_position__anonymous_19);
				affinity_names.accept(_position__anonymous_19);
				activity_type_names.accept(_position__anonymous_19);
				trail_names.accept(_position__anonymous_19);
				attack_names.accept(_position__anonymous_19);
				reason_names.accept(_position__anonymous_19);
				trait_names.accept(_position__anonymous_19);
				condition_names.accept(_position__anonymous_19);
				payment_short_type_names.accept(_position__anonymous_19);
				skill_names.accept(_position__anonymous_19);
				map_names.accept(_position__anonymous_19);
				event_names.accept(_position__anonymous_19);
				image_names.accept(_position__anonymous_19);
				tile_symbols.accept(_position__anonymous_19);
				payment_long_type_names.accept(_position__anonymous_19);
				area_names.accept(_position__anonymous_19);
				structure_names.accept(_position__anonymous_19);
				tile_names.accept(_position__anonymous_19);
				hero_stat.accept(_position__anonymous_19);
			}
		}
	}
	public void parse__anonymous_18() {
		int _position__anonymous_18 = -1;
		Token.Parsed _token__anonymous_18 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_18=_position;
		_token__anonymous_18=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='*') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_19.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain *");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"condition_element(_anonymous_18)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_18;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_18.addAll(_token);
			_token__anonymous_18.setValue(_token.getValue());
		}
		_token=_token__anonymous_18;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_18);
			association_names.reject(_position__anonymous_18);
			room_names.reject(_position__anonymous_18);
			activity_names.reject(_position__anonymous_18);
			siding_names.reject(_position__anonymous_18);
			item_names.reject(_position__anonymous_18);
			aspect_names.reject(_position__anonymous_18);
			affinity_names.reject(_position__anonymous_18);
			activity_type_names.reject(_position__anonymous_18);
			trail_names.reject(_position__anonymous_18);
			attack_names.reject(_position__anonymous_18);
			reason_names.reject(_position__anonymous_18);
			trait_names.reject(_position__anonymous_18);
			condition_names.reject(_position__anonymous_18);
			payment_short_type_names.reject(_position__anonymous_18);
			skill_names.reject(_position__anonymous_18);
			map_names.reject(_position__anonymous_18);
			event_names.reject(_position__anonymous_18);
			image_names.reject(_position__anonymous_18);
			tile_symbols.reject(_position__anonymous_18);
			payment_long_type_names.reject(_position__anonymous_18);
			area_names.reject(_position__anonymous_18);
			structure_names.reject(_position__anonymous_18);
			tile_names.reject(_position__anonymous_18);
			hero_stat.reject(_position__anonymous_18);
			_state=SUCCESS;
			_position__anonymous_18=_position;
			_token__anonymous_18=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			if(_position+10-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='a') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='c') {
					_state=FAILED;
				}
				if(_inputArray[_position+2]!='c') {
					_state=FAILED;
				}
				if(_inputArray[_position+3]!='u') {
					_state=FAILED;
				}
				if(_inputArray[_position+4]!='m') {
					_state=FAILED;
				}
				if(_inputArray[_position+5]!='u') {
					_state=FAILED;
				}
				if(_inputArray[_position+6]!='l') {
					_state=FAILED;
				}
				if(_inputArray[_position+7]!='a') {
					_state=FAILED;
				}
				if(_inputArray[_position+8]!='t') {
					_state=FAILED;
				}
				if(_inputArray[_position+9]!='e') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_20.SYNTAX);
				_position=_position+10;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain accumulate");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"condition_element(_anonymous_18)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_18;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_18.addAll(_token);
				_token__anonymous_18.setValue(_token.getValue());
			}
			_token=_token__anonymous_18;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_18);
				association_names.reject(_position__anonymous_18);
				room_names.reject(_position__anonymous_18);
				activity_names.reject(_position__anonymous_18);
				siding_names.reject(_position__anonymous_18);
				item_names.reject(_position__anonymous_18);
				aspect_names.reject(_position__anonymous_18);
				affinity_names.reject(_position__anonymous_18);
				activity_type_names.reject(_position__anonymous_18);
				trail_names.reject(_position__anonymous_18);
				attack_names.reject(_position__anonymous_18);
				reason_names.reject(_position__anonymous_18);
				trait_names.reject(_position__anonymous_18);
				condition_names.reject(_position__anonymous_18);
				payment_short_type_names.reject(_position__anonymous_18);
				skill_names.reject(_position__anonymous_18);
				map_names.reject(_position__anonymous_18);
				event_names.reject(_position__anonymous_18);
				image_names.reject(_position__anonymous_18);
				tile_symbols.reject(_position__anonymous_18);
				payment_long_type_names.reject(_position__anonymous_18);
				area_names.reject(_position__anonymous_18);
				structure_names.reject(_position__anonymous_18);
				tile_names.reject(_position__anonymous_18);
				hero_stat.reject(_position__anonymous_18);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_18);
				association_names.accept(_position__anonymous_18);
				room_names.accept(_position__anonymous_18);
				activity_names.accept(_position__anonymous_18);
				siding_names.accept(_position__anonymous_18);
				item_names.accept(_position__anonymous_18);
				aspect_names.accept(_position__anonymous_18);
				affinity_names.accept(_position__anonymous_18);
				activity_type_names.accept(_position__anonymous_18);
				trail_names.accept(_position__anonymous_18);
				attack_names.accept(_position__anonymous_18);
				reason_names.accept(_position__anonymous_18);
				trait_names.accept(_position__anonymous_18);
				condition_names.accept(_position__anonymous_18);
				payment_short_type_names.accept(_position__anonymous_18);
				skill_names.accept(_position__anonymous_18);
				map_names.accept(_position__anonymous_18);
				event_names.accept(_position__anonymous_18);
				image_names.accept(_position__anonymous_18);
				tile_symbols.accept(_position__anonymous_18);
				payment_long_type_names.accept(_position__anonymous_18);
				area_names.accept(_position__anonymous_18);
				structure_names.accept(_position__anonymous_18);
				tile_names.accept(_position__anonymous_18);
				hero_stat.accept(_position__anonymous_18);
			}
		}
	}
	public void parse__anonymous_11() {
		int _position__anonymous_11 = -1;
		Token.Parsed _token__anonymous_11 = null;
		int _position_comments = -1;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_11=_position;
		_token__anonymous_11=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_affinity(_anonymous_11)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_11;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_11.addAll(_token);
			_token__anonymous_11.setValue(_token.getValue());
		}
		_token=_token__anonymous_11;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_11);
			association_names.reject(_position__anonymous_11);
			room_names.reject(_position__anonymous_11);
			activity_names.reject(_position__anonymous_11);
			siding_names.reject(_position__anonymous_11);
			item_names.reject(_position__anonymous_11);
			aspect_names.reject(_position__anonymous_11);
			affinity_names.reject(_position__anonymous_11);
			activity_type_names.reject(_position__anonymous_11);
			trail_names.reject(_position__anonymous_11);
			attack_names.reject(_position__anonymous_11);
			reason_names.reject(_position__anonymous_11);
			trait_names.reject(_position__anonymous_11);
			condition_names.reject(_position__anonymous_11);
			payment_short_type_names.reject(_position__anonymous_11);
			skill_names.reject(_position__anonymous_11);
			map_names.reject(_position__anonymous_11);
			event_names.reject(_position__anonymous_11);
			image_names.reject(_position__anonymous_11);
			tile_symbols.reject(_position__anonymous_11);
			payment_long_type_names.reject(_position__anonymous_11);
			area_names.reject(_position__anonymous_11);
			structure_names.reject(_position__anonymous_11);
			tile_names.reject(_position__anonymous_11);
			hero_stat.reject(_position__anonymous_11);
			_state=SUCCESS;
			_position__anonymous_11=_position;
			_token__anonymous_11=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			_position_comments=_position;
			if(_state==SUCCESS&&!_recursion_protection_comments_6.contains(_position)) {
				_recursion_protection_comments_6.add(_position);
				parse_comments();
				_recursion_protection_comments_6.remove(_position_comments);
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_affinity(_anonymous_11)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_11;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_11.addAll(_token);
				_token__anonymous_11.setValue(_token.getValue());
			}
			_token=_token__anonymous_11;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_11);
				association_names.reject(_position__anonymous_11);
				room_names.reject(_position__anonymous_11);
				activity_names.reject(_position__anonymous_11);
				siding_names.reject(_position__anonymous_11);
				item_names.reject(_position__anonymous_11);
				aspect_names.reject(_position__anonymous_11);
				affinity_names.reject(_position__anonymous_11);
				activity_type_names.reject(_position__anonymous_11);
				trail_names.reject(_position__anonymous_11);
				attack_names.reject(_position__anonymous_11);
				reason_names.reject(_position__anonymous_11);
				trait_names.reject(_position__anonymous_11);
				condition_names.reject(_position__anonymous_11);
				payment_short_type_names.reject(_position__anonymous_11);
				skill_names.reject(_position__anonymous_11);
				map_names.reject(_position__anonymous_11);
				event_names.reject(_position__anonymous_11);
				image_names.reject(_position__anonymous_11);
				tile_symbols.reject(_position__anonymous_11);
				payment_long_type_names.reject(_position__anonymous_11);
				area_names.reject(_position__anonymous_11);
				structure_names.reject(_position__anonymous_11);
				tile_names.reject(_position__anonymous_11);
				hero_stat.reject(_position__anonymous_11);
				_state=SUCCESS;
				_position__anonymous_11=_position;
				_token__anonymous_11=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				parse_affinity_declaration();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_affinity(_anonymous_11)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_11;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_11.addAll(_token);
					_token__anonymous_11.setValue(_token.getValue());
				}
				_token=_token__anonymous_11;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_11);
					association_names.reject(_position__anonymous_11);
					room_names.reject(_position__anonymous_11);
					activity_names.reject(_position__anonymous_11);
					siding_names.reject(_position__anonymous_11);
					item_names.reject(_position__anonymous_11);
					aspect_names.reject(_position__anonymous_11);
					affinity_names.reject(_position__anonymous_11);
					activity_type_names.reject(_position__anonymous_11);
					trail_names.reject(_position__anonymous_11);
					attack_names.reject(_position__anonymous_11);
					reason_names.reject(_position__anonymous_11);
					trait_names.reject(_position__anonymous_11);
					condition_names.reject(_position__anonymous_11);
					payment_short_type_names.reject(_position__anonymous_11);
					skill_names.reject(_position__anonymous_11);
					map_names.reject(_position__anonymous_11);
					event_names.reject(_position__anonymous_11);
					image_names.reject(_position__anonymous_11);
					tile_symbols.reject(_position__anonymous_11);
					payment_long_type_names.reject(_position__anonymous_11);
					area_names.reject(_position__anonymous_11);
					structure_names.reject(_position__anonymous_11);
					tile_names.reject(_position__anonymous_11);
					hero_stat.reject(_position__anonymous_11);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_11);
					association_names.accept(_position__anonymous_11);
					room_names.accept(_position__anonymous_11);
					activity_names.accept(_position__anonymous_11);
					siding_names.accept(_position__anonymous_11);
					item_names.accept(_position__anonymous_11);
					aspect_names.accept(_position__anonymous_11);
					affinity_names.accept(_position__anonymous_11);
					activity_type_names.accept(_position__anonymous_11);
					trail_names.accept(_position__anonymous_11);
					attack_names.accept(_position__anonymous_11);
					reason_names.accept(_position__anonymous_11);
					trait_names.accept(_position__anonymous_11);
					condition_names.accept(_position__anonymous_11);
					payment_short_type_names.accept(_position__anonymous_11);
					skill_names.accept(_position__anonymous_11);
					map_names.accept(_position__anonymous_11);
					event_names.accept(_position__anonymous_11);
					image_names.accept(_position__anonymous_11);
					tile_symbols.accept(_position__anonymous_11);
					payment_long_type_names.accept(_position__anonymous_11);
					area_names.accept(_position__anonymous_11);
					structure_names.accept(_position__anonymous_11);
					tile_names.accept(_position__anonymous_11);
					hero_stat.accept(_position__anonymous_11);
				}
			}
		}
	}
	public void parse__anonymous_162() {
		int _position__anonymous_162 = -1;
		Token.Parsed _token__anonymous_162 = null;
		int _position_INTEGER = -1;
		Token.Parsed _token_INTEGER = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_162=_position;
		_token__anonymous_162=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='-') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_15.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain -");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"spawn_statement(_anonymous_162)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_162;
		}
		else {
			_token_INTEGER=_token;
			_token=new Tokens.Name.UpperBoundYToken();
			_position_INTEGER=_position;
			parse_INTEGER();
			if(_state==SUCCESS) {
				_token_INTEGER.add(_position_INTEGER,_token);
			}
			_token=_token_INTEGER;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"spawn_statement(_anonymous_162)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_162;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_162.addAll(_token);
			_token__anonymous_162.setValue(_token.getValue());
		}
		_token=_token__anonymous_162;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_162);
			association_names.reject(_position__anonymous_162);
			room_names.reject(_position__anonymous_162);
			activity_names.reject(_position__anonymous_162);
			siding_names.reject(_position__anonymous_162);
			item_names.reject(_position__anonymous_162);
			aspect_names.reject(_position__anonymous_162);
			affinity_names.reject(_position__anonymous_162);
			activity_type_names.reject(_position__anonymous_162);
			trail_names.reject(_position__anonymous_162);
			attack_names.reject(_position__anonymous_162);
			reason_names.reject(_position__anonymous_162);
			trait_names.reject(_position__anonymous_162);
			condition_names.reject(_position__anonymous_162);
			payment_short_type_names.reject(_position__anonymous_162);
			skill_names.reject(_position__anonymous_162);
			map_names.reject(_position__anonymous_162);
			event_names.reject(_position__anonymous_162);
			image_names.reject(_position__anonymous_162);
			tile_symbols.reject(_position__anonymous_162);
			payment_long_type_names.reject(_position__anonymous_162);
			area_names.reject(_position__anonymous_162);
			structure_names.reject(_position__anonymous_162);
			tile_names.reject(_position__anonymous_162);
			hero_stat.reject(_position__anonymous_162);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_162);
			association_names.accept(_position__anonymous_162);
			room_names.accept(_position__anonymous_162);
			activity_names.accept(_position__anonymous_162);
			siding_names.accept(_position__anonymous_162);
			item_names.accept(_position__anonymous_162);
			aspect_names.accept(_position__anonymous_162);
			affinity_names.accept(_position__anonymous_162);
			activity_type_names.accept(_position__anonymous_162);
			trail_names.accept(_position__anonymous_162);
			attack_names.accept(_position__anonymous_162);
			reason_names.accept(_position__anonymous_162);
			trait_names.accept(_position__anonymous_162);
			condition_names.accept(_position__anonymous_162);
			payment_short_type_names.accept(_position__anonymous_162);
			skill_names.accept(_position__anonymous_162);
			map_names.accept(_position__anonymous_162);
			event_names.accept(_position__anonymous_162);
			image_names.accept(_position__anonymous_162);
			tile_symbols.accept(_position__anonymous_162);
			payment_long_type_names.accept(_position__anonymous_162);
			area_names.accept(_position__anonymous_162);
			structure_names.accept(_position__anonymous_162);
			tile_names.accept(_position__anonymous_162);
			hero_stat.accept(_position__anonymous_162);
		}
	}
	public void parse__anonymous_10() {
		int _position__anonymous_10 = -1;
		Token.Parsed _token__anonymous_10 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_10=_position;
		_token__anonymous_10=_token;
		_token=new Tokens.Name.GainAttackToken();
		if(_pass==FIRST_PASS) {
			String _result = _preparsed_NAME.get(_position);
			if(_result==null) {
				_state=FAILED;
			}
			else {
				Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
				_token.add(_position,_first_pass_token);
				_position+=_result.length();
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
		}
		else if(_pass==SECOND_PASS) {
			_list_name_result=_preparsed_NAME.get(_position);
			if(_list_name_result!=null&&attack_names.contains(_list_name_result)) {
				if(_position+_list_name_result.length()<_inputLength) {
					int _next_char = _inputArray[_position+_list_name_result.length()];
					if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,new Tokens.Name.AttackNamesToken(_list_name_result));
					_position+=_list_name_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"attack_names");
					_furthestPosition=_position;
				}
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"item_parameter(_anonymous_10)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_10;
		}
		else {
			int _state_24 = _state;
			parse_if_header();
			if(_state_24==SUCCESS&&_state==FAILED) {
				_state=SUCCESS;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"item_parameter(_anonymous_10)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_10;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_10.add(_position__anonymous_10,_token);
		}
		_token=_token__anonymous_10;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_10);
			association_names.reject(_position__anonymous_10);
			room_names.reject(_position__anonymous_10);
			activity_names.reject(_position__anonymous_10);
			siding_names.reject(_position__anonymous_10);
			item_names.reject(_position__anonymous_10);
			aspect_names.reject(_position__anonymous_10);
			affinity_names.reject(_position__anonymous_10);
			activity_type_names.reject(_position__anonymous_10);
			trail_names.reject(_position__anonymous_10);
			attack_names.reject(_position__anonymous_10);
			reason_names.reject(_position__anonymous_10);
			trait_names.reject(_position__anonymous_10);
			condition_names.reject(_position__anonymous_10);
			payment_short_type_names.reject(_position__anonymous_10);
			skill_names.reject(_position__anonymous_10);
			map_names.reject(_position__anonymous_10);
			event_names.reject(_position__anonymous_10);
			image_names.reject(_position__anonymous_10);
			tile_symbols.reject(_position__anonymous_10);
			payment_long_type_names.reject(_position__anonymous_10);
			area_names.reject(_position__anonymous_10);
			structure_names.reject(_position__anonymous_10);
			tile_names.reject(_position__anonymous_10);
			hero_stat.reject(_position__anonymous_10);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_10);
			association_names.accept(_position__anonymous_10);
			room_names.accept(_position__anonymous_10);
			activity_names.accept(_position__anonymous_10);
			siding_names.accept(_position__anonymous_10);
			item_names.accept(_position__anonymous_10);
			aspect_names.accept(_position__anonymous_10);
			affinity_names.accept(_position__anonymous_10);
			activity_type_names.accept(_position__anonymous_10);
			trail_names.accept(_position__anonymous_10);
			attack_names.accept(_position__anonymous_10);
			reason_names.accept(_position__anonymous_10);
			trait_names.accept(_position__anonymous_10);
			condition_names.accept(_position__anonymous_10);
			payment_short_type_names.accept(_position__anonymous_10);
			skill_names.accept(_position__anonymous_10);
			map_names.accept(_position__anonymous_10);
			event_names.accept(_position__anonymous_10);
			image_names.accept(_position__anonymous_10);
			tile_symbols.accept(_position__anonymous_10);
			payment_long_type_names.accept(_position__anonymous_10);
			area_names.accept(_position__anonymous_10);
			structure_names.accept(_position__anonymous_10);
			tile_names.accept(_position__anonymous_10);
			hero_stat.accept(_position__anonymous_10);
		}
	}
	public void parse__anonymous_163() {
		int _position__anonymous_163 = -1;
		Token.Parsed _token__anonymous_163 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_163=_position;
		_token__anonymous_163=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+4-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='e') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='l') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='s') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='e') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_117.ELSE);
			_position=_position+4;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain else");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"if_header(_anonymous_163)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_163;
		}
		else {
			if(_position+2-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='i') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='f') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_89.IF);
				_position=_position+2;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain if");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"if_header(_anonymous_163)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_163;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_163.addAll(_token);
			_token__anonymous_163.setValue(_token.getValue());
		}
		_token=_token__anonymous_163;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_163);
			association_names.reject(_position__anonymous_163);
			room_names.reject(_position__anonymous_163);
			activity_names.reject(_position__anonymous_163);
			siding_names.reject(_position__anonymous_163);
			item_names.reject(_position__anonymous_163);
			aspect_names.reject(_position__anonymous_163);
			affinity_names.reject(_position__anonymous_163);
			activity_type_names.reject(_position__anonymous_163);
			trail_names.reject(_position__anonymous_163);
			attack_names.reject(_position__anonymous_163);
			reason_names.reject(_position__anonymous_163);
			trait_names.reject(_position__anonymous_163);
			condition_names.reject(_position__anonymous_163);
			payment_short_type_names.reject(_position__anonymous_163);
			skill_names.reject(_position__anonymous_163);
			map_names.reject(_position__anonymous_163);
			event_names.reject(_position__anonymous_163);
			image_names.reject(_position__anonymous_163);
			tile_symbols.reject(_position__anonymous_163);
			payment_long_type_names.reject(_position__anonymous_163);
			area_names.reject(_position__anonymous_163);
			structure_names.reject(_position__anonymous_163);
			tile_names.reject(_position__anonymous_163);
			hero_stat.reject(_position__anonymous_163);
			_state=SUCCESS;
			_position__anonymous_163=_position;
			_token__anonymous_163=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			if(_position+2-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='i') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='f') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_89.IF);
				_position=_position+2;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain if");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"if_header(_anonymous_163)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_163;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_163.addAll(_token);
				_token__anonymous_163.setValue(_token.getValue());
			}
			_token=_token__anonymous_163;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_163);
				association_names.reject(_position__anonymous_163);
				room_names.reject(_position__anonymous_163);
				activity_names.reject(_position__anonymous_163);
				siding_names.reject(_position__anonymous_163);
				item_names.reject(_position__anonymous_163);
				aspect_names.reject(_position__anonymous_163);
				affinity_names.reject(_position__anonymous_163);
				activity_type_names.reject(_position__anonymous_163);
				trail_names.reject(_position__anonymous_163);
				attack_names.reject(_position__anonymous_163);
				reason_names.reject(_position__anonymous_163);
				trait_names.reject(_position__anonymous_163);
				condition_names.reject(_position__anonymous_163);
				payment_short_type_names.reject(_position__anonymous_163);
				skill_names.reject(_position__anonymous_163);
				map_names.reject(_position__anonymous_163);
				event_names.reject(_position__anonymous_163);
				image_names.reject(_position__anonymous_163);
				tile_symbols.reject(_position__anonymous_163);
				payment_long_type_names.reject(_position__anonymous_163);
				area_names.reject(_position__anonymous_163);
				structure_names.reject(_position__anonymous_163);
				tile_names.reject(_position__anonymous_163);
				hero_stat.reject(_position__anonymous_163);
				_state=SUCCESS;
				_position__anonymous_163=_position;
				_token__anonymous_163=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				if(_position+4-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!='e') {
						_state=FAILED;
					}
					if(_inputArray[_position+1]!='l') {
						_state=FAILED;
					}
					if(_inputArray[_position+2]!='s') {
						_state=FAILED;
					}
					if(_inputArray[_position+3]!='e') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_117.ELSE);
					_position=_position+4;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain else");
						_furthestPosition=_position;
					}
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"if_header(_anonymous_163)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_163;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_163.addAll(_token);
					_token__anonymous_163.setValue(_token.getValue());
				}
				_token=_token__anonymous_163;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_163);
					association_names.reject(_position__anonymous_163);
					room_names.reject(_position__anonymous_163);
					activity_names.reject(_position__anonymous_163);
					siding_names.reject(_position__anonymous_163);
					item_names.reject(_position__anonymous_163);
					aspect_names.reject(_position__anonymous_163);
					affinity_names.reject(_position__anonymous_163);
					activity_type_names.reject(_position__anonymous_163);
					trail_names.reject(_position__anonymous_163);
					attack_names.reject(_position__anonymous_163);
					reason_names.reject(_position__anonymous_163);
					trait_names.reject(_position__anonymous_163);
					condition_names.reject(_position__anonymous_163);
					payment_short_type_names.reject(_position__anonymous_163);
					skill_names.reject(_position__anonymous_163);
					map_names.reject(_position__anonymous_163);
					event_names.reject(_position__anonymous_163);
					image_names.reject(_position__anonymous_163);
					tile_symbols.reject(_position__anonymous_163);
					payment_long_type_names.reject(_position__anonymous_163);
					area_names.reject(_position__anonymous_163);
					structure_names.reject(_position__anonymous_163);
					tile_names.reject(_position__anonymous_163);
					hero_stat.reject(_position__anonymous_163);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_163);
					association_names.accept(_position__anonymous_163);
					room_names.accept(_position__anonymous_163);
					activity_names.accept(_position__anonymous_163);
					siding_names.accept(_position__anonymous_163);
					item_names.accept(_position__anonymous_163);
					aspect_names.accept(_position__anonymous_163);
					affinity_names.accept(_position__anonymous_163);
					activity_type_names.accept(_position__anonymous_163);
					trail_names.accept(_position__anonymous_163);
					attack_names.accept(_position__anonymous_163);
					reason_names.accept(_position__anonymous_163);
					trait_names.accept(_position__anonymous_163);
					condition_names.accept(_position__anonymous_163);
					payment_short_type_names.accept(_position__anonymous_163);
					skill_names.accept(_position__anonymous_163);
					map_names.accept(_position__anonymous_163);
					event_names.accept(_position__anonymous_163);
					image_names.accept(_position__anonymous_163);
					tile_symbols.accept(_position__anonymous_163);
					payment_long_type_names.accept(_position__anonymous_163);
					area_names.accept(_position__anonymous_163);
					structure_names.accept(_position__anonymous_163);
					tile_names.accept(_position__anonymous_163);
					hero_stat.accept(_position__anonymous_163);
				}
			}
		}
	}
	public void parse__anonymous_13() {
		int _position__anonymous_13 = -1;
		Token.Parsed _token__anonymous_13 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_13=_position;
		_token__anonymous_13=_token;
		_token=new Tokens.Name.WeaknessNameToken();
		if(_pass==FIRST_PASS) {
			String _result = _preparsed_NAME.get(_position);
			if(_result==null) {
				_state=FAILED;
			}
			else {
				Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
				_token.add(_position,_first_pass_token);
				_position+=_result.length();
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
		}
		else if(_pass==SECOND_PASS) {
			_list_name_result=_preparsed_NAME.get(_position);
			if(_list_name_result!=null&&affinity_names.contains(_list_name_result)) {
				if(_position+_list_name_result.length()<_inputLength) {
					int _next_char = _inputArray[_position+_list_name_result.length()];
					if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,new Tokens.Name.AffinityNamesToken(_list_name_result));
					_position+=_list_name_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"affinity_names");
					_furthestPosition=_position;
				}
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"affinity_element(_anonymous_13)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_13;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_13.add(_position__anonymous_13,_token);
		}
		_token=_token__anonymous_13;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_13);
			association_names.reject(_position__anonymous_13);
			room_names.reject(_position__anonymous_13);
			activity_names.reject(_position__anonymous_13);
			siding_names.reject(_position__anonymous_13);
			item_names.reject(_position__anonymous_13);
			aspect_names.reject(_position__anonymous_13);
			affinity_names.reject(_position__anonymous_13);
			activity_type_names.reject(_position__anonymous_13);
			trail_names.reject(_position__anonymous_13);
			attack_names.reject(_position__anonymous_13);
			reason_names.reject(_position__anonymous_13);
			trait_names.reject(_position__anonymous_13);
			condition_names.reject(_position__anonymous_13);
			payment_short_type_names.reject(_position__anonymous_13);
			skill_names.reject(_position__anonymous_13);
			map_names.reject(_position__anonymous_13);
			event_names.reject(_position__anonymous_13);
			image_names.reject(_position__anonymous_13);
			tile_symbols.reject(_position__anonymous_13);
			payment_long_type_names.reject(_position__anonymous_13);
			area_names.reject(_position__anonymous_13);
			structure_names.reject(_position__anonymous_13);
			tile_names.reject(_position__anonymous_13);
			hero_stat.reject(_position__anonymous_13);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_13);
			association_names.accept(_position__anonymous_13);
			room_names.accept(_position__anonymous_13);
			activity_names.accept(_position__anonymous_13);
			siding_names.accept(_position__anonymous_13);
			item_names.accept(_position__anonymous_13);
			aspect_names.accept(_position__anonymous_13);
			affinity_names.accept(_position__anonymous_13);
			activity_type_names.accept(_position__anonymous_13);
			trail_names.accept(_position__anonymous_13);
			attack_names.accept(_position__anonymous_13);
			reason_names.accept(_position__anonymous_13);
			trait_names.accept(_position__anonymous_13);
			condition_names.accept(_position__anonymous_13);
			payment_short_type_names.accept(_position__anonymous_13);
			skill_names.accept(_position__anonymous_13);
			map_names.accept(_position__anonymous_13);
			event_names.accept(_position__anonymous_13);
			image_names.accept(_position__anonymous_13);
			tile_symbols.accept(_position__anonymous_13);
			payment_long_type_names.accept(_position__anonymous_13);
			area_names.accept(_position__anonymous_13);
			structure_names.accept(_position__anonymous_13);
			tile_names.accept(_position__anonymous_13);
			hero_stat.accept(_position__anonymous_13);
		}
	}
	public void parse__anonymous_164() {
		int _position__anonymous_164 = -1;
		Token.Parsed _token__anonymous_164 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_164=_position;
		_token__anonymous_164=_token;
		_token=new Tokens.Name.ElseStatementToken();
		int _state_182 = _state;
		while(_position<_inputLength) {
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				break;
			}
		}
		if(_state_182==SUCCESS&&_state==FAILED) {
			_state=SUCCESS;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"if_statement(_anonymous_164)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_164;
		}
		else {
			if(_position+4-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='e') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='l') {
					_state=FAILED;
				}
				if(_inputArray[_position+2]!='s') {
					_state=FAILED;
				}
				if(_inputArray[_position+3]!='e') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_117.SYNTAX);
				_position=_position+4;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain else");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"if_statement(_anonymous_164)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_164;
			}
			else {
				int _state_183 = _state;
				while(_position<_inputLength) {
					if(_position+1-1 >=_inputLength) {
						_state=FAILED;
					}
					else {
						if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
						_position=_position+1;
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
					else if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
							_furthestPosition=_position;
						}
					}
					if(_state==FAILED) {
						break;
					}
				}
				if(_state_183==SUCCESS&&_state==FAILED) {
					_state=SUCCESS;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"if_statement(_anonymous_164)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_164;
				}
				else {
					parse__anonymous_165();
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"if_statement(_anonymous_164)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_164;
					}
					else {
					}
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_164.add(_position__anonymous_164,_token);
		}
		_token=_token__anonymous_164;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_164);
			association_names.reject(_position__anonymous_164);
			room_names.reject(_position__anonymous_164);
			activity_names.reject(_position__anonymous_164);
			siding_names.reject(_position__anonymous_164);
			item_names.reject(_position__anonymous_164);
			aspect_names.reject(_position__anonymous_164);
			affinity_names.reject(_position__anonymous_164);
			activity_type_names.reject(_position__anonymous_164);
			trail_names.reject(_position__anonymous_164);
			attack_names.reject(_position__anonymous_164);
			reason_names.reject(_position__anonymous_164);
			trait_names.reject(_position__anonymous_164);
			condition_names.reject(_position__anonymous_164);
			payment_short_type_names.reject(_position__anonymous_164);
			skill_names.reject(_position__anonymous_164);
			map_names.reject(_position__anonymous_164);
			event_names.reject(_position__anonymous_164);
			image_names.reject(_position__anonymous_164);
			tile_symbols.reject(_position__anonymous_164);
			payment_long_type_names.reject(_position__anonymous_164);
			area_names.reject(_position__anonymous_164);
			structure_names.reject(_position__anonymous_164);
			tile_names.reject(_position__anonymous_164);
			hero_stat.reject(_position__anonymous_164);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_164);
			association_names.accept(_position__anonymous_164);
			room_names.accept(_position__anonymous_164);
			activity_names.accept(_position__anonymous_164);
			siding_names.accept(_position__anonymous_164);
			item_names.accept(_position__anonymous_164);
			aspect_names.accept(_position__anonymous_164);
			affinity_names.accept(_position__anonymous_164);
			activity_type_names.accept(_position__anonymous_164);
			trail_names.accept(_position__anonymous_164);
			attack_names.accept(_position__anonymous_164);
			reason_names.accept(_position__anonymous_164);
			trait_names.accept(_position__anonymous_164);
			condition_names.accept(_position__anonymous_164);
			payment_short_type_names.accept(_position__anonymous_164);
			skill_names.accept(_position__anonymous_164);
			map_names.accept(_position__anonymous_164);
			event_names.accept(_position__anonymous_164);
			image_names.accept(_position__anonymous_164);
			tile_symbols.accept(_position__anonymous_164);
			payment_long_type_names.accept(_position__anonymous_164);
			area_names.accept(_position__anonymous_164);
			structure_names.accept(_position__anonymous_164);
			tile_names.accept(_position__anonymous_164);
			hero_stat.accept(_position__anonymous_164);
		}
	}
	public void parse__anonymous_12() {
		int _position__anonymous_12 = -1;
		Token.Parsed _token__anonymous_12 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_12=_position;
		_token__anonymous_12=_token;
		_token=new Tokens.Name.StrengthNameToken();
		if(_pass==FIRST_PASS) {
			String _result = _preparsed_NAME.get(_position);
			if(_result==null) {
				_state=FAILED;
			}
			else {
				Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
				_token.add(_position,_first_pass_token);
				_position+=_result.length();
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
		}
		else if(_pass==SECOND_PASS) {
			_list_name_result=_preparsed_NAME.get(_position);
			if(_list_name_result!=null&&affinity_names.contains(_list_name_result)) {
				if(_position+_list_name_result.length()<_inputLength) {
					int _next_char = _inputArray[_position+_list_name_result.length()];
					if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,new Tokens.Name.AffinityNamesToken(_list_name_result));
					_position+=_list_name_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else {
				_state=FAILED;
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"affinity_names");
					_furthestPosition=_position;
				}
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"affinity_element(_anonymous_12)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_12;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_12.add(_position__anonymous_12,_token);
		}
		_token=_token__anonymous_12;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_12);
			association_names.reject(_position__anonymous_12);
			room_names.reject(_position__anonymous_12);
			activity_names.reject(_position__anonymous_12);
			siding_names.reject(_position__anonymous_12);
			item_names.reject(_position__anonymous_12);
			aspect_names.reject(_position__anonymous_12);
			affinity_names.reject(_position__anonymous_12);
			activity_type_names.reject(_position__anonymous_12);
			trail_names.reject(_position__anonymous_12);
			attack_names.reject(_position__anonymous_12);
			reason_names.reject(_position__anonymous_12);
			trait_names.reject(_position__anonymous_12);
			condition_names.reject(_position__anonymous_12);
			payment_short_type_names.reject(_position__anonymous_12);
			skill_names.reject(_position__anonymous_12);
			map_names.reject(_position__anonymous_12);
			event_names.reject(_position__anonymous_12);
			image_names.reject(_position__anonymous_12);
			tile_symbols.reject(_position__anonymous_12);
			payment_long_type_names.reject(_position__anonymous_12);
			area_names.reject(_position__anonymous_12);
			structure_names.reject(_position__anonymous_12);
			tile_names.reject(_position__anonymous_12);
			hero_stat.reject(_position__anonymous_12);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_12);
			association_names.accept(_position__anonymous_12);
			room_names.accept(_position__anonymous_12);
			activity_names.accept(_position__anonymous_12);
			siding_names.accept(_position__anonymous_12);
			item_names.accept(_position__anonymous_12);
			aspect_names.accept(_position__anonymous_12);
			affinity_names.accept(_position__anonymous_12);
			activity_type_names.accept(_position__anonymous_12);
			trail_names.accept(_position__anonymous_12);
			attack_names.accept(_position__anonymous_12);
			reason_names.accept(_position__anonymous_12);
			trait_names.accept(_position__anonymous_12);
			condition_names.accept(_position__anonymous_12);
			payment_short_type_names.accept(_position__anonymous_12);
			skill_names.accept(_position__anonymous_12);
			map_names.accept(_position__anonymous_12);
			event_names.accept(_position__anonymous_12);
			image_names.accept(_position__anonymous_12);
			tile_symbols.accept(_position__anonymous_12);
			payment_long_type_names.accept(_position__anonymous_12);
			area_names.accept(_position__anonymous_12);
			structure_names.accept(_position__anonymous_12);
			tile_names.accept(_position__anonymous_12);
			hero_stat.accept(_position__anonymous_12);
		}
	}
	public void parse__anonymous_165() {
		int _position__anonymous_165 = -1;
		Token.Parsed _token__anonymous_165 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_165=_position;
		_token__anonymous_165=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse_std_body();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"if_statement(_anonymous_165)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_165;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_165.addAll(_token);
			_token__anonymous_165.setValue(_token.getValue());
		}
		_token=_token__anonymous_165;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_165);
			association_names.reject(_position__anonymous_165);
			room_names.reject(_position__anonymous_165);
			activity_names.reject(_position__anonymous_165);
			siding_names.reject(_position__anonymous_165);
			item_names.reject(_position__anonymous_165);
			aspect_names.reject(_position__anonymous_165);
			affinity_names.reject(_position__anonymous_165);
			activity_type_names.reject(_position__anonymous_165);
			trail_names.reject(_position__anonymous_165);
			attack_names.reject(_position__anonymous_165);
			reason_names.reject(_position__anonymous_165);
			trait_names.reject(_position__anonymous_165);
			condition_names.reject(_position__anonymous_165);
			payment_short_type_names.reject(_position__anonymous_165);
			skill_names.reject(_position__anonymous_165);
			map_names.reject(_position__anonymous_165);
			event_names.reject(_position__anonymous_165);
			image_names.reject(_position__anonymous_165);
			tile_symbols.reject(_position__anonymous_165);
			payment_long_type_names.reject(_position__anonymous_165);
			area_names.reject(_position__anonymous_165);
			structure_names.reject(_position__anonymous_165);
			tile_names.reject(_position__anonymous_165);
			hero_stat.reject(_position__anonymous_165);
			_state=SUCCESS;
			_position__anonymous_165=_position;
			_token__anonymous_165=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			if(_position+2-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='i') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='f') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_89.SYNTAX);
				_position=_position+2;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain if");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"if_statement(_anonymous_165)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_165;
			}
			else {
				parse_boolean_statement();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"if_statement(_anonymous_165)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_165;
				}
				else {
					int _state_184 = _state;
					while(_position<_inputLength) {
						if(_position+1-1 >=_inputLength) {
							_state=FAILED;
						}
						else {
							if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
								_state=FAILED;
							}
						}
						if(_state==SUCCESS) {
							_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
							_position=_position+1;
							while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
								++_position;
							}
						}
						else if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
								_furthestPosition=_position;
							}
						}
						if(_state==FAILED) {
							break;
						}
					}
					if(_state_184==SUCCESS&&_state==FAILED) {
						_state=SUCCESS;
					}
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"if_statement(_anonymous_165)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_165;
					}
					else {
						parse_std_body();
						if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"if_statement(_anonymous_165)");
								_furthestPosition=_position;
							}
							_position=_position__anonymous_165;
						}
						else {
						}
					}
				}
			}
			if(_state==SUCCESS) {
				_token__anonymous_165.addAll(_token);
				_token__anonymous_165.setValue(_token.getValue());
			}
			_token=_token__anonymous_165;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_165);
				association_names.reject(_position__anonymous_165);
				room_names.reject(_position__anonymous_165);
				activity_names.reject(_position__anonymous_165);
				siding_names.reject(_position__anonymous_165);
				item_names.reject(_position__anonymous_165);
				aspect_names.reject(_position__anonymous_165);
				affinity_names.reject(_position__anonymous_165);
				activity_type_names.reject(_position__anonymous_165);
				trail_names.reject(_position__anonymous_165);
				attack_names.reject(_position__anonymous_165);
				reason_names.reject(_position__anonymous_165);
				trait_names.reject(_position__anonymous_165);
				condition_names.reject(_position__anonymous_165);
				payment_short_type_names.reject(_position__anonymous_165);
				skill_names.reject(_position__anonymous_165);
				map_names.reject(_position__anonymous_165);
				event_names.reject(_position__anonymous_165);
				image_names.reject(_position__anonymous_165);
				tile_symbols.reject(_position__anonymous_165);
				payment_long_type_names.reject(_position__anonymous_165);
				area_names.reject(_position__anonymous_165);
				structure_names.reject(_position__anonymous_165);
				tile_names.reject(_position__anonymous_165);
				hero_stat.reject(_position__anonymous_165);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_165);
				association_names.accept(_position__anonymous_165);
				room_names.accept(_position__anonymous_165);
				activity_names.accept(_position__anonymous_165);
				siding_names.accept(_position__anonymous_165);
				item_names.accept(_position__anonymous_165);
				aspect_names.accept(_position__anonymous_165);
				affinity_names.accept(_position__anonymous_165);
				activity_type_names.accept(_position__anonymous_165);
				trail_names.accept(_position__anonymous_165);
				attack_names.accept(_position__anonymous_165);
				reason_names.accept(_position__anonymous_165);
				trait_names.accept(_position__anonymous_165);
				condition_names.accept(_position__anonymous_165);
				payment_short_type_names.accept(_position__anonymous_165);
				skill_names.accept(_position__anonymous_165);
				map_names.accept(_position__anonymous_165);
				event_names.accept(_position__anonymous_165);
				image_names.accept(_position__anonymous_165);
				tile_symbols.accept(_position__anonymous_165);
				payment_long_type_names.accept(_position__anonymous_165);
				area_names.accept(_position__anonymous_165);
				structure_names.accept(_position__anonymous_165);
				tile_names.accept(_position__anonymous_165);
				hero_stat.accept(_position__anonymous_165);
			}
		}
	}
	public void parse__anonymous_15() {
		int _position__anonymous_15 = -1;
		Token.Parsed _token__anonymous_15 = null;
		int _position_conditional_chance = -1;
		Token.Parsed _token_conditional_chance = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_15=_position;
		_token__anonymous_15=_token;
		_token=new Tokens.Name.ToLoseToken();
		if(_position+4-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='l') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='o') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='s') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='s') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_18.SYNTAX);
			_position=_position+4;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain loss");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"condition_element(_anonymous_15)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_15;
		}
		else {
			_token_conditional_chance=_token;
			_token=new Tokens.Name.ChancePairToken();
			_position_conditional_chance=_position;
			parse_conditional_chance();
			if(_state==SUCCESS) {
				_token_conditional_chance.add(_position_conditional_chance,_token);
			}
			_token=_token_conditional_chance;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"condition_element(_anonymous_15)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_15;
			}
			else {
				int _state_34 = _state;
				while(_position<_inputLength) {
					parse__anonymous_16();
					if(_state==FAILED) {
						break;
					}
				}
				if(_state_34==SUCCESS&&_state==FAILED) {
					_state=SUCCESS;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"condition_element(_anonymous_15)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_15;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_15.add(_position__anonymous_15,_token);
		}
		_token=_token__anonymous_15;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_15);
			association_names.reject(_position__anonymous_15);
			room_names.reject(_position__anonymous_15);
			activity_names.reject(_position__anonymous_15);
			siding_names.reject(_position__anonymous_15);
			item_names.reject(_position__anonymous_15);
			aspect_names.reject(_position__anonymous_15);
			affinity_names.reject(_position__anonymous_15);
			activity_type_names.reject(_position__anonymous_15);
			trail_names.reject(_position__anonymous_15);
			attack_names.reject(_position__anonymous_15);
			reason_names.reject(_position__anonymous_15);
			trait_names.reject(_position__anonymous_15);
			condition_names.reject(_position__anonymous_15);
			payment_short_type_names.reject(_position__anonymous_15);
			skill_names.reject(_position__anonymous_15);
			map_names.reject(_position__anonymous_15);
			event_names.reject(_position__anonymous_15);
			image_names.reject(_position__anonymous_15);
			tile_symbols.reject(_position__anonymous_15);
			payment_long_type_names.reject(_position__anonymous_15);
			area_names.reject(_position__anonymous_15);
			structure_names.reject(_position__anonymous_15);
			tile_names.reject(_position__anonymous_15);
			hero_stat.reject(_position__anonymous_15);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_15);
			association_names.accept(_position__anonymous_15);
			room_names.accept(_position__anonymous_15);
			activity_names.accept(_position__anonymous_15);
			siding_names.accept(_position__anonymous_15);
			item_names.accept(_position__anonymous_15);
			aspect_names.accept(_position__anonymous_15);
			affinity_names.accept(_position__anonymous_15);
			activity_type_names.accept(_position__anonymous_15);
			trail_names.accept(_position__anonymous_15);
			attack_names.accept(_position__anonymous_15);
			reason_names.accept(_position__anonymous_15);
			trait_names.accept(_position__anonymous_15);
			condition_names.accept(_position__anonymous_15);
			payment_short_type_names.accept(_position__anonymous_15);
			skill_names.accept(_position__anonymous_15);
			map_names.accept(_position__anonymous_15);
			event_names.accept(_position__anonymous_15);
			image_names.accept(_position__anonymous_15);
			tile_symbols.accept(_position__anonymous_15);
			payment_long_type_names.accept(_position__anonymous_15);
			area_names.accept(_position__anonymous_15);
			structure_names.accept(_position__anonymous_15);
			tile_names.accept(_position__anonymous_15);
			hero_stat.accept(_position__anonymous_15);
		}
	}
	public void parse__anonymous_14() {
		int _position__anonymous_14 = -1;
		Token.Parsed _token__anonymous_14 = null;
		int _position_comments = -1;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_14=_position;
		_token__anonymous_14=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		_position_comments=_position;
		if(_state==SUCCESS&&!_recursion_protection_comments_7.contains(_position)) {
			_recursion_protection_comments_7.add(_position);
			parse_comments();
			_recursion_protection_comments_7.remove(_position_comments);
		}
		else {
			_state=FAILED;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_condition(_anonymous_14)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_14;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_14.addAll(_token);
			_token__anonymous_14.setValue(_token.getValue());
		}
		_token=_token__anonymous_14;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_14);
			association_names.reject(_position__anonymous_14);
			room_names.reject(_position__anonymous_14);
			activity_names.reject(_position__anonymous_14);
			siding_names.reject(_position__anonymous_14);
			item_names.reject(_position__anonymous_14);
			aspect_names.reject(_position__anonymous_14);
			affinity_names.reject(_position__anonymous_14);
			activity_type_names.reject(_position__anonymous_14);
			trail_names.reject(_position__anonymous_14);
			attack_names.reject(_position__anonymous_14);
			reason_names.reject(_position__anonymous_14);
			trait_names.reject(_position__anonymous_14);
			condition_names.reject(_position__anonymous_14);
			payment_short_type_names.reject(_position__anonymous_14);
			skill_names.reject(_position__anonymous_14);
			map_names.reject(_position__anonymous_14);
			event_names.reject(_position__anonymous_14);
			image_names.reject(_position__anonymous_14);
			tile_symbols.reject(_position__anonymous_14);
			payment_long_type_names.reject(_position__anonymous_14);
			area_names.reject(_position__anonymous_14);
			structure_names.reject(_position__anonymous_14);
			tile_names.reject(_position__anonymous_14);
			hero_stat.reject(_position__anonymous_14);
			_state=SUCCESS;
			_position__anonymous_14=_position;
			_token__anonymous_14=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			parse_condition_declaration();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_condition(_anonymous_14)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_14;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_14.addAll(_token);
				_token__anonymous_14.setValue(_token.getValue());
			}
			_token=_token__anonymous_14;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_14);
				association_names.reject(_position__anonymous_14);
				room_names.reject(_position__anonymous_14);
				activity_names.reject(_position__anonymous_14);
				siding_names.reject(_position__anonymous_14);
				item_names.reject(_position__anonymous_14);
				aspect_names.reject(_position__anonymous_14);
				affinity_names.reject(_position__anonymous_14);
				activity_type_names.reject(_position__anonymous_14);
				trail_names.reject(_position__anonymous_14);
				attack_names.reject(_position__anonymous_14);
				reason_names.reject(_position__anonymous_14);
				trait_names.reject(_position__anonymous_14);
				condition_names.reject(_position__anonymous_14);
				payment_short_type_names.reject(_position__anonymous_14);
				skill_names.reject(_position__anonymous_14);
				map_names.reject(_position__anonymous_14);
				event_names.reject(_position__anonymous_14);
				image_names.reject(_position__anonymous_14);
				tile_symbols.reject(_position__anonymous_14);
				payment_long_type_names.reject(_position__anonymous_14);
				area_names.reject(_position__anonymous_14);
				structure_names.reject(_position__anonymous_14);
				tile_names.reject(_position__anonymous_14);
				hero_stat.reject(_position__anonymous_14);
				_state=SUCCESS;
				_position__anonymous_14=_position;
				_token__anonymous_14=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				if(_position+1-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
					_position=_position+1;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
						_furthestPosition=_position;
					}
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_condition(_anonymous_14)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_14;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_14.addAll(_token);
					_token__anonymous_14.setValue(_token.getValue());
				}
				_token=_token__anonymous_14;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_14);
					association_names.reject(_position__anonymous_14);
					room_names.reject(_position__anonymous_14);
					activity_names.reject(_position__anonymous_14);
					siding_names.reject(_position__anonymous_14);
					item_names.reject(_position__anonymous_14);
					aspect_names.reject(_position__anonymous_14);
					affinity_names.reject(_position__anonymous_14);
					activity_type_names.reject(_position__anonymous_14);
					trail_names.reject(_position__anonymous_14);
					attack_names.reject(_position__anonymous_14);
					reason_names.reject(_position__anonymous_14);
					trait_names.reject(_position__anonymous_14);
					condition_names.reject(_position__anonymous_14);
					payment_short_type_names.reject(_position__anonymous_14);
					skill_names.reject(_position__anonymous_14);
					map_names.reject(_position__anonymous_14);
					event_names.reject(_position__anonymous_14);
					image_names.reject(_position__anonymous_14);
					tile_symbols.reject(_position__anonymous_14);
					payment_long_type_names.reject(_position__anonymous_14);
					area_names.reject(_position__anonymous_14);
					structure_names.reject(_position__anonymous_14);
					tile_names.reject(_position__anonymous_14);
					hero_stat.reject(_position__anonymous_14);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_14);
					association_names.accept(_position__anonymous_14);
					room_names.accept(_position__anonymous_14);
					activity_names.accept(_position__anonymous_14);
					siding_names.accept(_position__anonymous_14);
					item_names.accept(_position__anonymous_14);
					aspect_names.accept(_position__anonymous_14);
					affinity_names.accept(_position__anonymous_14);
					activity_type_names.accept(_position__anonymous_14);
					trail_names.accept(_position__anonymous_14);
					attack_names.accept(_position__anonymous_14);
					reason_names.accept(_position__anonymous_14);
					trait_names.accept(_position__anonymous_14);
					condition_names.accept(_position__anonymous_14);
					payment_short_type_names.accept(_position__anonymous_14);
					skill_names.accept(_position__anonymous_14);
					map_names.accept(_position__anonymous_14);
					event_names.accept(_position__anonymous_14);
					image_names.accept(_position__anonymous_14);
					tile_symbols.accept(_position__anonymous_14);
					payment_long_type_names.accept(_position__anonymous_14);
					area_names.accept(_position__anonymous_14);
					structure_names.accept(_position__anonymous_14);
					tile_names.accept(_position__anonymous_14);
					hero_stat.accept(_position__anonymous_14);
				}
			}
		}
	}
	public void parse__anonymous_17() {
		int _position__anonymous_17 = -1;
		Token.Parsed _token__anonymous_17 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_17=_position;
		_token__anonymous_17=_token;
		_token=new Tokens.Name.AccumulationToken();
		parse__anonymous_18();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"condition_element(_anonymous_17)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_17;
		}
		else {
			parse__anonymous_19();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"condition_element(_anonymous_17)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_17;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_17.add(_position__anonymous_17,_token);
		}
		_token=_token__anonymous_17;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_17);
			association_names.reject(_position__anonymous_17);
			room_names.reject(_position__anonymous_17);
			activity_names.reject(_position__anonymous_17);
			siding_names.reject(_position__anonymous_17);
			item_names.reject(_position__anonymous_17);
			aspect_names.reject(_position__anonymous_17);
			affinity_names.reject(_position__anonymous_17);
			activity_type_names.reject(_position__anonymous_17);
			trail_names.reject(_position__anonymous_17);
			attack_names.reject(_position__anonymous_17);
			reason_names.reject(_position__anonymous_17);
			trait_names.reject(_position__anonymous_17);
			condition_names.reject(_position__anonymous_17);
			payment_short_type_names.reject(_position__anonymous_17);
			skill_names.reject(_position__anonymous_17);
			map_names.reject(_position__anonymous_17);
			event_names.reject(_position__anonymous_17);
			image_names.reject(_position__anonymous_17);
			tile_symbols.reject(_position__anonymous_17);
			payment_long_type_names.reject(_position__anonymous_17);
			area_names.reject(_position__anonymous_17);
			structure_names.reject(_position__anonymous_17);
			tile_names.reject(_position__anonymous_17);
			hero_stat.reject(_position__anonymous_17);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_17);
			association_names.accept(_position__anonymous_17);
			room_names.accept(_position__anonymous_17);
			activity_names.accept(_position__anonymous_17);
			siding_names.accept(_position__anonymous_17);
			item_names.accept(_position__anonymous_17);
			aspect_names.accept(_position__anonymous_17);
			affinity_names.accept(_position__anonymous_17);
			activity_type_names.accept(_position__anonymous_17);
			trail_names.accept(_position__anonymous_17);
			attack_names.accept(_position__anonymous_17);
			reason_names.accept(_position__anonymous_17);
			trait_names.accept(_position__anonymous_17);
			condition_names.accept(_position__anonymous_17);
			payment_short_type_names.accept(_position__anonymous_17);
			skill_names.accept(_position__anonymous_17);
			map_names.accept(_position__anonymous_17);
			event_names.accept(_position__anonymous_17);
			image_names.accept(_position__anonymous_17);
			tile_symbols.accept(_position__anonymous_17);
			payment_long_type_names.accept(_position__anonymous_17);
			area_names.accept(_position__anonymous_17);
			structure_names.accept(_position__anonymous_17);
			tile_names.accept(_position__anonymous_17);
			hero_stat.accept(_position__anonymous_17);
		}
	}
	public void parse__anonymous_160() {
		int _position__anonymous_160 = -1;
		Token.Parsed _token__anonymous_160 = null;
		int _position_INTEGER = -1;
		Token.Parsed _token_INTEGER = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_160=_position;
		_token__anonymous_160=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+2-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='t') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_116.SYNTAX);
			_position=_position+2;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain at");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"spawn_statement(_anonymous_160)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_160;
		}
		else {
			if(_pass==FIRST_PASS) {
				String _result = _preparsed_NAME.get(_position);
				if(_result==null) {
					_state=FAILED;
				}
				else {
					Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
					_token.add(_position,_first_pass_token);
					_position+=_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else if(_pass==SECOND_PASS) {
				_list_name_result=_preparsed_NAME.get(_position);
				if(_list_name_result!=null&&map_names.contains(_list_name_result)) {
					if(_position+_list_name_result.length()<_inputLength) {
						int _next_char = _inputArray[_position+_list_name_result.length()];
						if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,new Tokens.Name.MapNamesToken(_list_name_result));
						_position+=_list_name_result.length();
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
				}
				else {
					_state=FAILED;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"map_names");
						_furthestPosition=_position;
					}
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"spawn_statement(_anonymous_160)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_160;
			}
			else {
				_token_INTEGER=_token;
				_token=new Tokens.Name.LowerBoundXToken();
				_position_INTEGER=_position;
				parse_INTEGER();
				if(_state==SUCCESS) {
					_token_INTEGER.add(_position_INTEGER,_token);
				}
				_token=_token_INTEGER;
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"spawn_statement(_anonymous_160)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_160;
				}
				else {
					int _state_178 = _state;
					parse__anonymous_161();
					if(_state_178==SUCCESS&&_state==FAILED) {
						_state=SUCCESS;
					}
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"spawn_statement(_anonymous_160)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_160;
					}
					else {
						if(_position+1-1 >=_inputLength) {
							_state=FAILED;
						}
						else {
							if(_inputArray[_position+0]!=',') {
								_state=FAILED;
							}
						}
						if(_state==SUCCESS) {
							_token.add(_position,Tokens.Syntax.syntax_23.SYNTAX);
							_position=_position+1;
							while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
								++_position;
							}
						}
						else if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ,");
								_furthestPosition=_position;
							}
						}
						if(_state==FAILED) {
							if(_position>=_furthestPosition) {
								_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"spawn_statement(_anonymous_160)");
								_furthestPosition=_position;
							}
							_position=_position__anonymous_160;
						}
						else {
							_token_INTEGER=_token;
							_token=new Tokens.Name.LowerBoundYToken();
							_position_INTEGER=_position;
							parse_INTEGER();
							if(_state==SUCCESS) {
								_token_INTEGER.add(_position_INTEGER,_token);
							}
							_token=_token_INTEGER;
							if(_state==FAILED) {
								if(_position>=_furthestPosition) {
									_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"spawn_statement(_anonymous_160)");
									_furthestPosition=_position;
								}
								_position=_position__anonymous_160;
							}
							else {
								int _state_179 = _state;
								parse__anonymous_162();
								if(_state_179==SUCCESS&&_state==FAILED) {
									_state=SUCCESS;
								}
								if(_state==FAILED) {
									if(_position>=_furthestPosition) {
										_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"spawn_statement(_anonymous_160)");
										_furthestPosition=_position;
									}
									_position=_position__anonymous_160;
								}
								else {
								}
							}
						}
					}
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_160.addAll(_token);
			_token__anonymous_160.setValue(_token.getValue());
		}
		_token=_token__anonymous_160;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_160);
			association_names.reject(_position__anonymous_160);
			room_names.reject(_position__anonymous_160);
			activity_names.reject(_position__anonymous_160);
			siding_names.reject(_position__anonymous_160);
			item_names.reject(_position__anonymous_160);
			aspect_names.reject(_position__anonymous_160);
			affinity_names.reject(_position__anonymous_160);
			activity_type_names.reject(_position__anonymous_160);
			trail_names.reject(_position__anonymous_160);
			attack_names.reject(_position__anonymous_160);
			reason_names.reject(_position__anonymous_160);
			trait_names.reject(_position__anonymous_160);
			condition_names.reject(_position__anonymous_160);
			payment_short_type_names.reject(_position__anonymous_160);
			skill_names.reject(_position__anonymous_160);
			map_names.reject(_position__anonymous_160);
			event_names.reject(_position__anonymous_160);
			image_names.reject(_position__anonymous_160);
			tile_symbols.reject(_position__anonymous_160);
			payment_long_type_names.reject(_position__anonymous_160);
			area_names.reject(_position__anonymous_160);
			structure_names.reject(_position__anonymous_160);
			tile_names.reject(_position__anonymous_160);
			hero_stat.reject(_position__anonymous_160);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_160);
			association_names.accept(_position__anonymous_160);
			room_names.accept(_position__anonymous_160);
			activity_names.accept(_position__anonymous_160);
			siding_names.accept(_position__anonymous_160);
			item_names.accept(_position__anonymous_160);
			aspect_names.accept(_position__anonymous_160);
			affinity_names.accept(_position__anonymous_160);
			activity_type_names.accept(_position__anonymous_160);
			trail_names.accept(_position__anonymous_160);
			attack_names.accept(_position__anonymous_160);
			reason_names.accept(_position__anonymous_160);
			trait_names.accept(_position__anonymous_160);
			condition_names.accept(_position__anonymous_160);
			payment_short_type_names.accept(_position__anonymous_160);
			skill_names.accept(_position__anonymous_160);
			map_names.accept(_position__anonymous_160);
			event_names.accept(_position__anonymous_160);
			image_names.accept(_position__anonymous_160);
			tile_symbols.accept(_position__anonymous_160);
			payment_long_type_names.accept(_position__anonymous_160);
			area_names.accept(_position__anonymous_160);
			structure_names.accept(_position__anonymous_160);
			tile_names.accept(_position__anonymous_160);
			hero_stat.accept(_position__anonymous_160);
		}
	}
	public void parse__anonymous_16() {
		int _position__anonymous_16 = -1;
		Token.Parsed _token__anonymous_16 = null;
		int _position_conditional_chance = -1;
		Token.Parsed _token_conditional_chance = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_16=_position;
		_token__anonymous_16=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"condition_element(_anonymous_16)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_16;
		}
		else {
			_token_conditional_chance=_token;
			_token=new Tokens.Name.ChancePairToken();
			_position_conditional_chance=_position;
			parse_conditional_chance();
			if(_state==SUCCESS) {
				_token_conditional_chance.add(_position_conditional_chance,_token);
			}
			_token=_token_conditional_chance;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"condition_element(_anonymous_16)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_16;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_16.addAll(_token);
			_token__anonymous_16.setValue(_token.getValue());
		}
		_token=_token__anonymous_16;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_16);
			association_names.reject(_position__anonymous_16);
			room_names.reject(_position__anonymous_16);
			activity_names.reject(_position__anonymous_16);
			siding_names.reject(_position__anonymous_16);
			item_names.reject(_position__anonymous_16);
			aspect_names.reject(_position__anonymous_16);
			affinity_names.reject(_position__anonymous_16);
			activity_type_names.reject(_position__anonymous_16);
			trail_names.reject(_position__anonymous_16);
			attack_names.reject(_position__anonymous_16);
			reason_names.reject(_position__anonymous_16);
			trait_names.reject(_position__anonymous_16);
			condition_names.reject(_position__anonymous_16);
			payment_short_type_names.reject(_position__anonymous_16);
			skill_names.reject(_position__anonymous_16);
			map_names.reject(_position__anonymous_16);
			event_names.reject(_position__anonymous_16);
			image_names.reject(_position__anonymous_16);
			tile_symbols.reject(_position__anonymous_16);
			payment_long_type_names.reject(_position__anonymous_16);
			area_names.reject(_position__anonymous_16);
			structure_names.reject(_position__anonymous_16);
			tile_names.reject(_position__anonymous_16);
			hero_stat.reject(_position__anonymous_16);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_16);
			association_names.accept(_position__anonymous_16);
			room_names.accept(_position__anonymous_16);
			activity_names.accept(_position__anonymous_16);
			siding_names.accept(_position__anonymous_16);
			item_names.accept(_position__anonymous_16);
			aspect_names.accept(_position__anonymous_16);
			affinity_names.accept(_position__anonymous_16);
			activity_type_names.accept(_position__anonymous_16);
			trail_names.accept(_position__anonymous_16);
			attack_names.accept(_position__anonymous_16);
			reason_names.accept(_position__anonymous_16);
			trait_names.accept(_position__anonymous_16);
			condition_names.accept(_position__anonymous_16);
			payment_short_type_names.accept(_position__anonymous_16);
			skill_names.accept(_position__anonymous_16);
			map_names.accept(_position__anonymous_16);
			event_names.accept(_position__anonymous_16);
			image_names.accept(_position__anonymous_16);
			tile_symbols.accept(_position__anonymous_16);
			payment_long_type_names.accept(_position__anonymous_16);
			area_names.accept(_position__anonymous_16);
			structure_names.accept(_position__anonymous_16);
			tile_names.accept(_position__anonymous_16);
			hero_stat.accept(_position__anonymous_16);
		}
	}
	public void parse__anonymous_161() {
		int _position__anonymous_161 = -1;
		Token.Parsed _token__anonymous_161 = null;
		int _position_INTEGER = -1;
		Token.Parsed _token_INTEGER = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_161=_position;
		_token__anonymous_161=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='-') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_15.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain -");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"spawn_statement(_anonymous_161)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_161;
		}
		else {
			_token_INTEGER=_token;
			_token=new Tokens.Name.UpperBoundXToken();
			_position_INTEGER=_position;
			parse_INTEGER();
			if(_state==SUCCESS) {
				_token_INTEGER.add(_position_INTEGER,_token);
			}
			_token=_token_INTEGER;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"spawn_statement(_anonymous_161)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_161;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_161.addAll(_token);
			_token__anonymous_161.setValue(_token.getValue());
		}
		_token=_token__anonymous_161;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_161);
			association_names.reject(_position__anonymous_161);
			room_names.reject(_position__anonymous_161);
			activity_names.reject(_position__anonymous_161);
			siding_names.reject(_position__anonymous_161);
			item_names.reject(_position__anonymous_161);
			aspect_names.reject(_position__anonymous_161);
			affinity_names.reject(_position__anonymous_161);
			activity_type_names.reject(_position__anonymous_161);
			trail_names.reject(_position__anonymous_161);
			attack_names.reject(_position__anonymous_161);
			reason_names.reject(_position__anonymous_161);
			trait_names.reject(_position__anonymous_161);
			condition_names.reject(_position__anonymous_161);
			payment_short_type_names.reject(_position__anonymous_161);
			skill_names.reject(_position__anonymous_161);
			map_names.reject(_position__anonymous_161);
			event_names.reject(_position__anonymous_161);
			image_names.reject(_position__anonymous_161);
			tile_symbols.reject(_position__anonymous_161);
			payment_long_type_names.reject(_position__anonymous_161);
			area_names.reject(_position__anonymous_161);
			structure_names.reject(_position__anonymous_161);
			tile_names.reject(_position__anonymous_161);
			hero_stat.reject(_position__anonymous_161);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_161);
			association_names.accept(_position__anonymous_161);
			room_names.accept(_position__anonymous_161);
			activity_names.accept(_position__anonymous_161);
			siding_names.accept(_position__anonymous_161);
			item_names.accept(_position__anonymous_161);
			aspect_names.accept(_position__anonymous_161);
			affinity_names.accept(_position__anonymous_161);
			activity_type_names.accept(_position__anonymous_161);
			trail_names.accept(_position__anonymous_161);
			attack_names.accept(_position__anonymous_161);
			reason_names.accept(_position__anonymous_161);
			trait_names.accept(_position__anonymous_161);
			condition_names.accept(_position__anonymous_161);
			payment_short_type_names.accept(_position__anonymous_161);
			skill_names.accept(_position__anonymous_161);
			map_names.accept(_position__anonymous_161);
			event_names.accept(_position__anonymous_161);
			image_names.accept(_position__anonymous_161);
			tile_symbols.accept(_position__anonymous_161);
			payment_long_type_names.accept(_position__anonymous_161);
			area_names.accept(_position__anonymous_161);
			structure_names.accept(_position__anonymous_161);
			tile_names.accept(_position__anonymous_161);
			hero_stat.accept(_position__anonymous_161);
		}
	}
	public void parse__anonymous_159() {
		int _position__anonymous_159 = -1;
		Token.Parsed _token__anonymous_159 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_159=_position;
		_token__anonymous_159=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+2-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='-') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='>') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_57.SYNTAX);
			_position=_position+2;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ->");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"spawn_statement(_anonymous_159)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_159;
		}
		else {
			if(_pass==FIRST_PASS) {
				String _result = _preparsed_NAME.get(_position);
				if(_result==null) {
					_state=FAILED;
				}
				else {
					Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
					_token.add(_position,_first_pass_token);
					_position+=_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else if(_pass==SECOND_PASS) {
				_list_name_result=_preparsed_NAME.get(_position);
				if(_list_name_result!=null&&tile_names.contains(_list_name_result)) {
					if(_position+_list_name_result.length()<_inputLength) {
						int _next_char = _inputArray[_position+_list_name_result.length()];
						if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,new Tokens.Name.TileNamesToken(_list_name_result));
						_position+=_list_name_result.length();
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
				}
				else {
					_state=FAILED;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"tile_names");
						_furthestPosition=_position;
					}
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"spawn_statement(_anonymous_159)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_159;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_159.addAll(_token);
			_token__anonymous_159.setValue(_token.getValue());
		}
		_token=_token__anonymous_159;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_159);
			association_names.reject(_position__anonymous_159);
			room_names.reject(_position__anonymous_159);
			activity_names.reject(_position__anonymous_159);
			siding_names.reject(_position__anonymous_159);
			item_names.reject(_position__anonymous_159);
			aspect_names.reject(_position__anonymous_159);
			affinity_names.reject(_position__anonymous_159);
			activity_type_names.reject(_position__anonymous_159);
			trail_names.reject(_position__anonymous_159);
			attack_names.reject(_position__anonymous_159);
			reason_names.reject(_position__anonymous_159);
			trait_names.reject(_position__anonymous_159);
			condition_names.reject(_position__anonymous_159);
			payment_short_type_names.reject(_position__anonymous_159);
			skill_names.reject(_position__anonymous_159);
			map_names.reject(_position__anonymous_159);
			event_names.reject(_position__anonymous_159);
			image_names.reject(_position__anonymous_159);
			tile_symbols.reject(_position__anonymous_159);
			payment_long_type_names.reject(_position__anonymous_159);
			area_names.reject(_position__anonymous_159);
			structure_names.reject(_position__anonymous_159);
			tile_names.reject(_position__anonymous_159);
			hero_stat.reject(_position__anonymous_159);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_159);
			association_names.accept(_position__anonymous_159);
			room_names.accept(_position__anonymous_159);
			activity_names.accept(_position__anonymous_159);
			siding_names.accept(_position__anonymous_159);
			item_names.accept(_position__anonymous_159);
			aspect_names.accept(_position__anonymous_159);
			affinity_names.accept(_position__anonymous_159);
			activity_type_names.accept(_position__anonymous_159);
			trail_names.accept(_position__anonymous_159);
			attack_names.accept(_position__anonymous_159);
			reason_names.accept(_position__anonymous_159);
			trait_names.accept(_position__anonymous_159);
			condition_names.accept(_position__anonymous_159);
			payment_short_type_names.accept(_position__anonymous_159);
			skill_names.accept(_position__anonymous_159);
			map_names.accept(_position__anonymous_159);
			event_names.accept(_position__anonymous_159);
			image_names.accept(_position__anonymous_159);
			tile_symbols.accept(_position__anonymous_159);
			payment_long_type_names.accept(_position__anonymous_159);
			area_names.accept(_position__anonymous_159);
			structure_names.accept(_position__anonymous_159);
			tile_names.accept(_position__anonymous_159);
			hero_stat.accept(_position__anonymous_159);
		}
	}
	public void parse__anonymous_155() {
		int _position__anonymous_155 = -1;
		Token.Parsed _token__anonymous_155 = null;
		int _position_statement = -1;
		Token.Parsed _token_statement = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_155=_position;
		_token__anonymous_155=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse_method_arguments();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_statement(_anonymous_155)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_155;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_155.addAll(_token);
			_token__anonymous_155.setValue(_token.getValue());
		}
		_token=_token__anonymous_155;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_155);
			association_names.reject(_position__anonymous_155);
			room_names.reject(_position__anonymous_155);
			activity_names.reject(_position__anonymous_155);
			siding_names.reject(_position__anonymous_155);
			item_names.reject(_position__anonymous_155);
			aspect_names.reject(_position__anonymous_155);
			affinity_names.reject(_position__anonymous_155);
			activity_type_names.reject(_position__anonymous_155);
			trail_names.reject(_position__anonymous_155);
			attack_names.reject(_position__anonymous_155);
			reason_names.reject(_position__anonymous_155);
			trait_names.reject(_position__anonymous_155);
			condition_names.reject(_position__anonymous_155);
			payment_short_type_names.reject(_position__anonymous_155);
			skill_names.reject(_position__anonymous_155);
			map_names.reject(_position__anonymous_155);
			event_names.reject(_position__anonymous_155);
			image_names.reject(_position__anonymous_155);
			tile_symbols.reject(_position__anonymous_155);
			payment_long_type_names.reject(_position__anonymous_155);
			area_names.reject(_position__anonymous_155);
			structure_names.reject(_position__anonymous_155);
			tile_names.reject(_position__anonymous_155);
			hero_stat.reject(_position__anonymous_155);
			_state=SUCCESS;
			_position__anonymous_155=_position;
			_token__anonymous_155=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			_token_statement=_token;
			_token=new Tokens.Name.MethodArgumentsToken();
			_position_statement=_position;
			if(_state==SUCCESS&&!_recursion_protection_statement_36.contains(_position)) {
				_recursion_protection_statement_36.add(_position);
				parse_statement();
				_recursion_protection_statement_36.remove(_position_statement);
			}
			else {
				_state=FAILED;
			}
			if(_state==SUCCESS) {
				_token_statement.add(_position_statement,_token);
			}
			_token=_token_statement;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"activity_statement(_anonymous_155)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_155;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_155.addAll(_token);
				_token__anonymous_155.setValue(_token.getValue());
			}
			_token=_token__anonymous_155;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_155);
				association_names.reject(_position__anonymous_155);
				room_names.reject(_position__anonymous_155);
				activity_names.reject(_position__anonymous_155);
				siding_names.reject(_position__anonymous_155);
				item_names.reject(_position__anonymous_155);
				aspect_names.reject(_position__anonymous_155);
				affinity_names.reject(_position__anonymous_155);
				activity_type_names.reject(_position__anonymous_155);
				trail_names.reject(_position__anonymous_155);
				attack_names.reject(_position__anonymous_155);
				reason_names.reject(_position__anonymous_155);
				trait_names.reject(_position__anonymous_155);
				condition_names.reject(_position__anonymous_155);
				payment_short_type_names.reject(_position__anonymous_155);
				skill_names.reject(_position__anonymous_155);
				map_names.reject(_position__anonymous_155);
				event_names.reject(_position__anonymous_155);
				image_names.reject(_position__anonymous_155);
				tile_symbols.reject(_position__anonymous_155);
				payment_long_type_names.reject(_position__anonymous_155);
				area_names.reject(_position__anonymous_155);
				structure_names.reject(_position__anonymous_155);
				tile_names.reject(_position__anonymous_155);
				hero_stat.reject(_position__anonymous_155);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_155);
				association_names.accept(_position__anonymous_155);
				room_names.accept(_position__anonymous_155);
				activity_names.accept(_position__anonymous_155);
				siding_names.accept(_position__anonymous_155);
				item_names.accept(_position__anonymous_155);
				aspect_names.accept(_position__anonymous_155);
				affinity_names.accept(_position__anonymous_155);
				activity_type_names.accept(_position__anonymous_155);
				trail_names.accept(_position__anonymous_155);
				attack_names.accept(_position__anonymous_155);
				reason_names.accept(_position__anonymous_155);
				trait_names.accept(_position__anonymous_155);
				condition_names.accept(_position__anonymous_155);
				payment_short_type_names.accept(_position__anonymous_155);
				skill_names.accept(_position__anonymous_155);
				map_names.accept(_position__anonymous_155);
				event_names.accept(_position__anonymous_155);
				image_names.accept(_position__anonymous_155);
				tile_symbols.accept(_position__anonymous_155);
				payment_long_type_names.accept(_position__anonymous_155);
				area_names.accept(_position__anonymous_155);
				structure_names.accept(_position__anonymous_155);
				tile_names.accept(_position__anonymous_155);
				hero_stat.accept(_position__anonymous_155);
			}
		}
	}
	public void parse__anonymous_156() {
		int _position__anonymous_156 = -1;
		Token.Parsed _token__anonymous_156 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_156=_position;
		_token__anonymous_156=_token;
		_token=new Tokens.Name.MethodToken();
		if(_position+4-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='j') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='o') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='i') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='n') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_50.SYNTAX);
			_position=_position+4;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain join");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"association_statement(_anonymous_156)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_156;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_156.add(_position__anonymous_156,_token);
		}
		_token=_token__anonymous_156;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_156);
			association_names.reject(_position__anonymous_156);
			room_names.reject(_position__anonymous_156);
			activity_names.reject(_position__anonymous_156);
			siding_names.reject(_position__anonymous_156);
			item_names.reject(_position__anonymous_156);
			aspect_names.reject(_position__anonymous_156);
			affinity_names.reject(_position__anonymous_156);
			activity_type_names.reject(_position__anonymous_156);
			trail_names.reject(_position__anonymous_156);
			attack_names.reject(_position__anonymous_156);
			reason_names.reject(_position__anonymous_156);
			trait_names.reject(_position__anonymous_156);
			condition_names.reject(_position__anonymous_156);
			payment_short_type_names.reject(_position__anonymous_156);
			skill_names.reject(_position__anonymous_156);
			map_names.reject(_position__anonymous_156);
			event_names.reject(_position__anonymous_156);
			image_names.reject(_position__anonymous_156);
			tile_symbols.reject(_position__anonymous_156);
			payment_long_type_names.reject(_position__anonymous_156);
			area_names.reject(_position__anonymous_156);
			structure_names.reject(_position__anonymous_156);
			tile_names.reject(_position__anonymous_156);
			hero_stat.reject(_position__anonymous_156);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_156);
			association_names.accept(_position__anonymous_156);
			room_names.accept(_position__anonymous_156);
			activity_names.accept(_position__anonymous_156);
			siding_names.accept(_position__anonymous_156);
			item_names.accept(_position__anonymous_156);
			aspect_names.accept(_position__anonymous_156);
			affinity_names.accept(_position__anonymous_156);
			activity_type_names.accept(_position__anonymous_156);
			trail_names.accept(_position__anonymous_156);
			attack_names.accept(_position__anonymous_156);
			reason_names.accept(_position__anonymous_156);
			trait_names.accept(_position__anonymous_156);
			condition_names.accept(_position__anonymous_156);
			payment_short_type_names.accept(_position__anonymous_156);
			skill_names.accept(_position__anonymous_156);
			map_names.accept(_position__anonymous_156);
			event_names.accept(_position__anonymous_156);
			image_names.accept(_position__anonymous_156);
			tile_symbols.accept(_position__anonymous_156);
			payment_long_type_names.accept(_position__anonymous_156);
			area_names.accept(_position__anonymous_156);
			structure_names.accept(_position__anonymous_156);
			tile_names.accept(_position__anonymous_156);
			hero_stat.accept(_position__anonymous_156);
		}
	}
	public void parse__anonymous_157() {
		int _position__anonymous_157 = -1;
		Token.Parsed _token__anonymous_157 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_157=_position;
		_token__anonymous_157=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse__anonymous_158();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"spawn_statement(_anonymous_157)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_157;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_157.addAll(_token);
			_token__anonymous_157.setValue(_token.getValue());
		}
		_token=_token__anonymous_157;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_157);
			association_names.reject(_position__anonymous_157);
			room_names.reject(_position__anonymous_157);
			activity_names.reject(_position__anonymous_157);
			siding_names.reject(_position__anonymous_157);
			item_names.reject(_position__anonymous_157);
			aspect_names.reject(_position__anonymous_157);
			affinity_names.reject(_position__anonymous_157);
			activity_type_names.reject(_position__anonymous_157);
			trail_names.reject(_position__anonymous_157);
			attack_names.reject(_position__anonymous_157);
			reason_names.reject(_position__anonymous_157);
			trait_names.reject(_position__anonymous_157);
			condition_names.reject(_position__anonymous_157);
			payment_short_type_names.reject(_position__anonymous_157);
			skill_names.reject(_position__anonymous_157);
			map_names.reject(_position__anonymous_157);
			event_names.reject(_position__anonymous_157);
			image_names.reject(_position__anonymous_157);
			tile_symbols.reject(_position__anonymous_157);
			payment_long_type_names.reject(_position__anonymous_157);
			area_names.reject(_position__anonymous_157);
			structure_names.reject(_position__anonymous_157);
			tile_names.reject(_position__anonymous_157);
			hero_stat.reject(_position__anonymous_157);
			_state=SUCCESS;
			_position__anonymous_157=_position;
			_token__anonymous_157=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			parse__anonymous_160();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"spawn_statement(_anonymous_157)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_157;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_157.addAll(_token);
				_token__anonymous_157.setValue(_token.getValue());
			}
			_token=_token__anonymous_157;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_157);
				association_names.reject(_position__anonymous_157);
				room_names.reject(_position__anonymous_157);
				activity_names.reject(_position__anonymous_157);
				siding_names.reject(_position__anonymous_157);
				item_names.reject(_position__anonymous_157);
				aspect_names.reject(_position__anonymous_157);
				affinity_names.reject(_position__anonymous_157);
				activity_type_names.reject(_position__anonymous_157);
				trail_names.reject(_position__anonymous_157);
				attack_names.reject(_position__anonymous_157);
				reason_names.reject(_position__anonymous_157);
				trait_names.reject(_position__anonymous_157);
				condition_names.reject(_position__anonymous_157);
				payment_short_type_names.reject(_position__anonymous_157);
				skill_names.reject(_position__anonymous_157);
				map_names.reject(_position__anonymous_157);
				event_names.reject(_position__anonymous_157);
				image_names.reject(_position__anonymous_157);
				tile_symbols.reject(_position__anonymous_157);
				payment_long_type_names.reject(_position__anonymous_157);
				area_names.reject(_position__anonymous_157);
				structure_names.reject(_position__anonymous_157);
				tile_names.reject(_position__anonymous_157);
				hero_stat.reject(_position__anonymous_157);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_157);
				association_names.accept(_position__anonymous_157);
				room_names.accept(_position__anonymous_157);
				activity_names.accept(_position__anonymous_157);
				siding_names.accept(_position__anonymous_157);
				item_names.accept(_position__anonymous_157);
				aspect_names.accept(_position__anonymous_157);
				affinity_names.accept(_position__anonymous_157);
				activity_type_names.accept(_position__anonymous_157);
				trail_names.accept(_position__anonymous_157);
				attack_names.accept(_position__anonymous_157);
				reason_names.accept(_position__anonymous_157);
				trait_names.accept(_position__anonymous_157);
				condition_names.accept(_position__anonymous_157);
				payment_short_type_names.accept(_position__anonymous_157);
				skill_names.accept(_position__anonymous_157);
				map_names.accept(_position__anonymous_157);
				event_names.accept(_position__anonymous_157);
				image_names.accept(_position__anonymous_157);
				tile_symbols.accept(_position__anonymous_157);
				payment_long_type_names.accept(_position__anonymous_157);
				area_names.accept(_position__anonymous_157);
				structure_names.accept(_position__anonymous_157);
				tile_names.accept(_position__anonymous_157);
				hero_stat.accept(_position__anonymous_157);
			}
		}
	}
	public void parse__anonymous_158() {
		int _position__anonymous_158 = -1;
		Token.Parsed _token__anonymous_158 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_158=_position;
		_token__anonymous_158=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+6-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='r') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='o') {
				_state=FAILED;
			}
			if(_inputArray[_position+3]!='u') {
				_state=FAILED;
			}
			if(_inputArray[_position+4]!='n') {
				_state=FAILED;
			}
			if(_inputArray[_position+5]!='d') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_115.SYNTAX);
			_position=_position+6;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain around");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"spawn_statement(_anonymous_158)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_158;
		}
		else {
			if(_pass==FIRST_PASS) {
				String _result = _preparsed_NAME.get(_position);
				if(_result==null) {
					_state=FAILED;
				}
				else {
					Token.Parsed _first_pass_token = new Tokens.Name.NAMEToken(_result);
					_token.add(_position,_first_pass_token);
					_position+=_result.length();
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
			}
			else if(_pass==SECOND_PASS) {
				_list_name_result=_preparsed_NAME.get(_position);
				if(_list_name_result!=null&&map_names.contains(_list_name_result)) {
					if(_position+_list_name_result.length()<_inputLength) {
						int _next_char = _inputArray[_position+_list_name_result.length()];
						if(_next_char == 95 || (_next_char >= 48 && _next_char <= 57 ) || (_next_char >= 65 && _next_char <= 90 ) || (_next_char >= 97 && _next_char <= 122 )) {
							_state=FAILED;
						}
					}
					if(_state==SUCCESS) {
						_token.add(_position,new Tokens.Name.MapNamesToken(_list_name_result));
						_position+=_list_name_result.length();
						while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
							++_position;
						}
					}
				}
				else {
					_state=FAILED;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"map_names");
						_furthestPosition=_position;
					}
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"spawn_statement(_anonymous_158)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_158;
			}
			else {
				int _state_177 = _state;
				while(_position<_inputLength) {
					parse__anonymous_159();
					if(_state==FAILED) {
						break;
					}
				}
				if(_state_177==SUCCESS&&_state==FAILED) {
					_state=SUCCESS;
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"spawn_statement(_anonymous_158)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_158;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_158.addAll(_token);
			_token__anonymous_158.setValue(_token.getValue());
		}
		_token=_token__anonymous_158;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_158);
			association_names.reject(_position__anonymous_158);
			room_names.reject(_position__anonymous_158);
			activity_names.reject(_position__anonymous_158);
			siding_names.reject(_position__anonymous_158);
			item_names.reject(_position__anonymous_158);
			aspect_names.reject(_position__anonymous_158);
			affinity_names.reject(_position__anonymous_158);
			activity_type_names.reject(_position__anonymous_158);
			trail_names.reject(_position__anonymous_158);
			attack_names.reject(_position__anonymous_158);
			reason_names.reject(_position__anonymous_158);
			trait_names.reject(_position__anonymous_158);
			condition_names.reject(_position__anonymous_158);
			payment_short_type_names.reject(_position__anonymous_158);
			skill_names.reject(_position__anonymous_158);
			map_names.reject(_position__anonymous_158);
			event_names.reject(_position__anonymous_158);
			image_names.reject(_position__anonymous_158);
			tile_symbols.reject(_position__anonymous_158);
			payment_long_type_names.reject(_position__anonymous_158);
			area_names.reject(_position__anonymous_158);
			structure_names.reject(_position__anonymous_158);
			tile_names.reject(_position__anonymous_158);
			hero_stat.reject(_position__anonymous_158);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_158);
			association_names.accept(_position__anonymous_158);
			room_names.accept(_position__anonymous_158);
			activity_names.accept(_position__anonymous_158);
			siding_names.accept(_position__anonymous_158);
			item_names.accept(_position__anonymous_158);
			aspect_names.accept(_position__anonymous_158);
			affinity_names.accept(_position__anonymous_158);
			activity_type_names.accept(_position__anonymous_158);
			trail_names.accept(_position__anonymous_158);
			attack_names.accept(_position__anonymous_158);
			reason_names.accept(_position__anonymous_158);
			trait_names.accept(_position__anonymous_158);
			condition_names.accept(_position__anonymous_158);
			payment_short_type_names.accept(_position__anonymous_158);
			skill_names.accept(_position__anonymous_158);
			map_names.accept(_position__anonymous_158);
			event_names.accept(_position__anonymous_158);
			image_names.accept(_position__anonymous_158);
			tile_symbols.accept(_position__anonymous_158);
			payment_long_type_names.accept(_position__anonymous_158);
			area_names.accept(_position__anonymous_158);
			structure_names.accept(_position__anonymous_158);
			tile_names.accept(_position__anonymous_158);
			hero_stat.accept(_position__anonymous_158);
		}
	}
	public void parse__anonymous_203() {
		int _position__anonymous_203 = -1;
		Token.Parsed _token__anonymous_203 = null;
		int _position_comments = -1;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_203=_position;
		_token__anonymous_203=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		_position_comments=_position;
		if(_state==SUCCESS&&!_recursion_protection_comments_37.contains(_position)) {
			_recursion_protection_comments_37.add(_position);
			parse_comments();
			_recursion_protection_comments_37.remove(_position_comments);
		}
		else {
			_state=FAILED;
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_animation_type(_anonymous_203)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_203;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_203.addAll(_token);
			_token__anonymous_203.setValue(_token.getValue());
		}
		_token=_token__anonymous_203;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_203);
			association_names.reject(_position__anonymous_203);
			room_names.reject(_position__anonymous_203);
			activity_names.reject(_position__anonymous_203);
			siding_names.reject(_position__anonymous_203);
			item_names.reject(_position__anonymous_203);
			aspect_names.reject(_position__anonymous_203);
			affinity_names.reject(_position__anonymous_203);
			activity_type_names.reject(_position__anonymous_203);
			trail_names.reject(_position__anonymous_203);
			attack_names.reject(_position__anonymous_203);
			reason_names.reject(_position__anonymous_203);
			trait_names.reject(_position__anonymous_203);
			condition_names.reject(_position__anonymous_203);
			payment_short_type_names.reject(_position__anonymous_203);
			skill_names.reject(_position__anonymous_203);
			map_names.reject(_position__anonymous_203);
			event_names.reject(_position__anonymous_203);
			image_names.reject(_position__anonymous_203);
			tile_symbols.reject(_position__anonymous_203);
			payment_long_type_names.reject(_position__anonymous_203);
			area_names.reject(_position__anonymous_203);
			structure_names.reject(_position__anonymous_203);
			tile_names.reject(_position__anonymous_203);
			hero_stat.reject(_position__anonymous_203);
			_state=SUCCESS;
			_position__anonymous_203=_position;
			_token__anonymous_203=_token;
			_token=new Token.Parsed(Token.Id.ANON);
			parse_animation_type_declaration();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_animation_type(_anonymous_203)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_203;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_203.addAll(_token);
				_token__anonymous_203.setValue(_token.getValue());
			}
			_token=_token__anonymous_203;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_203);
				association_names.reject(_position__anonymous_203);
				room_names.reject(_position__anonymous_203);
				activity_names.reject(_position__anonymous_203);
				siding_names.reject(_position__anonymous_203);
				item_names.reject(_position__anonymous_203);
				aspect_names.reject(_position__anonymous_203);
				affinity_names.reject(_position__anonymous_203);
				activity_type_names.reject(_position__anonymous_203);
				trail_names.reject(_position__anonymous_203);
				attack_names.reject(_position__anonymous_203);
				reason_names.reject(_position__anonymous_203);
				trait_names.reject(_position__anonymous_203);
				condition_names.reject(_position__anonymous_203);
				payment_short_type_names.reject(_position__anonymous_203);
				skill_names.reject(_position__anonymous_203);
				map_names.reject(_position__anonymous_203);
				event_names.reject(_position__anonymous_203);
				image_names.reject(_position__anonymous_203);
				tile_symbols.reject(_position__anonymous_203);
				payment_long_type_names.reject(_position__anonymous_203);
				area_names.reject(_position__anonymous_203);
				structure_names.reject(_position__anonymous_203);
				tile_names.reject(_position__anonymous_203);
				hero_stat.reject(_position__anonymous_203);
				_state=SUCCESS;
				_position__anonymous_203=_position;
				_token__anonymous_203=_token;
				_token=new Token.Parsed(Token.Id.ANON);
				if(_position+1-1 >=_inputLength) {
					_state=FAILED;
				}
				else {
					if(_inputArray[_position+0]!='\n'&&_inputArray[_position+0]!='\r') {
						_state=FAILED;
					}
				}
				if(_state==SUCCESS) {
					_token.add(_position,Tokens.Syntax.syntax_1.SYNTAX);
					_position=_position+1;
					while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
						++_position;
					}
				}
				else if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain \n");
						_furthestPosition=_position;
					}
				}
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"import_animation_type(_anonymous_203)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_203;
				}
				else {
				}
				if(_state==SUCCESS) {
					_token__anonymous_203.addAll(_token);
					_token__anonymous_203.setValue(_token.getValue());
				}
				_token=_token__anonymous_203;
				if(_state==FAILED) {
					support_names.reject(_position__anonymous_203);
					association_names.reject(_position__anonymous_203);
					room_names.reject(_position__anonymous_203);
					activity_names.reject(_position__anonymous_203);
					siding_names.reject(_position__anonymous_203);
					item_names.reject(_position__anonymous_203);
					aspect_names.reject(_position__anonymous_203);
					affinity_names.reject(_position__anonymous_203);
					activity_type_names.reject(_position__anonymous_203);
					trail_names.reject(_position__anonymous_203);
					attack_names.reject(_position__anonymous_203);
					reason_names.reject(_position__anonymous_203);
					trait_names.reject(_position__anonymous_203);
					condition_names.reject(_position__anonymous_203);
					payment_short_type_names.reject(_position__anonymous_203);
					skill_names.reject(_position__anonymous_203);
					map_names.reject(_position__anonymous_203);
					event_names.reject(_position__anonymous_203);
					image_names.reject(_position__anonymous_203);
					tile_symbols.reject(_position__anonymous_203);
					payment_long_type_names.reject(_position__anonymous_203);
					area_names.reject(_position__anonymous_203);
					structure_names.reject(_position__anonymous_203);
					tile_names.reject(_position__anonymous_203);
					hero_stat.reject(_position__anonymous_203);
				}
				else if(_state==SUCCESS) {
					support_names.accept(_position__anonymous_203);
					association_names.accept(_position__anonymous_203);
					room_names.accept(_position__anonymous_203);
					activity_names.accept(_position__anonymous_203);
					siding_names.accept(_position__anonymous_203);
					item_names.accept(_position__anonymous_203);
					aspect_names.accept(_position__anonymous_203);
					affinity_names.accept(_position__anonymous_203);
					activity_type_names.accept(_position__anonymous_203);
					trail_names.accept(_position__anonymous_203);
					attack_names.accept(_position__anonymous_203);
					reason_names.accept(_position__anonymous_203);
					trait_names.accept(_position__anonymous_203);
					condition_names.accept(_position__anonymous_203);
					payment_short_type_names.accept(_position__anonymous_203);
					skill_names.accept(_position__anonymous_203);
					map_names.accept(_position__anonymous_203);
					event_names.accept(_position__anonymous_203);
					image_names.accept(_position__anonymous_203);
					tile_symbols.accept(_position__anonymous_203);
					payment_long_type_names.accept(_position__anonymous_203);
					area_names.accept(_position__anonymous_203);
					structure_names.accept(_position__anonymous_203);
					tile_names.accept(_position__anonymous_203);
					hero_stat.accept(_position__anonymous_203);
				}
			}
		}
	}
	public void parse__anonymous_204() {
		int _position__anonymous_204 = -1;
		Token.Parsed _token__anonymous_204 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_204=_position;
		_token__anonymous_204=_token;
		_token=new Tokens.Name.StatementToken();
		_token_NAME=_token;
		_token=new Tokens.Name.VariableNameToken();
		_position_NAME=_position;
		if(_state==SUCCESS&&!_recursion_protection_NAME_40.contains(_position)) {
			_recursion_protection_NAME_40.add(_position);
			parse_NAME();
			_recursion_protection_NAME_40.remove(_position_NAME);
		}
		else {
			_state=FAILED;
		}
		if(_state==SUCCESS) {
			_token_NAME.add(_position_NAME,_token);
		}
		_token=_token_NAME;
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_type_element(_anonymous_204)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_204;
		}
		else {
			parse__anonymous_205();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_type_element(_anonymous_204)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_204;
			}
			else {
				parse_animation_type_value();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_type_element(_anonymous_204)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_204;
				}
				else {
					int _state_221 = _state;
					parse_animation_type_condition();
					if(_state_221==SUCCESS&&_state==FAILED) {
						_state=SUCCESS;
					}
					if(_state==FAILED) {
						if(_position>=_furthestPosition) {
							_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_type_element(_anonymous_204)");
							_furthestPosition=_position;
						}
						_position=_position__anonymous_204;
					}
					else {
					}
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_204.add(_position__anonymous_204,_token);
		}
		_token=_token__anonymous_204;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_204);
			association_names.reject(_position__anonymous_204);
			room_names.reject(_position__anonymous_204);
			activity_names.reject(_position__anonymous_204);
			siding_names.reject(_position__anonymous_204);
			item_names.reject(_position__anonymous_204);
			aspect_names.reject(_position__anonymous_204);
			affinity_names.reject(_position__anonymous_204);
			activity_type_names.reject(_position__anonymous_204);
			trail_names.reject(_position__anonymous_204);
			attack_names.reject(_position__anonymous_204);
			reason_names.reject(_position__anonymous_204);
			trait_names.reject(_position__anonymous_204);
			condition_names.reject(_position__anonymous_204);
			payment_short_type_names.reject(_position__anonymous_204);
			skill_names.reject(_position__anonymous_204);
			map_names.reject(_position__anonymous_204);
			event_names.reject(_position__anonymous_204);
			image_names.reject(_position__anonymous_204);
			tile_symbols.reject(_position__anonymous_204);
			payment_long_type_names.reject(_position__anonymous_204);
			area_names.reject(_position__anonymous_204);
			structure_names.reject(_position__anonymous_204);
			tile_names.reject(_position__anonymous_204);
			hero_stat.reject(_position__anonymous_204);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_204);
			association_names.accept(_position__anonymous_204);
			room_names.accept(_position__anonymous_204);
			activity_names.accept(_position__anonymous_204);
			siding_names.accept(_position__anonymous_204);
			item_names.accept(_position__anonymous_204);
			aspect_names.accept(_position__anonymous_204);
			affinity_names.accept(_position__anonymous_204);
			activity_type_names.accept(_position__anonymous_204);
			trail_names.accept(_position__anonymous_204);
			attack_names.accept(_position__anonymous_204);
			reason_names.accept(_position__anonymous_204);
			trait_names.accept(_position__anonymous_204);
			condition_names.accept(_position__anonymous_204);
			payment_short_type_names.accept(_position__anonymous_204);
			skill_names.accept(_position__anonymous_204);
			map_names.accept(_position__anonymous_204);
			event_names.accept(_position__anonymous_204);
			image_names.accept(_position__anonymous_204);
			tile_symbols.accept(_position__anonymous_204);
			payment_long_type_names.accept(_position__anonymous_204);
			area_names.accept(_position__anonymous_204);
			structure_names.accept(_position__anonymous_204);
			tile_names.accept(_position__anonymous_204);
			hero_stat.accept(_position__anonymous_204);
		}
	}
	public void parse__anonymous_205() {
		int _position__anonymous_205 = -1;
		Token.Parsed _token__anonymous_205 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_205=_position;
		_token__anonymous_205=_token;
		_token=new Tokens.Name.AnimationTypeOperatorToken();
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='=') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_103.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain =");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_type_element(_anonymous_205)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_205;
		}
		else {
		}
		if(_state==SUCCESS) {
			_token__anonymous_205.add(_position__anonymous_205,_token);
		}
		_token=_token__anonymous_205;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_205);
			association_names.reject(_position__anonymous_205);
			room_names.reject(_position__anonymous_205);
			activity_names.reject(_position__anonymous_205);
			siding_names.reject(_position__anonymous_205);
			item_names.reject(_position__anonymous_205);
			aspect_names.reject(_position__anonymous_205);
			affinity_names.reject(_position__anonymous_205);
			activity_type_names.reject(_position__anonymous_205);
			trail_names.reject(_position__anonymous_205);
			attack_names.reject(_position__anonymous_205);
			reason_names.reject(_position__anonymous_205);
			trait_names.reject(_position__anonymous_205);
			condition_names.reject(_position__anonymous_205);
			payment_short_type_names.reject(_position__anonymous_205);
			skill_names.reject(_position__anonymous_205);
			map_names.reject(_position__anonymous_205);
			event_names.reject(_position__anonymous_205);
			image_names.reject(_position__anonymous_205);
			tile_symbols.reject(_position__anonymous_205);
			payment_long_type_names.reject(_position__anonymous_205);
			area_names.reject(_position__anonymous_205);
			structure_names.reject(_position__anonymous_205);
			tile_names.reject(_position__anonymous_205);
			hero_stat.reject(_position__anonymous_205);
			_state=SUCCESS;
			_position__anonymous_205=_position;
			_token__anonymous_205=_token;
			_token=new Tokens.Name.AnimationTypeOperatorToken();
			if(_position+2-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='+') {
					_state=FAILED;
				}
				if(_inputArray[_position+1]!='=') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_101.SYNTAX);
				_position=_position+2;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain +=");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_type_element(_anonymous_205)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_205;
			}
			else {
			}
			if(_state==SUCCESS) {
				_token__anonymous_205.add(_position__anonymous_205,_token);
			}
			_token=_token__anonymous_205;
			if(_state==FAILED) {
				support_names.reject(_position__anonymous_205);
				association_names.reject(_position__anonymous_205);
				room_names.reject(_position__anonymous_205);
				activity_names.reject(_position__anonymous_205);
				siding_names.reject(_position__anonymous_205);
				item_names.reject(_position__anonymous_205);
				aspect_names.reject(_position__anonymous_205);
				affinity_names.reject(_position__anonymous_205);
				activity_type_names.reject(_position__anonymous_205);
				trail_names.reject(_position__anonymous_205);
				attack_names.reject(_position__anonymous_205);
				reason_names.reject(_position__anonymous_205);
				trait_names.reject(_position__anonymous_205);
				condition_names.reject(_position__anonymous_205);
				payment_short_type_names.reject(_position__anonymous_205);
				skill_names.reject(_position__anonymous_205);
				map_names.reject(_position__anonymous_205);
				event_names.reject(_position__anonymous_205);
				image_names.reject(_position__anonymous_205);
				tile_symbols.reject(_position__anonymous_205);
				payment_long_type_names.reject(_position__anonymous_205);
				area_names.reject(_position__anonymous_205);
				structure_names.reject(_position__anonymous_205);
				tile_names.reject(_position__anonymous_205);
				hero_stat.reject(_position__anonymous_205);
			}
			else if(_state==SUCCESS) {
				support_names.accept(_position__anonymous_205);
				association_names.accept(_position__anonymous_205);
				room_names.accept(_position__anonymous_205);
				activity_names.accept(_position__anonymous_205);
				siding_names.accept(_position__anonymous_205);
				item_names.accept(_position__anonymous_205);
				aspect_names.accept(_position__anonymous_205);
				affinity_names.accept(_position__anonymous_205);
				activity_type_names.accept(_position__anonymous_205);
				trail_names.accept(_position__anonymous_205);
				attack_names.accept(_position__anonymous_205);
				reason_names.accept(_position__anonymous_205);
				trait_names.accept(_position__anonymous_205);
				condition_names.accept(_position__anonymous_205);
				payment_short_type_names.accept(_position__anonymous_205);
				skill_names.accept(_position__anonymous_205);
				map_names.accept(_position__anonymous_205);
				event_names.accept(_position__anonymous_205);
				image_names.accept(_position__anonymous_205);
				tile_symbols.accept(_position__anonymous_205);
				payment_long_type_names.accept(_position__anonymous_205);
				area_names.accept(_position__anonymous_205);
				structure_names.accept(_position__anonymous_205);
				tile_names.accept(_position__anonymous_205);
				hero_stat.accept(_position__anonymous_205);
			}
		}
	}
	public void parse__anonymous_206() {
		int _position__anonymous_206 = -1;
		Token.Parsed _token__anonymous_206 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_206=_position;
		_token__anonymous_206=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse_animation_type_continuation_operator();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_type_condition(_anonymous_206)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_206;
		}
		else {
			parse_animation_type_boolean();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_type_condition(_anonymous_206)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_206;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_206.addAll(_token);
			_token__anonymous_206.setValue(_token.getValue());
		}
		_token=_token__anonymous_206;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_206);
			association_names.reject(_position__anonymous_206);
			room_names.reject(_position__anonymous_206);
			activity_names.reject(_position__anonymous_206);
			siding_names.reject(_position__anonymous_206);
			item_names.reject(_position__anonymous_206);
			aspect_names.reject(_position__anonymous_206);
			affinity_names.reject(_position__anonymous_206);
			activity_type_names.reject(_position__anonymous_206);
			trail_names.reject(_position__anonymous_206);
			attack_names.reject(_position__anonymous_206);
			reason_names.reject(_position__anonymous_206);
			trait_names.reject(_position__anonymous_206);
			condition_names.reject(_position__anonymous_206);
			payment_short_type_names.reject(_position__anonymous_206);
			skill_names.reject(_position__anonymous_206);
			map_names.reject(_position__anonymous_206);
			event_names.reject(_position__anonymous_206);
			image_names.reject(_position__anonymous_206);
			tile_symbols.reject(_position__anonymous_206);
			payment_long_type_names.reject(_position__anonymous_206);
			area_names.reject(_position__anonymous_206);
			structure_names.reject(_position__anonymous_206);
			tile_names.reject(_position__anonymous_206);
			hero_stat.reject(_position__anonymous_206);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_206);
			association_names.accept(_position__anonymous_206);
			room_names.accept(_position__anonymous_206);
			activity_names.accept(_position__anonymous_206);
			siding_names.accept(_position__anonymous_206);
			item_names.accept(_position__anonymous_206);
			aspect_names.accept(_position__anonymous_206);
			affinity_names.accept(_position__anonymous_206);
			activity_type_names.accept(_position__anonymous_206);
			trail_names.accept(_position__anonymous_206);
			attack_names.accept(_position__anonymous_206);
			reason_names.accept(_position__anonymous_206);
			trait_names.accept(_position__anonymous_206);
			condition_names.accept(_position__anonymous_206);
			payment_short_type_names.accept(_position__anonymous_206);
			skill_names.accept(_position__anonymous_206);
			map_names.accept(_position__anonymous_206);
			event_names.accept(_position__anonymous_206);
			image_names.accept(_position__anonymous_206);
			tile_symbols.accept(_position__anonymous_206);
			payment_long_type_names.accept(_position__anonymous_206);
			area_names.accept(_position__anonymous_206);
			structure_names.accept(_position__anonymous_206);
			tile_names.accept(_position__anonymous_206);
			hero_stat.accept(_position__anonymous_206);
		}
	}
	public void parse__anonymous_200() {
		int _position__anonymous_200 = -1;
		Token.Parsed _token__anonymous_200 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_200=_position;
		_token__anonymous_200=_token;
		_token=new Tokens.Name.MapDeclarationToken();
		if(_position+3-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='M') {
				_state=FAILED;
			}
			if(_inputArray[_position+1]!='a') {
				_state=FAILED;
			}
			if(_inputArray[_position+2]!='p') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_148.SYNTAX);
			_position=_position+3;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain Map");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"type_name(_anonymous_200)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_200;
		}
		else {
			parse_type_name();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"type_name(_anonymous_200)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_200;
			}
			else {
				parse_type_name();
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"type_name(_anonymous_200)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_200;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_200.add(_position__anonymous_200,_token);
		}
		_token=_token__anonymous_200;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_200);
			association_names.reject(_position__anonymous_200);
			room_names.reject(_position__anonymous_200);
			activity_names.reject(_position__anonymous_200);
			siding_names.reject(_position__anonymous_200);
			item_names.reject(_position__anonymous_200);
			aspect_names.reject(_position__anonymous_200);
			affinity_names.reject(_position__anonymous_200);
			activity_type_names.reject(_position__anonymous_200);
			trail_names.reject(_position__anonymous_200);
			attack_names.reject(_position__anonymous_200);
			reason_names.reject(_position__anonymous_200);
			trait_names.reject(_position__anonymous_200);
			condition_names.reject(_position__anonymous_200);
			payment_short_type_names.reject(_position__anonymous_200);
			skill_names.reject(_position__anonymous_200);
			map_names.reject(_position__anonymous_200);
			event_names.reject(_position__anonymous_200);
			image_names.reject(_position__anonymous_200);
			tile_symbols.reject(_position__anonymous_200);
			payment_long_type_names.reject(_position__anonymous_200);
			area_names.reject(_position__anonymous_200);
			structure_names.reject(_position__anonymous_200);
			tile_names.reject(_position__anonymous_200);
			hero_stat.reject(_position__anonymous_200);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_200);
			association_names.accept(_position__anonymous_200);
			room_names.accept(_position__anonymous_200);
			activity_names.accept(_position__anonymous_200);
			siding_names.accept(_position__anonymous_200);
			item_names.accept(_position__anonymous_200);
			aspect_names.accept(_position__anonymous_200);
			affinity_names.accept(_position__anonymous_200);
			activity_type_names.accept(_position__anonymous_200);
			trail_names.accept(_position__anonymous_200);
			attack_names.accept(_position__anonymous_200);
			reason_names.accept(_position__anonymous_200);
			trait_names.accept(_position__anonymous_200);
			condition_names.accept(_position__anonymous_200);
			payment_short_type_names.accept(_position__anonymous_200);
			skill_names.accept(_position__anonymous_200);
			map_names.accept(_position__anonymous_200);
			event_names.accept(_position__anonymous_200);
			image_names.accept(_position__anonymous_200);
			tile_symbols.accept(_position__anonymous_200);
			payment_long_type_names.accept(_position__anonymous_200);
			area_names.accept(_position__anonymous_200);
			structure_names.accept(_position__anonymous_200);
			tile_names.accept(_position__anonymous_200);
			hero_stat.accept(_position__anonymous_200);
		}
	}
	public void parse__anonymous_201() {
		int _position__anonymous_201 = -1;
		Token.Parsed _token__anonymous_201 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_201=_position;
		_token__anonymous_201=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='*') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_19.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain *");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"type_name(_anonymous_201)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_201;
		}
		else {
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!='.') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_69.findType);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain .");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"type_name(_anonymous_201)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_201;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_201.addAll(_token);
			_token__anonymous_201.setValue(_token.getValue());
		}
		_token=_token__anonymous_201;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_201);
			association_names.reject(_position__anonymous_201);
			room_names.reject(_position__anonymous_201);
			activity_names.reject(_position__anonymous_201);
			siding_names.reject(_position__anonymous_201);
			item_names.reject(_position__anonymous_201);
			aspect_names.reject(_position__anonymous_201);
			affinity_names.reject(_position__anonymous_201);
			activity_type_names.reject(_position__anonymous_201);
			trail_names.reject(_position__anonymous_201);
			attack_names.reject(_position__anonymous_201);
			reason_names.reject(_position__anonymous_201);
			trait_names.reject(_position__anonymous_201);
			condition_names.reject(_position__anonymous_201);
			payment_short_type_names.reject(_position__anonymous_201);
			skill_names.reject(_position__anonymous_201);
			map_names.reject(_position__anonymous_201);
			event_names.reject(_position__anonymous_201);
			image_names.reject(_position__anonymous_201);
			tile_symbols.reject(_position__anonymous_201);
			payment_long_type_names.reject(_position__anonymous_201);
			area_names.reject(_position__anonymous_201);
			structure_names.reject(_position__anonymous_201);
			tile_names.reject(_position__anonymous_201);
			hero_stat.reject(_position__anonymous_201);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_201);
			association_names.accept(_position__anonymous_201);
			room_names.accept(_position__anonymous_201);
			activity_names.accept(_position__anonymous_201);
			siding_names.accept(_position__anonymous_201);
			item_names.accept(_position__anonymous_201);
			aspect_names.accept(_position__anonymous_201);
			affinity_names.accept(_position__anonymous_201);
			activity_type_names.accept(_position__anonymous_201);
			trail_names.accept(_position__anonymous_201);
			attack_names.accept(_position__anonymous_201);
			reason_names.accept(_position__anonymous_201);
			trait_names.accept(_position__anonymous_201);
			condition_names.accept(_position__anonymous_201);
			payment_short_type_names.accept(_position__anonymous_201);
			skill_names.accept(_position__anonymous_201);
			map_names.accept(_position__anonymous_201);
			event_names.accept(_position__anonymous_201);
			image_names.accept(_position__anonymous_201);
			tile_symbols.accept(_position__anonymous_201);
			payment_long_type_names.accept(_position__anonymous_201);
			area_names.accept(_position__anonymous_201);
			structure_names.accept(_position__anonymous_201);
			tile_names.accept(_position__anonymous_201);
			hero_stat.accept(_position__anonymous_201);
		}
	}
	public void parse__anonymous_202() {
		int _position__anonymous_202 = -1;
		Token.Parsed _token__anonymous_202 = null;
		int _position_NAME = -1;
		Token.Parsed _token_NAME = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_202=_position;
		_token__anonymous_202=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!='.') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_69.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain .");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"type_name(_anonymous_202)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_202;
		}
		else {
			_token_NAME=_token;
			_token=new Tokens.Name.TypeNameToken();
			_position_NAME=_position;
			parse_NAME();
			if(_state==SUCCESS) {
				_token_NAME.add(_position_NAME,_token);
			}
			_token=_token_NAME;
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"type_name(_anonymous_202)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_202;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_202.addAll(_token);
			_token__anonymous_202.setValue(_token.getValue());
		}
		_token=_token__anonymous_202;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_202);
			association_names.reject(_position__anonymous_202);
			room_names.reject(_position__anonymous_202);
			activity_names.reject(_position__anonymous_202);
			siding_names.reject(_position__anonymous_202);
			item_names.reject(_position__anonymous_202);
			aspect_names.reject(_position__anonymous_202);
			affinity_names.reject(_position__anonymous_202);
			activity_type_names.reject(_position__anonymous_202);
			trail_names.reject(_position__anonymous_202);
			attack_names.reject(_position__anonymous_202);
			reason_names.reject(_position__anonymous_202);
			trait_names.reject(_position__anonymous_202);
			condition_names.reject(_position__anonymous_202);
			payment_short_type_names.reject(_position__anonymous_202);
			skill_names.reject(_position__anonymous_202);
			map_names.reject(_position__anonymous_202);
			event_names.reject(_position__anonymous_202);
			image_names.reject(_position__anonymous_202);
			tile_symbols.reject(_position__anonymous_202);
			payment_long_type_names.reject(_position__anonymous_202);
			area_names.reject(_position__anonymous_202);
			structure_names.reject(_position__anonymous_202);
			tile_names.reject(_position__anonymous_202);
			hero_stat.reject(_position__anonymous_202);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_202);
			association_names.accept(_position__anonymous_202);
			room_names.accept(_position__anonymous_202);
			activity_names.accept(_position__anonymous_202);
			siding_names.accept(_position__anonymous_202);
			item_names.accept(_position__anonymous_202);
			aspect_names.accept(_position__anonymous_202);
			affinity_names.accept(_position__anonymous_202);
			activity_type_names.accept(_position__anonymous_202);
			trail_names.accept(_position__anonymous_202);
			attack_names.accept(_position__anonymous_202);
			reason_names.accept(_position__anonymous_202);
			trait_names.accept(_position__anonymous_202);
			condition_names.accept(_position__anonymous_202);
			payment_short_type_names.accept(_position__anonymous_202);
			skill_names.accept(_position__anonymous_202);
			map_names.accept(_position__anonymous_202);
			event_names.accept(_position__anonymous_202);
			image_names.accept(_position__anonymous_202);
			tile_symbols.accept(_position__anonymous_202);
			payment_long_type_names.accept(_position__anonymous_202);
			area_names.accept(_position__anonymous_202);
			structure_names.accept(_position__anonymous_202);
			tile_names.accept(_position__anonymous_202);
			hero_stat.accept(_position__anonymous_202);
		}
	}
	public void parse__anonymous_207() {
		int _position__anonymous_207 = -1;
		Token.Parsed _token__anonymous_207 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_207=_position;
		_token__anonymous_207=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		parse_animation_type_arithmetic_operator();
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_type_boolean(_anonymous_207)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_207;
		}
		else {
			parse_animation_type_value();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_type_boolean(_anonymous_207)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_207;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_207.addAll(_token);
			_token__anonymous_207.setValue(_token.getValue());
		}
		_token=_token__anonymous_207;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_207);
			association_names.reject(_position__anonymous_207);
			room_names.reject(_position__anonymous_207);
			activity_names.reject(_position__anonymous_207);
			siding_names.reject(_position__anonymous_207);
			item_names.reject(_position__anonymous_207);
			aspect_names.reject(_position__anonymous_207);
			affinity_names.reject(_position__anonymous_207);
			activity_type_names.reject(_position__anonymous_207);
			trail_names.reject(_position__anonymous_207);
			attack_names.reject(_position__anonymous_207);
			reason_names.reject(_position__anonymous_207);
			trait_names.reject(_position__anonymous_207);
			condition_names.reject(_position__anonymous_207);
			payment_short_type_names.reject(_position__anonymous_207);
			skill_names.reject(_position__anonymous_207);
			map_names.reject(_position__anonymous_207);
			event_names.reject(_position__anonymous_207);
			image_names.reject(_position__anonymous_207);
			tile_symbols.reject(_position__anonymous_207);
			payment_long_type_names.reject(_position__anonymous_207);
			area_names.reject(_position__anonymous_207);
			structure_names.reject(_position__anonymous_207);
			tile_names.reject(_position__anonymous_207);
			hero_stat.reject(_position__anonymous_207);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_207);
			association_names.accept(_position__anonymous_207);
			room_names.accept(_position__anonymous_207);
			activity_names.accept(_position__anonymous_207);
			siding_names.accept(_position__anonymous_207);
			item_names.accept(_position__anonymous_207);
			aspect_names.accept(_position__anonymous_207);
			affinity_names.accept(_position__anonymous_207);
			activity_type_names.accept(_position__anonymous_207);
			trail_names.accept(_position__anonymous_207);
			attack_names.accept(_position__anonymous_207);
			reason_names.accept(_position__anonymous_207);
			trait_names.accept(_position__anonymous_207);
			condition_names.accept(_position__anonymous_207);
			payment_short_type_names.accept(_position__anonymous_207);
			skill_names.accept(_position__anonymous_207);
			map_names.accept(_position__anonymous_207);
			event_names.accept(_position__anonymous_207);
			image_names.accept(_position__anonymous_207);
			tile_symbols.accept(_position__anonymous_207);
			payment_long_type_names.accept(_position__anonymous_207);
			area_names.accept(_position__anonymous_207);
			structure_names.accept(_position__anonymous_207);
			tile_names.accept(_position__anonymous_207);
			hero_stat.accept(_position__anonymous_207);
		}
	}
	public void parse__anonymous_208() {
		int _position__anonymous_208 = -1;
		Token.Parsed _token__anonymous_208 = null;
		int _position_INTEGER = -1;
		Token.Parsed _token_INTEGER = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_208=_position;
		_token__anonymous_208=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		_token_INTEGER=_token;
		_token=new Tokens.Name.HighXToken();
		_position_INTEGER=_position;
		parse_INTEGER();
		if(_state==SUCCESS) {
			_token_INTEGER.add(_position_INTEGER,_token);
		}
		_token=_token_INTEGER;
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_type_coordinate_variable(_anonymous_208)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_208;
		}
		else {
			if(_position+1-1 >=_inputLength) {
				_state=FAILED;
			}
			else {
				if(_inputArray[_position+0]!=',') {
					_state=FAILED;
				}
			}
			if(_state==SUCCESS) {
				_token.add(_position,Tokens.Syntax.syntax_23.SYNTAX);
				_position=_position+1;
				while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
					++_position;
				}
			}
			else if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ,");
					_furthestPosition=_position;
				}
			}
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_type_coordinate_variable(_anonymous_208)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_208;
			}
			else {
				_token_INTEGER=_token;
				_token=new Tokens.Name.HighYToken();
				_position_INTEGER=_position;
				parse_INTEGER();
				if(_state==SUCCESS) {
					_token_INTEGER.add(_position_INTEGER,_token);
				}
				_token=_token_INTEGER;
				if(_state==FAILED) {
					if(_position>=_furthestPosition) {
						_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_type_coordinate_variable(_anonymous_208)");
						_furthestPosition=_position;
					}
					_position=_position__anonymous_208;
				}
				else {
				}
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_208.addAll(_token);
			_token__anonymous_208.setValue(_token.getValue());
		}
		_token=_token__anonymous_208;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_208);
			association_names.reject(_position__anonymous_208);
			room_names.reject(_position__anonymous_208);
			activity_names.reject(_position__anonymous_208);
			siding_names.reject(_position__anonymous_208);
			item_names.reject(_position__anonymous_208);
			aspect_names.reject(_position__anonymous_208);
			affinity_names.reject(_position__anonymous_208);
			activity_type_names.reject(_position__anonymous_208);
			trail_names.reject(_position__anonymous_208);
			attack_names.reject(_position__anonymous_208);
			reason_names.reject(_position__anonymous_208);
			trait_names.reject(_position__anonymous_208);
			condition_names.reject(_position__anonymous_208);
			payment_short_type_names.reject(_position__anonymous_208);
			skill_names.reject(_position__anonymous_208);
			map_names.reject(_position__anonymous_208);
			event_names.reject(_position__anonymous_208);
			image_names.reject(_position__anonymous_208);
			tile_symbols.reject(_position__anonymous_208);
			payment_long_type_names.reject(_position__anonymous_208);
			area_names.reject(_position__anonymous_208);
			structure_names.reject(_position__anonymous_208);
			tile_names.reject(_position__anonymous_208);
			hero_stat.reject(_position__anonymous_208);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_208);
			association_names.accept(_position__anonymous_208);
			room_names.accept(_position__anonymous_208);
			activity_names.accept(_position__anonymous_208);
			siding_names.accept(_position__anonymous_208);
			item_names.accept(_position__anonymous_208);
			aspect_names.accept(_position__anonymous_208);
			affinity_names.accept(_position__anonymous_208);
			activity_type_names.accept(_position__anonymous_208);
			trail_names.accept(_position__anonymous_208);
			attack_names.accept(_position__anonymous_208);
			reason_names.accept(_position__anonymous_208);
			trait_names.accept(_position__anonymous_208);
			condition_names.accept(_position__anonymous_208);
			payment_short_type_names.accept(_position__anonymous_208);
			skill_names.accept(_position__anonymous_208);
			map_names.accept(_position__anonymous_208);
			event_names.accept(_position__anonymous_208);
			image_names.accept(_position__anonymous_208);
			tile_symbols.accept(_position__anonymous_208);
			payment_long_type_names.accept(_position__anonymous_208);
			area_names.accept(_position__anonymous_208);
			structure_names.accept(_position__anonymous_208);
			tile_names.accept(_position__anonymous_208);
			hero_stat.accept(_position__anonymous_208);
		}
	}
	public void parse__anonymous_209() {
		int _position__anonymous_209 = -1;
		Token.Parsed _token__anonymous_209 = null;
		support_names.start(_position);
		association_names.start(_position);
		room_names.start(_position);
		activity_names.start(_position);
		siding_names.start(_position);
		item_names.start(_position);
		aspect_names.start(_position);
		affinity_names.start(_position);
		activity_type_names.start(_position);
		trail_names.start(_position);
		attack_names.start(_position);
		reason_names.start(_position);
		trait_names.start(_position);
		condition_names.start(_position);
		payment_short_type_names.start(_position);
		skill_names.start(_position);
		map_names.start(_position);
		event_names.start(_position);
		image_names.start(_position);
		tile_symbols.start(_position);
		payment_long_type_names.start(_position);
		area_names.start(_position);
		structure_names.start(_position);
		tile_names.start(_position);
		hero_stat.start(_position);
		_position__anonymous_209=_position;
		_token__anonymous_209=_token;
		_token=new Token.Parsed(Token.Id.ANON);
		if(_position+1-1 >=_inputLength) {
			_state=FAILED;
		}
		else {
			if(_inputArray[_position+0]!=',') {
				_state=FAILED;
			}
		}
		if(_state==SUCCESS) {
			_token.add(_position,Tokens.Syntax.syntax_23.SYNTAX);
			_position=_position+1;
			while(_position<_inputLength&&(false||_inputArray[_position]==' '||_inputArray[_position]=='\t')) {
				++_position;
			}
		}
		else if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"unexpected plain ,");
				_furthestPosition=_position;
			}
		}
		if(_state==FAILED) {
			if(_position>=_furthestPosition) {
				_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_type_variables(_anonymous_209)");
				_furthestPosition=_position;
			}
			_position=_position__anonymous_209;
		}
		else {
			parse_animation_type_variable_declaration();
			if(_state==FAILED) {
				if(_position>=_furthestPosition) {
					_result=new Parser.Result.Fail(FAILED,_position,_lineNumberRanges,_input,_fileName,"animation_type_variables(_anonymous_209)");
					_furthestPosition=_position;
				}
				_position=_position__anonymous_209;
			}
			else {
			}
		}
		if(_state==SUCCESS) {
			_token__anonymous_209.addAll(_token);
			_token__anonymous_209.setValue(_token.getValue());
		}
		_token=_token__anonymous_209;
		if(_state==FAILED) {
			support_names.reject(_position__anonymous_209);
			association_names.reject(_position__anonymous_209);
			room_names.reject(_position__anonymous_209);
			activity_names.reject(_position__anonymous_209);
			siding_names.reject(_position__anonymous_209);
			item_names.reject(_position__anonymous_209);
			aspect_names.reject(_position__anonymous_209);
			affinity_names.reject(_position__anonymous_209);
			activity_type_names.reject(_position__anonymous_209);
			trail_names.reject(_position__anonymous_209);
			attack_names.reject(_position__anonymous_209);
			reason_names.reject(_position__anonymous_209);
			trait_names.reject(_position__anonymous_209);
			condition_names.reject(_position__anonymous_209);
			payment_short_type_names.reject(_position__anonymous_209);
			skill_names.reject(_position__anonymous_209);
			map_names.reject(_position__anonymous_209);
			event_names.reject(_position__anonymous_209);
			image_names.reject(_position__anonymous_209);
			tile_symbols.reject(_position__anonymous_209);
			payment_long_type_names.reject(_position__anonymous_209);
			area_names.reject(_position__anonymous_209);
			structure_names.reject(_position__anonymous_209);
			tile_names.reject(_position__anonymous_209);
			hero_stat.reject(_position__anonymous_209);
		}
		else if(_state==SUCCESS) {
			support_names.accept(_position__anonymous_209);
			association_names.accept(_position__anonymous_209);
			room_names.accept(_position__anonymous_209);
			activity_names.accept(_position__anonymous_209);
			siding_names.accept(_position__anonymous_209);
			item_names.accept(_position__anonymous_209);
			aspect_names.accept(_position__anonymous_209);
			affinity_names.accept(_position__anonymous_209);
			activity_type_names.accept(_position__anonymous_209);
			trail_names.accept(_position__anonymous_209);
			attack_names.accept(_position__anonymous_209);
			reason_names.accept(_position__anonymous_209);
			trait_names.accept(_position__anonymous_209);
			condition_names.accept(_position__anonymous_209);
			payment_short_type_names.accept(_position__anonymous_209);
			skill_names.accept(_position__anonymous_209);
			map_names.accept(_position__anonymous_209);
			event_names.accept(_position__anonymous_209);
			image_names.accept(_position__anonymous_209);
			tile_symbols.accept(_position__anonymous_209);
			payment_long_type_names.accept(_position__anonymous_209);
			area_names.accept(_position__anonymous_209);
			structure_names.accept(_position__anonymous_209);
			tile_names.accept(_position__anonymous_209);
			hero_stat.accept(_position__anonymous_209);
		}
	}
}