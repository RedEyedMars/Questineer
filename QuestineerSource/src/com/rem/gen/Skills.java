package com.rem.gen;
import java.util.ArrayList;
import java.util.List;
public class Skills {
	public static com.rem.lang.helpers.output.OutputArguments skillsAsParameter = new com.rem.lang.helpers.output.OutputArguments();
	public static com.rem.lang.helpers.output.OutputClass OUTPUT = new com.rem.lang.helpers.output.OutputClass()._package(new com.rem.lang.helpers.output.OutputCall().add(new com.rem.lang.helpers.output.OutputExact(QuestineerSource.packageName),null).add(new com.rem.lang.helpers.output.OutputExact().set("entities"),null).add(new com.rem.lang.helpers.output.OutputExact().set("behaviours"),null).add(new com.rem.lang.helpers.output.OutputExact().set("skills"),null)).name(new com.rem.lang.helpers.output.OutputExact().set("Skills")).extendType(null).variable(new com.rem.lang.helpers.output.OutputVariable().isPublic().isStatic().set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("Skill")).array(),new com.rem.lang.helpers.output.OutputExact().set("skills")).assign(new com.rem.lang.helpers.output.OutputNewObject().set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("Skill")),new com.rem.lang.helpers.output.OutputArguments().add(skillsAsParameter).array(new com.rem.lang.helpers.output.OutputExact().set(""))))).method(new com.rem.lang.helpers.output.OutputMethod().access("public ").isStatic().set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("Skill")),new com.rem.lang.helpers.output.OutputExact().set("create")).parameters(new com.rem.lang.helpers.output.OutputParameters().add(new com.rem.lang.helpers.output.OutputVariable().set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("String")),new com.rem.lang.helpers.output.OutputExact().set("skillName")))).body(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputStatement().prefix("return ").set(new com.rem.lang.helpers.output.OutputExact().set("null"))))).mark();
	public static void output(){
		com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").removeVariable("skills");
		com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").variable(new com.rem.lang.helpers.output.OutputVariable().isPublic().isStatic().set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("Skill")).array(),new com.rem.lang.helpers.output.OutputExact().set("skills")).assign(new com.rem.lang.helpers.output.OutputNewObject().set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("Skill")),new com.rem.lang.helpers.output.OutputArguments().add(skillsAsParameter).array(new com.rem.lang.helpers.output.OutputExact().set("")))));
	}
	public static void setup(com.rem.gen.parser.Parser.Result.Pass data){
		com.rem.lang.helpers.output.OutputClassStructure.getClass("Entity").getMethod("gain(Skill,Source)").append(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputStatement().set(new com.rem.lang.helpers.output.OutputCall().add(new com.rem.lang.helpers.output.OutputExact().set("skill"),null).add(new com.rem.lang.helpers.output.OutputExact().set("load"),new com.rem.lang.helpers.output.OutputArguments()))));
	}
	public static void declaration(com.rem.gen.parser.Token declarationToken){
		String skillName = com.rem.lang.helpers.output.OutputHelper.camelize(declarationToken.get(com.rem.gen.parser.Token.Id._skillName));
		com.rem.lang.helpers.output.OutputOperator description = new com.rem.lang.helpers.output.OutputOperator().operator("+").operatorlessIfSingle();
		for(com.rem.gen.parser.Token element:declarationToken.getAllSafely(com.rem.gen.parser.Token.Id._DESCRIPTION)){
			description.add(new com.rem.lang.helpers.output.OutputQuote().set((element).toString()));
		}
		com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").encloseClass(new com.rem.lang.helpers.output.OutputClass()._package(new com.rem.lang.helpers.output.OutputCall()).name(new com.rem.lang.helpers.output.OutputExact(skillName)).extendType(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("Skill"))).variable(new com.rem.lang.helpers.output.OutputVariable().isPublic().isStatic().set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("Skill")).add(new com.rem.lang.helpers.output.OutputExact().set("Id")),new com.rem.lang.helpers.output.OutputExact().set("id")).assign(new com.rem.lang.helpers.output.OutputNewObject().set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("Skill")).add(new com.rem.lang.helpers.output.OutputExact().set("Id")),new com.rem.lang.helpers.output.OutputArguments()))).method(new com.rem.lang.helpers.output.OutputMethod().access("public ").set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("Skill")).add(new com.rem.lang.helpers.output.OutputExact().set("Id")),new com.rem.lang.helpers.output.OutputExact().set("getId")).parameters(new com.rem.lang.helpers.output.OutputParameters()).body(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputStatement().prefix("return ").set(new com.rem.lang.helpers.output.OutputExact().set("id"))))).method(new com.rem.lang.helpers.output.OutputMethod().access("public ").set(new com.rem.lang.helpers.output.OutputType().add(skillName),new com.rem.lang.helpers.output.OutputExact().set("")).parameters(new com.rem.lang.helpers.output.OutputParameters()).body(new com.rem.lang.helpers.output.OutputBody())).method(new com.rem.lang.helpers.output.OutputMethod().access("public ").set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("String")),new com.rem.lang.helpers.output.OutputExact().set("getName")).parameters(new com.rem.lang.helpers.output.OutputParameters()).body(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputStatement().prefix("return ").set(new com.rem.lang.helpers.output.OutputQuote().set((skillName).toString()))))).method(new com.rem.lang.helpers.output.OutputMethod().access("public ").set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("String")),new com.rem.lang.helpers.output.OutputExact().set("getDescription")).parameters(new com.rem.lang.helpers.output.OutputParameters()).body(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputStatement().prefix("return ").set(description)))).method(new com.rem.lang.helpers.output.OutputMethod().access("public ").set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("void")),new com.rem.lang.helpers.output.OutputExact().set("use")).parameters(new com.rem.lang.helpers.output.OutputParameters().add(new com.rem.lang.helpers.output.OutputVariable().set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("Entity")),new com.rem.lang.helpers.output.OutputExact().set("user"))).add(new com.rem.lang.helpers.output.OutputVariable().set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("Entity")),new com.rem.lang.helpers.output.OutputExact().set("victim")))).body(new com.rem.lang.helpers.output.OutputBody())).method(new com.rem.lang.helpers.output.OutputMethod().access("public ").set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("void")),new com.rem.lang.helpers.output.OutputExact().set("load")).parameters(new com.rem.lang.helpers.output.OutputParameters()).body(new com.rem.lang.helpers.output.OutputBody())).method(new com.rem.lang.helpers.output.OutputMethod().access("public ").set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("Skill")),new com.rem.lang.helpers.output.OutputExact().set("copy")).parameters(new com.rem.lang.helpers.output.OutputParameters()).body(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputStatement().prefix("return ").set(new com.rem.lang.helpers.output.OutputNewObject().set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("Skills")).add(skillName),new com.rem.lang.helpers.output.OutputArguments()))))));
		com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").getEnclosedClass((skillName).toString()).encloseClass(new com.rem.lang.helpers.output.OutputClass()._package(new com.rem.lang.helpers.output.OutputCall()).isNonStatic().name(new com.rem.lang.helpers.output.OutputExact().set("TargetCriteria")).extendType(null).implement(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("Predicate")).template(new com.rem.lang.helpers.output.OutputType.Template().add(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("Entity"))))).method(new com.rem.lang.helpers.output.OutputMethod().access("public ").set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("boolean")),new com.rem.lang.helpers.output.OutputExact().set("test")).parameters(new com.rem.lang.helpers.output.OutputParameters().add(new com.rem.lang.helpers.output.OutputVariable().set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("Entity")),new com.rem.lang.helpers.output.OutputExact().set("user")))).body(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputStatement().prefix("return ").set(new com.rem.lang.helpers.output.OutputExact().set("true"))))));
		com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").getEnclosedClass((skillName).toString()).encloseClass(new com.rem.lang.helpers.output.OutputClass()._package(new com.rem.lang.helpers.output.OutputCall()).isNonStatic().name(new com.rem.lang.helpers.output.OutputExact().set("DestinationCriteria")).extendType(null).implement(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("Predicate")).template(new com.rem.lang.helpers.output.OutputType.Template().add(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("Tile"))))).method(new com.rem.lang.helpers.output.OutputMethod().access("public ").set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("boolean")),new com.rem.lang.helpers.output.OutputExact().set("test")).parameters(new com.rem.lang.helpers.output.OutputParameters().add(new com.rem.lang.helpers.output.OutputVariable().set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("Tile")),new com.rem.lang.helpers.output.OutputExact().set("user")))).body(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputStatement().prefix("return ").set(new com.rem.lang.helpers.output.OutputExact().set("true"))))));
		com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").getEnclosedClass((skillName).toString()).getMethod("()").append(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputStatement().set(new com.rem.lang.helpers.output.OutputOperator().left(new com.rem.lang.helpers.output.OutputExact().set("targetCriteria")).operator("=").right(new com.rem.lang.helpers.output.OutputNewObject().set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("TargetCriteria")),new com.rem.lang.helpers.output.OutputArguments())))));
		com.rem.lang.helpers.output.OutputContext useContext = com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").getEnclosedClass((skillName).toString()).getMethod("use(Entity,Entity)");
		Boolean isFirst = true;
		List<com.rem.lang.helpers.output.OutputVariable> variables = new ArrayList<com.rem.lang.helpers.output.OutputVariable>();
		for(com.rem.gen.parser.Token element:declarationToken.getAll()){
			switch(element.getName()){
				case _variable_declaration :{
					com.rem.lang.helpers.output.OutputVariable variable = QuestineerSource.addVariableHeader(element.get(com.rem.gen.parser.Token.Id._variable_header),com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").getEnclosedClass((skillName).toString()));
					variables.add(variable);
					if(element.get(com.rem.gen.parser.Token.Id._statement)!=null){
						variable.assign(QuestineerSource.getStatement(element.get(com.rem.gen.parser.Token.Id._statement),com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").getEnclosedClass((skillName).toString())));
					}
					else if((element.get(com.rem.gen.parser.Token.Id._variable_header).get(com.rem.gen.parser.Token.Id._type_name).get(com.rem.gen.parser.Token.Id._mapDeclaration)!=null)){
						variable.assign(new com.rem.lang.helpers.output.OutputNewObject().set(new com.rem.lang.helpers.output.OutputType().add(QuestineerSource.getTypeName(element.get(com.rem.gen.parser.Token.Id._variable_header).get(com.rem.gen.parser.Token.Id._type_name))),new com.rem.lang.helpers.output.OutputArguments()));
						com.rem.lang.helpers.output.OutputType keyType = null;
						com.rem.lang.helpers.output.OutputType entryType = null;
						for(com.rem.gen.parser.Token typeName:element.get(com.rem.gen.parser.Token.Id._variable_header).get(com.rem.gen.parser.Token.Id._type_name).get(com.rem.gen.parser.Token.Id._mapDeclaration).getAllSafely(com.rem.gen.parser.Token.Id._type_name)){
							if(keyType==null){
								keyType=QuestineerSource.getTypeName(typeName);
							}
							else{
								entryType=QuestineerSource.getTypeName(typeName);
							}
						}
						com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").getEnclosedClass((skillName).toString()).method(new com.rem.lang.helpers.output.OutputMethod().access("public ").set(new com.rem.lang.helpers.output.OutputType().add(entryType),new com.rem.lang.helpers.output.OutputExact().set("get")).parameters(new com.rem.lang.helpers.output.OutputParameters().add(new com.rem.lang.helpers.output.OutputVariable().set(new com.rem.lang.helpers.output.OutputType().add(keyType),new com.rem.lang.helpers.output.OutputExact().set("key")))).body(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputStatement().prefix("return ").set(new com.rem.lang.helpers.output.OutputCall().add(new com.rem.lang.helpers.output.OutputExact(element.get(com.rem.gen.parser.Token.Id._variable_header).get(com.rem.gen.parser.Token.Id._variableName)),null).add(new com.rem.lang.helpers.output.OutputExact().set("get"),new com.rem.lang.helpers.output.OutputArguments().add(new com.rem.lang.helpers.output.OutputExact().set("key")))))));
					}
					break;
				}
				case _method_parameters :{
					for(com.rem.gen.parser.Token atom:element.getAllSafely(com.rem.gen.parser.Token.Id._variable_header)){
						variables.add(QuestineerSource.addVariableHeader(atom,com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").getEnclosedClass((skillName).toString())));
					}
					break;
				}
				case _require :{
					for(com.rem.gen.parser.Token atom:element.getAllSafely(com.rem.gen.parser.Token.Id._boolean_statement)){
						com.rem.lang.helpers.output.OutputContext canUseContext = com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").getEnclosedClass((skillName).toString()).getEnclosedClass("TargetCriteria").getMethod("test(Entity)");
						com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").getEnclosedClass((skillName).toString()).getEnclosedClass("TargetCriteria").getMethod("test(Entity)").prepend(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputConditional().init("if").body(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputStatement().prefix("return ").set(new com.rem.lang.helpers.output.OutputExact().set("false")))).header(new com.rem.lang.helpers.output.OutputConditionalHeader().declare(null).call(QuestineerSource.getBooleanStatement(atom,true,canUseContext)))));
					}
					break;
				}
				case _cooldown :{
					com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").getEnclosedClass((skillName).toString()).getMethod("()").append(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputStatement().set(new com.rem.lang.helpers.output.OutputOperator().left(new com.rem.lang.helpers.output.OutputExact().set("cost")).operator("=").right(Entity.getStatRange(element.get(com.rem.gen.parser.Token.Id._stat_range),useContext)))));
					break;
				}
				case _range :{
					com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").getEnclosedClass((skillName).toString()).getMethod("()").append(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputStatement().set(new com.rem.lang.helpers.output.OutputOperator().left(new com.rem.lang.helpers.output.OutputExact().set("range")).operator("=").right(Entity.getStatRange(element.get(com.rem.gen.parser.Token.Id._stat_range),useContext)))));
					break;
				}
				case _use :{
					for(com.rem.gen.parser.Token atom:element.getAllSafely(com.rem.gen.parser.Token.Id._body_element)){
						com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").getEnclosedClass((skillName).toString()).getMethod("use(Entity,Entity)").append(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputStatement().set(QuestineerSource.getBodyElement(atom,useContext))));
					}
					break;
				}
				case _load :{
					for(com.rem.gen.parser.Token atom:element.getAllSafely(com.rem.gen.parser.Token.Id._body_element)){
						com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").getEnclosedClass((skillName).toString()).getMethod("load()").append(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputStatement().set(QuestineerSource.getBodyElement(atom,useContext))));
					}
					break;
				}
				case _miss :{
					for(com.rem.gen.parser.Token atom:element.getAllSafely(com.rem.gen.parser.Token.Id._option)){
						com.rem.lang.helpers.output.Output chance = QuestineerSource.getChance(atom.get(com.rem.gen.parser.Token.Id._has_chance));
						if(atom.get(com.rem.gen.parser.Token.Id._boolean_statement)!=null){
							com.rem.lang.helpers.output.Output bool = QuestineerSource.getBooleanStatement(atom.get(com.rem.gen.parser.Token.Id._boolean_statement),useContext);
							if(isFirst){
								com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").getEnclosedClass((skillName).toString()).getMethod("use(Entity,Entity)").prepend(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputConditional().init("if").body(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputConditional().init("if").body(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputStatement().prefix("return ").set(new com.rem.lang.helpers.output.OutputStaticCall().set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("void")),new com.rem.lang.helpers.output.OutputCall())))).header(new com.rem.lang.helpers.output.OutputConditionalHeader().declare(null).call(chance)))).header(new com.rem.lang.helpers.output.OutputConditionalHeader().declare(null).call(bool))));
								isFirst=false;
							}
							else{
								com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").getEnclosedClass((skillName).toString()).getMethod("use(Entity,Entity)").prepend(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputConditional().init("if").body(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputConditional().init("else if").body(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputStatement().prefix("return ").set(new com.rem.lang.helpers.output.OutputStaticCall().set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("void")),new com.rem.lang.helpers.output.OutputCall())))).header(new com.rem.lang.helpers.output.OutputConditionalHeader().declare(null).call(chance)))).header(new com.rem.lang.helpers.output.OutputConditionalHeader().declare(null).call(bool))));
							}
						}
						else{
							if(isFirst){
								com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").getEnclosedClass((skillName).toString()).getMethod("use(Entity,Entity)").prepend(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputConditional().init("if").body(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputStatement().prefix("return ").set(new com.rem.lang.helpers.output.OutputStaticCall().set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("void")),new com.rem.lang.helpers.output.OutputCall())))).header(new com.rem.lang.helpers.output.OutputConditionalHeader().declare(null).call(chance))));
								isFirst=false;
							}
							else{
								com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").getEnclosedClass((skillName).toString()).getMethod("use(Entity,Entity)").prepend(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputConditional().init("else if").body(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputStatement().prefix("return ").set(new com.rem.lang.helpers.output.OutputStaticCall().set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("void")),new com.rem.lang.helpers.output.OutputCall())))).header(new com.rem.lang.helpers.output.OutputConditionalHeader().declare(null).call(chance))));
							}
						}
					}
					break;
				}
			}
		}
		com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").getMethod("create(String)").prepend(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputConditional().init("if").body(new com.rem.lang.helpers.output.OutputBody().add(new com.rem.lang.helpers.output.OutputStatement().prefix("return ").set(new com.rem.lang.helpers.output.OutputNewObject().set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("Skills")).add(skillName),new com.rem.lang.helpers.output.OutputArguments())))).header(new com.rem.lang.helpers.output.OutputConditionalHeader().declare(null).call(new com.rem.lang.helpers.output.OutputCall().add(new com.rem.lang.helpers.output.OutputQuote().set((skillName).toString()),null).add(new com.rem.lang.helpers.output.OutputExact().set("equals"),new com.rem.lang.helpers.output.OutputArguments().add(new com.rem.lang.helpers.output.OutputExact().set("skillName")))))));
		(com.rem.lang.helpers.output.OutputClassStructure.getClass("Skills").getEnclosedClass((skillName).toString())).addDefaultConstructor(variables);
	}
	public static com.rem.lang.helpers.output.Output getId(String name){
		return new com.rem.lang.helpers.output.OutputStaticCall().set(new com.rem.lang.helpers.output.OutputType().add(new com.rem.lang.helpers.output.OutputExact().set("Skills")).add(name),new com.rem.lang.helpers.output.OutputExact().set("id"));
	}
}
