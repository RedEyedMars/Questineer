class 'packageName'.entities.behaviours.quests  Quest Object Usable {
  class Id / Usable->Id / {
  }
  ~class TargetCriteria / Criteria->Target / {
    Boolean satisfies(Entity user){
      return false;
    }
    Boolean satisfies(Tile candidate){
      return false;
    }
  }
  class Listeners // {
    class Success / Events->Success->Listener / {
      Quest host = null;
      Integer nextIndex = -1;
      void listen(Events->\Success event){
        host.advanceTo(nextIndex);
      }
    }
    class Fail / Events->Fail->Listener / {
      Quest host = null;
      void listen(Events->\Fail event){
        host.on( "(Events.Fail)event" );
      }
    }
  }
  @Integer UNSTARTED   = -1;
  @Integer IN_PROGRESS = 0;
  @Integer SUCCESS     = 1;
  @Integer FAIL        = 2;
  ~Integer    status             = UNSTARTED;
  ~Activity currentActivity      = null;
  ~Integer currentActivityIndex  = -1;
  ~Activity->List activities      = new Activity->List();
  Quest->Id getId(){ return null; }
  Boolean canChase(){
    return false;
  }
  Float getRange(Entity user){
    return 0f;
  }
  Criteria->Target getTargetCriteria(){
    return new Quest->TargetCriteria();
  }
  
  Boolean use(Entity user, Activity activity){
    if status == UNSTARTED {
	  \on(new Events->\StartQuest(this,user));
	}
	if currentActivity != null {
      currentActivity.on(new Events->\Tick(user));
	  return true;
	}
	else {
	  return false;
	}
  }
  void add(Activity newActivity){
    activities.add(newActivity);
    newActivity.add(new Quest->Listeners->\Success(this,activities.size()));
    newActivity.add(new Quest->Listeners->\Fail(this));
  }
  void advanceTo(Integer newIndex){
    if newIndex < activities.size() {
      currentActivity = activities.get(newIndex);
      currentActivityIndex = newIndex;
    }
    else {
      status = SUCCESS;
    }
  }
}
class 'packageName'.entities.behaviours.quests Quests {
> void setup(%Pass data){
    Events.addToEventMethod("startQuest",Quest,{
      if "activities".isEmpty()==false {
        \currentActivity = \activities.get(0);
        \currentActivityIndex = 0;
        \status = \IN_PROGRESS;
      }
      else {
        \status = \FAIL;
      }
    });
    Events.addToEventMethod("fail",Quest,{
      \status = \FAIL;
    });
  }
> void typeDeclaration(%T declarationToken){
    String questName = 'declarationToken->"questName"';
    String description = 'declarationToken->"DESCRIPTION"';
    Quests += class questName / Quest / {
      void generateDestinations(Entity quester){}
      Boolean fulfill(Entity quester, Area destinationReached){
        return true;
      }
    }
    Statement tileClauses = new Statement();
    tileClauses.set("&&");
    ~Integer tileCount = 0;
    declarationToken : element : quest_destination {
      Statement tileClause = new Statement();
      tileClause.brace();
      tileClause.set("||");
      Quests->'questName' += ~Set<Area> '"visited"+tileCount' = new HashSet<Area>();
      Quests->'questName' += ~Set<Area> '"toVisit"+tileCount' = new HashSet<Area>();
      element : atom : quest_tile_description {
        String tileName = 'atom->"tileName"'.replace(" ","");
        String mapName = 'atom->"mapName"'.replace(" ","");
        String negatedOperator = \negateOperator('atom->"ORDINAL"');
        Statement tileNameClause = new Statement();
        tileNameClause.set(negatedOperator);
        tileNameClause.add(|'"visited"+tileCount'.size()|);
        tileNameClause.add(|'atom->"INTEGER"'|);
        tileClause.add(tileNameClause);
        
        Quests->*"fulfill".prependToBody({
          if '"toVisit"+tileCount'.contains("destinationReached") {
            '"visited"+tileCount'.add("destinationReached");
          }
        });
        Quests->*"generateDestinations".prependToBody({
          '"toVisited"+tileCount'.add("quester".getLocation().getEnvironment(Environments->'mapName'."id").getNodeFromId("quester".getLocation(),Tiles->'mapName+tileName'."id"));
        });
      }
      tileClauses.add(tileClause);
      tileCount \+= 1;
    }
    if tileClauses.size() > 0 {
      Quests->*"fulfill".prependToBody({
        if `tileClauses` {
          return false;
        }
      });
    }
    declarationToken : element : event_statement {
      Body eventBody = new Body ();
      ~String eventName = 'element->"event_names"';
      if eventName == "start" || eventName == "load" {
        eventName = "startQuest";
      }
      Context eventContext = Events.addToEventMethod(eventName,Quests->'questName',{});
      element : atom : body_element {
        eventBody.add(\getBodyElement(atom,eventContext));
      }
      eventBody.add(|super.on("event");|);
      Events.addToEventMethod(eventName,Quests->'questName',eventBody);
    }
    Quests->'questName'->*"fulfill".prependToBody({
      return true;
    });
    
  }
}