class 'packageName'.entities.behaviours.skills.attacks  Attack Skill {
  class Id //{
  }
  class Damage //{
    ~Float value    = 0f;
    ~Float modifier = 1f;
    ~Boolean hit    = true;
    
	Float getTotal(){
	  return value * modifier;
	}
  }
  Float getRange(Entity entity){
	return "range".getValue(entity);
  }
  Integer getCost(Entity "entity"){
	return "(int)cost".getValue("entity");
  }
  Integer getCooldown(){
	return "cooldown";
  }	
  Boolean isOffCooldown(){
	return "cooldown" == 0;
  }
  void on(Events->\Tick event){
	if "cooldown">0 {
	   "cooldown" -= 1;
	}
  }
  void use(Entity offender, Entity victim){
    \attack(offender,victim);
  }
  void attack(Entity attacker, Entity defender){
    "cooldown" = \getCost(attacker);
	Attack->Damage damage = \getDamage(attacker,defender);
	attacker.on(new Events->\PreAttack(attacker,defender,damage));
	if damage.getHit() {
	  defender.on(new Events->\Hit(attacker,defender,damage));
	  "experience" \+= 3;
	}
	else {
	  defender.on(new Events->\Miss(attacker,defender,damage));
	  "experience" \+= 1;
	}
	attacker.on(new Events->\PostAttack(attacker,defender,damage));
  }
  Attack->Damage getDamage(Entity "attacker", Entity "defender"){
    return null;
  }
  Attack->Id getAttackId(){
    return null;
  }
}
class 'packageName'.entities.behaviours.skills.attacks  Attacks {
  @Attack create(String "attackName"){
    return null;
  }
> Statement getId(String name){
    return |Attacks->'name'.id|;
  }
> void declaration(%T declarationToken){
    String attackName = ^declarationToken->"attackName";
    Statement description = new Statement ("+");
    declarationToken : element : DESCRIPTION {
	  description.add(|''element''|);
	}
    Attacks += class attackName / Attack / {
      @Attack->Id "id" = new Attack->Id();
      @Skill->Id "skillId" = new Skill->Id();
      Attack->Id getAttackId(){
        return id;
      }
      Skill->Id getId(){
        return skillId;
      }
	  String getName(){
	    return ''attackName'';
	  }
	  String getDescription(){
	    return `description`;
	  }
	  Attack->Damage getDamage(Entity "attacker", Entity "defender"){
        Attack->Damage "damage" = new Attack->Damage();
      }
    }
    Context damageContext = Attacks->'attackName'.getMethod("getDamage").getContext();
    ~Boolean isFirst = true;
    declarationToken : element 
      : cooldown {
        Attacks->'attackName'->* += | "cost" = `Entity.getStatRange(element->"stat_range",damageContext)`; |
      }
      : range {
        Attacks->'attackName'->* += | "range" = `Entity.getStatRange(element->"stat_range",damageContext)`; |
      }
      : damage {
        element : atom 
          : by_stat {
            Attacks->'attackName'->*"getDamage" += | "damage".setValue(`Entity.getStatRange(atom->"stat_range",damageContext)`.getValue("attacker") * "attacker".getItemDamage()); |
          }
          : body_element {
            Attacks->'attackName'->*"getDamage" += |`\getBodyElement(element,damageContext)`|
          }
      }
      : miss {
        Statement setMiss = | "damage".setHit(false) |;
        element : atom : option {
          Statement chance = | `\getChance(atom->"has_chance")` |;
          if atom->"boolean_statement" != null {
            Statement bool = | `\getBooleanStatement(atom->"boolean_statement", damageContext)` |;
            if isFirst {
              Attacks->'attackName'->*"getDamage" += | if `bool` { if `chance` {`setMiss`;} } |
              isFirst = false;
            }
            else {
              Attacks->'attackName'->*"getDamage" += | else if `bool` { if `chance` {`setMiss`;} } |
            }
          }
          else {
            if isFirst {
              Attacks->'attackName'->*"getDamage" += | if `chance` {`setMiss`;} |
              isFirst = false;
            }
            else {
              Attacks->'attackName'->*"getDamage" += | else if `chance` {`setMiss`;} |
            }
          }
        }
      }
    Attacks->'attackName'->*"getDamage" += | return "damage"; |
    
	Attacks.getMethod("create").prependToBody(| if ''attackName''.equals("attackName"){
      return new Attacks->'attackName'(); }|);
  }
}