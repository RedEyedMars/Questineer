class 'packageName'.entities.behaviours.activities  Activity Object Source{
  class Id // {
  }
  interface Factory // {
    Activity create(){}
  }
  class Listeners // {
    class Fail / Events->\Fail->Listener / {
      Activity host = null;
      Boolean listen(Events->\Fail event){
        host.on(event);
        return true;
      }
    }
  }
  ~String name = null;
  ~String description = null;
  ~Set<Tiles\>EntryPoint> exploredPoints = new HashSet<Tiles\>EntryPoint>();
  ~Set<Area> exploredAreas = new HashSet<Area>();
  ~Entity targetEntity = null;
  ~Tiles->MonsterDen targetDen = null;
  ~Tiles->Terrain targetTerrain = null;
  ~Boolean failed = false;
  ActivityType getType(){
    return null;
  }
  void setHost(Entity newHost){
  }
  Boolean hasTarget() {
    return targetEntity != null || targetDen != null || targetTerrain != null;
  }
  void rememberEntryPoint(Tiles->EntryPoint point){
    exploredPoints.add(point);
  }
  void explore(Area newArea){
    exploredAreas.add(newArea);
  }
  Boolean hasExplored(Area area){
    return exploredAreas.contains(area);
  }
  Entity getTarget(Entity host, Criteria->Target targetCriteria){
    return host.getLocation().getClosestEntity(targetCriteria);
  }
  Tile getDestination(Entity host){
    return null;
  }
  Boolean hasSucceeded(Entity host){
    return false;
  }
  Boolean hasFailed(Entity host){
    return failed;
  }
  Usable->List getUsables(){
    return null;
  }
  Usable pick(){
    if \getUsables().isEmpty() == false {
	  return Range.select(\getUsables());
	}
	else {
	  failed = true;
	  return null;
	}
  }
  void add(Usable newUsable){
  }
  void remove(Usable newUsable){
  }
  void listen(Entity host, Entity->Event event){
  }
  Boolean on(Events->\Tick event){
  	Entity host = event.getHost();
    if \hasSucceeded(host){
      \on(new Events->\Success(host,this));
      host.stop(this);
      return true;
    }
    else if \hasFailed(host){
      \on(new Events->\Fail(host,this));
      host.stop(this);
      return true;
    }
    else if host.isIdle() {
      if failed == false && \step(host)==false {
        return \on(new Events->\Idle(host,this));
      }
      else {
        return true;
      }
    }
    else {
      return true;
    }
  }
  Boolean step(Entity host){
    if host.getFocusSkill()==null || \getUsables().contains(host.getFocusSkill()) == false || host.getFocusSkill().use(host,this) == false {
      for Usable usable : \getUsables() {
        if usable!=host.getFocusSkill() && usable.use(host,this) {
          return true;
        }
      }
    }
	return false;
  }
  Boolean on(Events->\Idle event){
    Entity->List entitiesToTarget = event.getHost().getLocation().getEntitiesWithin(20f);
	for Entity candidate : entitiesToTarget {
	  for Usable usable : \getUsables() {
	    if usable.getTargetCriteria().test(candidate) {
	      event.getHost().start( new Activities->\ChasingEntity(25, candidate, usable.getRange(event.getHost())) );
	      return true;
	    }
	  }
	}
	failed = true;
  }
  Usable->List getInRangeUsables(Entity host, Entity toTarget){
    Usable->List result = new Usable->List();
    Double distanceToTarget = host.getLocation().getDistanceTo(toTarget.getLocation());
    for Usable usable : \getUsables() {
	  Float potentialRange = usable.getRange(host);
	  if potentialRange <= distanceToTarget && usable.getTargetCriteria().test(toTarget) {
	    result.add(usable);
	  }
	}
	return result;
  }
  Usable->List getAvailableUsables(Entity host, Entity toTarget){
    Usable->List result = new Usable->List();
    for Usable usable : \getUsables() {
	  if usable.getTargetCriteria().test(toTarget) {
	    result.add(usable);
	  }
	}
	return result;
  }
  Usable getFurthestAvailableUsable(Entity host, Entity toTarget){
    Usable result = null;
    Float longestRange = -1f;
    for Usable usable : \getUsables() {
	  Float potentialRange = usable.getRange(host);
	  if potentialRange > longestRange && usable.getTargetCriteria().test(toTarget) {
	    longestRange = potentialRange;
	    result = usable;
	  }
	}
	return result;
  }
  Usable->List getInRangeUsables(Entity host, Tile toTarget){
    Usable->List result = new Usable->List();
    Double distanceToTarget = host.getLocation().getDistanceTo(toTarget);
    for Usable usable : \getUsables() {
	  Float potentialRange = usable.getRange(host);
	  if potentialRange <= distanceToTarget && usable.getDestinationCriteria().test(toTarget) {
	    result.add(usable);
	  }
	}
	return result;
  }
  Usable->List getAvailableUsables(Entity host, Tile toTarget){
    Usable->List result = new Usable->List();
    for Usable usable : \getUsables() {
	  if usable.getDestinationCriteria().test(toTarget) {
	    result.add(usable);
	  }
	}
	return result;
  }
  Usable getFurthestAvailableUsable(Entity host, Tile toTarget){
    Usable result = null;
    Float longestRange = -1f;
    for Usable usable : \getUsables() {
	  Float potentialRange = usable.getRange(host);
	  if potentialRange > longestRange && usable.getDestinationCriteria().test(toTarget) {
	    longestRange = potentialRange;
	    result = usable;
	  }
	}
	return result;
  }
  Activity->Id getId(){
    return null;
  }
}
class 'packageName'.entities.behaviours.activities  Activities {
  @Activity create(String activityName){
    return null;
  }
> void setup(%Pass data){
    \createCriteria(Activity);
    Events.addToEventMethod("load",Activity,{});
    Events.addToEventMethod("idle",Activity,{});
    Events.addToEventMethod("success",Activity,{});
    Events.addToEventMethod("fail",Activity,{});
  }
> void declaration(%T declarationToken){
    String activityName = ^declarationToken->"activityName";
    String description = 'declarationToken->"DESCRIPTION"';
    
    String declaredTypeName = ActivityTypes.currentlyDeclaredTypeName;
    Activities += class activityName / Activity / {
      @Activity->Id id = new Activity->Id();
      @Usable->List allUsables = new Usable->List();
      ~Entity host = null;
      String getName(){
        return '' 'activityName' '';
      }
      String getDescription(){
        return '' 'description' '';
      }
      ActivityType getType(){
        return ActivityTypes.'declaredTypeName';
      }
      Usable->List getUsables(){
        return allUsables;
      }
      Boolean hasSucceeded(Entity host){
      }
      Boolean hasFailed(Entity host){
      }
      Activity->Id getId(){
        return id;
      }
    }
    if declarationToken->"method_parameters" != null {
      declarationToken->"method_parameters" : element : variable_header {
        \addVariableHeader(element, Activities->'activityName');
      }
    }
    declarationToken : element : variable_declaration {
      Variable variable = \addVariableHeader(element->"variable_header", Activities->'activityName');
      variable.setIsFinal(false);
      variable.setHasSetMethod(true);
      if element->"statement" != null {
        variable.setAssignment(\getStatement(element->"statement",Activities->'activityName'.getContext()));
      }
    }
    Activities->*"create".prependToBody({
      if "activityName".equals('' 'activityName' '') {
        return new Activities->'activityName'(); 
      }
    });
    declarationToken : element : className {
      String methodName = "gain["+'element'+",Source]";
      String variableName = 'element'.toLowerCase();
      Entity->*'methodName'.appendToBody({
          Activities->'activityName'."allUsables".add('variableName');
        });
    }
    declarationToken : element : endState {
      if element->"SUCCEED" != null {
        Context successContext = Activities->'activityName'->*"hasSucceeded[Entity]".getContext();
        Activities->'activityName'->*"hasSucceeded[Entity]".appendToBody({
          if `\getBooleanStatement(element->"boolean_statement",successContext)` {
            return true;
          }
        });
      }
      else {
        Context failContext = Activities->'activityName'->*"hasFailed[Entity]".getContext();
        Activities->'activityName'->*"hasFailed[Entity]".appendToBody({
          if `\getBooleanStatement(element->"boolean_statement",failContext)` {
            return true;
          }
        });
      }
    }
    declarationToken : element : getTarget {
      Activities->'activityName' += Entity getTarget(Entity host, Criteria->Target targetCriteria){}
      Context getTargetContext = Activities->'activityName'->*"getTarget[Entity,EntityCriteria]".getContext();
      element : atom : body_element {
        Activities->'activityName'->*"getTarget[Entity,EntityCriteria]".appendToBody(\getBodyElement(atom,getTargetContext));
      }
    }
    declarationToken : element : getDestination {
      Activities->'activityName' += Entity getDestination(Entity host){}
      Context getTargetContext = Activities->'activityName'->*"getDestination[Entity]".getContext();
      element : atom : body_element {
        Activities->'activityName'->*"getDestination[Entity]".appendToBody(\getBodyElement(atom,getTargetContext));
      }
    }
    if declarationToken->"step" != null {
      declarationToken : element : step {
        Activities->'activityName' += Boolean step(Entity host){}
        Context stepContext = Activities->'activityName'->*"step".getContext();
        Activities->'activityName'->*"step".appendToBody(\getBodyElements(element,stepContext));
      }
    }
    if declarationToken->"listen" != null {
      declarationToken : element : listen {
        Activities->'activityName' += void listen(Entity host,Entity->Event event){}
        Context listenContext = Activities->'activityName'->*"listen".getContext();
        Activities->'activityName'->*"listen".appendToBody(\getBodyElements(element,listenContext));
      }
    }
    declarationToken : element : event_statement {
      Context eventContext = Events.getEventContext('element->"event_names"',Activities->'activityName');
      Events.addToEventMethod('element->"event_names"',Activities->'activityName',\getBodyElements(element,eventContext));
    }
    
    Activities->'activityName'->*"hasSucceeded[Entity]".appendToBody({return false;});
    Activities->'activityName'->*"hasFailed[Entity]".appendToBody({return false;});
  }
> Statement getId(String name){
    return |Activities->'name'.id|;
  }
}
class 'packageName'.entities.behaviours.activities ActivityType {
  enum Id // {void None;}
  String name;
  ActivityType->Id id;
}
class 'packageName'.entities.behaviours.activities ActivityTypes {
  @ActivityType None = new ActivityType(''"None"'',ActivityType->Id."None");
>@ Body createSwitchBody = new Body ();
  @ActivityType create(ActivityType->Id id) {
    switch id `createSwitchBody`
    return null;
  }
> Set<String> allActivityNames = new HashSet<String>();
>@~String currentlyDeclaredTypeName = "None";
> void declaration(%T input) {
    String activityTypeName = ^input->"activityTypeName";
    currentlyDeclaredTypeName = activityTypeName;
    if allActivityNames.add(activityTypeName){
      ActivityType->Id += void 'activityTypeName';
      ActivityTypes += @ActivityType 'activityTypeName' = new ActivityType(
            '' 'activityTypeName' '',
            ActivityType->Id.'activityTypeName');
      createSwitchBody.add(|case 'activityTypeName' { return ActivityTypes.'activityTypeName';}|);
      String variableName = activityTypeName.substring(0,1).toLowerCase()\+activityTypeName.substring(1)\+"Motivation";
      Entity.motivationForSwitchBody.add(|case 'activityTypeName' {return 'variableName';}|);
      Entity.motivationSwapSwitchBody1.add(|case 'activityTypeName' {
          if 'variableName' == 0 {
            return false;
          }
          "break";
        }|);
      Entity.motivationSwapSwitchBody2.add(|case 'activityTypeName' {
          if 'variableName' == 10 {
            return false;
          }
          "break";
        }|);
      Entity.motivationSwapSwitchBody3.add(|case 'activityTypeName' {
          "--"+'variableName';
          "break";
        }|);
      Entity.motivationSwapSwitchBody4.add(|case 'activityTypeName' {
          "++"+'variableName';
          "break";
        }|);
      Entity += ~int 'variableName' = 5;
    }
  }
> Statement getId(String name){
    return |ActivityType->Id.'name'|;
  }
}