class 'packageName'.entities.mods.affinities  Affinity \Object Source {
  class 'packageName'."entities"."mods"."affinities" Id {
  }
  Affinity->Id getId(){
    return null;
  }
  String "name";
  Double modify(Entity "defender", Double "damage"){
    return 0.0;
  }
}
class 'packageName'.entities.mods.affinities Affinities {
> @Parameters affinitiesAsParameter = new Parameters ();
  @Affinity[] affinities = new Affinity(`affinitiesAsParameter`)[];
  @Affinity create(String "affinityName"){
    return null;
  }
> void output(){
    Affinities.removeVariable("affinities");
    Affinities += @Affinity[] affinities = new Affinity(`affinitiesAsParameter`)[];
  }
> void declaration(%T declarationToken){
    String affinityName = 'declarationToken->"affinityName"';
    String affinityClassName = ^affinityName;
    Statement weaknesses = new Statement();
    Statement strengths = new Statement();
    declarationToken : element : strength_name {
      strengths.set("||");
      strengths.add(\hasAffinity(^element));
    }
    declarationToken : element : weakness_name {
      weaknesses.set("||");
      weaknesses.add(\hasAffinity(^element));
    }
    Affinities += @Affinities->'affinityClassName' 'affinityName' = new Affinities->'affinityClassName'();
    affinitiesAsParameter.add(|'affinityName'|);
    Affinities += class affinityClassName /Affinity/ {
	  @Affinity->Id "id" = new Affinity->Id();
      String getName(){
        return ''affinityName'';
      }
      Double modify(Entity "defender", Double "damage"){
        
		return "damage";
      }
    }
    if weaknesses.isEmpty() == false {
      Affinities->'affinityClassName'->*"modify".prependToBody({
		if `weaknesses` {
		  "damage" /= 2.0;
		}});
    }
    if strengths.isEmpty() == false {
      Affinities->'affinityClassName'->*"modify".prependToBody({
        if `strengths` {
		  "damage" *= 2.0;
		}});
    }
    Affinities.getMethod("create").prependToBody(|if ''affinityClassName''.equals("affinityName"){ return new Affinities->'affinityClassName'();} |);
  }
> Statement hasAffinity(String affinityName){
    return |"defender".has(Affinities->'affinityName'."id")|;
  }
> Statement getId(String name){
    return |Affinities->name.id|;
  }
}