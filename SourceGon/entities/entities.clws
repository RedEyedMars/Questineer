
import behaviours/activities/activities.clws
import behaviours/skills/skills.clws
import behaviours/quests/quests.clws
import items/items.clws
import mods/affinities/affinities.clws
import mods/conditions/conditions.clws
import mods/traits/traits.clws
import relations/relations.clws

class 'packageName'.misc Int {
  Integer value = 0;
  void setValue(Integer newValue){
    value = newValue;
  }
  void increase(Integer amount){
    value \+= amount;
  }
}
class 'packageName'.entities Entities {
  @Entity createEntity(String "entityName"){
    return null;
  }
  class Hero / Entity / {
    ~Gui->Image->States imageStates = null;
    ~Gui->Drawable drawable = null;
    Hero *(Gui->Statable image){
      imageStates = image.asStates();
    }
    
    Entity->Id getId(){
      return Entity->Id."Hero";
    }
    boolean getIsPlayerAffiliated(){
      return true;
    }
    Gui->Drawable getDrawable(){
      if drawable == null {
        drawable = Drawables.square.image(imageStates);
        drawable.setVisualWidth(2/13f);
        drawable.setVisualHeight(2/13f);
      }
      return drawable;
    }
    void changeState(ImageStates newState){
      imageStates.changeState(newState);
    }
    Boolean isIdle(){
      return imageStates.getId() == ImageStates.idle;
    }
    Gui->Image->States changeTo(){
      return imageStates;
    }
  }
> Class declaration(%T declarationToken){
    StringBuilder entityNameBuilder = new StringBuilder();
	declarationToken : element : entityName {
	  entityNameBuilder.append('element');
	}
	String entityName = entityNameBuilder.toString();
	
    Entity->Id += void 'entityName';
    Entities += class entityName /Entity/ {
      @Entity->Id id = Entity->Id.'entityName'; 
      ~Gui->Drawable drawable = null;
      Entity->Id getId(){
        return Entity->Id.'entityName';
      }
    }
    Entities->'entityName' += class Factory /Object/ Entity->Factory {
        Entity create(){
          return new Entities->'entityName'();
        }
      }
    if declarationToken->"imageName" != null {
      String imageName = 'declarationToken->"imageName"';
      String imageClassName = ^declarationToken->"imageName";  
      StringBuilder newState = new StringBuilder();
      ~String underscore = "";
      declarationToken : element : imageId {
        newState.append(underscore);
        newState.append('element');
        underscore = "_";
      }
      if declarationToken->"width" != null {
        newState.append("_0");
      }
      Entities->'entityName' += ~Images->'imageClassName'->States imageStates = Images->'imageName'.asStates();
      Entities->'entityName' += Gui->Drawable getDrawable(){
          if \drawable == null {
            \drawable = Drawables.square.image(imageStates);
            \drawable.setVisualWidth(2/13f);
            \drawable.setVisualHeight(2/13f);
          }
          return \drawable;
        }
      Entities->'entityName' += void changeState(ImageStates newState){
          imageStates.changeState(newState);
        }
      Entities->'entityName' += Boolean isIdle(){
          return imageStates.getId() == ImageStates.idle;
        }
      Entities->'entityName' += Gui->Image->States changeTo(){
          return imageStates;
        }
      Entities->'entityName'->*.appendToBody(|"imageStates".'newState'();|); 
    }
    declarationToken : element : entity_definition {
      element : atom : affinity_names {
        String affinitySubType = ^atom;
    	Entities->'entityName'->*.appendToBody(| this.gain(new Affinities->'affinitySubType'(), this); |);
      }
      element : atom : event_statement {
        Context eventContext = Events.addToEventMethod('atom->"event_names"', Entities->'entityName', {});
        Body eventBody = new Body ();
        atom : quark : body_element {
          eventBody.add(\getBodyElement(quark,eventContext));
        }
        Events.addToEventMethod('atom->"event_names"', Entities->'entityName', eventBody);
      }
      element : atom : skill {
        Statement arguments = new Statement ();
        arguments.set(",");
        Context bodyContext = Entity.getContext();
        atom : quark : statement {
          arguments.add(\getStatement(quark,bodyContext));
        }
        String subSkillName = ^atom->"skill_names";
    	Entities->'entityName'->*.appendToBody(| this.gain(new Skills->'subSkillName'(`arguments`), this); |);
      }
      element : atom : stat_range {
        String heroStatName = 'atom->"hero_stat"'.toLowerCase();
        String leftBound = 'atom->"left"';
        String rightBound;
        if atom->"right" != null {
          rightBound = 'atom->"left"';
        }
        else {
          rightBound = leftBound; 
        }
    	Entities->'entityName'->*.appendToBody(| this.'heroStatName'.setValue(Range.getIntegerBetween('leftBound','rightBound')); |);
      }
    }
    return Entities->'entityName'->Factory;
  }
}
class 'packageName'.entities  Entity  Object  Source Loaddable Tickable {
  enum Id // {
    void Hero;
  }
  interface Factory //{
    Entity create(){}
  }
  interface  Stat //{
    Integer getValue(){}
    Integer getValue(Entity user){}
	void setValue(Integer "newValue"){}
	Boolean impose(Integer "amount", Source "source"){}
	void release(Source "source"){}
	String getName(){}
  }
  class Event // {
    class Id // {}
    Entity->Event->Id getId(){
      return null;
    }
    class MovedToNewArea / Entity->Event / {
      @Entity->Event->Id \id = new Entity->Event->Id();
      Entity->Event->Id getId(){
        return \id;
      }
      Area oldArea = null;
      Area newArea = null;
    }
    class FailedToMove / Entity->Event / {
      class Id / Entity->Event->Id / {}
      @Entity->Event->FailedToMove->Id \id = new Entity->Event->FailedToMove->Id();
      Entity->Event->Id getId(){
        return \id;
      }
      Tile causalTile = null;
      class TileHasOccupant / Entity->Event->FailedToMove / {
        @Entity->Event->FailedToMove->Id \id = new Entity->Event->FailedToMove->Id();
        Entity->Event->Id getId(){
          return \id;
        }
        Entity causalOccupant = null;
      }
      class TerrainImpassable / Entity->Event->FailedToMove / {
        @Entity->Event->FailedToMove->Id \id = new Entity->Event->FailedToMove->Id();
        Entity->Event->Id getId(){
          return \id;
        }
        Tiles->Terrain causalTerrain = null;
      }
    }
  }
  class Comparators // {
    class Distance // {
      class Ascending // Comparator<Entity> {
        Environment->Position origin = null;
        \int compare(Entity entity1, Entity entity2){
          return "(int)(float)(origin.getDistanceTo(entity1.location) - origin.getDistanceTo(entity2.location))";
        }
      }
      class Descending // Comparator<Entity> {
        Environment->Position origin = null;
        \int compare(Entity entity1, Entity entity2){
          return "(int)(float)(origin.getDistanceTo(entity2.location) - origin.getDistanceTo(entity1.location))";
        }
      }
    }
  }
  @Integer ALIVE = 0;
  @Integer DEAD  = 1;
  String name = null;
  ~Integer status = ALIVE;
  ~Float "weightHeld" = 0f;
  ~Integer "walkingSpeed" = 20;
  ~Tile "spawn" = null;
  ~Item->List "equippedItems" = new Item->List();
  ~Skill focusSkill = null;
  ~Environment->Location location = new Environment->Location(this);
  ~\EntityMap->\_Relationship relationships = new \EntityMap->\_Relationship();
  ~LinkedList<Activity> activityList = new LinkedList<Activity>();
  ~LinkedList<Entity\>Event> events = new LinkedList<Entity\>Event>();
  
  Entity->Id getId(){
    return null;
  }
  void display(){
    \getDrawable().display(Renderer.topLayer);
  }
  void undisplay(){
    \getDrawable().undisplay(Renderer.topLayer);
  }
  Gui->Drawable getDrawable(){
    return null;
  }
  Gui->Image->States changeTo(){
    return null;
  }
  boolean getIsPlayerAffiliated(){
    return false;
  }
  Float getItemDamage(){
    Float "sum" = 0f;
	for Item "item" : "equippedItems" {
	  "sum" \+= "item".getDmg().getValue(this);
	}
	return "sum";
  }
  Float getItemDefense(){
    Float "sum" = 0f;
	for Item "item" : "equippedItems" {
	  "sum" \+= "item".getDef().getValue(this);
	}
	return "sum";
  }
  Boolean canEquip(Item "item"){
    return this."str".getValue() > "weightHeld" \+ "item".getWeight();
  }
  void equip(Item "item"){
    "equippedItems".add("item");
	"weightHeld" = "weightHeld" \+ "item".getWeight();
	"item".on(new Events->\Equip(this,"item"));
  }
  void unequip(Item "item"){
    "equippedItems".remove("item");
	"weightHeld" = "weightHeld" \- "item".getWeight();
	"item".on(new Events->\Unequip(this,"item"));
  }
  void addEvent(Entity->Event event){
    events.push(event);
  }
  void exploreEntryPoint(Tiles->EntryPoint point){
    if activityList.isEmpty() == false {
      activityList.getFirst().rememberEntryPoint(point);
    }
  }
  void explore(Area newArea){
    if activityList.isEmpty() == false {
      activityList.getFirst().explore(newArea);
    }
  }
  Boolean hasExplored(Area area){
    if activityList.isEmpty() == false {
      return activityList.getFirst().hasExplored(area);
    } 
    else {
      return false;
    }
  }
  Boolean isIdle(){
    return true;
  }
  void changeState(ImageStates newState){
  }
  void load(){
    \on(new Events->\Load(this));
  }
  void tick(Double millisSinceLastFrame){
    
    if events.isEmpty() == false {
      if activityList.isEmpty() == false {
        while events.isEmpty() == false {
          activityList.getFirst().listen(this,events.pollFirst());
        }
        activityList.getFirst().on(new Events->\Tick(this));
      }
      else {
        while events.isEmpty() == false {
          \listen(events.pollFirst());
        }
      }
    }
    else {
      if activityList.isEmpty() == false {
	    activityList.getFirst().on(new Events->\Tick(this));
	  }
	}
    \on(new Events->\Tick(this));
  }
  void listen(Entity->Event event){
    if event.getId() == Entity->Event->FailedToMove.id {
    }
  }
  void join(Entity recruiter, Association newAssociation){
    newAssociation.add(this);
    \gain(newAssociation,recruiter);
    \on(new Events->\Joined(recruiter, this));
    newAssociation.on(new Events->\Joined(recruiter, this));
  }
  Boolean isFriendlyWith(Entity otherEntity){
    if relationships.containsKey(otherEntity) {
      return relationships.get(otherEntity).getInfluence() >= 0;
    }
    for Association association: \associations.getCompleteList() {
      if association.contains(otherEntity) {
        return true;
      }
    }
    return false;
  }
  Activity start(Activity newActivity){
    newActivity.setHost(this);
    newActivity.on(new \Events->\Load(this));
    activityList.add(0,newActivity);
    return newActivity;
  }
  void stop(Activity oldActivity){
    activityList.remove(oldActivity);
  }
  void takeDamage(Source attacker, int damageToTake){
    if \getRandomStat().impose("-damageToTake", attacker) == false {
	  \die(attacker);
    }
  }
  void die(Source killer){
    \undisplay();
    status = DEAD;
    location.getTile().setOccupant(null);
    if \hasCorpse() {
      location.getTile().setTerrain(\getCorpse());
    }
    \on(new Events->\Die(killer,this));
  }
  Boolean hasCorpse(){
    return false;
  }
  Tiles->Terrain->Corpse getCorpse(){
    return null;
  }
  void influence(Entity otherEntity, Relationship->Reason reason, Integer amount){
    \relationships.get(otherEntity, new Relationship.Factory()).influence(reason,amount);
  }
  
> void setup(%Pass data){
	List<String> namesToAdd = new ArrayList<String>();
	namesToAdd.add("hit");
	Map<String, Body > bodiesToAdd = new HashMap<String, Body >();
	bodiesToAdd.put("hit", \onHitBody());
    Events.addEventMethods(Entity,bodiesToAdd);
    
    Entity.addGainLoss(Condition,Entity);
    Entity.addGainLoss(Trait,Entity);
    Entity.addGainLoss(Affinity,Entity);
    Entity.addGainLoss(Association,Entity);
    Entity.addGainLoss(Skill,Entity);
    Entity.addGainLoss(Attack,Entity);
    Entity.addGainLoss(Support,Entity);
    Entity.addGainLoss(Quest,Entity);
    Entity.addGainLoss(Activity,Entity);
    
    \createList(Item);
    \createList(Usable);
    \createList(Activity);
    \createListMap(Source, Int);
    \createMap(Entity, Relationship);
    
    Set<String> statNames = data.getHeroStat();
    Parameters allStatList = new Parameters ();
    Body randomStatBody = {};
    for String statName : statNames {
      String vName = statName.toLowerCase();
      Entity += class statName /Object/ Entity->Stat {
        Integer value = 0;
        ~ListMaps->\Sources->\_Int history = new ListMaps->\Sources->\_Int();
        Integer getValue(Entity user){
          return user.'vName'.getValue();
        }
        void setValue(Integer newValue){
          value = newValue;
        }
        Boolean impose(Integer amount, Source source){
          synchronized this {
            history.add(source,new Int(amount));
          }
          value \+= amount;
          return "value" > 0;
        }
		void release(Source source){
		  synchronized this {
			history.removeLast(source);
		  }
		}
		String getName(){
		  return ''statName'';
		}
      }
      Entity += ~Entity->'statName' 'vName' = new Entity->'statName'();
      randomStatBody.add(|case 'allStatList.getSize()' {return 'vName';}|);
      allStatList.add(|'vName'|);
      Entity->'statName'.getContext().setEnder(|\getValue()|);
    }
    
    Entity += Entity->Stat getRandomStat(){
      switch Range.getRandom(0, 'allStatList.getSize()' ) `randomStatBody`
      return null;
    }
  }
  Boolean isDead(){
    return status == DEAD;
  }

> Body onHitBody(){
    return {
      Float "eventDamage" = "event".getDamage().getTotal();
	  if "eventDamage" < 0.1f && "eventDamage" > -0.1 {
		return void;
	  }
	  Float "preciseDamage" = "eventDamage" - this.con.getValue() - this.getItemDefense();
	  Integer "damageToTake" = "(int)(float)preciseDamage";
	  Float "eventModifier" = "event".getDamage().getModifier();
	  for Item "item" : "event".getAttacker().getEquippedItems() {
		"item".decreaseHp((int)("item".getDef().getValue(this) * "eventModifier" / "eventDamage") );
		"item".on(new Events->\ChangeItem(this,"item"));
	  }
	  if "damageToTake" < 1 {
		"damageToTake" = 1;
	  }
	  while "damageToTake" > 13 {
		"damageToTake" -= 3;
		\takeDamage("event".getAttacker(),3);
	  }
	  while "damageToTake" > 5{
		"damageToTake" -= 2;
		\takeDamage("event".getAttacker(),2);
	  }
	  while "damageToTake" > 0{
		"damageToTake" -= 1;
		\takeDamage("event".getAttacker(),1);
	  }
	};
  }
> Statement getStatRange(%T range, Context context){
    return \getStatRange(range, context, null, new Parameters ());
  }
> Statement getStatRange(%T range, Context context, Statement previous, Parameters previousParameters){
    ~Statement result = null;
    if range->"statement" != null {
      result = |new Operators->Value(`\getStatement(range->"statement",context)`)|;
    }
    else {
      Boolean isPercent = range->"percent" != null;
      
      Float leftValue;
      if isPercent {
        leftValue = Float.parseFloat('range->"left"')/100f;
      }
      else {
        leftValue = Float.parseFloat('range->"left"');
      }
      if range->"right" != null {
        Float rightValue;
        if isPercent {
          rightValue = Float.parseFloat('range->"right"')/100f;
        }
        else { 
          rightValue = Float.parseFloat('range->"right"');
        }
        result = |new Range('leftValue'+"f",'rightValue'+"f")|;
      }
      else {
        result = |new Operators->Value('leftValue'+"f")|;
      }
    }
    Statement left = result;
    if range->"stat_range" != null {
      range->"operator" : operator 
        : PLUS {
          Parameters currentParameters = new Parameters ();
          if previous != null {
            currentParameters.add(previous);
            previousParameters.add(left);
          }
          else {
            currentParameters.add(left);
          }
          result = |new Operators->Plus(`currentParameters`)|;
          return \getStatRange(range->"stat_range",context,result,currentParameters);
        }
        : MINUS {
          Parameters currentParameters = new Parameters ();
          if previous != null {
            currentParameters.add(previous);
            previousParameters.add(left);
          }
          else {
            currentParameters.add(left);
          }
          result = |new Operators->Minus(`currentParameters`)|;
          return \getStatRange(range->"stat_range",context,result,currentParameters);
        }
        : DIVIDE {
          Parameters currentParameters = new Parameters (left);
          result = |new Operators->Divide(`currentParameters`)|;
          if previous != null {
            previousParameters.add(result);
            return \getStatRange(range->"stat_range",context,previous,currentParameters);
          }
          else {
            return \getStatRange(range->"stat_range",context,result,currentParameters);
          }
        }
        : MULTIPLY {
          Parameters currentParameters = new Parameters (left);
          result = |new Operators->Multiply(`currentParameters`)|;
          if previous != null {
            previousParameters.add(result);
            return \getStatRange(range->"stat_range",context,previous,currentParameters);
          }
          else {
            return \getStatRange(range->"stat_range",context,result,currentParameters);
          }
        }
        return null;
    }
    else {
      if previous != null {
        previousParameters.add(result);
        return previous;
      }
      else {
        return result;
      }
    }
  }
> Statement getImposition(%T impositionToken, Boolean forGainBody, Statement subject){
    ~Boolean useImpose = false;
    %T operator = impositionToken->"operator";
    if forGainBody && operator->"impose" == null {
      useImpose = true;
    }
    else if operator->"impose" != null &&! forGainBody{
      useImpose = true;
    }
    String impositionStat = 'impositionToken->"hero_stat"'.toLowerCase();
    String statGetMethod = "get"+'^impositionStat';
    if useImpose {
      ~Integer count = 0;
      impositionToken : element : PLUS { count = count + 1; }
      impositionToken : element : MINUS { count = count - 1; }
      impositionToken : element : amount { count = count + Integer.parseInt('element'); }
      Integer realCount = count;
      return | `subject`.'statGetMethod'().impose('realCount',this); |;
    }
    else {
      return | `subject`.'statGetMethod'().release(this); |;
    }
  }
> Statement getInfluence(%T influenceToken, Statement subject, Context currentContext ){
    if influenceToken->"reason_names" !=null {
      String reasonClassName = ^influenceToken->"reason_names";
      Parameters arguments = new Parameters ();
      influenceToken : method_arguments : method_arguments {
        method_arguments : statement : statement {
          arguments.add(\getStatement(statement,currentContext));
        }
      }
      return |`subject`.influence(`\getVariableCall(influenceToken->"variable_call",currentContext)`,new Relationship->Reasons->'reasonClassName'(`arguments`),'influenceToken->"amount"');|;
    }
    else {
      return |`subject`.influence(`\getVariableCall(influenceToken->"variable_call",currentContext)`,null,'influenceToken->"amount"');|;
    }
  }
> Statement getSelector(%T entityIdChoice){
    Statement selector = new Statement ();
    Parameters options = new Parameters ("||");
    selector.add(|new Criteria.Target()|);
    selector.add(|"{public boolean test(Entity candidate){return "+`options`+";}}"|);
    entityIdChoice : complete : entityName {
      StringBuilder entityName = new StringBuilder();
      ~boolean isFirst = true;
      complete : part : namePart {
        if isFirst == false {
          entityName.append("_");
        }
        entityName.append(part);
        isFirst = false;
      }
      options.add(|"candidate".getId() == Entities->'entityName'.id|);
    }
    return selector;
  }
> void addGainLoss(Class inputClass, Class outputClass){
    String asVariable = inputClass.getName().toLowerCase();
    String asList = asVariable + "s";
    Statement getIdStatement;
    if inputClass == Attack {
      getIdStatement = | 'asVariable'.getAttackId() |;
    }
    else if inputClass == Support {
      getIdStatement = | 'asVariable'.getSupportId() |;
    }
    else {
      getIdStatement = | 'asVariable'.getId() |;
    }
	outputClass +=
	  Boolean has(inputClass->Id "findId"){
	    for inputClass 'asVariable' : 'asList'.getAll() {
		  if `getIdStatement` == "findId" {
			return true;
		  }
		}
		return false;
	  }
	outputClass +=
	  inputClass get(inputClass->Id "findId"){
	    for inputClass 'asVariable' : 'asList'.getAll() {
		  if `getIdStatement` == "findId" {
			return 'asVariable';
		  }
		}
		return null;
	  }
	outputClass +=
	  void gain(inputClass 'asVariable', Source "source"){
	    'asList'.add("source", 'asVariable');
	  }
	outputClass +=
	  void gain(inputClass 'asVariable'){
	    'asList'.add(this, 'asVariable');
	  }
	outputClass +=
	  void lose(inputClass->Id "removeId", Source "source"){
	    ~inputClass "toRemove" = null;
	    for inputClass 'asVariable' : 'asList'.getFrom("source") {
	      if `getIdStatement` == "removeId" {
	        "toRemove" = 'asVariable'; 
	      }
	    }
	    if "toRemove" == null {
	      throw '' 'inputClass.getName()' + ":"''\+removeId\+''"  not found!" '';
	    }
	    else {
	      'asList'.remove("source","toRemove");
	    }
	  }
	\createListMap(Source, inputClass);
	String inputName = "_" + inputClass.getName();
	outputClass += ~ListMaps->\Sources->'inputName' 'asList' = new ListMaps->\Sources->'inputName'();
  }
}