
< Random : java.util;
< EnumMap : java.util;
< BiFunction : java.util.function;
< IntStream : java.util.stream;
< Stream : java.util.stream;

> Set<String> declaredCritSet = new HashSet<String>();
> Set<String> declaredListSet = new HashSet<String>();
> Set<String> declaredMapSet = new HashSet<String>();
> String TT = "<T> T";
> String TFloat = "<T> Float";
> String TBoolean = "<T> Boolean";
> String TUBoolean = "<T,U> Boolean";
> String TUT = "<T,U> T";
> String TUU = "<T,U> U";
> String TUU = "<T,U,V> U";
> String TListT = "<T> List<T>";
> String TStreamT = "<T> Stream<T>";
class 'packageName'.misc.streams Streamer {
    @'TFloat' sum(List<\T> list, BiFunction<Float, \T, Float> function){
	  return list.parallelStream().reduce(0f,function,("S,V")->"S+V");
	}
	@'TBoolean' has(List<'"? extends T"'> list, \T obj){
	  return list.parallelStream().map(("O")->"O".equals(obj)).filter(("B")->"B").findAny().orElse(false);
	}
	@'TUBoolean' has(List<'"? extends T"'> list, Function<\T,\U> func, \U obj){
	  return list.parallelStream().map(("O")->func.apply("O").equals(obj)).filter(("B")->"B").findAny().orElse(false);
	}
	@'TUBoolean' has(List<'"? extends T"'> list, Function<\T,Boolean> func){
	  return list.parallelStream().filter(("O")->func.apply("O")).findAny().orElse(null)!=null;
	}
	@'TT' get(List<'"? extends T"'> list, Function<\T,Boolean> func){
	  return list.parallelStream().map("O->func.apply(O)?O:null").filter(("B")->"B"!=null).findAny().orElse(null);
	}
	@'TUT' get(List<'"? extends T"'> list, Function<\T,\U> func, \U obj){
	  return list.parallelStream().map("O->func.apply(O).equals(obj)?O:null").filter(("B")->"B"!=null).findAny().orElse(null);
	}
	@'TListT' collect(List<'"? extends T"'> list, Function<\T,Boolean> func){
	  return list.parallelStream().filter(("O")->func.apply("O")).collect(Collectors.toList());
	}
	@'TUT' race(List<'"? extends T"'> list, Predicate<\T> objectTest, \U start, Function<\T,\U> distance, BiFunction<\U,\U,Boolean> standingTest) {
	  if list.isEmpty() {
	    return null;
	  } 
	  return (\T) list.parallelStream().filter(objectTest).reduce(new Object(start,null)[],("Other,Racer")->"standingTest.apply((U)Other[0],distance.apply(Racer))?Other:new Object[]{distance.apply(Racer),Racer}",("Previous,Current")->"standingTest.apply((U)Previous[0],(U)Current[0])?Previous:Current")[1];
	}
	@'TStreamT' performOnce(int index, Stream<\T> stream, Function<\T,\T> function) {
	  return stream.map("O->((Indexable)O).getIndex()==index?function.apply(O):O");
	}
	@'TStreamT' perform(Function<Integer,Boolean> indexTest, Stream<\T> stream, Function<\T,\T> function) {
	  return stream.map("O->indexTest.apply(((Indexable)O).getIndex())?function.apply(O):O");
	} 
	enum Imports //{
	  Stream stream = null;
	  Indexable indexer = null;
	}
}
interface 'packageName'.misc.interfaces Indexable {
  int getIndex(){}
}
interface 'packageName'.misc.interfaces Listenable <TypeName> {
  Boolean listen('"TypeName"' "event"){}
}
interface 'packageName'.misc.interfaces Source {
}
interface 'packageName'.misc.interfaces Loaddable {
  Boolean load(){}
}
interface 'packageName'.misc.interfaces Tickable {
  Boolean tick(Double "millisSinceLastFrame"){}
}
interface 'packageName'.misc.interfaces Usable {
  class Id // {
  }
  class Imports //{
    Entity entity = null;
    Tile tile = null;
  }
  Boolean use(Entity user, Activity activity){}
  Boolean canChase(){}
  Float getRange(Entity user){}
  Predicate<Entity> getTargetCriteria(){}
  Predicate<Tile> getDestinationCriteria(){}
  Usable->Id getId(){}
}
class 'packageName'.misc Range Object Evaluable{
  @Random randomizer = new Random();
  Float left = 0f;
  Float right = 0f;
  @Integer getIntegerBetween(Integer bottom, Integer top){
    return (int)(double)((top - bottom) * randomizer.nextDouble() \+ bottom);
  }
  Range *(Integer initialLeft, Integer initialRight){
    left = (float)initialLeft;
    right = (float)initialRight;
  } 
  Range *(Float initialLeft, Integer initialRight){
    left = initialLeft;
    right = (float)initialRight;
  }
  Range *(Integer initialLeft, Float initialRight){
    left = (float)initialLeft;
    right = initialRight;
  }
  @$'TT' select(List<\T> collection){
    if collection.isEmpty(){
	  return null;
	}
	return collection.get((int)(collection.size()*randomizer.nextFloat()));
  }
  @$'TT' select(\T[] array){
    if array.length == 0{
	  return null;
	}
	return array[(int)(array.length*randomizer.nextFloat())];
  }
  @Boolean chance(Double percent){
    return randomizer.nextDouble() <= percent;
  }
  @Boolean chance(Float percent){
    return randomizer.nextFloat() <= percent;
  }
  @Float getRandomFloat(){
    return randomizer.nextFloat();
  }
  @Integer getRandom(Integer lowerBound, Integer upperBound){
    if lowerBound >= upperBound {
      return lowerBound;
    }
    else {
      return (int)((upperBound-lowerBound)*randomizer.nextFloat())+lowerBound;
    }
  }
  @Integer normalize(Double value){
    if value > 0.001 {
      return 1;
    }
    else if value < -0.001 {
      return -1;
    }
    else {
      return 0;
    }
  }
  double getRandom(){
    return (right - left) * randomizer.nextDouble() \+ left;
  }
  float getValue(Entity user){
    return (float)\getRandom();
  }
}

class 'packageName'.misc Operators {
  class Plus / / Evaluable{
    Evaluable left = null;
    Evaluable right = null;
    float getValue(Entity user){return left.getValue(user)\+right.getValue(user);}
  }
  class Minus / / Evaluable {
    Evaluable left = null;
    Evaluable right = null;
    float getValue(Entity user){return left.getValue(user)\-right.getValue(user);}
  }
  class Multiply / / Evaluable {
    Evaluable left = null;
    Evaluable right = null;
    float getValue(Entity user){return left.getValue(user)\*right.getValue(user);}
  }
  class Divide / / Evaluable {
    Evaluable left = null;
    Evaluable right = null;
    float getValue(Entity user){return left.getValue(user)\/right.getValue(user);}
  }
  class Value // Evaluable {
    Float value = null;
    Value *(int intValue){
      value = (float) intValue;
    }
    float getValue(Entity user){return value;}
  }
  class Stat //{
    class Value // Evaluable {
      Float value = null;
      Entity->Stat toGet = null;
      Value *(int intValue,Entity->Stat stat){
        value = (float) intValue;
        toGet = stat;
      }
      float getValue(Entity user){return value*toGet.getValue(user);}
    }
    class Variable // Evaluable {
      Evaluable value = null;
      Entity->Stat toGet = null;
      float getValue(Entity user){return value.getValue(user)*toGet.getValue(user);}
    }
  }
}
interface 'packageName'.misc Evaluable {
  float getValue(Entity user){}
}

class 'packageName'.misc ListMaps {
}
< Predicate : java.util.function;
class 'packageName'.misc Criteria<TypeName> Object Predicate<'"TypeName"'> {
  boolean test( '"TypeName"' "candidate"){
    return false;
  }
  class Target /Criteria<Entity>/ {
  }
  class Destination /Criteria<Tile>/ {
  }
}

> Body getBodyElements(%T elementsToken, Context context){
    Body result = new Body ();
    result.setParentContext(context);
    elementsToken : element : body_element {
      result.add(\getBodyElement(element,result.getContext()));
    }
    return result;
  }
> Statement getBodyElement(%T elementToken, Context context){
    elementToken : element
      : statement {
        if elementToken->"inline_if_statement" != null {
          ~Body body = new Body ();
          ~Body previousBody = null;
          ~boolean isFirst = true;
          ~Statement result = new Statement ();
          elementToken->"inline_if_statement" : bool : boolean_statement {
            Body currentBody = body;
            if isFirst {
              if elementToken->"inline_if_statement"->"IF" != null {
                if elementToken->"inline_if_statement"->"ELSE" != null {
                  result = |else if `\getBooleanStatement(bool,context)` `currentBody`|;
                }
                else {
                  result = |     if `\getBooleanStatement(bool,context)` `currentBody`|;
                }
              }
              else {
                result =   |   else { if `\getBooleanStatement(bool,context)` `currentBody` } |;
              }
              isFirst = false;
            }
            else {
              previousBody.add(|if `\getBooleanStatement(bool,context)` `currentBody`|);
            }
            previousBody = body;
            body = new Body ();
          }
          previousBody.add(| `\getStatement(element, context)` ; |);
          return result;
        }
        else {
          return | `\getStatement(element, context)` ; | ;
        }
      }
      : return_statement {
        return |return `\getStatement(element, context)`;|;
      }
      : acquisition {
        Statement subject = \getVariableCall(element->"variable_call",context);
        return \getAcquisition(element->"acquisition", true, subject, context);
      }
	  : imposition {
	    Statement subject = \getVariableCall(element->"variable_call",context);
	    Boolean doom = element->"imposition"->"impose" != null || element->"imposition"->"PLUS" != null;
	    return Entity.getImposition(element->"imposition",doom,subject);
	  }
	  : quest_addition {
	    return Quests.getAddition(element->"quest_addition",\getVariableCall(element->"variable_call",context), context);
	  }
	  : influence {
	    return Entity.getInfluence(element->"influence",\getVariableCall(element->"variable_call",context),context);
	  }
	  : activity_statement {
		  return |`\getActivityStatement(element,context)`;|;
	  }
	  : association_statement {
		  return |`\getAssociationStatement(element,context)`;|;
	  }
	  : spawn_statement {
		  return |`\getSpawnStatement(element,context)`;|;
	  }
	  : variable_declaration {
	    return \getVariableDeclaration(element, context);
	  }
      : if_statement {
        return \getIfStatement(element, context);
      }
      : for_statement {
        return \getForStatement(element, context);
      }
    return null;
  }
> Statement getVariableDeclaration(%T variableDeclarationToken, Context context){
	String typeName = \getTypeName(variableDeclarationToken->"variable_header"->"type_name");
    Context type = context.getClassContext(typeName);
    if type == null {
      throw variableDeclarationToken.err() + "Could not find type:" + typeName + "!";
    }
    if variableDeclarationToken->"statement" != null {
      return | 'typeName' 'variableDeclarationToken->"variable_header"->"variableName"' = `\getStatement(variableDeclarationToken->"statement", context)`; |;
    }
    else {
      return | 'typeName' 'variableDeclarationToken->"variable_header"->"variableName"' = null; |;
    }
  }
> Variable getVariableFromHeader(%T variableHeaderToken, Context context){
    String typeName = \getTypeName(variableHeaderToken->"type_name");
    Context type = context.getClassContext(typeName);
    if type == null {
      throw variableHeaderToken.err() + "Could not find type:" + typeName + "!";
    }
    return 'typeName' 'variableHeaderToken->"variableName"';;
  }
> Variable addVariableHeader(%T variableHeaderToken, Class inputClass){
    String typeName = \getTypeName(variableHeaderToken->"type_name");
    Context type = inputClass.getContext().getClassContext(typeName);
    if type == null {
      throw variableHeaderToken.err() + "Could not find type:" + typeName + "!";
    }
    inputClass += 'typeName' 'variableHeaderToken->"variableName"';
    return inputClass.getVariable('variableHeaderToken->"variableName"');
  }
> Statement getIfStatement(%T ifStatementToken, Context context){
    Statement header     = new Statement ();
    Statement elseHeader = new Statement ();
    Body      body       = new Body ();
    Body      elseBody   = new Body ();
    body.setParentContext(context);
    elseBody.setParentContext(context);
    ~Integer   mode       = 0;
    ifStatementToken : element
      : boolean_statement {
        header.add(\getBooleanStatement(element, context));
      }
      : body_element {
        body.add(\getBodyElement(element, body.getContext()));
      }
      : else_statement {
        mode = 1;
        element : atom
          : body_element {
            elseBody.add(\getBodyElement(atom,elseBody.getContext()));
            if atom->"variable_declaration" != null {
              elseBody.getContext().add(\getVariableFromHeader(atom->"variable_declaration"->"variable_header",elseBody.getContext()));
            }
          }
          : boolean_statement {
            elseHeader.add(\getBooleanStatement(atom,context));
            mode = 2;
          }
      }
    if      mode == 0 { return |if `header` `body`                                 |; }
    else if mode == 1 { return |if `header` `body` else                 `elseBody` |; }
    else if mode == 2 { return |if `header` `body` else if `elseHeader` `elseBody` |; }
    else              { return null;                                              }
  }
> Statement getForStatement(%T forStatementToken, Context context){
    
    if forStatementToken->"fromList" != null {
      %T variableHeaderToken = forStatementToken->"fromList"->"variable_header";
      String typeName = \getTypeName(variableHeaderToken->"type_name");
      Context type = context.getClassContext(typeName);
      if type == null {
        throw variableHeaderToken.err() + "Could not find type:" + typeName + "!";
      }
      context.add('typeName' 'variableHeaderToken->"variableName"';);
      Statement right = \getStatement(forStatementToken->"fromList"->"statement", context) ;
      Body body = \getBodyElements(forStatementToken, context);
      return |for 'typeName' 'variableHeaderToken->"variableName"' : `right` `body`|;
    }
    return null;
  }


> Statement getBooleanStatement(%T booleanStatement, Context context){
    return \getBooleanStatement(booleanStatement, false, context);
  }
> Statement getBooleanStatement(%T booleanStatement, Boolean negate, Context context){
    Statement operator = new Statement();
    booleanStatement : element
    	: has_chance {
    		operator.add(\getChance(element));
    	  }
    	: isA_statement {
    	    operator.add(\getIsAStatement(element, context));
    	  }
    	: spawned_statement {
    		operator.add(|'' 'element->"environmentName"' ''.equals("spawn".getParent().getName())|);
    	  }
    	: has_statement {
     		Statement variableCall = \getVariableCall(element->"variable_call",context);
 			Statement hasCall      = \getRequirement(element->"requirement",variableCall, negate);
 			if element->"NOT" != null {
 				hasCall.negate();
			}
 			operator.add(hasCall);
    	  }
    	: statement {
     	    operator.add(\getStatement(element,negate,context));
    	  }
    	: operator {
     	    if 'element' == "&" {
     	      if negate {
     	        operator.set("||");
     	      }
     	      else {
     	        operator.set("&&");
     	      }
            }
            else if 'element' == "|" {
               if negate {
                 operator.set("&&");
               }
               else {
                 operator.set("||");
               }
            }
    	  }
     return operator;
  }
> Statement getIsAStatement(%T element, Context context){
    Statement result = new Statement ();
    result.set(" instanceof ");
    result.add(\getVariableCall(element->"variable_call",context));
    result.add(|'\getTypeName(element->"type_name")'|);
    return result;
  }
> Statement getRequirement(%T requirementToken, Statement candidate, Boolean showAsTrue){
    Statement requireHeader = new Statement();
 	~String delimiter = "&&";
 	if showAsTrue {
 	  delimiter = "||";
	} 
 	requireHeader.set(delimiter);
 	requirementToken : quanta : require_stat {
 	  String statName = 'quanta->"hero_stat"'.toLowerCase();
 	  String methodName = "get"+'^statName';
 	  Statement innerHead = |`candidate`.'methodName'()."getValue"()|;
 	  ~String operator = 'quanta->"ORDINAL"';
 	  if quanta->"NOT" != null && showAsTrue || quanta->"NOT" == null &&! showAsTrue{
 	  	operator = \negateOperator(operator);
 	  }
 	  innerHead.set(operator);
 	  innerHead.add(|'quanta->"INTEGER"'|);
      requireHeader.add(innerHead);
    }
	requirementToken : quanta : require_skill {
	  Statement id = Skills.getId(^quanta->"skill_names");
	  Statement innerHead = |`candidate`."has"(`id`)|;
	  if quanta->"NOT" != null { innerHead.negate();}
	  if showAsTrue == false { innerHead.negate();}
	  requireHeader.add(innerHead);
    }
    requirementToken : quanta : require_trait {
	  Statement id = Traits.getId(^quanta->"trait_names");
	  Statement innerHead = |`candidate`."has"(`id`)|;
	  if quanta->"NOT" != null { innerHead.negate();}
	  if showAsTrue == false { innerHead.negate();}
	  requireHeader.add(innerHead);
    }  
    requirementToken : quanta : require_attack {
	  Statement id = Attacks.getId(^quanta->"attack_names");
	  Statement innerHead = |`candidate`."has"(`id`)|;
	  if quanta->"NOT" != null { innerHead.negate();}
	  if showAsTrue == false { innerHead.negate();}
	  requireHeader.add(innerHead);
    }
    requirementToken : quanta : require_association {
	  ~Statement idValue;
	  if quanta->"association_names" != null {
	    idValue = Associations.getId(^quanta->"association_names");
	  }
	  else {
	    String variableName = 'quanta->"variableName"';
	    idValue = |'variableName'.getId()|;
	  }
	  Statement id = idValue;
	  Statement innerHead = |`candidate`."has"(`id`)|;
	  if quanta->"NOT" != null { innerHead.negate();}
	  if showAsTrue == false { innerHead.negate();}
	  requireHeader.add(innerHead);
    }
	return requireHeader;
  }
> Statement getActivityStatement(%T element, Context context){
    Statement subject = \getVariableCall(element->"variable_call",context);
    String method = 'element->"method"';
    String activityName = ^element->"activity_names";
    Parameters arguments = new Parameters ();
    element : args : method_arguments {
      args : atom : statement {
        arguments.add(\getStatement(atom,context));
      }
    }
    return |`subject`.'method'(new Activities->'activityName'(`arguments`))|;
  }
> Statement getAssociationStatement(%T element, Context context){
    Statement subject = \getVariableCall(element->"variable_call",context);
    String method = 'element->"method"';
    String associationName = ^element->"association_names";
    Parameters arguments = new Parameters ();
    element : atom : statement {
        arguments.add(\getStatement(atom,context));
      }
    Statement recruiter = \getStatement(element->"recruiter"->"statement",context);
    return |`subject`.'method'(`recruiter`,new Associations->'associationName'(`arguments`))|;
  }
> Statement getSpawnStatement(%T element, Context context){
    ~Statement adder = `Environments.getId('element->"map_names"')`;
    if element->"tile_names" != null {
      ~boolean isFirst = true;
      element : atom : tile_names {
        Statement current = adder;
        if isFirst {
          adder = |`current`.getRandomTile(Tiles->'element->"map_names"'->'atom'.id)|;
        }
        else {
          adder = |((Tiles->EntryPoint)`current`).\getSisterArea().getRandomTile(Tiles->'element->"map_names"'->'atom'.id)|;
        }
        isFirst = false;
      }
    }
    else if element->"upperBoundX" != null && element->"upperBoundY" != null {
      Statement current = adder;
      adder = |`current`.getTile(Range.getRandom('element->"lowerBoundX"','element->"upperBoundX"'),Range.getRandom('element->"lowerBoundY"','element->"upperBoundY"'))|;
    }
    else if element->"upperBoundX" != null{
      Statement current = adder;
      adder = |`current`.getTile(Range.getRandom('element->"lowerBoundX"','element->"upperBoundX"'),'element->"lowerBoundY"')|;
    }
    else if element->"upperBoundX" != null {
      Statement current = adder;
      adder = |`current`.getTile('element->"lowerBoundX"',Range.getRandom('element->"lowerBoundY"','element->"upperBoundY"'))|;
    }
    else {
      Statement current = adder;
      adder = |`current`.getTile('element->"lowerBoundX"','element->"lowerBoundY"')|;
    }
    Statement current = adder;
    
    return |`\getVariableCall(element->"variable_call",context)`.spawnAt(`current`)|;
  }
> Statement getStatement(%T statementToken, Context context){
    return \getStatement(statementToken,false,context);
  }
> Statement getStatement(%T statementToken,Boolean initialNegate, Context context){
	Statement ret = new Statement();
	~Boolean negate = initialNegate;
	statementToken : element
	  : NOT { negate =! negate; }
	  : variable_call {
	      Statement variableCall = \getVariableCall(element,context);
		  ret.add(variableCall);
	  }
	  : activity_statement {
		  ret.add(\getActivityStatement(element,context));
	  }
	  : statement {
		Statement subStatement = \getStatement(element,context);
		ret.add(subStatement);
      }
	  : entity_selector {
	    ret.add(Entity.getSelector(element->"entity_id_choice"));
	  }
	  : map_selector {
	    if element->"tile_id_choice"->"index" != null {
	      ret.add(|Gui.game.getEnvironments()."get"+'element->"map_names"'().getAreas().get('element->"tile_id_choice"->"index"')|);
	    }
	    else {
	      ret.add(Tiles.getSelector('element->"map_names"',element->"tile_id_choice"));
	    }
	  }
	  : operator {
		  if negate {
		    ret.set(\negateOperator('element'));
		  }
		  else {
			ret.set('element');
		  }
		}
	  : braced_statement {
		  Statement subStatement = \getStatement(element,context);
		  subStatement.brace();
		  ret.add(subStatement);
	  }
	if ret.getSize() == 1 && negate {
	  ret.negate();
	}
	return ret;
  }

> Statement getVariableCall(%T variableCallToken, Context context){
	~Context currentContext = context;
	Statement ret = new Statement(".");
	variableCallToken : element
	  : range {
	    ret.add(|new Range('element->"left"','element->"right"')|);
	  }
	  : braced_statement {
		Statement subStatement = \getStatement(element,context);
		subStatement.brace();
		ret.add(subStatement);
	  }
	  : exact {
	    if element->"FLOAT" != null {
	      ret.add(|'element'+"f"|);
	    }
	    else {
	      ret.add(|'element'|);
	    }
	  }
	  : quote {
	    ret.add(|'' 'element' ''|);
	  }
	  : variable_group {
	    ret.add(\getIdFromName(element));
	  }
	  : cast {
	    String typeName = \getTypeName(element->"type_name");
	    Context typeContext = currentContext.getClassContext(typeName);
	    if typeContext == null {
		    throw "Could not find "+'typeName'+" type in context!";
		}
		
	    Statement castStatement = new Statement ();
	    castStatement.add(|$'typeName'|);
	    castStatement.brace();
	    Statement fullStatement = new Statement();
	    fullStatement.add(castStatement);
	    fullStatement.add(\getStatement(element->"statement",context));
		ret.add(fullStatement);
	  }
	  : access_static {
	    String typeName = \getTypeName(element->"type_name");
	    Context typeContext = currentContext.getClassContext(typeName);
	    if typeContext == null {
		    throw "Could not find "+'typeName'+" type in context!";
		}
	    String variableName = 'element->"variableName"';
	    currentContext = typeContext.link(variableName); 
		if currentContext == null {
		    throw "Could not find "+'variableName'+" variable in context!";
		}
		Statement result = |'typeName'.'variableName'|;
		result.addImport('typeName');
		ret.add(result);
	  }
	  : variableName {
		if currentContext.hasLink('element') == false {
	      Context originalContext = currentContext;
		  currentContext = currentContext.link("event");
		  if currentContext == null {
		    if originalContext.hasLink("get"+'^element') == false {
		      throw "Could not find "+'element'+" variable in context!";
		    }
		    else {
		      ret.add(|"get"+'^element'()|);
		    }
		  } 
		  else {
		    currentContext = currentContext.link('element');
		    if currentContext == null {
		      if originalContext.hasLink("get"+'^element') == false {
		        throw "Could not find "+'element'+" variable in context!";
		      }
		      else {
		        ret.add(|"get"+'^element'()|);
		      }
		    }
		    else {
		      ret.add(|"event"."get"+'^element'()|);
		    }
		  }
		}
		else {
		  currentContext = currentContext.link('element');
		  if  ret.size() == 0 {
  		    ret.add(|'element'|);
		  }
		  else {
		    ret.add(|"get"+'^element'()|);
		  }
		}
	  }
	  : method {
		String methodName;
		if element->"methodName" != null {
		  methodName = 'element->"methodName"';
		}
		else {
		  methodName = \getTypeName(element->"type_name");
		}
		Parameters parameters = new Parameters();
		if element->"method_arguments" != null {
		  element->"method_arguments" : atom : statement {
			parameters.add(\getStatement(atom,context));
		  }
		}
		if element->"NEW" != null {
          currentContext = currentContext.getClassContext(methodName);
		  if currentContext == null {
		    throw "Could not find \"+methodName+\" type in context!";
		  }
		  ret.add(|new 'methodName'(`parameters`)|);
		}
	  	else {
		  currentContext = currentContext.link(methodName);
		  if currentContext == null {
		    throw "Could not find "+'element'+" method in context!";
		  }
		  ret.add(|'element'(`parameters`)|);
		}
	  }
	if currentContext != null && currentContext.hasEnder() {
	  ret.add(currentContext.getEnder());
	}
	return ret;
  }
> Statement getIdFromName(%T nameToken){
    nameToken : element
      : map_names         { return Environments.getId(^element); }
      : association_names { return Associations.getId(^element); }
      : affinity_names    { return Affinities.getId(^element); }
      : condition_names   { return Conditions.getId(^element); }
      : skill_names       { return Skills.getId(^element); }
      : trait_names       { return Traits.getId(^element); }
      : activity_names    { return Activities.getId(^element); }
      : activity_type_names       { return ActivityTypes.getId(^element); }
    return null;
  }

> Statement getAcquisition(%T acquisitionToken, Boolean forGainBody, Statement subject, Context context){
    ~Context source;
    String sourceName;
    if acquisitionToken->"source_name" != null {
	  sourceName = 'acquisitionToken->"source_name"';
    }
    else {
      sourceName = "this";
    }
    source = context.link(sourceName);
    if source == null {
      throw "Could not find "+sourceName+" source in context!";
    }
    Statement gainObj;
    Statement id;
    if acquisitionToken->"THIS" != null {
 	   gainObj = |\this.clone()|;
 	   id = |\this."id"|;
    }
    else if acquisitionToken->"aspect_names" != null {
 	  String className = ^acquisitionToken->"aspect_names"; 
 	  gainObj = |new Aspects->'className'()|;
 	  id = |Aspects->'className'."id"|;
    }
    else if acquisitionToken->"trait_names" != null {
 	  String className = ^acquisitionToken->"trait_names"; 
 	  gainObj = |new Traits->'className'()|;
 	  id = |Traits->'className'."id"|;
    }
    else if acquisitionToken->"attack_names" != null {
 	  String className = ^acquisitionToken->"attack_names"; 
 	  gainObj = |new Attacks->'className'()|;
 	  id = |Attacks->'className'."id"|;
    }
    else if acquisitionToken->"condition_names" != null {
 	  String className = ^acquisitionToken->"condition_names"; 
 	  gainObj = |new Conditions->'className'()|;
 	  id = |Conditions->'className'."id"|;
    }
    else if acquisitionToken->"item_names" != null {
 	  String className = ^acquisitionToken->"item_names"; 
 	  gainObj = |new Items->'className'()|;
 	  id = |Items->'className'."id"|;
    }
    else {
      gainObj = null;
      id = null;
    }
 	if acquisitionToken->"operator"->"GAINS" != null {
 	  if forGainBody {
 	  	if acquisitionToken->"item_names" != null {
 	  	  return |`subject`.equip(`gainObj`);|;
 	  	}
 	  	else {
 	  	  return |`subject`.gain(`gainObj`,'sourceName');|;
 	  	}
	  }
 	  else {
 	    if acquisitionToken->"item_names" != null {
 	  	  return |`subject`.unequip(`gainObj`);|;
 	  	}
 	  	else {
 		  return |`subject`.lose(`id`,'sourceName');|;
 		}
	  }
	}
	else {
 	  if forGainBody {
 	    if acquisitionToken->"item_names" != null {
 	  	  return |`subject`.unequip(`gainObj`);|;
 	  	}
 	  	else {
 		  return |`subject`.lose(`id`,'sourceName');|;
 		}
	  }
 	  else {
 	    if acquisitionToken->"item_names" != null {
 	  	  return |`subject`.equip(`gainObj`);|;
 	  	}
 	  	else {
 		  return |`subject`.gain(`gainObj`,'sourceName');|;
 		}
	  }
	}
  }

> Statement primeRange(%T rangeToken){
    ~String left = 'rangeToken->"left"';
    ~String right = 'rangeToken->"right"';
    if rangeToken->"percent" != null {
      left  = \percentify(left);
      right = \percentify(right); 
    }
 	return |new Range('left'+"f",'right'+"f")|;
  }

> Statement getChance(%T chanceToken){
    Double value = Double.parseDouble('chanceToken') / 100.0;
    return |Range.chance('value') |;
  }
> void createCriteria(Class critClass) {
	String critName = critClass.getName()+"Criteria";
	if declaredCritSet.add(critName) {
	  ~class 'packageName'."misc"."criteria" critName Criteria<critClass> {
	    boolean test(critClass "candidate"){
	      return false;
	    }
	  }
	}
  }
  
> void createListMap(Class leftClass, Class rightClass) {
	String leftName  = leftClass.getName()+"s";
	String rightName = "_"+rightClass.getName();
	String fullName  = "Maps."+leftName+"."+rightName;
	if declaredListSet.add(fullName) {
	  if ListMaps->'leftName' == null{
	    ListMaps += class 'packageName'."misc" leftName {}
	  }
	  ListMaps->'leftName'  +=	
	    class 'packageName'."misc" rightName HashMap<leftClass, LinkedList<rightClass>> \Iterable<rightClass>{
	      LinkedList<rightClass> "completeList" = new LinkedList<rightClass>();
	      \Iterator<rightClass> iterator(){
	        return "completeList".iterator();
	      }
	      LinkedList<rightClass> getFrom(leftClass "key"){
	        return super.get("key");
	      }
	      void add(leftClass "key", rightClass "element"){
	        if true &&! super.containsKey("key") {
			  super.put("key",new LinkedList<rightClass>());
			}
			"completeList".add("element");
			super.get("key").add("element");
	      }
	      void removeLast(leftClass "key"){
	        if super.containsKey("key") &&! super.get("key").isEmpty() {
			  "completeList".remove(super.get("key").removeLast());
			}
	      }
		  void removeAll(leftClass "key"){
		    if super.containsKey("key") {
			  "completeList".removeAll(super.get("key"));
			  super.get("key").clear();
			}
		  }
		  void remove(leftClass "key", rightClass "element"){
		    super.get("key").remove("element");
			"completeList".remove("element");
		  }
		  List<rightClass> getAll(){
		    return "completeList";
		  }
	    }
	  }
  }
> void createIdMap(Class idClass, Class parentClass) {
    \createIdMap(idClass, |\getId()|, parentClass);
  }
> void createIdMap(Class idClass,Statement getIdStatement, Class parentClass) {
    String idName  = idClass.getName()+"Map";
	String fullName  = idClass.getName()+"Maps."+idName+"."+parentClass.getName();
	String parentClassList = "java.util.List<"+parentClass.getName()+">";
	if declaredMapSet.add(fullName) {
	  parentClass += class idName // {
	    Map<idClass, 'parentClassList' > map = new HashMap<idClass, 'parentClassList' >();
	    
	    boolean add(parentClass addObject){
	      synchronized this {
	        if map.containsKey((idClass)addObject.`getIdStatement`) == false {
	          map.put((idClass)addObject.`getIdStatement`, new ArrayList<parentClass>());
	        }
	        return map.get((idClass)addObject.`getIdStatement`).add(addObject);
	      }
	    }
	    parentClass get(idClass id, parentClass->Factory factory){
	      synchronized this {
	        List<parentClass> result = map.get(id);
	        if result == null {
	          result = new ArrayList<parentClass>();
	          map.put(id, result);
	          parentClass newObject = factory.create();
	          result.add(newObject);
	          return newObject;
	        }
	        else {
	          if(result.isEmpty()){
	            parentClass newObject = factory.create();
	            result.add(newObject);
	            return newObject;
	          }
	          else {
	            return result.get(0);
	          }
	        }
	      }
	    }
	    parentClass get(idClass findId){
	      synchronized this {
	        List<parentClass> result = map.get(findId);
	        if result != null && result.isEmpty() == false{
	          return result.get(0);
	        }
	        else {
	          return null;
	        }
	      }
	    }
	    List<parentClass> getAll(idClass findId){
	      synchronized this {
	        return map.get(findId);
	      }
	    }
	    boolean has(idClass findId){
	      synchronized this {
	        return map.containsKey(findId) && map.get(findId).isEmpty()==false;
	      }
	    }
	    boolean remove(parentClass addObject){
	      synchronized this {
	        if map.containsKey((idClass)addObject.`getIdStatement`) {
	          return map.get((idClass)addObject.`getIdStatement`).remove(addObject);
	        }
	        else {
	          return false;
	        }
	      }
	    }
	  }
	  #parentClass.getSubClass("IdMap").setDisplayConstructors(false);
	  parentClass->'"IdMap"' += IdMap '""'(){super(idClass.class);}#
	}
  }
> String percentify(String input){
	Double result = Double.parseDouble(input) / 100.0;
	return 'result';
  }
> String percentify(%T input){
	return \percentify('input');
  }
> String negateOperator(String operator){
    if "==".equals(operator){
 	  return "!=";
 	}
 	else if "!=".equals(operator){
 	  return "==";
 	}
 	else if "<".equals(operator){
 	  return ">=";
 	}
 	else if "<=".equals(operator){
 	  return ">";
 	}
 	else if ">".equals(operator){
 	  return "<=";
 	}
 	else if ">=".equals(operator){
 	  return "<";
 	}
 	else if "&&".equals(operator){
 	  return "||";
 	}
 	else if "||".equals(operator){
 	  return "&&";
 	}
 	else {
 	  return "COULD NOT NEGATE ("+operator+")";
 	}
  }