#GENERAL#
QUOTE             Braced " " , Ignore None = [.*]
NOT = "!"

std_body          Braced { } ,silent       = ( "\n" | comments | body_element )*
method_arguments  Braced ( )               = "\n"* statement? ( "," "\n"* statement )*
method_parameters Braced ( )               = ( variable_header ( "," variable_header )* )?
braced_statement  Braced ( )               = statement
tile_id_choice    Braced [ ]               = INTEGER as index | ( NAME as namePart+ ) as tileName ( "|" ( NAME as namePart+ ) as tileName )*
entity_id_choice  Braced [ ]               = ( NAME as namePart+ ) as entityName ( "|" ( NAME as namePart+ ) as entityName )*

number silent = ( FLOAT | INTEGER )
range  silent
	number as left ((".."|"-") number as right) "%" as percent?
operator
	"+=" | "-=" | "+" | "-" | "/" | "*" | "==" | "!=" | ORDINAL | "="

body_element
	return_statement
	if_statement
	while_statement
	for_statement
	body_defined_statement
	variable_declaration
	statement ( inline_if_statement )?

body_defined_statement silent
	(variable_call acquisition) as acquisition
	(variable_call imposition ) as imposition
	(variable_call influence ) as influence
	(variable_call quest_addition) as quest_addition
	spawn_statement
	activity_statement
	association_statement

acquisition
	( ("gains"|"equip"|"+") as GAINS | ("loses"|"unequip"|"-") as LOSES ) as operator ( "this" as THIS | aspect_names | condition_names | trait_names | attack_names | item_names ) ( "from" NAME as source_name )? 
imposition
	("impose" as impose) as operator INTEGER as amount "on" hero_stat
	("release" as release) as operator hero_stat
	(("+"|"-")+) as operator hero_stat
influence
	"influence" variable_call INTEGER as amount ("because" reason_names method_arguments )?
quest_addition
	"<<" activity_names ( statement ( "," statement )*)?  

activity_statement
	variable_call ":"? ( "start" ) as method  activity_names (  method_arguments | statement )
association_statement
	variable_call ( "join" ) as method  association_names method_arguments statement as recruiter
spawn_statement
	variable_call "spawn" (("around" map_names ( "->" tile_names )* ) |( "at" map_names INTEGER as lowerBoundX ("-" INTEGER as upperBoundX)? "," INTEGER as lowerBoundY ("-" INTEGER as upperBoundY )?))

if_header silent
	("else" as ELSE "if" as IF|"if" as IF|"else" as ELSE) boolean_statement
if_statement
	"if" boolean_statement "\n"* std_body ( "\n"* "else" "\n"* ( std_body | "if" boolean_statement "\n"* std_body ) ) as else_statement*
inline_if_statement
	if_header ( "and" boolean_statement )* 

for_statement
	("for" variable_header ":"     statement "\n"* ) as fromList     std_body
	("for" variable_header ORDINAL statement "\n"* ) as fromVariable std_body
while_statement
	"while" statement "\n"* std_body

boolean_statement
	boolean_element (("&" | "|") as operator boolean_element )*
boolean_element silent
	has_chance
	isA_statement
	spawned_statement
	has_statement
	statement
has_chance
	number "%" "chance"
conditional_chance silent
	has_chance if_header?
isA_statement
	variable_call "is" "a" type_name
spawned_statement
	"spawned" "in" NAME as environmentName
has_statement
	NOT? variable_call "has" requirement
requirement
	requirement_element ( "|" requirement_element )*
requirement_element silent
	( NOT? ("stat" "in"  NAME as variableName          ) ORDINAL INTEGER ) as require_stat
	( NOT? ("attack"     NAME as variableName           ) "exp" ORDINAL INTEGER ) as require_exp
	( NOT? ("attack"     NAME as variableName           ) ) as require_attack
	( NOT? ("trait" "of" NAME as variableName         ) ) as require_trait
	( NOT? ("association" "with" NAME as variableName ) ) as require_association
	( NOT? hero_stat ORDINAL INTEGER ) as require_stat
	( NOT? attack_names "exp" ORDINAL INTEGER ) as require_exp
	( NOT? skill_names "skill"? ) as require_skill
	( NOT? skill_names "exp" ORDINAL INTEGER ) as require_exp
	( NOT? attack_names ) as require_attack
	( NOT? trait_names ) as require_trait
	( NOT? association_names ) as require_association

return_statement
	"return" statement

statement
	( "Entity" entity_id_choice ) as entity_selector
	( map_names tile_id_choice ) as map_selector
	activity_statement
	NOT? variable_call ( operator "\n"* statement )*

variable_declaration
	variable_header ( "=" statement )?
variable_header
	type_name NAME as variableName
variable_call
	range as range ( "->" NAME as variableName | "." method )*
	( "true" | "false" | "null" | FLOAT | INTEGER ) as exact
	variable_call_element  ( "->" NAME as variableName | "." method )*
variable_call_element silent
	braced_statement
	( type_name "<-"  statement ) as cast
	( type_name "=>" NAME as variableName ) as access_static
	method | variable_group | NAME as variableName | QUOTE as quote
variable_group
	association_names "association"
	skill_names       "skill"
	association_names "group"
	affinity_names    "affinity"
	attack_names      "attack"
	trait_names       "trait"
	condition_names   "condition"
	activity_names    "activity"
	activity_type_names "practice"
	map_names NAME as symbolName? ("map"| "tile")+
	association_names | skill_names | association_names | affinity_names | attack_names | trait_names | condition_names | activity_names | activity_type_names
	map_names NAME as symbolName?

method
	"new" as NEW type_name    method_arguments
	NAME as methodName method_arguments

type_name
	( "Map" type_name type_name ) as mapDeclaration
	("*" "." as findType)? NAME as typeName ( "." NAME as typeName )*
