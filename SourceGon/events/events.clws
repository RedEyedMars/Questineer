
class 'packageName'.events Events {
> Map<String,List<Entry>> variableDefs = new HashMap<String, List<Entry>>();
> Set<String>			  eventNameSet = new HashSet<String>();
> void declaration(%T declaration){
	String eventName = 'declaration->"eventName"';
	eventNameSet.add(eventName);
	String cev = ^eventName;
    Events += class  cev /Event/ {
        @Event->Id id = Event->Id->'eventName'; 
      }
    Events->'cev' += class Listener /Object/ Listenable<Events\>'cev'> {
      Boolean listen(Events->'cev' event){ return true; }
    }
    Event->Id += void 'eventName' = null;
    declaration : element : parameter {
	  element : atom : type_name {
	    String newTypeName = \getTypeName(atom);
		Events->'cev' += 'newTypeName' 'element->"NAME"';
      }
	}
  }
> void addParameter(String eventName, Method method){
   	method.addParameter(\eventName "event";);
  }
> Context getEventContext(String eName, Class inputClass){
    String eventClassName = ^eName;
	Method newMethod = Boolean on(Events->'eventClassName' event) { return true; };
	String newMethodName = newMethod.getName();
	if inputClass.getMethod(newMethodName) == null {
	  inputClass += Boolean on(Events->'eventClassName' event) {
	    }
	  inputClass += Boolean add(Events->'eventClassName'->Listener newListener) {
	    if 'eName'+"Listeners" == null {
	      'eName'+"Listeners" = new ArrayList<Listenable>();
	    }
		return 'eName'+"Listeners".add("newListener");
	  }
	  inputClass += ~List<Listenable> 'eName'+"Listeners" = null;
	}
	return inputClass.getMethod(newMethodName).getContext();
  }
> Context addToEventMethod(String eName, Class inputClass, Body body){

    String eventClassName = ^eName;
	Method newMethod = Boolean on(Events->'eventClassName' event) {};
	String newMethodName = newMethod.getName();
	if inputClass.getMethod(newMethodName) == null {
	  inputClass += Boolean on(Events->'eventClassName' event) {}
	  inputClass += Boolean add(Events->'eventClassName'->Listener newListener) {
	    if 'eName'+"Listeners" == null {
	      'eName'+"Listeners" = new ArrayList<Listenable>();
	    }
		return 'eName'+"Listeners".add("newListener");
	  }
	  inputClass += ~List<Listenable> 'eName'+"Listeners" = null;
	}
	Method establishedMethod = inputClass.getMethod(newMethodName);
	establishedMethod.appendToBody(body);
	establishedMethod.setEndWith(|return true;|);
	return establishedMethod.getContext();
  }
> void addEventMethods(Class inputClass, Map<String, Body > bodiesToAdd){
	for String name : eventNameSet {
	  if bodiesToAdd.containsKey(name) {
		\addToEventMethod(name, inputClass, bodiesToAdd.get(name));
	  }
	  else {
	    \addToEventMethod(name, inputClass, {});
	  }
	}
  }
> void addEventMethodsExclusive(Class inputClass, Map<String, Body > bodiesToAdd){
	for String name : eventNameSet {
	  if bodiesToAdd.containsKey(name) {
		\addToEventMethod(name, inputClass, bodiesToAdd.get(name));
	  }
	}
  }
}
class 'packageName'.events Event {
  enum Id // {}
}
