< Callable : java.util.concurrent;
< Consumer : java.util.function;
< Function : java.util.function;
< BiFunction : java.util.function;
< Void : java.lang;
class 'packageName'.game  Game  Object  InputHandler->Events->KeyboardEvent->Listener  InputHandler->Events->MouseEvent->Listener {
  ~Game->EnvironmentList environments = new Game->EnvironmentList();
  ~Double lastTick = System.currentTimeMillis()/1000.0;
  ~Double thisTick = lastTick;
  ~Area focusArea = null;
  ~Entity hero = null;
  boolean[] pressedKeys = new boolean[128]; 
  @void main(String[] args){
    new Gui();
  }
  @void findSeed(){
	Long seed = new Random().nextLong();
	Range.randomizer.setSeed(seed);
	Range newRange = new Range(0,0);
	System.out.println(''"Seed:"''\+seed\+''"L"'');
  }
  void load(){
	environments.forEach("Environment::load");
	new Associations().on(new Events->\Load(null));
  }
> void loadDeclaration(%T loadDeclaration ){
    Context context = Game->*"load[]".getContext();
    loadDeclaration : element : body_element {
      Game->*"load[]".appendToBody(\getBodyElement(element,context));
    }
    
  }
> void output(){
    Game->*"load".appendToBody({
	  InputHandler.addKeyboardListener(this);
	  InputHandler.addMouseListener(this);});
  }
  void listen(InputHandler->Events->KeyboardEvent->Release event) {
    pressedKeys[event.getKeyInt()] = false;
  }
  void listen(InputHandler->Events->KeyboardEvent->Press event) {
    pressedKeys[event.getKeyInt()] = true;
  }
  void listen(InputHandler->Events->MouseEvent->Release event) {
  }
  void listen(InputHandler->Events->MouseEvent->Press event) {
  }
  void listen(InputHandler->Events->MouseEvent->Drag event) {
  }
  void listen(InputHandler->Events->MouseEvent->Move event) {
  }
  void update(){
    thisTick = System.currentTimeMillis()/1000.0;
    environments.forEach(thisTick-lastTick,"Environment::tick");
    if focusArea != hero.getLocation().getArea() {
      if focusArea != null {
        focusArea.undisplay();
      }
      focusArea = hero.getLocation().getArea();
    }
    focusArea.display();
    if pressedKeys[19] {
      focusArea.undisplay();
    }
    if pressedKeys[1] {
      Gui.isRunning = false;
    }
    if pressedKeys[17] {
      Gui.renderer.moveView(0.0f, -0.01f);
    }
    if pressedKeys[30] {
      Gui.renderer.moveView(0.01f, 0.0f);
    }
    if pressedKeys[31] {
      Gui.renderer.moveView(0.0f, 0.01f);
    }
    if pressedKeys[32] {
      Gui.renderer.moveView(-0.01f,0.0f);
    }
    lastTick = thisTick;
  }
  
  class EnvironmentList // {
    void forEach(Function<Environment,Boolean> function){
    }
    '"<T>void"' forEach('"T"' argument, BiFunction<Environment,'"T"',Boolean> function){
    }
    > void add(String environmentName){
      Game->EnvironmentList += Environments->'environmentName' 'environmentName.toLowerCase()' = new Environments->'environmentName'();
      Game->EnvironmentList->*"forEach[Function<Environment,Boolean>]".appendToBody({\function.apply('environmentName.toLowerCase()');});
      Game->EnvironmentList->*"forEach[T,BiFunction<Environment,T,Boolean>]".appendToBody({\function.apply('environmentName.toLowerCase()',\argument);});
    }
  }
  class Imports //{
    Environment anEnvironment = null;
  }
}