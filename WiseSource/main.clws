import headers.clws

< HeroStats 	: \lists;
#import images/image.clws#

import general/general.clws
import overview/games.clws
import overview/menus.clws
import overview/treasuries.clws
import entities/entities.clws
import environments/environments.clws
import events/events.clws

> void assignListElementNames(ParseContext context, IToken root){
		context.retainList(new HeroStats());
	}
> String getDirectory(String fileName, String knownDirectory){
>		return "../Resource/";
	}
> void setup(ParseContext data){
  }
> void generate(ParseContext data){
	\setup("../Questineer/src");
	IToken root = data.getRoot();
	root : imports : import_any {
		imports : import_events : IMPORT_EVENT {
			import_events : element : event_declaration { 
				Events.declaration(element);
			}
		}
	}
	
	Conditions.setup(data);
	Aspects.setup(data);
	Items.setup(data);
	Entity.setup(data);
	Skills.setup(data);
	Activities.setup(data);
	Relationship.setup(data);
	Quests.setup(data);
	Treasury.setup(data);
	Environment.setup(data);
	Tile.setup(data);
	root : imports : import_any {
		\importAny(imports);
	}
	\output(data);
}
> void importAny(IToken import_any){
    import_any : import_payment_types : IMPORT_PAYMENT_TYPE {
		import_payment_types : element : payment_type_declaration {
			Treasury.paymentTypeDec(element);
		}
	}
	import_any : import_events : IMPORT_EVENT {
		import_events : element : event_declaration {
			Events.declaration(element);
		}
	}
	import_any : import_items : IMPORT_ITEM {
		import_items : element : import_any {
			\importAny(element);
		}
		import_items : element : item_declaration {
			Items.declaration(element);
		}
	}
	import_any : import_reason : IMPORT_REASON {
		import_reason : element : reason_declaration {
			Relationship.declaration(element);
		}
	}
	import_any : import_aspects : IMPORT_ASPECT {
		import_aspects : element : aspect_declaration {
			Aspects.declaration(element);
		}
	}
	import_any : import_affinities : IMPORT_AFFINITY {
		import_affinities : element : affinity_declaration {
			Affinities.declaration(element);
		}
	}
	import_any : import_traits : IMPORT_TRAIT {
		import_traits : element : trait_declaration {
			Traits.declaration(element);
		}
	}
	import_any : import_conditions : IMPORT_CONDITION {
		import_conditions : element : condition_declaration {
			Conditions.declaration(element);
		}
	}
	import_any : import_activities : IMPORT_ACTIVITY {
		import_activities : element : activity_declaration{
			Activities.declaration(element);
		}
	}
	import_any : import_skills : IMPORT_SKILL {
		import_skills : element : skill_declaration{
			Skills.declaration(element);
		}
	}
	import_any : import_attacks : IMPORT_ATTACK {
		import_attacks : element : attack_declaration{
			Attacks.declaration(element);
		}
	}
	import_any : import_supports : IMPORT_SUPPORT {
		import_supports : element : support_declaration{
			Supports.declaration(element);
		}
	}
	import_any : import_association : IMPORT_ASSOCIATION {
		import_association : element : association_declaration {
			Associations.declaration(element);
		}
	}
	import_any : import_map : IMPORT_MAP {
		Environment.declaration(import_map);
	}
	import_any : import_quests : IMPORT_QUEST {
		import_quests : element : quest_declaration{
			Quests.typeDeclaration(element);
		}
	}
 }
> String getTypeName(IToken nameToken){
	StringBuilder nameBuilder = new StringBuilder();
	~Boolean isFirst = true;
	nameToken : element : typeName {
		if isFirst==false {
			nameBuilder.append(".");
		}
		else {
			isFirst =false;
		}
		nameBuilder.append(^element);
	}
	return 'nameBuilder';
 }