environments
	elements from "environment.elements"
	var packageName
	var directory
	var superEnvironmentClass as class
	var superMapClass as class
	var superPositionClass as class
	aux setup takes data as ParseContext
		set packageName
			general getPackageName
		set directory
			new File
				general getDirectory
				"environments"
		directory mkdirs
	aux generate takes data as ParseContext
		general createList
			general->Environment
		var colon = ":"
		var candidateEnvironment = variable:"candidateEnvironment" "Environment";
		var candidateEntity = variable:"candidateEntity" "Entity";
		var pX = body_met_cal:\"position" \"getX()" {};
		var pY = body_met_cal:\"position" \"getY" {};
		set superEnvironmentClass
			general init:class:"environments" "Environment" null null {
				variable:"position" "Position";
				variable:"entities" "List.Entity";
				variable:"neighbours" "List.Environment"}{
				method  :"getEntitiesWithin" "List.Entity" {variable:"range" "Float";} {
					body_dec_var:
						variable:"inRange" "List.Entity";;
					body_conditional:
						"for" body_operator:
								body_exact: candidateEnvironment->SHOW_TYPE;
								colon
								body_exact:\"neighbours";; {
								body_conditional :
									"if" body_met_cal:
										body_met_cal:\"candidateEnvironment" \"getPosition" {};
											\"isWithinRange" {body_exact:\"position"; body_exact:\"range";};
										{
											body_met_cal:\"inRange" \"addAll" {body_met_cal:\"candidateEnvironment" \"getEntities" {};};};
								body_conditional :
									"else" {body_exact:\"break";}};
					body_return:\"inRange";};
				method  :"getEntitiesWhichSatisfy" "List.Entity" {variable:"range" "Float"; variable:"...criteria" "Criteria";} {
					body_dec_var:
						variable:"inRange" "List.Entity";;
					body_conditional:
						"for" body_operator:
								body_exact: candidateEnvironment->SHOW_TYPE;
								colon
								body_exact:\"neighbours";; {
								body_conditional :
									"if" body_met_cal:
										body_met_cal:\"candidateEnvironment" \"getPosition" {};
											\"isWithinRange" {body_exact:\"position"; body_exact:\"range";};
										{
											body_conditional:
												"for"  body_operator:
													body_exact: candidateEntity->SHOW_TYPE;
													colon
													body_met_cal:\"candidateEnvironment" \"getEntities" {};; {
														body_conditional:
															"if" body_met_cal:\"!criterium" \"satisfies" {body_exact:\"candidateEntity";}; {
																body_operator:\"satisfiesCriteria" "=" \"false";
																body_exact:\"break";
																	};};};};
					body_return:\"inRange";};}{};;
		set superMapClass
			general init:class:"environments" "Map" null null {
				variable:"environments" "List.Environments";}{}{};;
		set superPositionClass
			general init:class:"environments" "Position" null null {
				variable:"x" "Integer";
				variable:"y" "Integer";}{
				method  :"isWithinRange" "Boolean" {variable:"otherPosition" "Position"; variable:;}{
				};}{};;
		environments addFile
			directory
			"Environment.java"
			superEnvironmentClass->COMPLETE