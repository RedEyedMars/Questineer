class 'packageName'."environments" Tiles {
  @Tile create(String "tileName"){
    return null;
  }
}
class 'packageName'."environments" Tile Environment->Position Loaddable Tickable  {
  ~Float "width" = 1f;
  ~Float "height" = 1f;
  ~Integer "numberOfAliveGeneratedEntities" = 0;
  ~Integer "limit" = 5;
  ~Boolean isPath = false;
  ~Area area = null;
  Boolean isPath(){
    return false;
  }
  Boolean isWithin(Environment->Position "otherPosition"){
    return \super.isWithin("otherPosition", "width"/4f \+ "height"/4f, \Math.PI * 2.0, 0.0);
  }
  interface 'packageName'."environments" Factory {
    Tile create(){}
  }
  class 'packageName'."environments" Listener {
    class 'packageName'."environments" Die Events->Die->Listener {
      Tile "host";
      void listen(Events->Die "event"){
        "host".decreaseAliveGeneratedEntities();
      }
    }
  }
  Path getClosestPath(){
    if "parent"!=null {
      return "parent".getClosestPath(this);
    }
    else {
      return null;
    }
  }
  void load(){
    
  }
  void tick(Double millisSinceLastFrame){
    if \Math.random() > 0.05 && "numberOfAliveGeneratedEntities" < "limit" {
      Double randomIndex = \Math.random() * "onTickEntityFactories".size();
      Entity newEntity = "onTickEntityFactories".get("(int)(double)randomIndex").create();
      newEntity.setSpawn(this);
      newEntity.getLocation().moveTo(this);
      newEntity.add(new Tile->Listener->Die(this));
      "numberOfAliveGeneratedEntities" \+= 1;
    }
  }
  void decreaseAliveGeneratedEntities(){
    "numberOfAliveGeneratedEntities" \-= 1;
  }
  Association get(Association->Id id, Association->Factory factory){
    return "associations".get(id,factory);
  }
> void setup(ParseContext data){
    Class entityFactory = Entity->Factory;
    Tile += ~List<entityFactory> "onTickEntityFactories" = new ArrayList<entityFactory>()
    Tile += ~List<entityFactory> "onLoadEntityFactories" = new ArrayList<entityFactory>()
    \createMap(Association->Id,Association);
    Tile += ~\IdMap->\_Association "associations"
  }
}
class 'packageName'."environments" Path Tile{
  ~Path "leftPath" = null;
  ~Path "rightPath" = null;
  ~Path "upPath" = null;
  ~Path "downPath" = null;
  
  ~Boolean "isStop" = false;
  Boolean isPath(){
    return isPath;
  }
  Path step(Entity stepper, Path next){
    Float speed = stepper.getWalkingSpeed();
    ~Boolean moved = false;
    if this.isWithin(stepper.getLocation()) {
    if next == leftPath {
      stepper.getLocation().move(-1f * speed, 0f);
      moved = true;
    }
    else if next == rightPath {
      "stepper".getLocation().move(1f * speed, 0f);
      moved = true;
    } 
    else if next == upPath {
      "stepper".getLocation().move(0f, 1f * speed);
      moved = true;
    }
    else if next == downPath {
      stepper.getLocation().move(0f, -1f * speed);
      moved = true;
    }
    }
    if moved == false{
      Double direction = stepper.getLocation().getDirectionTo(next);
      stepper.getLocation().move(\Math.cos(direction) * speed, \Math.sin(direction) * speed); 
    }
    if next.isWithin(stepper.getLocation()) {
      if next.isStopper() {
        stepper.rememberIncomingPath(this,next);
      }
      return next;
    }
    else {
      return this;
    }
  }
  void setLeft(Path "newLeft"){
    if "leftPath" != "newLeft" {
      "leftPath" = "newLeft";
      "newLeft".setRight(this);
    }
    \updateStatus();
  }
  void setRight(Path "newRight"){
    if "rightPath" != "newRight" {
      "rightPath" = "newRight";
      "newRight".setLeft(this);
    }
    \updateStatus();
  }
  void setUp(Path "newUp"){
    if "upPath" != "newUp" {
      "upPath" = "newUp";
      "newUp".setDown(this);
   }
   \updateStatus();
  }
  void setDown(Path "newDown"){
    if "downPath" != "newDown" {
      "downPath" = "newDown";
      "newDown".setUp(this);
    }
    \updateStatus();
  }
  void \updateStatus(){
    ~Integer "count" = 0;
    if "leftPath" != null {
      "count" \+= 1;
    }
    if "rightPath" != null {
      "count" \+= 1;
    }
    if "upPath" != null {
      "count" \+= 1;
    }
    if "downPath" != null {
      "count" \+= 1;
    }
    "isStop" = "count" != 2; 
  }
  Boolean isStopper(){
    return "isStop";
  }
  List<Way> getWaysTo(Path goalPath, Map<Path,Set<Path>> stoppers){
    \TreeSet<Way> ways = new \TreeSet<Way>();
    Way firstWay = new Way();
    firstWay.setGoal(goalPath);
    firstWay.add(this);
    ways.add(firstWay);
    ~Integer count = 0;
    List<Way> result = new ArrayList<Way>();
    while count < 50 &&! ways.isEmpty() {
      count \+= 1;
      Way way = ways.pollFirst(); 
      if way.at(goalPath){
        result.add(way);
      }
      else {
        Path currentPath = way.get(way.size() - 1);
        Set<Path> currentStopper = new HashSet<Path>();
        if stoppers.containsKey(currentPath) {
          currentStopper = stoppers.get(currentPath);
        }
        if currentPath.leftPath != null && currentStopper.contains(currentPath.leftPath){
          Way newWay = new Way(way);
          if newWay.add(currentPath.leftPath) {
            ways.add(newWay);
          }
        }
        if currentPath.rightPath != null && currentStopper.contains(currentPath.rightPath) {
          Way newWay = new Way(way);
          if newWay.add(currentPath.rightPath) {
            ways.add(newWay);
          }
        }
        if currentPath.upPath != null && currentStopper.contains(currentPath.upPath) {
          Way newWay = new Way(way);
          if newWay.add(currentPath.upPath) {
            ways.add(newWay);
          }
        }
        if currentPath.downPath != null && currentStopper.contains(currentPath.downPath) {
          Way newWay = new Way(way);
          if newWay.add(currentPath.downPath) {
            ways.add(newWay);
          }
        }
      }
    }
    return result;
  }
}
class 'packageName'."environments" Way ArrayList<Path> \Comparable<Way>{
	~class Stepper // {
	  Integer i = 0;
	  void step(Entity stepper){
	    if i >= \size() \- 1 {
	      return false;
	    }
	    else {
	      Path newPath = \get(i).step(stepper,\get(1));
	      if newPath != \get(i) {
	        i \+= 1;
	      }
	      return true;
	    }
	  }
	}
    HashSet<Path> "checkSet";
    Path "goal";
    Double "distanceToGoal" = 0.0;
    Way *(Way "parentWay"){
      "goal" = "parentWay".getGoal();
      for Path "path":"parentWay" {
        \add("path");
      }
      "distanceToGoal" = "goal".getDistanceTo(\get(\size() - 1)); 
    }
    void setGoal(Path "newGoal"){
      "goal" = "newGoal";
    }
    Boolean at(Path "destination"){
      if \isEmpty() {
        return false;
      }
      else {
        if \get(\size() - 1).isStopper() {
          return true;
       }
       return \get(\size() - 1) == "destination";
     }
   }
   \boolean add(Path "newPath"){
      if "checkSet".add("newPath") {
        "distanceToGoal" = "goal".getDistanceTo("newPath"); 
        return \super.add("newPath");
      }
      else {
        return false;
      }
    }
    \int compareTo(Way "otherWay") {
      Double "distance" = "otherWay".getDistanceToGoal() - "distanceToGoal";
      if "(int)(double)distance" == 0 {
        if "otherWay".size() == \size() && "checkSet".containsAll("otherWay".getCheckSet()) {
          return 0;
        }
        else {
          return 1;
        }
      }
      else {
        return "(int)(double)distance";
      }
    }
}