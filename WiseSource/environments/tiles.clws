class 'packageName'."environments" Tiles {
  @Tile create(String tileName){
    return null;
  }
  class 'packageName'."environments" Floor Tile {
    class Id / Tile->Id / {
    }
    
    ~Tiles->Terrain terrain = null;
    ~Entity occupant = null;
    Entity->Event acceptEntity(Entity newOccupant){
      occupant = newOccupant;
      return \super.acceptEntity(newOccupant);
    }
    void setTerrain(Tiles->Terrain newTerrain){
      terrain = newTerrain;
      if terrain != null {
        terrain.setFloorTile(this);
      }
    }
    Boolean hasOccupant(){
      return occupant != null;
    }
    Boolean isPassable(Integer directionX, Integer directionY){
      if occupant != null {
        return false;
      }
      else if terrain != null && terrain.isPassable(directionX, directionY) {
        return false;
      }
       else {
        return true;
      }
    }
  }
  class 'packageName'."environments" Terrain Tile {
    class Id / Tile->Id / {
    }
    ~Tiles->Floor floorTile = null;
    Boolean isPassable(Integer x, Integer y){
      return false;
    }
    Entity->Event acceptEntity(Entity newOccupant){
      return floorTile.acceptEntity(newOccupant);
    }
    class Corpse / Tiles->Terrain / {
    }
  }
  class 'packageName'."environments" MonsterDen Tiles->Terrain {
    class Id / Tiles->Terrain->Id / {
    }
    Boolean isPassable(Integer x, Integer y){
      return false;
    }
    Entity->Event acceptEntity(Entity newOccupant){
      return "floorTile".acceptEntity(newOccupant);
    }
  }
  class 'packageName'."environments" Chest Tiles->Terrain {
    class Id / Tiles->Terrain->Id / {
    }
    Boolean isPassable(Integer x, Integer y){
      return false;
    }
    Entity->Event acceptEntity(Entity newOccupant){
      return "floorTile".acceptEntity(newOccupant);
    }
  }
  class 'packageName'."environments" EntryPoint Tiles->Floor {
    class Id / Tile->Id / {
    }
    EntryPoint sister = null;
    Entity->Event acceptEntity(Entity newOccupant){
      if sister.getArea() == null {
        sister.setArea(\getArea().getParent().getAreaGenerator().generate());
      }
      newOccupant.getLocation().setArea(sister.getArea());
      sister.takeEntity(newOccupant);
      return new Entity->Event->MovedToNewArea(area, sister.getArea());
    }
    void takeEntity(Entity newOccupant){
      newOccupant.explore(area);
      \super.acceptEntity(newOccupant);
    }
    Integer getDistanceToUnexploredPaths(Entity explorer){
      return \getDistanceToUnexploredPaths(explorer, new HashSet<EntryPoint>(),0);
    }
    Integer getDistanceToUnexploredPaths(Entity explorer,Set<EntryPoint> investigated, Integer distance){
      if investigated.add(this) {
        if explorer.hasExplored(area) {
          Integer minimum = Integer.MAX_VALUE;
          for Tile entryPoint: sister.getArea().getEntryPoints() {
            Integer sisterDistance = "((EntryPoint)entryPoint)".getDistanceToUnexploredPaths(explorer,investigated,distance\+1);
            if sisterDistance < minimum {
              minimum = sisterDistance;
            }
          }
          return minimum;
        }
        else {
          return distance;
        }
      }
      else {
        return Integer.MAX_VALUE;
      }
    }
  }
> ~Integer costIndex = 0;
> void declaration(IToken declarationToken, String mapName, List<String> floorTiles){
    \createList(Treasury->Cost);
    if declarationToken->"floor_declaration" != null {
      declarationToken->"floor_declaration" : element : tile_definition {
        floorTiles.add(\definition(element,mapName,Tiles->Floor));
      }
    }
    else if declarationToken->"terrain_declaration" != null {
      declarationToken->"terrain_declaration" : element : tile_definition {
        \definition(element,mapName,Tiles->Terrain);
      }
    }
    else if declarationToken->"dens_declaration" != null {
      declarationToken->"dens_declaration" : element : tile_definition {
        \definition(element,mapName,Tiles->MonsterDen);
      }
    }
    else if declarationToken->"chests_declaration" != null {
      declarationToken->"chests_declaration" : element : tile_definition {
        \definition(element,mapName,Tiles->Chest);
      }
    }
  }
> String definition(IToken declarationToken, String mapName, Class tileExtendsClass){
    String tileName = ^declarationToken->"tileName";
    Tiles->'mapName' += class 'packageName'."environments" tileName tileExtendsClass {
      @Tile->Id id = new tileExtendsClass->Id();
      ~Tile above = null;
      Tile->Id getId(){
        return id;
      }
      Treasury->Cost->List getCosts(){
        Treasury->Cost->List costs = new Treasury->Cost->List();
      }
      void generate(){
      }
      void load(){
      }
      void tick(Double millisSinceLastFrame){
      }
    }
    if declarationToken->"PASSABLE" != null {
      Tiles->'mapName'->'tileName' += Boolean isPassable(Integer directionX, Integer directionY){
        return true;
      }
    }
    if declarationToken->"imageId" != null {
      Tiles->'mapName'->'tileName' += ~Gui->Drawable drawable = null
      Body stateChangeBody = new Body ();
      String imageName = 'declarationToken->"imageName"';
      String imageClassName = ^declarationToken->"imageName";  
      stateChangeBody.add(|Images->'imageClassName'->States imageStates = Images->'imageName'.asStates();|);
      StringBuilder newState = new StringBuilder();
      ~String underscore = "";
      declarationToken : element : imageId {
        newState.append(underscore);
        newState.append('element');
        underscore = "_";
      }
      stateChangeBody.add(|imageStates.'newState'();|);
      stateChangeBody.add(|"drawable" = Drawables.isosquare.image("imageStates");|);
      Tiles->'mapName'->'tileName' += Gui->Drawable getDrawable(){
        if "drawable" ==  null `stateChangeBody`
        return "drawable";
      }
    }
    Tiles->*"create".prependToBody({
      if "tileName".equals(''tileName'') {
        return new Tiles->'mapName'->'tileName'(); 
      }
    });
    Tiles->'mapName'->'tileName' += class 'packageName'."environments" Factory \Object Tile->Factory {
      Tile create(){
        return new Tiles->'mapName'->'tileName'();
      }
    }
    Tiles->'mapName'->'tileName' += class Placer // Menu->Placable {
      void place(Area area, Integer placeX, Integer placeY){
        area.add(new Tiles->'mapName'->'tileName'(placeX,placeY,area.getEnvironment()));
      }
    }
	declarationToken : element : tile_rate {
	  element : atom : tile_cost {
	    Tiles->'mapName'->'tileName'->*"getCosts".appendToBody({"costs".add(`\getTileCost(atom,mapName,tileName)`);});
	  }
    }
	Tiles->'mapName'->'tileName'->*"getCosts".appendToBody({return "costs";});
    if declarationToken->"entity" != null {
	  ~Integer entityPlusNumber = 0;
      Body switchBody = new Body ();
      declarationToken : element : entity {
        element : quanta : PLUS {
          entityPlusNumber \+= 1;
        }
      }
      Integer plusNumber = entityPlusNumber;
      Tiles->'mapName'->'tileName'->*"tick".prependToBody(|switch Range.getRandom(0,'plusNumber') `switchBody`|);
      
      ~Integer plusNumberInc = 0;
      declarationToken : element : entity {            
        Class entityFactory = Entities.declaration(element->"entity_declaration");
        if element->"PLUS" != null {
          Tiles->'mapName'->'tileName' += ~Entity->Factory 'element->"entity_declaration"->"entityName"'+"Factory" = new entityFactory() 
        }
        element : quanta : PLUS {
          Integer currentPlusNumber = plusNumberInc;
          plusNumberInc \+= 1;
          String newEntityName = "newEntity"+'element->"entity_declaration"->"entityName"';
          switchBody.add(|
            case 'currentPlusNumber' {
              Entity 'newEntityName' = 'element->"entity_declaration"->"entityName"'+"Factory".create();
              if 'newEntityName'.getLocation().moveToAround(\getFloorTile()) {
                'newEntityName'.setSpawn(\getFloorTile());
                'newEntityName'.add(new Tile->Listener->Die(\getFloorTile()));
              }
            }|);
        }
        if element->"MINUS" != null {
          String newEntityName = "newEntity"+'element->"entity_declaration"->"entityName"';
          Tiles->'mapName'->'tileName'->*"load".prependToBody(|
            Entity 'newEntityName' = new entityFactory().create();
            if 'newEntityName'.getLocation().moveToAround(\getFloorTile()) {
              'newEntityName'.setSpawn(\getFloorTile());
              'newEntityName'.add(new Tile->Listener->Die(\getFloorTile()));
            }|);
        }
      } 
    }
    return tileName;
  }

> Statement getTileCost(IToken tileCostToken, String mapName, String tileName){
    String costName = "Cost" \+ costIndex;
    costIndex \+= 1;
    if tileCostToken->"FREE" != null {
      Tiles->'mapName'->'tileName' += class costName / Treasury->Cost / {
        Treasury->Reward getReward() {
          return new Tiles->'mapName'->'tileName'->'costName'->Reward(); 
        }
        Boolean isFree(){
          return true;
        }
      }
      Tiles->'mapName'->'tileName'->'costName' += class Reward / Treasury->Reward / {
        Boolean isPlacable(){
          return true;
        }
        Menu->Placable getPlacable(){
          return new Tiles->'mapName'->'tileName'->\Placer();
        }
      }
      return |new Tiles->'mapName'->'tileName'->'costName'()|;
    }
    else {
      String paymentType = Treasury.getTypeName(tileCostToken->"paymentType");
      if tileCostToken->"payment" != null {
        Tiles->'mapName'->'tileName' += class costName / Treasury->Cost / {
          Integer getAmount(){
            return 'tileCostToken->"payment"';
          }
          Treasury->PaymentType->Id getType(){
            return Treasury->PaymentTypes->'paymentType'.id;
          }
          Treasury->Reward getReward() {
            return new Tiles->'mapName'->'tileName'->'costName'->Reward(); 
          }
        }
      }
      else {
        Tiles->'mapName'->'tileName' += class costName / Treasury->Cost / {
          Treasury->PaymentType->Id getType(){
            return Treasury->PaymentTypes->'paymentType'.id;
          }
          Treasury->Reward getReward() {
            return new Tiles->'mapName'->'tileName'->'costName'->Reward(); 
          }
        }
      }
      Tiles->'mapName'->'tileName'->'costName' += class Reward / Treasury->Reward / {
        Boolean isPlacable(){
          return true;
        }
        Menu->Placable getPlacable(){
          return new Tiles->'mapName'->'tileName'->\Placer();
        }
      }
      return |new Tiles->'mapName'->'tileName'->'costName'()|;
    }
  }
}
class 'packageName'."environments" Tile Environment->Position Loaddable Tickable  {
  class Id // {
  }
  class Comparators // {
    class Distance // {
      class Ascending // Comparator<Tile> {
        Environment->Position origin = null;
        \int compare(Tile tile1, Tile tile2){
          return "(int)(float)(origin.getDistanceTo(tile1) - origin.getDistanceTo(tile2))";
        }
      }
      class Descending // Comparator<Tile> {
        Environment->Position origin = null;
        \int compare(Tile tile1, Tile tile2){
          return "(int)(float)(origin.getDistanceTo(tile2) - origin.getDistanceTo(tile1))";
        }
      }
    }
  }
  interface 'packageName'."environments" Factory {
    Tile create(){}
  }
  class 'packageName'."environments" Listener {
    class 'packageName'."environments" Die Events->Die->Listener {
      Tiles->Floor host = null;
      void listen(Events->Die event){
        host.setOccupant(null);
        if event.getDeceased() != null && event.getDeceased().hasCorpse() {
          if host.getTerrain() != null {
            Tiles->Terrain corpse = event.getDeceased().getCorpse();
            host.setTerrain(corpse);
          }
          else {
            host.setTerrain(event.getDeceased().getCorpse());
          }
        }
      }
    }
  }
  ~Integer width = 1;
  ~Integer height = 1;
  ~Area area = null;
  ~Tile rightNeighbour = null;
  ~Tile upNeighbour = null;
  ~Tile leftNeighbour = null;
  ~Tile downNeighbour = null;
  
  Tile->Id getId(){
    return null;
  }
  Tile getNeighbour(Direction direction){
    if area == null {
      return null;
    }
    if direction == Direction.right {
      if rightNeighbour == null {
        rightNeighbour = area.getTile(\getX()\+1,\getY());
      }
      return rightNeighbour;
    }
    else if direction == Direction.left {
      if leftNeighbour == null {
        leftNeighbour = area.getTile(\getX()\-1,\getY());
      }
      return leftNeighbour;
    }
    else if direction == Direction.up {
      if upNeighbour == null {
        upNeighbour = area.getTile(\getX(),\getY()\+1);
      }
      return upNeighbour;
    }
    else if direction == Direction.down {
      if downNeighbour == null {
        downNeighbour = area.getTile(\getX(),\getY()\-1);
      }
      return downNeighbour;
    }
    else {
	  return null;
    }
  }
  Boolean isPassable(Integer directionX, Integer directionY){
    return true;
  }
  Boolean isWithin(Environment->Position otherPosition){
    return \super.isWithin(otherPosition, width, height);
  }
  Gui->Drawable getDrawable(){
    return null;
  }
  void generate(){
  }
  void load(){
    
  }
  void tick(Double millisSinceLastFrame){
  }
  Entity->Event acceptEntity(Entity newOccupant){
    Environment->Location location = newOccupant.getLocation();
    location.setTile(this);
    location.setX(\getX());
    location.setY(\getY());
    return null;
  }
  Association get(Association->Id id, Association->Factory factory){
    return "associations".get(id,factory);
  }
> void setup(ParseContext data){
    \createList(Entity->Factory);
    \createMap(Association->Id,Association);
    Tile += ~\IdMap->\_Association "associations"
  }
}