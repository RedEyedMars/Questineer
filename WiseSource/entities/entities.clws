
import behaviours/activities/activities.clws
import behaviours/skills/skills.clws
import behaviours/quests/quests.clws
import items/items.clws
import mods/affinities/affinities.clws
import mods/conditions/conditions.clws
import mods/traits/traits.clws
import relations/relations.clws

class 'packageName'."misc" Int {
  Integer value = 0;
  void setValue(Integer newValue){
    value = newValue;
  }
  void increase(Integer amount){
    value \+= amount;
  }
}
class 'packageName'."entities" Entities {
  @Entity createEntity(String "entityName"){
    return null;
  }
  class Hero / Entity / {
    Hero *(Gui->Statable image){
      imageStates = image.asStates();
    }
    
    boolean getIsPlayerAffiliated(){
      return true;
    }
    ~Gui->Image->States imageStates = null;
    ~Gui->Drawable drawable = null;
    Gui->Drawable getDrawable(){
      if drawable == null {
        drawable = Drawables.square.image(imageStates);
        drawable.setVisualWidth(2/13f);
        drawable.setVisualHeight(2/13f);
      }
      return drawable;
    }
    void changeState(ImageStates newState){
      imageStates.changeState(newState);
    }
    Boolean isIdle(){
      return imageStates.getId() == ImageStates.idle;
    }
    Gui->Image->States changeTo(){
      return imageStates;
    }
  }
> Class declaration(IToken declarationToken){
    StringBuilder entityNameBuilder = new StringBuilder();
	declarationToken : element : entityName {
	  entityNameBuilder.append('element');
	}
	String entityName = entityNameBuilder.toString();
    Entities += class 'packageName'."entities" entityName Entity {
      ~Gui->Drawable drawable = null;
    }
    Entities->\entityName += class 'packageName'."entities" Factory \Object Entity->Factory {
        Entity create(){
          return new Entities->'entityName'();
        }
      }
    if declarationToken->"imageName" != null {
      String imageName = 'declarationToken->"imageName"';
      String imageClassName = ^declarationToken->"imageName";  
      StringBuilder newState = new StringBuilder();
      ~String underscore = "";
      declarationToken : element : imageId {
        newState.append(underscore);
        newState.append('element');
        underscore = "_";
      }
      if declarationToken->"width" != null {
        newState.append("_0");
      }
      Entities->'entityName' += ~Images->'imageClassName'->States imageStates = Images->'imageName'.asStates()
      Entities->'entityName' += Gui->Drawable getDrawable(){
          if drawable == null {
            drawable = Drawables.square.image(imageStates);
            drawable.setVisualWidth(2/13f);
            drawable.setVisualHeight(2/13f);
          }
          return drawable;
        }
      Entities->'entityName' += void changeState(ImageStates newState){
          imageStates.changeState(newState);
        }
      Entities->'entityName' += Boolean isIdle(){
          return imageStates.getId() == ImageStates.idle;
        }
      Entities->'entityName' += Gui->Image->States changeTo(){
          return imageStates;
        }
      Entities->'entityName'->*.appendToBody(|"imageStates".'newState'();|); 
    }
    declarationToken : element : entity_definition {
      element : atom : affinity_names {
    	Entities->'entityName'->*.appendToBody(| this.gain(new Affinities->'^atom'(), this); |);
      }
      element : atom : event {
        Context eventContext = Events.addToEventMethod('atom->"event_names"', Entities->'entityName', {});
        Body eventBody = new Body ();
        atom : quark : body_element {
          eventBody.add(\getBodyElement(quark,eventContext));
        }
        Events.addToEventMethod('atom->"event_names"', Entities->'entityName', eventBody);
      }
      element : atom : skill {
        Statement arguments = new Statement ();
        arguments.set(",");
        Context bodyContext = Entity.getContext();
        atom : quark : statement {
          arguments.add(\getStatement(quark,bodyContext));
        }
    	Entities->'entityName'->*.appendToBody(| this.gain(new Skills->'^atom->"skill_names"'(`arguments`), this); |);
      }
      element : atom : statRange {
        String heroStatName = 'atom->"hero_stats"'.toLowerCase();
        String leftBound = 'atom->"left"';
        String rightBound;
        if atom->"right" != null {
          rightBound = 'atom->"left"';
        }
        else {
          rightBound = leftBound; 
        }
    	Entities->'entityName'->*.appendToBody(| this.'heroStatName'.setValue(Range.getIntegerBetween('leftBound','rightBound')); |);
      }
    }
    return Entities->'entityName'->Factory;
  }
}
class 'packageName'."entities" Entity \Object Source Loaddable Tickable {
  interface 'packageName'."entities" Factory {
    Entity create(){}
  }
  interface 'packageName'."entities" Modifier {
    Float use(Entity "inputEntity"){}
    void  decrease(Entity "inputEntity",Float "newValue"){}
  }
  class 'packageName'."entities" MultiModifier ArrayList<Modifier> Entity->Modifier{
    MultiModifier *(Entity->Modifier... "mods"){
      super(Arrays.asList("mods"));
    }
	Float use(Entity "inputEntity"){
	  Float "sum" = 0f;
	  for Entity->Modifier "mod" : this {
	    "sum" += "mod".use("inputEntity");
	  }
	  return "sum";
	}
	void decrease(Entity "inputEntity", Float "amount"){
	  for Entity->Modifier "mod" : this {
	    "mod".decrease("inputEntity","amount" / \size());
	  }
	}
  }
  interface 'packageName'."entities" Stat {
    Integer getValue(){}
	void setValue(Integer "newValue"){}
	Boolean impose(Integer "amount", Source "source"){}
	void release(Source "source"){}
	String getName(){}
  }
  class Event // {
    class Id // {}
    Entity->Event->Id getId(){
      return null;
    }
    class MovedToNewArea / Entity->Event / {
      @Entity->Event->Id \id = new Entity->Event->Id();
      Entity->Event->Id getId(){
        return \id;
      }
      Area oldArea = null;
      Area newArea = null;
    }
    class FailedToMove / Entity->Event / {
      class Id / Entity->Event->Id / {}
      @Entity->Event->FailedToMove->Id \id = new Entity->Event->FailedToMove->Id();
      Entity->Event->Id getId(){
        return \id;
      }
      Tile causalTile = null;
      class TileHasOccupant / Entity->Event->FailedToMove / {
        @Entity->Event->FailedToMove->Id \id = new Entity->Event->FailedToMove->Id();
        Entity->Event->Id getId(){
          return \id;
        }
        Entity causalOccupant = null;
      }
      class TerrainImpassable / Entity->Event->FailedToMove / {
        @Entity->Event->FailedToMove->Id \id = new Entity->Event->FailedToMove->Id();
        Entity->Event->Id getId(){
          return \id;
        }
        Tiles->Terrain causalTerrain = null;
      }
    }
  }
  class Comparators // {
    class Distance // {
      class Ascending // Comparator<Entity> {
        Environment->Position origin = null;
        \int compare(Entity entity1, Entity entity2){
          return "(int)(float)(origin.getDistanceTo(entity1.location) - origin.getDistanceTo(entity2.location))";
        }
      }
      class Descending // Comparator<Entity> {
        Environment->Position origin = null;
        \int compare(Entity entity1, Entity entity2){
          return "(int)(float)(origin.getDistanceTo(entity2.location) - origin.getDistanceTo(entity1.location))";
        }
      }
    }
  }
  @Integer ALIVE = 0;
  @Integer DEAD  = 1;
  String name = null;
  ~Integer status = ALIVE;
  ~Float "weightHeld" = 0f;
  ~Integer "walkingSpeed" = 20;
  ~Tile "spawn" = null;
  ~Item->List "equippedItems" = new Item->List();
  ~Skill focusSkill = null;
  ~Environment->Location location = new Environment->Location(this);
  ~\EntityMap->\_Reason "relationships";
  ~Activity currentActivity = null;
  ~Integer currentActivityIndex = -1;
  ~Activity->List activityList = new Activity->List();
  ~LinkedList<Entity\>Event> events = new LinkedList<Entity\>Event>();
  
  
  void display(){
    \getDrawable().display(Renderer.topLayer);
  }
  void undisplay(){
    \getDrawable().undisplay(Renderer.topLayer);
  }
  Gui->Drawable getDrawable(){
    return null;
  }
  Gui->Image->States changeTo(){
    return null;
  }
  boolean getIsPlayerAffiliated(){
    return false;
  }
  Float getItemDamage(){
    Float "sum" = 0f;
	for Item "item" : "equippedItems" {
	  "sum" \+= "item".getDmg().use(this);
	}
	return "sum";
  }
  Float getItemDefense(){
    Float "sum" = 0f;
	for Item "item" : "equippedItems" {
	  "sum" \+= "item".getDef().use(this);
	}
	return "sum";
  }
  Boolean canEquip(Item "item"){
    return this."str".getValue() > "weightHeld" \+ "item".getWeight().use(this);
  }
  void equip(Item "item"){
    "equippedItems".add("item");
	"weightHeld" = "weightHeld" \+ "item".getWeight().use(this);
	"item".on(new Events->\Equip(this,"item"));
  }
  void equip(Item "item"){
    "equippedItems".remove("item");
	"weightHeld" = "weightHeld" \+ "item".getWeight().use(this);
	"item".on(new Events->\Unequip(this,"item"));
  }
  void addEvent(Entity->Event event){
    events.push(event);
  }
  void exploreEntryPoint(Tiles->EntryPoint point){
    if currentActivity != null {
      currentActivity.rememberEntryPoint(point);
    }
  }
  void explore(Area newArea){
    if currentActivity != null {
      currentActivity.explore(newArea);
    }
  }
  Boolean hasExplored(Area area){
    if currentActivity != null {
      return currentActivity.hasExplored(area);
    } 
    else {
      return false;
    }
  }
  Boolean isIdle(){
    return true;
  }
  void changeState(ImageStates newState){
  }
  void load(){
    \on(new Events->\Load(this));
  }
  void tick(Double millisSinceLastFrame){
    if currentActivity==null &&! activityList.isEmpty() {
      currentActivity = activityList.get(0);
      currentActivityIndex = 0;
    }
    
    if events.isEmpty() == false {
      if currentActivity!=null {
        while events.isEmpty() == false {
          currentActivity.listen(this,events.pollFirst());
        }
        currentActivity.on(new Events->\Tick(this));
      }
      else {
        while events.isEmpty() == false {
          \listen(events.pollFirst());
        }
      }
    }
    else {
      if currentActivity != null {
	    currentActivity.on(new Events->\Tick(this));
	  }
	}
    \on(new Events->\Tick(this));
  }
  void listen(Entity->Event event){
    if event.getId() == Entity->Event->FailedToMove.id {
    }
  }
  void join(Entity recruiter, Association newAssociation){
    newAssociation.add(this);
    \gain(newAssociation,recruiter);
    \on(new Events->\Joined(recruiter, this));
  }
  void start(Activity newActivity){
    newActivity.setHost(this);
    newActivity.on(new \Events->\Load(this));
    activityList.add(0,newActivity);
    currentActivityIndex \+= 1;
  }
  void stop(Activity oldActivity){
    activityList.remove(oldActivity);
  }
  void stepNextActivity(){
    currentActivityIndex \+= 1;
    if currentActivityIndex < activityList.size(){
      Activity previousActivity = currentActivity;
      Integer previousActivityIndex = currentActivityIndex;
      currentActivity = activityList.get(currentActivityIndex);
      currentActivity.step(this);
      currentActivity = previousActivity;
      currentActivityIndex = previousActivityIndex;
    }
    else {
      currentActivity = null;
      currentActivityIndex = -1;
    }
  }
  Boolean hasCorpse(){
    return false;
  }
  Tiles->Terrain->Corpse getCorpse(){
    return null;
  }
  
> void setup(ParseContext data){
	List<String> namesToAdd = new ArrayList<String>();
	namesToAdd.add("hit");
	Map<String, Body > bodiesToAdd = new HashMap<String, Body >();
	bodiesToAdd.put("hit", \onHitBody());
    Events.addEventMethods(Entity,bodiesToAdd);
    
    Entity.addGainLoss(Condition,Entity);
    Entity.addGainLoss(Trait,Entity);
    Entity.addGainLoss(Affinity,Entity);
    Entity.addGainLoss(Association,Entity);
    Entity.addGainLoss(Skill,Entity);
    Entity.addGainLoss(Attack,Entity);
    Entity.addGainLoss(Support,Entity);
    Entity.addGainLoss(Quest,Entity);
    Entity.addGainLoss(Activity,Entity);
    
    \createList(Item);
    \createList(Usable);
    \createList(Activity);
    \createListMap(Source, Int);
    \createMap(Entity, Relationship->Reason);
    
    Set<String> statNames = data.getListElements("hero_stats");
    Parameters allStatList = new Parameters ();
    Body randomStatBody = {};
    for String statName : statNames {
      String vName = statName.toLowerCase();
      Entity += class 'packageName'."entities" statName \Object Entity->Stat {
        Integer "value" = 0;
        ListMaps->\Sources->\_Int "history";
        void setValue(Integer "newValue"){
          "value" = "newValue";
        }
        Boolean impose(Integer "amount", Source "source"){
          synchronized this {
            "history".add("source",new Int("amount"));
          }
          "value" \+= "amount";
          return "value" > 0;
        }
		void release(Source "source"){
		  synchronized this {
			"history".removeLast("source");
		  }
		}
		String getName(){
		  return ''statName'';
		}
      }
      Entity->'statName' += class 'packageName'."entities" Modifier \Object Entity->Modifier {
          Float "percent" = 1f;
          Modifier *(Double "initialPercent"){
            "percent" = "(float)(double)initialPercent";
          }
          Float use(Entity "inputEntity"){
            return "inputEntity".'vName'."value" * "percent";
          }
		  void decrease(Entity "inputEntity", Float "amount"){
		    "percent" \-= "amount" / "inputEntity".'vName'."value";
		  }
        }
      Entity += ~Entity->'statName' 'vName' = new Entity->'statName'() 
      randomStatBody.add(|case 'allStatList.getSize()' {return 'vName';}|);
      allStatList.add(|'vName'|);
      Entity->'statName'.getContext().setEnder(|\getValue()|);
    }
    
    Entity += Entity->Stat getRandomStat(){
      switch Range.getRandom(0, 'allStatList.getSize()' ) `randomStatBody`
      return null;
    }
  }
  Boolean isDead(){
    return status == DEAD;
  }

> Body onHitBody(){
    return {
    	Float "eventDamage" = "event".getDamage().getTotal();
		if "eventDamage" < 0.1f && "eventDamage" > -0.1 {
			return void;
		}
		Float "preciseDamage" = "eventDamage" - this.con.getValue() - this.getItemDefense();
		Integer "damageToTake" = "(int)(float)preciseDamage";
		Float "eventModifier" = "event".getDamage().getModifier();
		for Item "item" : "event".getAttacker().getEquippedItems() {
		  "item".getHp().decrease(this,
		     "item".getDef().use(this) * "eventModifier" / "eventDamage" );
		  "item".on(new Events->\ChangeItem(this,"item"));
		}
		if "damageToTake" < 1 {
		  "damageToTake" = 1;
		}
		while "damageToTake" > 13 {
			"damageToTake" -= 3;
			if true &&! \getRandomStat().impose(-3, "event".getAttacker()) {
				\on(new Events->\Die("event".getAttacker(),this));
			}
		}
		while "damageToTake" > 5{
			"damageToTake" -= 2;
			if true &&! \getRandomStat().impose(-2, "event".getAttacker()) {
				\on(new Events->\Die("event".getAttacker(),this));
			}
		}
		while "damageToTake" > 0{
			"damageToTake" -= 1;
			if true &&! \getRandomStat().impose(-1, "event".getAttacker()) {
				\on(new Events->\Die("event".getAttacker(),this));
			}
		}
	};
  }
  
> Statement getRange(IToken rangeToken){
    if rangeToken->"rangeToken" != null {
      Parameters parameters = new Parameters ();
      parameters.add(\getSingleRange(rangeToken));
      rangeToken : element : extra {
        parameters.add(\getSingleRange(element));
      }
      return |new MultiModifier(parameters)|;
    }
    return \getSingleRange(rangeToken);
  }
> Statement getSingleRange(IToken singleRangeToken){
	if singleRangeToken->"hero_stats" != null {
	  if singleRangeToken->"percent" != null {
	    return |new Entity->'singleRangeToken->"hero_stats"'->Modifier(
	      new Range('\percentify(singleRangeToken->"left")' + "f",
	                '\percentify(singleRangeToken->"right")' + "f").getRandom())|;
	  }
	  else {
	    return |new Entity->'singleRangeToken->"hero_stats"'->Modifier(
	      new Range('singleRangeToken->"left"'+"f",
	                'singleRangeToken->"right"'+"f").getRandom())|;
	  }
	}
	else {
	  return |`\primeRange(singleRangeToken)`.getModifier()|;
	}
  }
> Statement getImposition(IToken impositionToken, Boolean forGainBody, Statement subject){
    ~Boolean useImpose = false;
    IToken operator = impositionToken->"operator";
    if forGainBody && operator->"IMPOSE" == null {
      useImpose = true;
    }
    else if operator->"IMPOSE" != null &&! forGainBody{
      useImpose = true;
    }
    String impositionStat = 'impositionToken->"hero_stats"'.toLowerCase();
    String statGetMethod = "get"+^impositionStat;
    if useImpose {
      ~Integer count = 0;
      impositionToken : element : PLUS { count = count + 1; }
      impositionToken : element : MINUS { count = count - 1; }
      impositionToken : element : amount { count = count + Integer.parseInt('element'); }
      Integer realCount = count;
      return | `subject`.'statGetMethod'().impose('realCount',this); |;
    }
    else {
      return | `subject`.'statGetMethod'().release(this); |;
    }
  }
  
> void addGainLoss(Class inputClass, Class outputClass){
    String asVariable = inputClass.getName().toLowerCase();
    String asList = asVariable + "s";
    Statement getIdStatement;
    if inputClass == Attack {
      getIdStatement = | 'asVariable'.getAttackId() |;
    }
    else if inputClass == Support {
      getIdStatement = | 'asVariable'.getSupportId() |;
    }
    else {
      getIdStatement = | 'asVariable'.getId() |;
    }
	outputClass +=
	  Boolean has(inputClass->Id "findId"){
	    for inputClass 'asVariable' : 'asList'.getAll() {
		  if `getIdStatement` == "findId" {
			return true;
		  }
		}
		return false;
	  }
	outputClass +=
	  inputClass get(inputClass->Id "findId"){
	    for inputClass 'asVariable' : 'asList'.getAll() {
		  if `getIdStatement` == "findId" {
			return 'asVariable';
		  }
		}
		return null;
	  }
	outputClass +=
	  void gain(inputClass 'asVariable', Source "source"){
	    'asList'.add("source", 'asVariable');
	  }
	outputClass +=
	  void gain(inputClass 'asVariable'){
	    'asList'.add(this, 'asVariable');
	  }
	String errorMessage = inputClass.getName() + ":\"+removeId+\"  not found!";
	outputClass +=
	  void lose(inputClass->Id "removeId", Source "source"){
	    ~inputClass "toRemove" = null;
	    for inputClass 'asVariable' : 'asList'.getFrom("source") {
	      if `getIdStatement` == "removeId" {
	        "toRemove" = 'asVariable'; 
	      }
	    }
	    if "toRemove" == null {
	      throw 'errorMessage';
	    }
	    else {
	      'asList'.remove("source","toRemove");
	    }
	  }
	\createListMap(Source, inputClass);
	String inputName = "_" + inputClass.getName();
	outputClass += ~ListMaps->\Sources->\inputName 'asList' = new ListMaps->\Sources->\inputName()
  }
}