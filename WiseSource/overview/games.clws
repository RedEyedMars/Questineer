> String mainStringArgs = "String[]";
class 'packageName'."game" Game \Object InputHandler->Events->KeyboardEvent->Listener  InputHandler->Events->MouseEvent->Listener {
  ~List<Environment> environments = new ArrayList<Environment>();
  ~Double lastTick = \System.currentTimeMillis()/1000.0;
  ~Double thisTick = lastTick;
  ~Tile mosiac = null;
  ~Area focusArea = null;
  ~Entity hero = null;
  boolean[] pressedKeys = new boolean[128]; 
  @void main('mainStringArgs' args){
    new Gui();
  }
  void findSeed(){
	Long seed = new Random().nextLong();
	Range.randomizer.setSeed(seed);
	System.out.println(''"Seed:"''\+seed\+''"L"'');
  }
  void load(){
    environments.add(new Environments->\Forest());
    environments.add(new Environments->\Town());
	for Environment environment:environments {
	  environment.load();
	}
	new Associations().on(new Events->\Load(null));
    hero = new Entities->Hero(Images.male_hero_base);
    hero.changeState(ImageStates.male);
    hero.changeState(ImageStates.idle);
	hero.setSpawn(environments.get(0).getArea(0).getEntryPoint(0));
	hero.load();
	environments.get(0).getArea(0).getEntryPoint(0).accept(hero);
	hero.start(new Activities->\Exploring(20));
	InputHandler.addKeyboardListener(this);
	InputHandler.addMouseListener(this);
  }
  void listen(InputHandler->Events->KeyboardEvent->Release event) {
    pressedKeys[event.getKeyInt()] = false;
  }
  void listen(InputHandler->Events->KeyboardEvent->Press event) {
    pressedKeys[event.getKeyInt()] = true;
  }
  void listen(InputHandler->Events->MouseEvent->Release event) {
  }
  void listen(InputHandler->Events->MouseEvent->Press event) {
  }
  void listen(InputHandler->Events->MouseEvent->Drag event) {
  }
  void listen(InputHandler->Events->MouseEvent->Move event) {
  }

  void update(){
    thisTick = \System.currentTimeMillis()/1000.0;
    for Environment environment:environments {
      environment.tick(thisTick-lastTick);
    }
    if focusArea != hero.getLocation().getArea() {
      if focusArea != null {
        focusArea.undisplay();
      }
      focusArea = hero.getLocation().getArea();
    }
    focusArea.display();
    if pressedKeys[19] {
      focusArea.undisplay();
    }
    if pressedKeys[1] {
      Gui.isRunning = false;
    }
    if pressedKeys[17] {
      Gui.renderer.moveView(0.0f, -0.01f);
    }
    if pressedKeys[30] {
      Gui.renderer.moveView(0.01f, 0.0f);
    }
    if pressedKeys[31] {
      Gui.renderer.moveView(0.0f, 0.01f);
    }
    if pressedKeys[32] {
      Gui.renderer.moveView(-0.01f,0.0f);
    }
    lastTick = thisTick;
  }
}