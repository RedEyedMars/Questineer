
class 'packageName'."events" Events {
> Map<String,List<Entry>> variableDefs = new HashMap<String, List<Entry>>();
> Set<String>			  eventNameSet = new HashSet<String>();
> void declaration(IToken declaration){
	String eventName = 'declaration->"eventName"';
	eventNameSet.add(eventName);
	String cev = \^eventName;
    Events += class 'packageName'."events" cev Event {}
    Events->\cev += class 'packageName'."events" Listener \Object Listenable {
      void listen(Event "event"){}
    }
    declaration : element : parameter {
	  element : atom : type_name {
		Events->\cev += '\getTypeName(atom)' 'element->"name"'
      }
	}
  }
> void addParameter(String eventName, Method method){
   	method.addParameter(\eventName "event";);
  }
> Context addToEventMethod(String eName, Class inputClass, Body body){
	Method newMethod = void "on"(Events->\^eName "event") {};
	String newMethodName = newMethod.getName();
	if inputClass.getMethod(newMethodName) == null {
	  inputClass += void "on"(Events->\^eName "event") {}
	  inputClass += void "add"(Events->\^eName->Listener "newListener") {
		'eName'+"Listeners".add("newListener");
	  }
	  \createList(Listenable);
	  inputClass += ~Lists->\ListenableList 'eName'+"Listeners" 
	}
	Method establishedMethod = inputClass.getMethod(newMethodName);
	establishedMethod.appendToBody(body);
	return establishedMethod.getCurrentContext();
  }
> void addEventMethods(Class inputClass, Map<String, Body > bodiesToAdd){
	for String name : eventNameSet {
	  if bodiesToAdd.containsKey(name) {
		\addToEventMethod(name, inputClass, bodiesToAdd.get(name));
	  }
	  else {
	    \addToEventMethod(name, inputClass, {});
	  }
	}
  }
> void addEventMethodsExclusive(Class inputClass, Map<String, Body > bodiesToAdd){
	for String name : eventNameSet {
	  if bodiesToAdd.containsKey(name) {
		\addToEventMethod(name, inputClass, bodiesToAdd.get(name));
	  }
	}
  }
}
class 'packageName'."events" Event {
}
