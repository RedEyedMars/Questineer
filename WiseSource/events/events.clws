
class packageName."events" Events {
>	Map<String,List<Entry>> variableDefs = new HashMap<String, List<Entry>>();
>	Set<String>					  eventNameSet = new HashSet<String>();
>	void declaration(IToken declaration){
>		String eventName = 'declaration->"eventName"';
>		eventNameSet.add(eventName);
>		String cev = \^eventName;
>		Events +=
			class packageName."events" cev Event {}
>		declaration : element : parameter {
>			element : atom : type_name {
>				Events->cev +=
					'\getTypeName(atom)' 'element->"name"'
			}
		}
	}
>	void addParameter(String eventName, Method method){
>		method.addParameter(\eventName "event";);
	}
>	Context addToEventMethod(String eName, Class inputClass, Body body){
>		Method newMethod = void "on"(Events->\^eName "event") {};
>		String newMethodName = newMethod.getName();
>		if inputClass.getMethod(newMethodName) == null {
>			inputClass += void "on"(Events->\^eName "event") {}
		}
>		Method establishedMethod = inputClass.getMethod(newMethodName);
>		establishedMethod.appendToBody(body);
>		return establishedMethod.getCurrentContext();
	}
>	void addEventMethods(Class inputClass, List<String> nameToAdd, List<Body > bodiesToAdd){
>		Iterator<Body > bodyItr = bodiesToAdd.iterator();
>		for String name:nameToAdd {
>			\addToEventMethod(name, inputClass, bodyItr.next());
		}
	}
}
class packageName."events" Event {
}
