traits
	elements from "trait.elements"
	
	var packageName
	var directory
	var superTraitClass as class
	var superTraitsClass as class
	var createTraitBody = {}
	aux setup takes data as ParseContext
		createTraitBody setDelimiter:"";
		set packageName
			general getPackageName
		set directory
			new File
				general getDirectory
				"entities/mods/traits"
		directory mkdirs
	aux generate takes data as ParseContext
		var idVariable
			variable:"id" "Traits.Id";
		var idClass as class
			class:"entities.mods.traits" "Id" null null {}{}{};
		entry createTraitMethod = method:"createTrait" "Trait" {variable:"traitName" "String";}{createTraitBody general returnCall{\"null"}}; 
		set superTraitClass
			general init:class:"entities.mods.traits" "Trait" null {general->Source} {
				idVariable->STATIC_FINAL->PUBLIC
				variable:"name" "String"; variable:"description" "String"; } {
				method:"onGain" "void" {variable:"event" "Events.Gain";}  {};
				method:"onLoss" "void" {variable:"event" "Events.Loss";}  {};
				method:"hasRequirements" "Boolean" {variable:"candidate" "Entity";} {general returnCall{\"null"}}; } {};;
		set superTraitsClass
			general init:class:"entities.mods.traits" "Traits" null null {}{createTraitMethod->STATIC_COMPLETE}{idClass};;
		traits addFile
			directory
			"Trait.java"
			superTraitClass->COMPLETE
		traits addFile
			directory
			"Traits.java"
			superTraitsClass->COMPLETE
	
	generate trait
		var traitName
			^trait->traitName
		entry gainBody "" = {}
		entry lossBody "" = {}
		entry requirementsBody "" = {}
		var candidate
			body_exact:\"candidate";
		token quark
			trait
		quark requirement to energy
			var requireHeader as body_statement
				generate general requirement:candidate false;
			requirementsBody+=
				body_conditional:"if" requireHeader {
								body_return:body_exact:\"false";;};
		var eventHost
			body_met_cal:body_exact:\"event"; \"getHost" {};
		quark impose to energy
			gainBody+=generate entities imposition:true eventHost;
			lossBody+=generate entities imposition:false eventHost;
		requirementsBody+=
			body_return:body_exact:\"true";;
		superTraitsClass addSubClass
			class:"entities.traits" traitName superTraitClass null {}{
			method:"getName" "String" {}{returnCall{``traitName``}};
			method:"getDescription" "String" {}{returnCall{``'trait->description``}};
			method:"onGain" "void" {variable:"event" "Events.Gain";}gainBody;	
			method:"onLoss" "void" {variable:"event" "Events.Loss";}lossBody;
			method:"hasRequirements" "Boolean" {variable:"candidate" "Entity";}requirementsBody; }{};
		return
			null
	
	aux id takes traitName
		set traitName
			traits buildString
				"Traits."
				traitName
		return
			body_static:general->traitName \"id";