
getRandom
	"" Subject ".getRandom()"
getModifier
	"" Subject ".getModifier()"
entityStatModifier
	"new Entity." Stat ".Modifier(new Range(" Left "f," Right "f).getRandom())"
statVariable
	"private " Stat Type " " Stat Name " = new " Stat Type "(0);"
declareVariable
	"private " Type " " Name " = new " Type "();"
declareStatGetMethod
	"public " Type " get" Camel "(){
		return " Name ";
	}"
damageMethodBody
	"
		hp -= incDamage;
		history.get("damage").add(source);"
gainMethodBody
	"
		aspects.add(source,incAspect);"
statImposeBody
	"synchronized(this){
				history.add(source,new Int(amount));
				value+=amount;
				return value>0;
			}"
statReleaseBody
	"synchronized(this){
				history.removeLast(source);
			}"
statModifierDecreaseBody
	"percent -= amount/inputEntity." Stat Name ".value;"
statModifierUseBody
	"return inputEntity." Stat Name ".value*percent"
multiConstructorBody
	"\n\t\t\tsuper(Arrays.asList(mods));"
multiDecreaseBody
	"\n\t\t\tfor(Modifier mod:this){\n\t\t\t\tmod.decrease(inputEntity,newValue/size());\n\t\t\t}"
multiUseBody
	"\n\t\t\tfloat sum = 0f;\n"+
	"\t\t\tfor(Modifier mod:this){\n\t\t\t\tsum+=mod.use(inputEntity);\n\t\t\t}\n"+
	"\t\t\treturn sum"

declareMethod
	"public " Header "(" Parameters "){" Body "\n\t}"
multiRange
	"new Entity.MultiModifier(" Parameters ")"
hasMethod
	"
		for(" Param Type " " Param Name ":" List ".getAll()){
			if(" Argument ".getId() == findId){
				return true;
			}
		}
		return false"
gainMethod
	"
		" List ".add(source," Argument ");"
loseMethod
	"
		" Class Name " toRemove = null;
		for(" Param Type " " Param Obj ": " List ".getFrom(source)){
			if(" Argument ".getId() == removeId){
				toRemove = " Argument ";
				break;
			}
		}
		if(toRemove==null){
			throw new RuntimeException(\"" Class ":\"+removeId+\" Not found!\");
		}
		else {
			" List ".remove(source,toRemove);
		}"
itemDamageBody
	"
		Float sum = 0f;
		for(Item item:equippedItems){
			sum+=item.getDmg().use(this);
		}
		return sum"
itemDefenseBody
	"
		Float sum = 0f;
		for(Item item:equippedItems){
			sum+=item.getDef().use(this);
		}
		return sum"
canEquipBody
	"
		return this.str.getValue()>weightHeld+item.getWeight().use(this)"
equipBody
	"equippedItems.add(item);
		weightHeld+=item.getWeight().use(this);
		item.onEquip(new Events.Equip(this,item));"
unequipBody
	"
		equippedItems.remove(item);
		weightHeld-=item.getWeight().use(this);
		item.onUnequip(new Events.Unequip(this,item));"
onHitBody
	"
		Float eventDamage = event.getDamage().getTotal();
		if(eventDamage<0.1f&&eventDamage>-0.1){
			return;
		}
		int damageToTake = (int)(float)(eventDamage-this.con.getValue()-this.getItemDefense());
		Float eventModifier = event.getDamage().getModifier();
		for(Item item:event.getAttacker().getEquippedItems()){
			item.getHp().decrease(this,item.getDmg().use(event.getAttacker())*eventModifier/eventDamage);
			item.onChangeItem(new Events.ChangeItem(this,item));
		}
		if(damageToTake<1){
			damageToTake = 1;
		}
		while(damageToTake>13){
			damageToTake-=3;
			if(!getRandomStat().impose(-3,event.getAttacker())){
				onDie(new Events.Die(event.getAttacker(),this));
			}
		}
		while(damageToTake>5){
			damageToTake-=2;
			if(!getRandomStat().impose(-2,event.getAttacker())){
				onDie(new Events.Die(event.getAttacker(),this));
			}
		}
		while(damageToTake>0){
			--damageToTake;
			if(!getRandomStat().impose(-1,event.getAttacker())){
				onDie(new Events.Die(event.getAttacker(),this));
			}
		}"
randomStatBody
	"
		return new Entity.Stat[]{" Stats "}[(int)(Math.random()*" Size ")]"