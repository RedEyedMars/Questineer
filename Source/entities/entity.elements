
getRandom
	"" Subject ".getRandom()"
getModifier
	"" Subject ".getModifier()"
entityStatModifier
	"new Entity." Stat ".Modifier(new Range(" Left "f," Right "f).getRandom())"
statVariable
	"private " Stat Type " " Stat Name " = new " Stat Type "(0);"
declareVariable
	"private " Type " " Name " = new " Type "();"
declareStatGetMethod
	"public " Type " get" Camel "(){
		return " Name ";
	}"
damageMethodBody
	"
		hp -= incDamage;
		history.get("damage").add(source);"
gainMethodBody
	"
		traits.get(incTrait).add(source);"
declareEntityClass
	"package " Game Package ".entities;\n"+
	"import " Game Package ".misc.*;\n"+
	"import " Game Package ".traits.*;\n"+
	"import " Game Package ".entities.misc.*;\n"+
	"import java.util.ArrayList;\n"+
	"import java.util.Arrays;\n"+
	"public class Entity {\n"+
	"" Stat Variables "\n" Stat Methods "\n" Stat Classes "\n}"
declareStatClass
	"public static class " Stat Type " {
		private int value = 0;
		private	List.Map.Source._Int history;
		public " Stat Type "(int initialValue){
			value = initialValue;
			history = new List.Map.Source._Int();
		}
		public int getValue(){
			return value;
		}
		public void setValue(int newValue){
			value = newValue;
		}
		public synchronized void impose(Integer amount, Source source){
			history.add(source,new Int(amount));
			value+=amount;
		}
		public synchronized void release(Source source){
			history.removeLast(source);
		}
		public String getName(){
			return \"" Stat Name "\";
		}" Content "\n\t}"
declareStatModifierClass
	"\t\tpublic static class Modifier implements Entity.Modifier {\n"+
	"\t\t\tprivate float percent;\n"+
	"\t\t\tpublic Modifier(Float initialPercent){\n"+
	"\t\t\t\tpercent = initialPercent;\n"+
	"\t\t\t}\n"+
	"\t\t\t@Override\n"+
	"\t\t\tpublic Float use(Entity inputEntity){\n"+
	"\t\t\t\treturn inputEntity." Stat Name ".value*percent;\n"+
	"\t\t\t}\n\t\t}"
declareModifierClass
	"public static interface Modifier {\n"+
	"\t\tpublic Float use(Entity inputEntity);\n\t}"
declareMultiModClass
	"public static class MultiModifier extends ArrayList<Entity.Modifier> implements Entity.Modifier {\n\t\tpublic MultiModifier(Entity.Modifier ... mods){\n\t\t\tsuper(Arrays.asList(mods));\n\t\t}\n"+
	"\t\tpublic Float use(Entity inputEntity){\n"+
	"\t\t\tfloat sum = 0f;\n"+
	"\t\t\tfor(Modifier mod:this){\n\t\t\t\tsum+=mod.use(inputEntity);\n\t\t\t}\n"+
	"\t\t\treturn sum;\n\t\t}\n\t}"


declareGainMethod
	"public void gain(Trait trait,Source source){
		traits.add(trait);
		history.add(source,trait);
	}"
declareLoseMethod
	"public void lose(Class<? extends Trait> removeClass, Source source){
		Trait toRemove = null;
		for(Trait trait:history.getAll(source)){
			if(trait.getClass()==removeClass){
				toRemove = trait;
				break;
			}
		}
		if(toRemove==null){
			throw new RuntimeException(\"Trait:\"+removeClass+\" Not found!\");
		}
		else {
			traits.remove(toRemove);
			history.remove(source,toRemove);
		}
	}"	