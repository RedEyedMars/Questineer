import "attacks/attack.generator"
skills
	elements from "skill.elements"
	
	
	var packageName
	var directory
	var superSkillClass as class 
	aux setup takes data as ParseContext
		set packageName
			general getPackageName
		set directory
			new File
				general getDirectory
				"entities/skills"
		directory mkdirs
	
	aux generate takes data as ParseContext
		general createCriteria
			general->Entity
		entry getCostBody = {
			body_return:body_met_cal:body_exact:\"(int)(float)cost"; \"use" {body_exact:\"entity";};;}
		entry getRangeBody = {
			body_return:body_met_cal:body_exact:\"range"; \"use" {body_exact:\"entity";};;}
		entry isOffCDBody  = {
			body_return:body_operator:\"cooldown" "==" \"0";;}
		entry onTickBody  = {
			body_conditional:"if" body_operator:\"cooldown" ">" \"0"; {body_exact:\"--cooldown";};}
		general createList
			general->Entity
		entry targets = variable:"potentialTargets" "List.Entity";
		entry potential = variable:"potential" "Entity";
		var environment = body_met_cal:body_exact:\"user"; \"getEnvironment" {};
		var potentialTargetsInEnvironment =	body_met_cal: environment \"getEntitiesWithin" {
				body_met_cal:\"getRange" {body_exact:\"user";};};
		var colon = ":"
		entry useBody = {
			body_conditional:"if" body_met_cal:\"isOffCooldown" {}; {body_return:\"false";};			
			body_dec_var:targets;
			body_conditional:"for" body_operator:potential->SHOW_TYPE colon potentialTargetsInEnvironment; {
				body_conditional:"if" body_met_cal:\"targetCriteria" \"satisfies" {body_exact:potential;}; {
					body_met_cal:\"use" {body_exact:\"user"; body_exact:potential;};
					body_return:\"true";};};
			body_return:\"false"; }
		set superSkillClass as class
			general init
				class:"entities.skills" "Skill" null null {
		 			variable:"experience"     "Integer";
					variable:"cooldown"       "Integer"; 
					variable:"range"          "Entity.Modifier";
					variable:"cost"           "Entity.Modifier";
					variable:"hasEntityFocus" "Boolean";
					variable:"targetCriteria" "Criteria.Entity";}{
					method:  "getCost"        "Integer" {variable:"entity" "Entity";}     getCostBody;
					method:  "getRange"       "Float"   {variable:"entity" "Entity";}     getRangeBody;
					method:  "isOffCooldown"  "Boolean" {}                                isOffCDBody;
					method:  "onTick"         "void"    {variable:"event" "Events.Tick";} onTickBody;
					method:  "setFocus"       "void"    {variable:"onThis" "Boolean";}    {body_operator:\"hasEntityFocus" "=" \"onThis";};
					method:  "use"            "Boolean" {variable:"user" "Entity";}       useBody;
					method:  "use"            "void"    {variable:"user" "Entity";variable:"victim" "Entity";}       {};
					method:  "getName"        "String"  {}                                {body_return:\"null";};
					method:  "getDescription" "String"  {}                                {body_return:\"null";};}{};
		superSkillClass addImport
			"misc"
			"List"
		skills addFile
			directory
			"Skill.java"
			superSkillClass->COMPLETE
	aux get takes option
		return as class
			superSkillClass->option