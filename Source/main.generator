import "general/general.generator"
import "images/image.generator"
import "events/events.generator"
import "entities/entity.generator"
import "environments/environment.generator"
meta std
	var rootParser as IParser
		static Rules base
	var rules as List<IParser>
		static Rules parser
	var listnames as List<IParser>
		static Listnames parser
	var lazyNameParser as RegexParser
		static GeneralTokens NAME
	assignListElementNames takes
			context as ParseContext
			root as IToken
		context retainList
			new HeroStats
		context retainList
			new EventNames
	getDirectory as String takes fileName, knownDirectory
		return
			"../Resource/"
main
	
	
	aux setup takes data as ParseContext
		token rooT
			data getRoot
		rooT import_any to imports
			imports IMPORT_EVENT to import_events
				import_events event_declaration to element 
					var in = generate events eventDeclaration:;
	
	aux generate takes data as ParseContext
		token rooT
			data getRoot
		rooT import_any to imports
			var doop = generate import_any:;
	
	generate import_any
		import_any IMPORT_EVENT to import_events
			import_events event_declaration to element 
				var in = generate events eventDeclaration:;
		import_any IMPORT_ITEM to import_items
			import_items import_any to element
				var in = generate import_any:;
			import_items item_declaration to element 
				var in = generate items item:;
		import_any IMPORT_ASPECT to import_aspects
			import_aspects aspect_declaration to element 
				var in = generate aspects aspect:;
		import_any IMPORT_AFFINITY to import_affinities
			import_affinities affinity_declaration to element 
				var in = generate affinities affinity:;
		import_any IMPORT_TRAIT to import_traits
			import_traits trait_declaration to element 
				var in = generate traits trait:;
		import_any IMPORT_ATTACK to import_attacks
			import_attacks attack_declaration to element 
				var in = generate attacks attackDeclaration:;
		import_any IMPORT_CONDITION to import_conditions
			import_conditions condition_declaration to element 
				var in = generate conditions condition:;
		return
			null