uses StringEntry Arrays
import "body_elements.entries"
import "variable.entries"
import "method.entries"
import "class.entries"
entry namelessContext uses context
	constructor takes initialParent as context
		this setup
			initialParent

entry import
	var packageName
	var name
	var gamePackage = null
	var mode = 0
	entry superPackage = null
	constructor takes initialPackage, initialName
		set packageName = initialPackage
		set name = initialName
		if packageName does not startsWith "java"
			set gamePackage
				general getPackageName
	setPackage takes newPackage
		set packageName = newPackage
	setSuperPackage takes newSuperPackage as import
		set superPackage = newSuperPackage
	get as Entry takes option
		if superPackage is not null
			return
				superPackage get
					option
		else
			if option is "AS_PACKAGE"
				return
					general declarePackage { \gamePackage \packageName \name}
			if option is "PLAIN"
				return
					general plainPackage { \gamePackage \packageName}
			else
				return
					null 
	output
			superPackage if superPackage is not null
			{} if name is "void" or name is ""
			(0 general importGamePackage{ \gamePackage \packageName \name}) if gamePackage is not null
			(0 general importStdPackage{ \packageName \name}) otherwise

property context
	var variables
		new HashMap<String,variable>
	var methodHeaders
		new HashMap<String,variable>
	var methods
		new HashMap<String,method>
	var parent as context
	var tab = 0	
	getVariable as variable takes variableName
		if variables does containsKey variableName
			return
				variables->variableName
		else
			if parent is not null
				return
					parent getVariable
						variableName
			else
				return
					null
	addVariable takes variable as variable
		variables put
			variable getName
			variable
	getMethod as method takes methodName
		if methods does containsKey methodName
			return
				methods->methodName
		else
			if parent is not null
				return
					parent getMethod
						methodName
			else
				return
					null
	getMethodHeader as variable takes methodName
		if methodHeaders does containsKey methodName
			return
				methodHeaders->methodName
		else
			if parent is not null
				return
					parent getMethodHeader
						methodName
			else
				return
					null
	addMethod takes method as method
		methodHeaders put
			method getName
			method getHeader
		methods put
			method getName
			method
	addMethodHeader takes header as variable
		methodHeaders put
			header getName
			header
	setup takes initialParent as context
		set parent = initialParent
		if parent is not null
			set tab
				parent getTab
			set tab = tab + 1
	setParent takes newParent as context
		set parent = newParent
		if parent is not null
			set tab
				parent getTab
			set tab = tab + 1
	incrementTab takes amount as Integer
		set tab = tab + amount
	decrementTab takes amount as Integer
		set tab = tab - amount