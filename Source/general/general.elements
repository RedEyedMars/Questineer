
semicoloned
	"" subject ";"
import
	"import " Game "." Package ";"
equals
	"" left ".equals(" right ")"
notEquals
	"!" left ".equals(" right ")"
braced
	"(" Content ")"
negate
	"!(" Content ")"
body
	"{" Contents "\n}"
operator
	"" left "" operator "" right ""
setVar
	"" variable name " = " assignment ";"
declareGetMethod
	"\n\tpublic " Type " get" Variable Name "(){\n\t\treturn " Variable Name ";\n\t}"
ifStatement
	"if(" Boolean "){" Contents ""
elseWithIf
	"else " Body ""
elseWithBody
	"else {" Body ""
forStatement
	"for(" Element ":" List "){" Contents ""
methodCall
	"" Subject "." MethodName "(" Parameters ")"
hasCall
	"" Subject ".has" Group Name "(" Argument ")"
subjectlessMethodCall
	"" MethodName "(" Parameters ")"
getMethod
	"get" VariableName ""
declareVariable
	"" Variable Type " = " Assignment ""
exact
	"" Contents ""
typeAndName
	"" Type " " Name ""
percentify
	"" Subject "*0.01f"
newRange
	"new Range(" Left "f, " Right "f)"
isChance
	"Math.random()<=" Percent ""
extends
	"extends " Extends Class Name ""
implements
	" implements " Interface List ""
importPackage
	"import " Import Name "." Class Name";"
packageStatement
	"package " Game Package ";\n"
getCall
	"get" Method Name ""
declareMethod
	"public " Header "(" Parameters "){" Body "\n\t}"
declareClass
	"" Package "\n"+
	"" Imports "\n"+
	"public " Static " class " Class Name " " Extends "{\n"+
	"" Members "\n"+
	"" Default Constructor ""+
	"\tpublic " Class Name "(" Class Parameters "){" Class Assignments "\n\t}\n"+
	"" Methods "\n"+
	"}"
clone
	"" Subject ".clone()"
asClass
	"" Subject ".getClass()"
defaultConstructor
	"\tpublic " Class Name "(){}\n"
declareListClass
	"package " Game Package ".misc;
import java.util.*;
public class List {" Lists "
	public static class Map{" Maps "
	}
}"
declareList
	"public static class " List Name " extends ArrayList<" Game Package "." Package Name "." List Name ">{
		public " List Name "( " Game Package "." Package Name "." List Name "... initialElements){
			super(Arrays.asList(initialElements));
		}
	}"
declareMapSuperClass
	"public static class " Left Name "{" Contents "
		}"
declareMapClass
	"public static class _" Right Name " extends HashMap<" Left Name ",LinkedList<" Right Name ">> {
				public LinkedList<" Right Name "> getAll("Left Name" key){
					return super.get(key);
				}
				public void add(" Left Name " key," Right Name " element){
					if(!super.containsKey(key)){
						super.put(key,new LinkedList<" Right Name ">());
					}
					super.get(key).add(element);
				}
				public void removeLast(" Left Name " key){
					if(super.containsKey(key)){
						super.get(key).removeLast();
					}
				}
				public void removeAll(" Left Name " key){
					if(super.containsKey(key)){
						super.get(key).clear();
					}
				}
				public void remove(" Left Name " key, " Right Name " element){
					super.get(key).remove(element);
				}
			}"
declareRangeClass
	"package " Game Package ".misc;\n"+
	"import " Game Package ".entities.*;\n"+
	"public class Range {\n"+
	"\tprivate Float left;\n"+
	"\tprivate Float right;\n"+
	"\tpublic Range(Float initialLeft, Float initialRight){\n"+
	"\t\tleft = initialLeft;\n"+
	"\t\tright = initialRight;\n"+
	"\t}\n"+
	"\tpublic Range(int initialLeft, int initialRight){\n"+
	"\t\tleft = (float)initialLeft;\n"+
	"\t\tright = (float)initialRight;\n"+
	"\t}\n"+
	"\tpublic Range(Float initialLeft, int initialRight){\n"+
	"\t\tleft = initialLeft;\n"+
	"\t\tright = (float)initialRight;\n"+
	"\t}\n"+
	"\tpublic Range(int initialLeft, float initialRight){\n"+
	"\t\tleft = (float)initialLeft;\n"+
	"\t\tright = initialRight;\n"+
	"\t}\n"+
	"\tpublic Entity.Modifier getModifier(){\n"+
	"\t\treturn new Entity.Modifier(){\n"+
	"\t\t\tprivate Float value = getRandom();\n"+
	"\t\t\t@Override\n"+
	"\t\t\tpublic Float use(Entity inputEntity){\n"+
	"\t\t\t\treturn value;\n"+
	"\t\t\t}\n\t\t};\n\t}\n"+
	"\tpublic Float getRandom(){\n"+
	"\t\treturn (float)(double)(((right-left)*Math.random())+left);\n"+
	"\t}\n}"
declareSourceClass	
	"package " Game Package ".misc;
public interface Source {
}"