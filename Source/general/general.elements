
semicoloned
	"" subject ";"
asPackageName
	"" Game "." Package ""
declarePackage
	"package " Game Package "." Import Name ";"
plainPackage
	"" Game Package "." Import Name ""
import
	"import " Game "." Package ";"
importStdPackage
	"import " Import Name "." Class Name";"
importGamePackage
	"import " Game Package "." Import Name "." Class Name";"
equals
	"" left ".equals(" right ")"
notEquals
	"!" left ".equals(" right ")"
braced
	"(" Content ")"
negate
	"!(" Content ")"
body
	"{" Contents "\n}"
operator
	"" left "" operator "" right ""
setVar
	"" variable name " = " assignment ";"
declareGetMethod
	"\n\tpublic " Type " get" Variable Name "(){\n\t\treturn " Variable Name ";\n\t}"
ifStatement
	"if(" Boolean "){" Contents ""
elseWithIf
	"else " Body ""
elseWithBody
	"else {" Body ""
forStatement
	"for(" Element ":" List "){" Contents ""
returnCall
	"return " Statement ""
methodCall
	"" Subject "." MethodName "(" Parameters ")"
hasCall
	"" Subject ".has" Group Name "(" Argument ")"
subjectlessMethodCall
	"" MethodName "(" Parameters ")"
newObjectCall
	"new " MethodName "(" Parameters ")"
getMethod
	"get" VariableName ""
conditionalWithHeader
	"" Name "(" Header "){" Body ""
conditionalWithoutHeader
	"" Name "{" Body ""
variableAsParameter
	"initial" Parameter Name ""
declareVariable
	"" Variable Type " = " Assignment ";"
declareMember
	"" Variable Type " " Variable Name  " = " Variable Assignment ";"
exact
	"" Contents ""
typeAndName
	"" Type " " Name ""
percentify
	"" Subject "*0.01f"
newRange
	"new Range(" Left "f, " Right "f)"
isChance
	"Math.random()<=" Percent ""
nameWithTemplateParameters
	"" Name "<" Template Parameters ">"
templateParameters
	"<" Template Parameters ">"
extends
	"extends " Extends Class Name ""
extendsAndImplements
	"extends " Extends Class Name " implements " Interface List ""
implements
	" implements " Interface List ""
packageStatement
	"package " Game Package ";\n"
getCall
	"get" Method Name ""
declareMethod
	"public " Header "(" Parameters "){" Body "\n\t}"
declareStaticMethod
	"public static " Header "(" Parameters "){" Body "\n\t}"
declareInterfaceMethod
	"public " Header "(" Parameters ");"
declareInterface
	"" Package "\n" Imports "
public interface " Class Name " {" Methods "
}"
declareSubInterface
	"public static interface " Class Name " {" Methods "
}"
	
declareClass
	"" Package "\n"+
	"" Imports "\n"+
	"public " Static " class " Class Name " " Extends "{\n"+
	"" Members "\n"+
	"" Default Constructor ""+
	"\tpublic " Class Name "(" Class Parameters "){" Class Assignments "\n\t}\n"+
	"" Methods "\n"+
	"}"
declareCustomWithDefault
	"" Package "\n"+
	"" Imports "\n"+
	"public class " Class Name " " Extends "{\n"+
	"" Members "\n"+
	"\tpublic " Class Name "(){" Constructor Body "}\n"+
	"\tpublic " Class Name "(" Class Parameters "){" Class Assignments "\n" Constructor Body "\n\t}\n"+
	"" Methods "\n"+
	"" Sub Classes "\n"+
	"}"
declareCustomSubWithDefault
	"public static class " Class Name " " Extends "{\n"+
	"" Members "\n"+
	"\tpublic " Class Name "(){ " Constructor Body "\n\t}\n"+
	"\tpublic " Class Name "(" Class Parameters "){" Class Assignments "\n" Constructor Body "\n\t}\n"+
	"" Methods "\n"+
	"" Sub Classes "\n"+
	"}"
declareCustom
	"" Package "\n"+
	"" Imports "\n"+
	"public class " Class Name " " Extends "{\n"+
	"" Members "\n"+
	"\tpublic " Class Name "(){" Constructor Body " }\n"+
	"" Methods "\n"+
	"" Sub Classes "\n"+
	"}"
declareCustomSub
	"public static class " Class Name " " Extends "{\n"+
	"" Members "\n"+
	"\tpublic " Class Name "(){" Constructor Body "}\n"+
	"" Methods "\n"+
	"" Sub Classes "\n"+
	"}"
clone
	"" Subject ".clone()"
getId
	"" Subject ".getId()"
defaultConstructor
	"\tpublic " Class Name "(){}\n"
declareListClass
	"package " Game Package ".misc;
import java.util.*;
public class List {" Lists "
	public static class Map{" Maps "
	}
}"
listConstructorBody
	"super(Arrays.asList(initialElements));"
declareMapSuperClass
	"public static class " Left Name "{" Contents "
		}"
mapClassAddBody
	"
					if(!super.containsKey(key)){
						super.put(key,new " Right Name "());
					}
					complete.add(element);
					super.get(key).add(element);"
mapClassRemoveLastBody
	"
					if(super.containsKey(key)&&!super.get(key).isEmpty()){
						complete.remove(super.get(key).removeLast());
					}"
mapClassRemoveAllBody
	"
					if(super.containsKey(key)){
						" Right Name" list = super.get(key);
						while(!list.isEmpty()){
							complete.remove(list.removeLast());
						}						
					}"
mapClassRemoveBody
	"
					super.get(key).remove(element);
					complete.remove(element);"
rangeIIbody
	"\t\tleft = (float)initialLeft;\n"+
	"\t\tright = (float)initialRight;\n"
rangeFIbody
	"\t\tleft = initialLeft;\n"+
	"\t\tright = (float)initialRight;\n"
rangeIFbody
	"\t\tleft = (float)initialLeft;\n"+
	"\t\tright = initialRight;\n"
rangeGetModifierBody
	"\t\treturn new Entity.Modifier(){\n"+
	"\t\t\tprivate Float value = getRandom();\n"+
	"\t\t\t@Override\n"+
	"\t\t\tpublic void decrease(Entity inputEntity,Float amount){"+
	"\t\t\t\tvalue -= amount;"+
	"\t\t\t}"+
	"\t\t\t@Override\n"+
	"\t\t\tpublic Float use(Entity inputEntity){\n"+
	"\t\t\t\treturn value;\n"+
	"\t\t\t}\n\t\t}"
rangeGetRandomBody
	"\t\treturn (float)(double)(((right-left)*Math.random())+left)"
